<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CloudNative 架构</title>
  <subtitle>CloudNative|云原生应用架构|云原生架构|容器化架构|微服务架构|平台架构|基础架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://team.jiunile.com/"/>
  <updated>2020-11-19T06:28:10.000Z</updated>
  <id>http://team.jiunile.com/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang 六种错误处理技术，可帮助您编写优雅的代码</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-handle-error.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-handle-error.html</id>
    <published>2020-11-20T12:00:00.000Z</published>
    <updated>2020-11-19T06:28:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;当在 GO 中遇到错误时你会怎么做？&lt;/p&gt;
&lt;p&gt;处理错误并不简单。在讨论功能性需求时，很少考虑错误处理需求，但是错误处理是软件开发的一个重要部分。&lt;/p&gt;
&lt;p&gt;在 GO 中，错误条件以方法返回值的形式返回。在我看来，将错误条件作为主流程的一部分是很有用的 – 它让开发人员在编写功能代码时承担处理错误的责任。这种范例与其他编程语言(如 Java )所提供的非常不同 – 其中异常是完全不同的流程。虽然这种不同的风格使代码更具可读性，但也带来了新的挑战。&lt;/p&gt;
&lt;p&gt;本文讨论了六种处理错误、重试和可服务性的技术。虽然很少有想法是琐碎的，但其他想法并不那么受欢迎。&lt;/p&gt;
&lt;p&gt;因此，让我们从列表开始！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-向左对齐&quot;&gt;&lt;a href=&quot;#1-向左对齐&quot; class=&quot;headerlink&quot; title=&quot;1 向左对齐&quot;&gt;&lt;/a&gt;1 向左对齐&lt;/h2&gt;&lt;p&gt;处理错误的最佳策略是检查错误并立即从函数返回。在一个函数中有多个错误返回语句是可以的 – 事实上，这是明智的选择。[1]&lt;/p&gt;
&lt;p&gt;例如，下面的代码片段展示了如何使用 &lt;code&gt;if err == nil&lt;/code&gt; 来处理一个愉快的场景，从而导致嵌套 if 检查。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Handling Happy case first - leading to nested if checks...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err := somethingThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        err = somethingElseThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;//More Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述逻辑可以通过向左对齐逻辑来处理：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ABetterExample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err := somethingThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err = somethingElseThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// More Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-重试可恢复错误&quot;&gt;&lt;a href=&quot;#2-重试可恢复错误&quot; class=&quot;headerlink&quot; title=&quot;2 重试可恢复错误&quot;&gt;&lt;/a&gt;2 重试可恢复错误&lt;/h2&gt;&lt;p&gt;很少有可恢复的错误值得重试 – 网络故障、IO 操作等都可以通过简单的重试恢复。&lt;/p&gt;
&lt;p&gt;下面的包可以帮助解决重试带来的麻烦。&lt;br&gt;&lt;a href=&quot;https://godoc.org/github.com/cenkalti/backoff#example-Retry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package backoff&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// An operation that may fail.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;operation := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// or an error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;err := Retry(operation, NewExponentialBackOff())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Handle error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指数回退意味着重试间隔呈指数增长 – 对于大多数网络 /IO 故障来说，这是一个明智的选择。&lt;/p&gt;
&lt;h2 id=&quot;3-包装错误&quot;&gt;&lt;a href=&quot;#3-包装错误&quot; class=&quot;headerlink&quot; title=&quot;3 包装错误&quot;&gt;&lt;/a&gt;3 包装错误&lt;/h2&gt;&lt;p&gt;默认的错误包是有限的 – 错误上下文的详细信息经常会丢失。例如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;New Error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError(&lt;span class=&quot;string&quot;&gt;&quot;Acct1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，主函数收到的错误实例没有发生在帐户 &lt;code&gt;Acct1&lt;/code&gt; 上的信息。可以在函数 &lt;code&gt;testingErrror&lt;/code&gt; 中记录 &lt;code&gt;accountNumber&lt;/code&gt;，但是由于当前包错误，无法将该信息传递给主函数。&lt;/p&gt;
&lt;p&gt;这就是 &lt;code&gt;github.Com/pkg/errors&lt;/code&gt; 的来源。该库与 &lt;code&gt;errors&lt;/code&gt; 兼容并带来了一些很酷的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;New Error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;Error occurred while processing Card Number &quot;&lt;/span&gt;+accoutNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError(&lt;span class=&quot;string&quot;&gt;&quot;Acct1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;github.com/pkg/errors&lt;/code&gt; 中，您还可以使用一些额外的有用功能 – &lt;code&gt;errors.Unwrap&lt;/code&gt; 和 &lt;code&gt;errors.Is&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-日志策略&quot;&gt;&lt;a href=&quot;#4-日志策略&quot; class=&quot;headerlink&quot; title=&quot;4 日志策略&quot;&gt;&lt;/a&gt;4 日志策略&lt;/h2&gt;&lt;p&gt;Golang 的默认包日志不提供使用日志记录级别进行日志记录功能。这里有一些其他的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Glog&lt;/code&gt;: &lt;a href=&quot;https://github.com/golang/glog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/golang/glog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logrus&lt;/code&gt;: &lt;a href=&quot;https://github.com/sirupsen/logrus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sirupsen/logrus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Zap&lt;/code&gt;: &lt;a href=&quot;https://github.com/uber-go/zap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Logrus&lt;/code&gt; 和 &lt;code&gt;Zap&lt;/code&gt; 还提供了&lt;strong&gt;结构化日志输出&lt;/strong&gt;的功能 – 这是一个非常方便的功能，因为它为开发人员提供了向错误日志消息添加上下文的能力。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; logrus.SetFormatter(&amp;amp;logrus.JSONFormatter&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctxFields := logrus.Fields&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;accountNumber&quot;&lt;/span&gt;: accountNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;appname&quot;&lt;/span&gt;:       &lt;span class=&quot;string&quot;&gt;&quot;my-app&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Some test error while doing happy processing&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  logrus.WithFields(ctxFields).WithError(err).Error(&lt;span class=&quot;string&quot;&gt;&quot;ErrMsg&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结构化日志输出如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;accountNumber&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;appname&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;my-app&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Some test error while doing happy processing&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;level&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;msg&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;ErrMsg&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;2009-11-10T23:00:00Z&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;日志的另一个关键方面是获得日志堆栈跟踪的能力。如果你使用 &lt;code&gt;github.com/pkg/errors&lt;/code&gt;，你就可以&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会得到一个错误堆栈跟踪如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main.testingError2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.testingError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /usr/lib/go-1.15/src/runtime/proc.go:204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.goexit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /usr/lib/go-1.15/src/runtime/asm_amd64.s:1374&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Zap&lt;/code&gt; 为性能进行了缓冲和优化。[2]&lt;/p&gt;
&lt;h2 id=&quot;5-错误检查&quot;&gt;&lt;a href=&quot;#5-错误检查&quot; class=&quot;headerlink&quot; title=&quot;5 错误检查&quot;&gt;&lt;/a&gt;5 错误检查&lt;/h2&gt;&lt;p&gt;将错误视为值是好的 – 它是明确的，而明确的有很多意义。但它也可以为开发人员提供跳过的机会。例如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accoutNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = errors.New(&lt;span class=&quot;string&quot;&gt;&quot;errors.New with _&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors.New(&lt;span class=&quot;string&quot;&gt;&quot;errors.New not capturing return&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的示例显示应用程序程序员是由 &lt;code&gt;errors.New&lt;/code&gt; 语句返回的两个错误。这可能是有意或无意发生的。&lt;/p&gt;
&lt;p&gt;幸运的是，有一个 linter 实用程序可以帮助您。&lt;br&gt;&lt;a href=&quot;https://github.com/kisielk/errcheck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kisielk/errcheck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一旦你安装了 linter，你可以简单地做以下事情：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;errcheck -blank ./...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会得到这样的输出：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;temp.go:16:2:   _ = errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Error capturing return using _&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;temp.go:18:12:  errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Error not capturing return&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这可以作为 CI/CD 流程的一部分，以确保应用程序开发人员不会错过这一部分。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errchec&lt;/code&gt; 是 Go linters 聚合器实用程序的一部分 – &lt;a href=&quot;https://golangci-lint.run/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://golangci-lint.run/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;多个错误&quot;&gt;&lt;a href=&quot;#多个错误&quot; class=&quot;headerlink&quot; title=&quot;多个错误&quot;&gt;&lt;/a&gt;多个错误&lt;/h2&gt;&lt;p&gt;你有多个错误的场景 – 它们是同一个 &lt;code&gt;go routine&lt;/code&gt; 的一部分，你不想停止处理 – 而是继续处理并记录所有错误。这里有一个专门的库：&lt;br&gt;&lt;a href=&quot;https://github.com/hashicorp/go-multierror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hashicorp/go-multierror&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;step1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Step1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;step2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Step2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := step1(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = multierror.Append(result, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := step2(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = multierror.Append(result, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(multierror.Flatten(result))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样，对于多个 &lt;code&gt;go routines&lt;/code&gt;，可以使用以下库：&lt;br&gt;&lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我知道上述列表并非全部。对于你们中的一些人来说，这可能是微不足道的 – 但希望对你们中的一些人来说，这有助于你们掌握错误处理技术。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&quot;https://medium.com/a-journey-with-go/go-how-zap-package-is-optimized-dbf72ef48f2d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-how-zap-package-is-optimized-dbf72ef48f2d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/higher-order-functions/golang-six-error-handling-techniques-to-help-you-write-elegant-code-8e6363e6d2b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/higher-order-functions/golang-six-error-handling-techniques-to-help-you-write-elegant-code-8e6363e6d2b&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;当在 GO 中遇到错误时你会怎么做？&lt;/p&gt;
&lt;p&gt;处理错误并不简单。在讨论功能性需求时，很少考虑错误处理需求，但是错误处理是软件开发的一个重要部分。&lt;/p&gt;
&lt;p&gt;在 GO 中，错误条件以方法返回值的形式返回。在我看来，将错误条件作为主流程的一部分是很有用的 – 它让开发人员在编写功能代码时承担处理错误的责任。这种范例与其他编程语言(如 Java )所提供的非常不同 – 其中异常是完全不同的流程。虽然这种不同的风格使代码更具可读性，但也带来了新的挑战。&lt;/p&gt;
&lt;p&gt;本文讨论了六种处理错误、重试和可服务性的技术。虽然很少有想法是琐碎的，但其他想法并不那么受欢迎。&lt;/p&gt;
&lt;p&gt;因此，让我们从列表开始！&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/categories/golang/error/"/>
    
    
      <category term="error" scheme="http://team.jiunile.com/tags/error/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 kubernetes iptables proxy 模式</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-proxy-iptables.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-proxy-iptables.html</id>
    <published>2020-11-19T15:00:00.000Z</published>
    <updated>2020-11-18T13:56:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;最近在面试的时候问了不少 &lt;code&gt;network request&lt;/code&gt; 如何到 &lt;code&gt;k8s service backend&lt;/code&gt; 的问题，觉得可以整合一下网络上的资料，这篇主要讨论 &lt;code&gt;iptables proxy mode&lt;/code&gt;。大部分的情况没有在使用 &lt;code&gt;userspace proxy modes&lt;/code&gt;， &lt;code&gt;ipvs proxy mode&lt;/code&gt; 可能要等到下一次讨论。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;事先准备&quot;&gt;&lt;a href=&quot;#事先准备&quot; class=&quot;headerlink&quot; title=&quot;事先准备&quot;&gt;&lt;/a&gt;事先准备&lt;/h2&gt;&lt;p&gt;要先了解 &lt;code&gt;iptable&lt;/code&gt; 工作机制，建议可以看这一篇：&lt;a href=&quot;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&lt;/a&gt;，当然 wikipedia 也是写的不错，我下面的文字也大多数引用：&lt;a href=&quot;https://zh.wikipedia.org/wiki/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/Iptables&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速带过-iptable&quot;&gt;&lt;a href=&quot;#快速带过-iptable&quot; class=&quot;headerlink&quot; title=&quot;快速带过 iptable&quot;&gt;&lt;/a&gt;快速带过 &lt;code&gt;iptable&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;说到 &lt;code&gt;iptable&lt;/code&gt; 要先了解 &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Rueles&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/strong&gt; 指不同类型的封包处理流程，总共有五种，不同的 &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt; 处理不同的行为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;：处理异常，追踪状态 -&amp;gt; &lt;code&gt;/proc/net/nf_conntrack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt;：处理封包，修改 headler 之类的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;：进行位址转换操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;：进行封包过滤&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt;：SElinux 相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 来对应进行不同的行为。像是 “filter” &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt; 进行封包过滤的流程，而 “nat” 针对连接进行位址转换操作。&lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 里面包含许多规则，主要有五种类型的 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PREROUTING&lt;/code&gt;：处理路由规则前通过此 &lt;code&gt;Chains&lt;/code&gt;，通常用于目的位址转换（DNAT）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INPUT&lt;/code&gt;：发往本机的封包通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FORWARD&lt;/code&gt;：本机转发的封包通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTPUT&lt;/code&gt;：处理本机发出的封包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTROUTING&lt;/code&gt;：完成路由规则后通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;，通常用于源位址转换（SNAT）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Rules&lt;/code&gt;&lt;/strong&gt; 规则会被逐一进行匹配，如果匹配，可以执行相应的动作  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;大致的工作流向情况分两种：&quot;&gt;&lt;a href=&quot;#大致的工作流向情况分两种：&quot; class=&quot;headerlink&quot; title=&quot;大致的工作流向情况分两种：&quot;&gt;&lt;/a&gt;大致的工作流向情况分两种：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;backend 为本机&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NIC → PREROUTING → INPUT → Local process &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Local process → OUTPUT → POSTROUTING → NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;backend 目的地非本机&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NIC→PREROUTING → FORWARD → POSTROUTING→NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_1.png&quot; alt=&quot;Iptables Basics&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是比较详细的流程，有包含 &lt;code&gt;EBTABLES&lt;/code&gt;，但这个看久头会昏，我这次会主要讨论 Network Layer 这一部分，然后用上面这张比较精简的图&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_2.png&quot; alt=&quot;Netfilter pic of wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kube-proxy&lt;/code&gt; 修改了 filter，nat 两个表，自定义了&lt;br&gt;&lt;code&gt;KUBE-SERVICES&lt;/code&gt;，&lt;code&gt;KUBE-NODEPORTS&lt;/code&gt;，&lt;code&gt;KUBE-POSTROUTING&lt;/code&gt;，&lt;code&gt;KUBE-FORWARD&lt;/code&gt;，&lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt;，所以我这次会 focus on filter ，nat 两个 Table&lt;/p&gt;
&lt;h3 id=&quot;1-filter-table-有三个-Chain-“INPUT”-“OUTPUT”-“FORWARD”&quot;&gt;&lt;a href=&quot;#1-filter-table-有三个-Chain-“INPUT”-“OUTPUT”-“FORWARD”&quot; class=&quot;headerlink&quot; title=&quot;1. filter table 有三个 Chain “INPUT” “OUTPUT” “FORWARD”&quot;&gt;&lt;/a&gt;1. filter table 有三个 Chain “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;FORWARD&lt;/strong&gt;”&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_3.png&quot; alt=&quot;iptables-routing&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt; 在 filter table 的 “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” chain 增加了 &lt;code&gt;KUBE-FIREWALL&lt;/code&gt; 在 “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;FORWARD&lt;/strong&gt;” chain 增加了 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KUBE_FIREWALL&lt;/code&gt; 会丢弃所有被 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 标记 0x8000 的封包，而标记的动作可以在其他的 table 中(像是第二部分提到的 NAT table 中)&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_4.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_5.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;/p&gt;
&lt;p&gt;而 filter table 的 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 可以过滤封包，假如一个 service 没有对应的 endpoint，就会被 reject，这里我先要建立一个 service 和没有正确设定 endpoint。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Endpoints &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;service cluster ip 为 10.95.58.92&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selfLink:&lt;/span&gt; /api/v1/namespaces/default/services/test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  uid:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;d415d63&lt;span class=&quot;bullet&quot;&gt;-6&lt;/span&gt;fc3&lt;span class=&quot;bullet&quot;&gt;-444e-8&lt;/span&gt;b5a&lt;span class=&quot;bullet&quot;&gt;-29015&lt;/span&gt;b436a83 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resourceVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; 73026369&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  creationTimestamp:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;2020-11-17T05:48:52Z&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  clusterIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.58&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.92&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; ClusterIP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  sessionAffinity:&lt;/span&gt; None &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  loadBalancer:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次检查 iptable，就可以看到 &lt;code&gt;default/test-error-endpoint: has no endpoints -&amp;gt; tcp dpt:7777 reject-with icmp-port-unreachable&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_6.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-nat-table-有三个-Chain-“PREROUTING”-“OUTPUT”-“POSTROUTING”&quot;&gt;&lt;a href=&quot;#2-nat-table-有三个-Chain-“PREROUTING”-“OUTPUT”-“POSTROUTING”&quot; class=&quot;headerlink&quot; title=&quot;2. nat table 有三个 Chain “PREROUTING” “OUTPUT” “POSTROUTING”&quot;&gt;&lt;/a&gt;2. nat table 有三个 Chain “&lt;strong&gt;PREROUTING&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;POSTROUTING&lt;/strong&gt;”&lt;/h3&gt;&lt;p&gt;在前两个封包处理流程是比较相似和复杂的，大体来说是藉由客制化的规则，来处理符合条件封包，帮它们找到正确的 k8s endpoint (后面会细讲)，在 &lt;code&gt;POSTROUTING&lt;/code&gt; 主要是针对 k8s 处理的封包(标记 0x4000 的封包)，在离开 node 的时候做 SNAT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(inbound) 在 “&lt;strong&gt;PREROUTING&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(outbound) 在 “&lt;strong&gt;OUTPUT&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(outbound) 在 “&lt;strong&gt;POSTROUTING&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_7.png&quot; alt=&quot;iptables-routing&quot;&gt;&lt;br&gt;当封包进入 “&lt;strong&gt;PREROUTING&lt;/strong&gt;” 和 “&lt;strong&gt;OUTPUT&lt;/strong&gt;”，会整个被 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; Chain 整个绑架走，开始逐一匹配 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 中的 rule 和打上标签。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_8.png&quot; alt=&quot;nat tables&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt; 的用法是一种 O(n) 算法，其中的 n 随 k8s cluster 的规模同步增加，更简单的说就是 service 和 endpoint 的数量。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_9.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里会准备三个最常见的 service type 的 &lt;code&gt;kube-proxy&lt;/code&gt; 路由流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cluster IP&lt;/li&gt;
&lt;li&gt;nodePort&lt;/li&gt;
&lt;li&gt;load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;clusterIP-流程&quot;&gt;&lt;a href=&quot;#clusterIP-流程&quot; class=&quot;headerlink&quot; title=&quot;clusterIP 流程&quot;&gt;&lt;/a&gt;clusterIP 流程&lt;/h4&gt;&lt;p&gt;这里我使用 &lt;code&gt;default/jeff-api(clusterIP: 10.95.57.19)&lt;/code&gt; 举例，我下面图过滤掉不必要的资讯&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_10.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后会到实际 pod 的位置，&lt;code&gt;podIP: 10.95.35.31，hostIP: 10.20.0.128&lt;/code&gt; 是该 pod 所在 node 的 ip&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-api&lt;span class=&quot;bullet&quot;&gt;-746&lt;/span&gt;f4c9985&lt;span class=&quot;bullet&quot;&gt;-5&lt;/span&gt;qmw6 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  generateName:&lt;/span&gt; jeff-api&lt;span class=&quot;bullet&quot;&gt;-746&lt;/span&gt;f4c9985- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; promotion-api &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;gcr.io/jeff-project/jeff /jeff-api:202011161901&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;tcp02 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeName:&lt;/span&gt; gke-sit-jeff-k8s-tw&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;-default-pool&lt;span class=&quot;bullet&quot;&gt;-7983&lt;/span&gt;af35-ug91 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  phase:&lt;/span&gt; Running &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.128&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  podIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.35&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.31&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;nodePort-流程&quot;&gt;&lt;a href=&quot;#nodePort-流程&quot; class=&quot;headerlink&quot; title=&quot;nodePort 流程&quot;&gt;&lt;/a&gt;nodePort 流程&lt;/h4&gt;&lt;p&gt;这里有一个关键就是 &lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 一定是在 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 最后一项，iptables 在处理 packet 会先处理 ip 为 cluster ip 的 service，当全部的 &lt;code&gt;KUBE-SVC-XXXXXX&lt;/code&gt; 都对应不到的时候就会使用 nodePort 去匹配。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_11.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看实际 pod 的资讯，&lt;code&gt;podIP: 10.95.32.17，hostIP: 10.20.0.124&lt;/code&gt; 是其中一台 node 的 ip&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      nodePort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;31929&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  clusterIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.58&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.51&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; NodePort &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  externalTrafficPolicy:&lt;/span&gt; Cluster &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-frontend-c94bf68d9-bbmp8 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  generateName:&lt;/span&gt; jeff-frontend-c94bf68d9- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; jeff-frontend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;gcr.io/jeff-project/jeff/jeff-image:jeff-1.0.6.5&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; http &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeName:&lt;/span&gt; gke-sit-jeff-k8s-tw&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;-default -pool-b5692f8d-enk7 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  phase:&lt;/span&gt; Running &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.124&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  podIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;load-balancer流程&quot;&gt;&lt;a href=&quot;#load-balancer流程&quot; class=&quot;headerlink&quot; title=&quot;load balancer流程&quot;&gt;&lt;/a&gt;load balancer流程&lt;/h4&gt;&lt;p&gt;假如目的地 IP 是 load balancer 就会使用 &lt;code&gt;KUBE-FW-XXXXXX&lt;/code&gt;，我建立一个 internal load balancer service 和 endpoint 指到 google postgresql DB(10.28.193.9)&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_12.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  annotations:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cloud.google.com/load-balancer-type: Internal &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    networking.gke.io/internal-load-balancer-allow-global-access: &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; external-postgresql &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec : &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; LoadBalancer &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Endpoints &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; external-postgresql &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subsets:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- addresses:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - ip:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.28&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.193&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protocol : TCP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_13.png&quot; alt=&quot;kube-services&quot;&gt;&lt;br&gt;在 NAT table 看到 &lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 这两个规则主要是经过的封包打上标签，打上标签的封包会做相应的处理。&lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 本质上就是使用 iptables 的 &lt;a href=&quot;https://serverfault.com/questions/514116/how-to-set-mark-on-packet-when-forwarding-it-in-nat-prerouting-table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MARK 指令&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-DROP -j MARK --set-xmark 0x8000/0x8000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果打上了 &lt;code&gt;0x8000&lt;/code&gt; 到后面 filter table (上面提到 &lt;code&gt;KUBE_FIREWALL&lt;/code&gt; )就会丢弃。&lt;/p&gt;
&lt;p&gt;如果打上了 &lt;code&gt;0x4000&lt;/code&gt; k8s 将会在 &lt;code&gt;PREROUTING&lt;/code&gt; table 的 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt; chain 对它进行 SNAT 转换。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_14.png&quot; alt=&quot;kube-services&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_15.png&quot; alt=&quot;POSTROUTING table&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_16.png&quot; alt=&quot;KUBE-POSTROUTING Chain&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_17.png&quot; alt=&quot;KUBE-SERVICES&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Netfilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Netfilter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/Iptables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www&lt;/a&gt; .cnblogs.com/charlieroro/p/9588019.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lijiaocn.com/%E9%&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.lijiaocn.com/%E9%&lt;/a&gt; A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/6844904098605563912&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://juejin.im/post/6844904098605563912&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tizeen.github.io/2019/03/19/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tizeen.github.io/2019/03/19/&lt;/a&gt; kubernetes-service-iptables%E5%88%86%E6%9E%90/&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hwchiu.com/kubernetes-service-ii.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.hwchiu.com/kubernetes-service-ii.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hwchiu.com/kubernetes-service-iii&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.hwchiu.com/kubernetes-service-iii&lt;/a&gt; .html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.itread01.com/content/1542712570.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.itread01.com/content/1542712570.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://jeff-yen.medium.com/iptables-proxy-mode-in-kube-proxy-6862bb4b329&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jeff-yen.medium.com/iptables-proxy-mode-in-kube-proxy-6862bb4b329&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;最近在面试的时候问了不少 &lt;code&gt;network request&lt;/code&gt; 如何到 &lt;code&gt;k8s service backend&lt;/code&gt; 的问题，觉得可以整合一下网络上的资料，这篇主要讨论 &lt;code&gt;iptables proxy mode&lt;/code&gt;。大部分的情况没有在使用 &lt;code&gt;userspace proxy modes&lt;/code&gt;， &lt;code&gt;ipvs proxy mode&lt;/code&gt; 可能要等到下一次讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="kuberntes" scheme="http://team.jiunile.com/categories/kuberntes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kuberntes/kube-proxy/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>Go 多重错误管理</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-multi-errors.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-multi-errors.html</id>
    <published>2020-11-19T14:00:00.000Z</published>
    <updated>2020-11-18T03:55:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.golang.org/survey2019-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;年度调查&lt;/a&gt;中，关于开发人员在使用 Go 时面临的最大挑战，Go 中的错误管理总是容易引起争论，并且是一个反复出现的话题。然而，当涉及到在并发环境中处理错误或为同一个 &lt;code&gt;goroutine&lt;/code&gt; 合并多个错误时，Go 提供了很棒的包，使管理多个错误变得容易。让我们看看如何合并由单个 &lt;code&gt;goroutine&lt;/code&gt; 生成的多个错误。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;单个-goroutine-多个错误&quot;&gt;&lt;a href=&quot;#单个-goroutine-多个错误&quot; class=&quot;headerlink&quot; title=&quot;单个 goroutine, 多个错误&quot;&gt;&lt;/a&gt;单个 goroutine, 多个错误&lt;/h2&gt;&lt;p&gt;例如，当您处理具有重试策略的代码时，将多个错误合并为一个错误会非常有用。这是我们需要收集生成的错误的基本示例：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_1.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个程序读取和解析一个 CSV 文本，并显示发现的错误。将错误分组以获得完整的报告可能更方便。要将错误合并为一个，我们可以在两个很棒的包中进行选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/hashicorp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashiCorp&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/hashicorp/go-multierror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-multierror&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/manage_muti_error_2.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;输出结果如下：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_3.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/uber-go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Uber&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/uber-go/multierr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multierr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的实现类似，下面是输出:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_4.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;错误通过分号连接起来，没有任何其他格式。&lt;/p&gt;
&lt;p&gt;对于每个包的性能，下面是一个基准测试结论：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name                    time/op         alloc/op        allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashiCorpMultiErrors-4  6.01µs ± 1%     6.78kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UberMultiErrors-4       9.26µs ± 1%     10.3kB ± 0%      126 ± 0%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Uber 的实现稍微慢一些，消耗更多的内存。但是，这个包的设计目的是将收集到的错误分组在一起，而不是每次都附加它们。当对错误进行分组时，结果很接近，但是代码不够优雅，因为它需要额外的步骤。以下是最新的测试结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name                    time/op         alloc/op        allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashiCorpMultiErrors-4  6.01µs ± 1%     6.78kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UberMultiErrors-4       6.02µs ± 1%     7.06kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个包都利用了 Go &lt;code&gt;error&lt;/code&gt; 接口，并在其自定义实现中实现了 &lt;code&gt;Error() string&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h2 id=&quot;单个错误-多个-goroutines&quot;&gt;&lt;a href=&quot;#单个错误-多个-goroutines&quot; class=&quot;headerlink&quot; title=&quot;单个错误, 多个 goroutines&quot;&gt;&lt;/a&gt;单个错误, 多个 goroutines&lt;/h2&gt;&lt;p&gt;当处理多个 &lt;code&gt;goroutines&lt;/code&gt; 来执行一个任务时，有必要正确管理结果和将错误聚合，以确保程序的正确性。&lt;/p&gt;
&lt;p&gt;让我们从一个使用多个 &lt;code&gt;goroutines&lt;/code&gt; 执行一系列操作的程序开始; 每个操作持续一秒钟:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_5.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了说明错误传播，第三个 &lt;code&gt;goroutine&lt;/code&gt; 的第一个操作将失败。事情是这样的:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_6.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如预期的那样，这个程序大约需要 3 秒，因为大多数 &lt;code&gt;goroutines&lt;/code&gt; 需要经历三个动作，每个动作需要 1 秒:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go run .  0.30s user 0.19s system 14% cpu 3.274 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，我们可能希望使 &lt;code&gt;goroutines&lt;/code&gt; 相互依赖，并在其中一个失败时取消它们。避免不必要工作的解决方案是添加上下文，一旦 &lt;code&gt;goroutine&lt;/code&gt; 失败，它就会取消它:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_7.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;这正是 &lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup?tab=doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt; 所提供的;处理一组 &lt;code&gt;goroutines&lt;/code&gt; 时的错误和上下文传播。下面是使用包 &lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup?tab=doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt; 的新代码：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_8.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序现在运行得更快，因为它通过错误传播取消的上下文：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go run .  0.30s user 0.19s system 38% cpu 1.269 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该包提供的另一个好处是，我们不需要再担心等待组添加和标记 &lt;code&gt;goroutines&lt;/code&gt; 完成。包为我们管理这些，我们只需要说我们准备好等待过程的结束。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/a-journey-with-go/go-multiple-errors-management-a67477628cf1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-multiple-errors-management-a67477628cf1&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.golang.org/survey2019-results&quot;&gt;年度调查&lt;/a&gt;中，关于开发人员在使用 Go 时面临的最大挑战，Go 中的错误管理总是容易引起争论，并且是一个反复出现的话题。然而，当涉及到在并发环境中处理错误或为同一个 &lt;code&gt;goroutine&lt;/code&gt; 合并多个错误时，Go 提供了很棒的包，使管理多个错误变得容易。让我们看看如何合并由单个 &lt;code&gt;goroutine&lt;/code&gt; 生成的多个错误。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/categories/golang/error/"/>
    
    
      <category term="error" scheme="http://team.jiunile.com/tags/error/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go chan 为啥没有判断 close 的接口</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-chan-close.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-chan-close.html</id>
    <published>2020-11-16T14:00:00.000Z</published>
    <updated>2020-11-16T02:19:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 为什么没有判断 close 的接口？&lt;/li&gt;
&lt;li&gt;Go 关闭 channel 究竟做了什么？&lt;br&gt;  -&lt;code&gt;closechan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个判断 chan 是否 close 的函数&lt;ul&gt;
&lt;li&gt;思考方法一：通过“写”chan 实现&lt;/li&gt;
&lt;li&gt;思考方法二：通过“读”chan 实现&lt;/li&gt;
&lt;li&gt;chan close 原则&lt;/li&gt;
&lt;li&gt;其实并不需要 &lt;code&gt;isChanClose&lt;/code&gt; 函数 !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎么优雅关闭 chan ？&lt;ul&gt;
&lt;li&gt;方法一：panic-recover&lt;/li&gt;
&lt;li&gt;方法二：sync.Once&lt;/li&gt;
&lt;li&gt;方法三：事件同步来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Go-为什么没有判断-close-的接口？&quot;&gt;&lt;a href=&quot;#Go-为什么没有判断-close-的接口？&quot; class=&quot;headerlink&quot; title=&quot;Go 为什么没有判断 close 的接口？&quot;&gt;&lt;/a&gt;Go 为什么没有判断 close 的接口？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/go/chan_close_1.png&quot; alt=&quot;go channel close&quot;&gt;&lt;/p&gt;
&lt;p&gt;相信大家初学 golang chan 的时候应该都遇到过 “&lt;strong&gt;send on closed channel&lt;/strong&gt;“ 的 panic 。这个 panic 是当你意图往一个已经 close 的 channel 里面投递元素的时候触发。那么你当你第一次遇到这个问题是否想过 channel 是否能提供一个接口方法来判断是否已经 close 了？我想过这个问题，但是把 chan 的源代码翻了个遍没有找到。为什么？&lt;/p&gt;
&lt;p&gt;我先 hold 这个问题，我们捋一下跟 channel close 相关的事情，主要思考到 3 个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 channel 究竟做了什么 ？&lt;/li&gt;
&lt;li&gt;怎么避免 close channel 导致的 panic 问题 ？&lt;/li&gt;
&lt;li&gt;怎么优雅的关闭 channel ？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Go-关闭-channel-究竟做了什么？&quot;&gt;&lt;a href=&quot;#Go-关闭-channel-究竟做了什么？&quot; class=&quot;headerlink&quot; title=&quot;Go 关闭 channel 究竟做了什么？&quot;&gt;&lt;/a&gt;Go 关闭 channel 究竟做了什么？&lt;/h2&gt;&lt;p&gt;首先，用户可以 close channel，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 gdb 或者 delve 调试下就能发现 close 一个 channel，编译器会转换成 &lt;code&gt;closechan&lt;/code&gt; 函数，在这个函数里是关闭 channel 的全部实现了，我们可以分析下。&lt;/p&gt;
&lt;h3 id=&quot;closechan&quot;&gt;&lt;a href=&quot;#closechan&quot; class=&quot;headerlink&quot; title=&quot;closechan&quot;&gt;&lt;/a&gt;closechan&lt;/h3&gt;&lt;p&gt;对应编译函数为 &lt;code&gt;closechan&lt;/code&gt; ，该函数很简单，大概做 3 个事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标志位置 1 ，也就是 &lt;code&gt;c.closed = 1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;释放资源，唤醒所有等待取元素的协程；&lt;/li&gt;
&lt;li&gt;释放资源，唤醒所有等待写元素的协程；&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;closechan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 以下为锁内操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; lock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 不能重复 close 一个 channel，否则 panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(plainError(&lt;span class=&quot;string&quot;&gt;&quot;close of closed channel&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// closed 标志位置 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c.closed = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; glist gList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 释放所有等待取元素的 waiter 资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 等待读的 waiter 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg := c.recvq.dequeue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 资源一个个销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sg.elem != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   typedmemclr(c.elemtype, sg.elem)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sg.elem = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := sg.g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.param = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//  相应 goroutine 加到统一队列，下面会统一唤醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  glist.push(gp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 释放所有等待写元素的 waiter 资源（他们之后将会 panic）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 等待写的 waiter 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg := c.sendq.dequeue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 资源一个个销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg.elem = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := sg.g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.param = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 对应 goroutine 加到统一队列，下面会统一唤醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  glist.push(gp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 唤醒所有的 waiter 对应的 goroutine （这个协程列表是上面 push 进来的）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; !glist.empty() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := glist.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.schedlink = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  goready(gp, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的代码逻辑，我们窥视到两个重要的信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;close chan 是有标识位的；&lt;/li&gt;
&lt;li&gt;close chan 是会唤醒哪些等待的人们的；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是很奇怪的是，我们 golang 官方没有提供一个接口用于判断 chan 是否关闭？那我们能不能实现一个判断 chan 是否 close 的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;一个判断-chan-是否-close-的函数&quot;&gt;&lt;a href=&quot;#一个判断-chan-是否-close-的函数&quot; class=&quot;headerlink&quot; title=&quot;一个判断 chan 是否 close 的函数&quot;&gt;&lt;/a&gt;一个判断 chan 是否 close 的函数&lt;/h2&gt;&lt;p&gt;怎么实现？首先 &lt;code&gt;isChanClose&lt;/code&gt; 函数有几点要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够指明确实是 close 的；&lt;/li&gt;
&lt;li&gt;任何时候能够正常运行，且有返回的（非阻塞）；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想想 &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt; 相关的函数，我们可以知道，当前 channel 给到用户的使用姿势本质上只有两种：读和写，我们实现的 &lt;code&gt;isChanClose&lt;/code&gt; 也只能在这个基础上做。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写：&lt;code&gt;c &amp;lt;- x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;读：&lt;code&gt;&amp;lt;-c&lt;/code&gt; 或 &lt;code&gt;v := &amp;lt;-c&lt;/code&gt; 或 &lt;code&gt;v, ok := &amp;lt;-c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;思考方法一：通过“写”chan-实现&quot;&gt;&lt;a href=&quot;#思考方法一：通过“写”chan-实现&quot; class=&quot;headerlink&quot; title=&quot;思考方法一：通过“写”chan 实现&quot;&gt;&lt;/a&gt;思考方法一：通过“写”chan 实现&lt;/h3&gt;&lt;p&gt;“写”肯定不能作为判断，总不能为了判断 chan 是否 close，我尝试往里面写数据吧？这个会导致 &lt;code&gt;chansend&lt;/code&gt; 里面直接 panic 的，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chansend&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, callerpc &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 当 channel close 之后的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(plainError(&lt;span class=&quot;string&quot;&gt;&quot;send on closed channel&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然了，你路子要是野一点，这样做技术上也能实现，因为 panic 是可以捕捉的，只不过这也太野了吧，不推荐。&lt;/p&gt;
&lt;h3 id=&quot;思考方法二：通过“读”chan-实现&quot;&gt;&lt;a href=&quot;#思考方法二：通过“读”chan-实现&quot; class=&quot;headerlink&quot; title=&quot;思考方法二：通过“读”chan 实现&quot;&gt;&lt;/a&gt;思考方法二：通过“读”chan 实现&lt;/h3&gt;&lt;p&gt;“读”来判断。分析函数 &lt;code&gt;chanrecv&lt;/code&gt; 可以知道，当尝试从一个已经 close 的 chan 读数据的时候，返回 （selected=true, received=false），我们通过 received = false 即可知道 channel 是否 close 。&lt;code&gt;chanrecv&lt;/code&gt; 有如下代码：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chanrecv&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(selected, received &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 当 channel close 之后的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; c.qcount == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ep != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   typedmemclr(c.elemtype, ep)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以，我们现在知道了，可以通过 “读”的效果来判断，但是我们不能直接写成这样：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 错误示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _, ok := &amp;lt;- c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是个&lt;strong&gt;错误示例&lt;/strong&gt;，因为 &lt;code&gt;_, ok := &amp;lt;-c&lt;/code&gt; 编译出来的是 &lt;code&gt;chanrecv2&lt;/code&gt; ，这个函数 block 赋值 true 传入的，所以当 c 是正常的时候，这里是阻塞的，所以这个不能用来作为一个正常的函数调用，因为会卡死协程，怎么解决这个问题？用 &lt;code&gt;select&lt;/code&gt;  和 &lt;code&gt;&amp;lt;-chan&lt;/code&gt;  来结合可以解决这个问题，&lt;code&gt;select&lt;/code&gt; 和 &lt;code&gt;&amp;lt;-chan&lt;/code&gt; 结合起来是对应 &lt;code&gt;selectnbrecv&lt;/code&gt;  和 &lt;code&gt;selectnbrecv2&lt;/code&gt; 这两个函数，这两个函数是非阻塞的（ &lt;code&gt;block = false&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;正确示例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; _, received := &amp;lt;- ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;网上很多人举了一个 &lt;code&gt;isChanClose&lt;/code&gt; 错误的例子，错误示例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;  &amp;lt;- ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;思考下：为什么第一个例子是对的，第二个例子是错的？&lt;/p&gt;
&lt;p&gt;因为，第一个例子编译出来对应的函数是 &lt;code&gt;selectnbrecv2&lt;/code&gt; ，第二个例子编译出来对应的是 &lt;code&gt;selectnbrecv1&lt;/code&gt; ，这两个函数的区别在于 &lt;code&gt;selectnbrecv2&lt;/code&gt; 多了一个返回参数 &lt;code&gt;received&lt;/code&gt;，只有这个函数才能指明是否元素出队成功，而 &lt;code&gt;selected&lt;/code&gt; 只是判断是否要进到 select case 分支。我们通过 &lt;code&gt;received&lt;/code&gt; 这个返回值（其实是一个入参，只不过是指针类型，函数内可修改）来反向推断 chan 是否 close 了。&lt;/p&gt;
&lt;h4 id=&quot;小结：&quot;&gt;&lt;a href=&quot;#小结：&quot; class=&quot;headerlink&quot; title=&quot;小结：&quot;&gt;&lt;/a&gt;小结：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;case 的代码必须是 &lt;code&gt;_, received := &amp;lt;- ch&lt;/code&gt; 的形式，如果仅仅是 &lt;code&gt;&amp;lt;- ch&lt;/code&gt; 来判断，是错的逻辑，因为我们关注的是 &lt;code&gt;received&lt;/code&gt; 的值；&lt;/li&gt;
&lt;li&gt;select 必须要有 default 分支，否则会阻塞函数，我们这个函数要保证一定能正常返回；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;chan-close-原则&quot;&gt;&lt;a href=&quot;#chan-close-原则&quot; class=&quot;headerlink&quot; title=&quot;chan close 原则&quot;&gt;&lt;/a&gt;chan close 原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;永远不要尝试在读取端关闭 channel ，写入端无法知道 channel 是否已经关闭，往已关闭的 channel 写数据会 panic ；&lt;/li&gt;
&lt;li&gt;一个写入端，在这个写入端可以放心关闭 channel；&lt;/li&gt;
&lt;li&gt;多个写入端时，不要在写入端关闭 channel ，其他写入端无法知道 channel 是否已经关闭，关闭已经关闭的 channel 会发生 panic （你要想个办法保证只有一个人调用 close）；&lt;/li&gt;
&lt;li&gt;channel 作为函数参数的时候，最好带方向；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实这些原则只有一点：一定要是安全的是否才能去 close channel 。&lt;/p&gt;
&lt;h3 id=&quot;其实并不需要-isChanClose-函数&quot;&gt;&lt;a href=&quot;#其实并不需要-isChanClose-函数&quot; class=&quot;headerlink&quot; title=&quot;其实并不需要 isChanClose 函数 !!!&quot;&gt;&lt;/a&gt;其实并不需要 isChanClose 函数 !!!&lt;/h3&gt;&lt;p&gt;上面实现的 &lt;code&gt;isChanClose&lt;/code&gt; 是可以判断出 channel 是否 close，但是适用场景优先，因为可能等你 &lt;code&gt;isChanClose&lt;/code&gt; 判断的时候返回值 false，你以为 channel 还是正常的，但是下一刻 channel 被关闭了，这个时候往里面“写”数据就又会 panic ，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isChanClose( c ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 关闭的场景，exit  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 未关闭的场景，继续执行（可能还是会 panic）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为判断之后还是有时间窗，所以 &lt;code&gt;isChanClose&lt;/code&gt; 的适用还是有限，那么是否有更好的办法？&lt;/p&gt;
&lt;p&gt;我们换一个思路，你其实并不是一定要判断 channel 是否 close，真正的目的是：&lt;strong&gt;安全的使用 channel，避免使用到已经关闭的 closed channel，从而导致 panic&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;这个问题的本质上是保证一个事件的时序，官方推荐通过 &lt;code&gt;context&lt;/code&gt; 来配合使用，我们可以通过一个 ctx 变量来指明 close 事件，而不是直接去判断 channel 的一个状态。举个栗子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v, ok := &amp;lt;-c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do default ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctx.Done()&lt;/code&gt; 事件发生之后，我们就明确不去读 channel 的数据。&lt;/p&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// push &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctx.Done()&lt;/code&gt; 事件发生之后，我们就明确不写数据到 channel ，或者不从 channel 里读数据，那么保证这个时序即可。就一定不会有问题。&lt;/p&gt;
&lt;p&gt;我们只需要确保一点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触发时序保证：一定要先触发 ctx.Done() 事件，再去做 close channel 的操作，保证这个时序的才能保证 select 判断的时候没有问题；&lt;br&gt; a. 只有这个时序，才能保证在获悉到 Done 事件的时候，一切还是安全的；&lt;/li&gt;
&lt;li&gt;条件判断顺序：select 的 case 先判断 ctx.Done() 事件，这个很重要哦，否则很有可能先执行了 chan 的操作从而导致 panic 问题；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;怎么优雅关闭-chan-？&quot;&gt;&lt;a href=&quot;#怎么优雅关闭-chan-？&quot; class=&quot;headerlink&quot; title=&quot;怎么优雅关闭 chan ？&quot;&gt;&lt;/a&gt;怎么优雅关闭 chan ？&lt;/h2&gt;&lt;h3 id=&quot;方法一：panic-recover&quot;&gt;&lt;a href=&quot;#方法一：panic-recover&quot; class=&quot;headerlink&quot; title=&quot;方法一：panic-recover&quot;&gt;&lt;/a&gt;方法一：panic-recover&lt;/h3&gt;&lt;p&gt;关闭一个 channel 直接调用 close 即可，但是关闭一个已经关闭的 channel 会导致 panic，怎么办？panic-recover 配合使用即可。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SafeClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(closed &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;() != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   closed = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 如果 ch 是一个已经关闭的，会 panic 的，然后被 recover 捕捉到；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这并不优雅。&lt;/p&gt;
&lt;h3 id=&quot;方法二：sync-Once&quot;&gt;&lt;a href=&quot;#方法二：sync-Once&quot; class=&quot;headerlink&quot; title=&quot;方法二：sync.Once&quot;&gt;&lt;/a&gt;方法二：sync.Once&lt;/h3&gt;&lt;p&gt;可以使用 &lt;code&gt;sync.Once&lt;/code&gt; 来确保 &lt;code&gt;close&lt;/code&gt; 只执行一次。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ChanMgr &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; C    &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; once sync.Once&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewChanMgr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;ChanMgr&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;ChanMgr&amp;#123;C: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(cm *ChanMgr)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SafeClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; cm.once.Do(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(cm.C) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这看着还可以。&lt;/p&gt;
&lt;h3 id=&quot;方法三：事件同步来解决&quot;&gt;&lt;a href=&quot;#方法三：事件同步来解决&quot; class=&quot;headerlink&quot; title=&quot;方法三：事件同步来解决&quot;&gt;&lt;/a&gt;方法三：事件同步来解决&lt;/h3&gt;&lt;p&gt;对于关闭 channel 这个我们有两个简要的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;永远不要尝试在读端关闭 channel ；&lt;/li&gt;
&lt;li&gt;永远只允许一个 goroutine（比如，只用来执行关闭操作的一个 goroutine ）执行关闭操作；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用 &lt;code&gt;sync.WaitGroup&lt;/code&gt; 来同步这个关闭事件，遵守以上的原则，举几个例子：&lt;/p&gt;
&lt;h4 id=&quot;第一个例子：一个-sender&quot;&gt;&lt;a href=&quot;#第一个例子：一个-sender&quot; class=&quot;headerlink&quot; title=&quot;第一个例子：一个 sender&quot;&gt;&lt;/a&gt;第一个例子：一个 sender&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// channel 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 用来 recevivers 同步事件的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg := sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// sender（写端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 满足某些情况，则 close channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// receivers （读端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// ... 处理 channel 里的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 等待所有的 receivers 完成；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里例子里面，我们在 sender 的 goroutine 关闭 channel，因为只有一个 sender，所以关闭自然是安全的。receiver 使用 &lt;code&gt;WaitGroup&lt;/code&gt; 来同步事件，receiver 的 for 循环只有在 channel close 之后才会退出，主协程的 &lt;code&gt;wg.Wait()&lt;/code&gt; 语句只有所有的 receivers 都完成才会返回。所以，事件的顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写端入队一个整形元素&lt;/li&gt;
&lt;li&gt;关闭 channel&lt;/li&gt;
&lt;li&gt;所有的读端安全退出&lt;/li&gt;
&lt;li&gt;主协程返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一切都是安全的&lt;/p&gt;
&lt;h4 id=&quot;第二个例子：多个-sender&quot;&gt;&lt;a href=&quot;#第二个例子：多个-sender&quot; class=&quot;headerlink&quot; title=&quot;第二个例子：多个 sender&quot;&gt;&lt;/a&gt;第二个例子：多个 sender&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// channel 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 用来 recevivers 同步事件的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg := sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ctx, cancel := context.WithCancel(context.TODO())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 专门关闭的协程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time.Sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ... 某种条件下，关闭 channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// senders（写端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context, id &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; c &amp;lt;- id: &lt;span class=&quot;comment&quot;&gt;// 入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;(ctx, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// receivers（读端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// ... 处理 channel 里的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 等待所有的 receivers 完成；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子我们看到有多个 sender 和 receiver ，这种情况我们还是要保证一点：close(ch) 操作的只能有一个人，我们单独抽出来一个 goroutine 来做这个事情，并且使用 context 来做事件同步，事件发生顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;10 个写端协程（sender）运行，投递元素；&lt;/li&gt;
&lt;li&gt;10 个读端协程（receiver）运行，读取元素；&lt;/li&gt;
&lt;li&gt;2 分钟超时之后，单独协程执行 &lt;code&gt;close(channel)&lt;/code&gt; 操作；&lt;/li&gt;
&lt;li&gt;主协程返回；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一切都是安全的。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;channel 并没有直接提供判断是否 close 的接口，官方推荐使用 context 和 select 语法配合使用，事件通知的方式，达到优雅判断 channel 关闭的效果；&lt;/li&gt;
&lt;li&gt;channel 关闭姿势也有讲究，永远不要尝试在读端关闭，永远保持一个关闭入口处，使用 sync.WaitGroup 和 context 实现事件同步，达到优雅关闭效果；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者：奇伢   来源：奇伢云存储&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 为什么没有判断 close 的接口？&lt;/li&gt;
&lt;li&gt;Go 关闭 channel 究竟做了什么？&lt;br&gt;  -&lt;code&gt;closechan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个判断 chan 是否 close 的函数&lt;ul&gt;
&lt;li&gt;思考方法一：通过“写”chan 实现&lt;/li&gt;
&lt;li&gt;思考方法二：通过“读”chan 实现&lt;/li&gt;
&lt;li&gt;chan close 原则&lt;/li&gt;
&lt;li&gt;其实并不需要 &lt;code&gt;isChanClose&lt;/code&gt; 函数 !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎么优雅关闭 chan ？&lt;ul&gt;
&lt;li&gt;方法一：panic-recover&lt;/li&gt;
&lt;li&gt;方法二：sync.Once&lt;/li&gt;
&lt;li&gt;方法三：事件同步来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="channel" scheme="http://team.jiunile.com/categories/golang/channel/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="closechan" scheme="http://team.jiunile.com/tags/closechan/"/>
    
  </entry>
  
  <entry>
    <title>Go Sync.Pool 背后的想法</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-sync-pool.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-sync-pool.html</id>
    <published>2020-11-14T14:00:00.000Z</published>
    <updated>2020-11-13T09:45:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我最近在我的一个项目中遇到了垃圾回收问题。大量对象被重复分配，并导致 GC 的巨大工作量。使用 &lt;code&gt;sync.Pool&lt;/code&gt;，我能够减少分配和 GC 工作负载。&lt;/p&gt;
&lt;h2 id=&quot;什么是-sync-Pool？&quot;&gt;&lt;a href=&quot;#什么是-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;什么是 sync.Pool？&quot;&gt;&lt;/a&gt;什么是 sync.Pool？&lt;/h2&gt;&lt;p&gt;Go 1.3 版本的亮点之一是同步池。它是 &lt;code&gt;sync&lt;/code&gt; 包下的一个组件，用于创建自我管理的临时检索对象池。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#为什么要使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 sync.Pool？&quot;&gt;&lt;/a&gt;为什么要使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;我们希望尽可能减少 GC 开销。频繁的内存分配和回收会给 GC 带来沉重的负担。&lt;code&gt;sync.Poll&lt;/code&gt; 可以缓存暂时不使用的对象，并在下次需要时直接使用它们（无需重新分配）。这可能会减少 GC 工作负载并提高性能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;怎么使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#怎么使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;怎么使用 sync.Pool？&quot;&gt;&lt;/a&gt;怎么使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;首先，您需要设置新函数。当池中没有缓存对象时将使用此函数。之后，您只需要使用 &lt;code&gt;Get&lt;/code&gt; 和 &lt;code&gt;Put&lt;/code&gt; 方法来检索和返回对象。另外，池在第一次使用后绝对不能复制。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;New&lt;/code&gt; 函数类型是 &lt;code&gt;func() interface{}&lt;/code&gt;，&lt;code&gt;Get&lt;/code&gt; 方法返回一个 &lt;code&gt;interface{}&lt;/code&gt;。为了得到具体对象，你需要做一个类型断言。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A dummy struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initializing pool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; personPool = sync.Pool&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// New optionally specifies a function to generate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// a value when Get would otherwise return nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	New: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Main function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Get hold of an instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newPerson := personPool.Get().(*Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Defer release function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// After that the same instance is &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// reusable by another routine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; personPool.Put(newPerson)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Using the instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newPerson.Name = &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基准测试&quot;&gt;&lt;a href=&quot;#基准测试&quot; class=&quot;headerlink&quot; title=&quot;基准测试&quot;&gt;&lt;/a&gt;基准测试&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; personPool = sync.Pool&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	New: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkWithoutPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ReportAllocs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ResetTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Age = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkWithPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ReportAllocs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ResetTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = personPool.Get().(*Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Age = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			personPool.Put(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithoutPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithoutPool-8   160698 ns/op   80001 B/op   10000 allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithPool-8      191163 ns/op       0 B/op       0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;权衡&quot;&gt;&lt;a href=&quot;#权衡&quot; class=&quot;headerlink&quot; title=&quot;权衡&quot;&gt;&lt;/a&gt;权衡&lt;/h2&gt;&lt;p&gt;生活中的一切都是一种权衡。池也有它的性能成本。使用 &lt;code&gt;sync.Pool&lt;/code&gt; 比简单的初始化要慢得多。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p sync.Pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Put(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkAllocation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;压测结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkPool-8           283395016          4.40 ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkAllocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkAllocation-8    1000000000         0.344 ns/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;sync-Pool-是如何工作的？&quot;&gt;&lt;a href=&quot;#sync-Pool-是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;sync.Pool 是如何工作的？&quot;&gt;&lt;/a&gt;sync.Pool 是如何工作的？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sync.Pool&lt;/code&gt; 有两个对象容器: 本地池 (活动) 和受害者缓存 (存档)。&lt;/p&gt;
&lt;p&gt;根据 &lt;code&gt;sync/pool.go&lt;/code&gt; ，包 &lt;code&gt;init&lt;/code&gt; 函数作为清理池的方法&lt;a href=&quot;https://golang.org/src/sync/pool.go?s=8003:8060#L271&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;注册到运行时&lt;/a&gt;。此方法将由 GC 触发。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   runtime_registerPoolCleanup(poolCleanup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 GC 被触发时，受害者缓存中的对象将被收集，然后本地池中的对象将被移动到受害者缓存中。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;poolCleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Drop victim caches from all pools.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; oldPools &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victim = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victimSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Move primary cache to victim cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; allPools &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victim = p.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victimSize = p.localSize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.local = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.localSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oldPools, allPools = allPools, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新对象被放入本地池中。调用 &lt;code&gt;Put&lt;/code&gt; 方法也会将对象放入本地池中。调用 &lt;code&gt;Get&lt;/code&gt; 方法将首先从受害者缓存中获取对象，如果受害者缓存为空，则对象将从本地池中获取。&lt;br&gt;&lt;img src=&quot;/images/go/syncpool_1.gif&quot; alt=&quot;sync.Pool localPool and victimCache&quot;&gt;&lt;/p&gt;
&lt;p&gt;供你参考，Go 1.12 sync.pool 实现使用基于 &lt;code&gt;mutex&lt;/code&gt; 的锁，用于来自多个 Goroutines 的线程安全操作。Go 1.13 &lt;a href=&quot;https://github.com/golang/go/commit/d5fd2dd6a17a816b7dfd99d4df70a85f1bf0de31#diff-491b0013c82345bf6cfa937bd78b690d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;引入了一个双链表&lt;/a&gt;作为共享池，它删除了 &lt;code&gt;mutex&lt;/code&gt; 并改善了共享访问。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;当有一个昂贵的对象需要频繁创建时，使用 &lt;code&gt;sync.Pool&lt;/code&gt; 是非常有益的。&lt;/p&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/swlh/go-the-idea-behind-sync-pool-32da5089df72&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/swlh/go-the-idea-behind-sync-pool-32da5089df72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我最近在我的一个项目中遇到了垃圾回收问题。大量对象被重复分配，并导致 GC 的巨大工作量。使用 &lt;code&gt;sync.Pool&lt;/code&gt;，我能够减少分配和 GC 工作负载。&lt;/p&gt;
&lt;h2 id=&quot;什么是-sync-Pool？&quot;&gt;&lt;a href=&quot;#什么是-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;什么是 sync.Pool？&quot;&gt;&lt;/a&gt;什么是 sync.Pool？&lt;/h2&gt;&lt;p&gt;Go 1.3 版本的亮点之一是同步池。它是 &lt;code&gt;sync&lt;/code&gt; 包下的一个组件，用于创建自我管理的临时检索对象池。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#为什么要使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 sync.Pool？&quot;&gt;&lt;/a&gt;为什么要使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;我们希望尽可能减少 GC 开销。频繁的内存分配和回收会给 GC 带来沉重的负担。&lt;code&gt;sync.Poll&lt;/code&gt; 可以缓存暂时不使用的对象，并在下次需要时直接使用它们（无需重新分配）。这可能会减少 GC 工作负载并提高性能。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="sync" scheme="http://team.jiunile.com/categories/golang/sync/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="sync.poll" scheme="http://team.jiunile.com/tags/sync-poll/"/>
    
      <category term="连接池" scheme="http://team.jiunile.com/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>我在 Go 中犯了 5 个错误</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-5-mistakes.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-5-mistakes.html</id>
    <published>2020-11-13T14:00:00.000Z</published>
    <updated>2020-11-13T04:58:39.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;人皆犯错，宽恕是德   — Alexander Pope&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些都是我在写 Go 中犯的错误。尽管这些可能不会导致任何类型的错误，但它们可能会潜在地影响软件。&lt;/p&gt;
&lt;h2 id=&quot;1-内循环&quot;&gt;&lt;a href=&quot;#1-内循环&quot; class=&quot;headerlink&quot; title=&quot;1 内循环&quot;&gt;&lt;/a&gt;1 内循环&lt;/h2&gt;&lt;p&gt;有几种方法可以造成循环内部的混乱，你需要注意。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-使用引用循环迭代变量&quot;&gt;&lt;a href=&quot;#1-1-使用引用循环迭代变量&quot; class=&quot;headerlink&quot; title=&quot;1.1 使用引用循环迭代变量&quot;&gt;&lt;/a&gt;1.1 使用引用循环迭代变量&lt;/h3&gt;&lt;p&gt;由于效率的原因，循环迭代变量是单个变量，在每次循环迭代中采用不同的值。这可能会导致不知情的行为。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;in := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out []*&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; in &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	out = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(out, &amp;amp;v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;, *out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Addresses:&quot;&lt;/span&gt;, out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果将是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Values: 3 3 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Addresses: 0xc000014188 0xc000014188 0xc000014188&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，&lt;code&gt;out&lt;/code&gt; 切片中的所有元素都是 3。实际上，实际上很容易解释为什么会发生这种情况：在每次迭代中，我们都会将 &lt;code&gt;v&lt;/code&gt; 的地址附加到 &lt;code&gt;out&lt;/code&gt; 切片中。如前所述，&lt;code&gt;v&lt;/code&gt; 是在每次迭代中接受新值的单个变量。因此，正如您在输出的第二行中看到的，地址是相同的，并且所有地址都指向相同的值。&lt;/p&gt;
&lt;p&gt;简单的解决方法是将循环迭代器变量复制到新变量中：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;in := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out []*&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; in &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	out = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(out, &amp;amp;v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;, *out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Addresses:&quot;&lt;/span&gt;, out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新的输出：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Values: 1 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Addresses: 0xc0000b6010 0xc0000b6018 0xc0000b6020&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的问题可以找到正在 Goroutine 中使用的循环迭代变量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果将是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 3 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它可以使用上面提到的相同的解决方案来修复。注意，如果不使用 Goroutine 运行该函数，代码将按照预期运行。&lt;/p&gt;
&lt;h3 id=&quot;1-2-在循环中调用-WaitGroup-Wait&quot;&gt;&lt;a href=&quot;#1-2-在循环中调用-WaitGroup-Wait&quot; class=&quot;headerlink&quot; title=&quot;1.2 在循环中调用 WaitGroup.Wait&quot;&gt;&lt;/a&gt;1.2 在循环中调用 WaitGroup.Wait&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;WaitGroup&lt;/code&gt; 类型的共享变量会犯此错误，如下面的代码所示，当第 5 行的 &lt;code&gt;Done()&lt;/code&gt; 被调用 &lt;code&gt;len(tasks)&lt;/code&gt; 次数时，第 7 行的 &lt;code&gt;Wait()&lt;/code&gt; 只能被解除阻塞，因为它被用作参数在第 2 行调用 &lt;code&gt;Add()&lt;/code&gt;。但是，&lt;code&gt;Wait()&lt;/code&gt; 在循环中被调用，因此在下一个迭代中，它会阻止在第 4 行创建 Goroutine。简单的解决方案是将 &lt;code&gt;Wait()&lt;/code&gt; 的调用移出循环。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wg.Add(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(tasks))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tasks &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *task)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; group.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// group.Wait()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group.Wait()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-在循环中使用-defer&quot;&gt;&lt;a href=&quot;#1-3-在循环中使用-defer&quot; class=&quot;headerlink&quot; title=&quot;1.3 在循环中使用 defer&quot;&gt;&lt;/a&gt;1.3 在循环中使用 defer&lt;/h3&gt;&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; 直到函数返回才执行。除非你确定你在做什么，否则你不应该在循环中使用 &lt;code&gt;defer&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;persons := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]Person, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; persons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// defer mutex.Unlock()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p.Age = &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，如果你使用第 8 行而不是第 10 行，下一次迭代就不能持有互斥锁，因为锁已经在使用中，并且循环永远阻塞。&lt;/p&gt;
&lt;p&gt;如果你真的需要使用 defer 内循环，你可能想委托另一个函数来做这项工作。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;persons := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]Person, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; persons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mutex.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p.Age = &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，有时使用 &lt;code&gt;defer&lt;/code&gt; 在循环可能会变得很方便。所以你真的需要知道你在做什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go 不能容忍愚蠢者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-发送到一个无保证的-channel&quot;&gt;&lt;a href=&quot;#2-发送到一个无保证的-channel&quot; class=&quot;headerlink&quot; title=&quot;2 发送到一个无保证的 channel&quot;&gt;&lt;/a&gt;2 发送到一个无保证的 channel&lt;/h2&gt;&lt;p&gt;您可以将值从一个 Goroutine 发送到 channels，并将这些值接收到另一个 Goroutine。默认情况下，发送和接收，直到另一方准备好。这允许 Goroutines 在没有显式锁或条件变量的情况下进行同步。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(timeout time.Duration)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ch :=make(chan obj)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; obj, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj := do()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ch &amp;lt;- result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; result = &amp;lt;- ch :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&amp;lt;- time.After(timeout):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们检查一下上面的代码。&lt;code&gt;doReq&lt;/code&gt; 函数在第 4 行创建一个子 Goroutine 来处理请求，这在Go服务程序中是一种常见的做法。子 Goroutine 执行 &lt;code&gt;do&lt;/code&gt; 函数并通过第 6 行通道 &lt;code&gt;ch&lt;/code&gt; 将结果发送回父节点。子进程会在第 6 行阻塞，直到父进程在第 9 行接收到 &lt;code&gt;ch&lt;/code&gt; 的结果。同时，父进程将阻塞 &lt;code&gt;select&lt;/code&gt;，直到子进程将结果发送给 &lt;code&gt;ch&lt;/code&gt;（第9行）或发生超时（第11行）。如果超时发生在更早的时候，父函数将从第 12 行 &lt;code&gt;doReq&lt;/code&gt; 方法返回，并且没有人可以再接收 &lt;code&gt;ch&lt;/code&gt; 的结果，这将导致子函数永远被阻塞。解决方案是将 &lt;code&gt;ch&lt;/code&gt; 从无缓冲通道更改为缓冲通道，这样即使父及退出，子 Goroutine 也始终可以发送结果。另一个修复方法是在第 6 行使用默认为空的 &lt;code&gt;select&lt;/code&gt; 语句，这样如果没有 Goroutine 接收 &lt;code&gt;ch&lt;/code&gt;，就会发生默认情况。尽管这种解决方案可能并不总是有效。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- result: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-不使用接口&quot;&gt;&lt;a href=&quot;#3-不使用接口&quot; class=&quot;headerlink&quot; title=&quot;3 不使用接口&quot;&gt;&lt;/a&gt;3 不使用接口&lt;/h2&gt;&lt;p&gt;接口可以使代码更加灵活。这是在代码中引入多态的一种方法。接口允许您请求一组行为，而不是特定类型。不使用接口可能不会导致任何错误，但它会导致代码不简单、不灵活和不具有可扩展性。&lt;/p&gt;
&lt;p&gt;在众多接口中，&lt;code&gt;io.Reader&lt;/code&gt; 和 &lt;code&gt;io.Writer&lt;/code&gt; 可能是最受欢迎的。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Reader &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Read(p []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Writer &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Write(p []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些接口可以非常强大。假设您要将对象写入文件中，因此您定义了一个 Save 方法：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *obj)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file os.File)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果您第二天需要写入 &lt;code&gt;http.ResponseWriter&lt;/code&gt; 该怎么办？您不想定义新方法。是吧？所以使用 &lt;code&gt;io.Writer&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *obj)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w io.Writer)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一个重要的注意事项，你应该知道，总是要求你要使用的行为。在上面的例子中，请求一个&lt;code&gt;io.ReadWriteCloser&lt;/code&gt; 也可以工作得很好，但当你要使用的唯一方法是 &lt;code&gt;Write&lt;/code&gt; 时，这不是一个最佳实践。接口越大，抽象就越弱。&lt;/p&gt;
&lt;p&gt;所以大多数时候你最好专注于行为而不是具体的类型。&lt;/p&gt;
&lt;h2 id=&quot;4-不好的顺序结构&quot;&gt;&lt;a href=&quot;#4-不好的顺序结构&quot; class=&quot;headerlink&quot; title=&quot;4 不好的顺序结构&quot;&gt;&lt;/a&gt;4 不好的顺序结构&lt;/h2&gt;&lt;p&gt;这个错误也不会导致任何错误，但是它会导致更多的内存使用。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BadOrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 16 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 4 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;似乎两种类型的大小都相同，为 21 个字节，但结果显示出完全不同。使用 &lt;code&gt;GOARCH=amd64&lt;/code&gt; 编译代码，&lt;code&gt;BadOrderedPerson&lt;/code&gt; 类型分配 32 字节，而 &lt;code&gt;OrderedPerson&lt;/code&gt; 类型分配 24 字节。为什么？原因是&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_structure_alignment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据结构对齐&lt;/a&gt;。在 64 位体系结构中，内存分配 8 字节的连续数据包。需要添加的填充可以通过以下方式计算：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;padding = (align - (offset mod align)) mod align&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aligned = offset + padding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = offset + ((align - (offset mod align)) mod align)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BadOrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 7 byte: padding for alignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 16 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// 4 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// to prevent unkeyed literals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// zero sized values, like struct&amp;#123;&amp;#125; and [0]byte occurring at &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// the end of a structure are assumed to have a size of one byte.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// so padding also will be addedd here as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当您有一个大的常用类型时，它可能会导致性能问题。但是不要担心，您不必手动处理所有的结构。使用 &lt;a href=&quot;https://github.com/mdempsky/maligned&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maligned&lt;/a&gt; 你可以轻松检查代码以解决此问题。&lt;/p&gt;
&lt;h2 id=&quot;5-在测试中没有使用-race-detector&quot;&gt;&lt;a href=&quot;#5-在测试中没有使用-race-detector&quot; class=&quot;headerlink&quot; title=&quot;5 在测试中没有使用 race detector&quot;&gt;&lt;/a&gt;5 在测试中没有使用 race detector&lt;/h2&gt;&lt;p&gt;数据竞争会导致神秘的故障，通常是在代码部署到生产环境很久之后。正因为如此，它们是并发系统中最常见也是最难调试的 bug 类型。为了帮助区分这些 bug, Go 1.1 引入了一个内置的数据竞争检测器。它可以简单地添加 &lt;code&gt;-race&lt;/code&gt; 标志。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -race pkg    // to &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; the package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go run -race pkg.go  // to run the &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go build -race       // to build the package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go install -race pkg // to install the package&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启用 race 检测器后，编译器将记录在代码中访问内存的时间和方式，而 &lt;code&gt;runtime&lt;/code&gt; 监视对共享变量的不同步访问。&lt;/p&gt;
&lt;p&gt;当发现数据竞争时，竞争检测器将打印一份报告，其中包含冲突访问的堆栈跟踪。下面是一个例子：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WARNING: DATA RACE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read by goroutine 185:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*pollServer).AddFD()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:89 +0x398&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*pollServer).WaitWrite()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:247 +0x45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*netFD).Write()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:540 +0x4d4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*conn).Write()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/net.go:129 +0x101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·060()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:603 +0xaf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Previous write by goroutine 184:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.setWriteDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/sockopt_posix.go:135 +0xdf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.setDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/sockopt_posix.go:144 +0x9c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*conn).SetDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/net.go:161 +0xe3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·061()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:616 +0x3ed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Goroutine 185 (running) created at:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·061()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:609 +0x288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Goroutine 184 (running) created at:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.TestProlongTimeout()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:618 +0x298&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testing.tRunner()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/testing/testing.go:301 +0xe8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-最后一句&quot;&gt;&lt;a href=&quot;#6-最后一句&quot; class=&quot;headerlink&quot; title=&quot;6 最后一句&quot;&gt;&lt;/a&gt;6 最后一句&lt;/h2&gt;&lt;p&gt;唯一真正的错误是我们什么也没学到。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/swlh/5-mistakes-ive-made-in-go-75fb64b943b8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/swlh/5-mistakes-ive-made-in-go-75fb64b943b8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人皆犯错，宽恕是德   — Alexander Pope&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些都是我在写 Go 中犯的错误。尽管这些可能不会导致任何类型的错误，但它们可能会潜在地影响软件。&lt;/p&gt;
&lt;h2 id=&quot;1-内循环&quot;&gt;&lt;a href=&quot;#1-内循环&quot; class=&quot;headerlink&quot; title=&quot;1 内循环&quot;&gt;&lt;/a&gt;1 内循环&lt;/h2&gt;&lt;p&gt;有几种方法可以造成循环内部的混乱，你需要注意。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="犯错" scheme="http://team.jiunile.com/categories/golang/%E7%8A%AF%E9%94%99/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="错误" scheme="http://team.jiunile.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>用 Go 从头开始构建容器（第1部分：命名空间）</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-build-container-ns.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-build-container-ns.html</id>
    <published>2020-11-12T14:00:00.000Z</published>
    <updated>2020-11-13T01:53:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在过去几年中，容器的使用显著增加。容器的概念已经出现好几年了，但是 Docker 易于使用的命令行才从 2013 年开始在开发人员中普及容器。&lt;/p&gt;
&lt;p&gt;在这个系列中，我试图演示容器是如何在下面工作的，以及我是如何开发容器的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是-vessel？&quot;&gt;&lt;a href=&quot;#什么是-vessel？&quot; class=&quot;headerlink&quot; title=&quot;什么是 vessel？&quot;&gt;&lt;/a&gt;什么是 vessel？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/0xc0d/vessel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vessel&lt;/a&gt; 是我的一个教学目的的项目，它实现了一个小版本的 Docker 来管理容器。它既不使用 &lt;a href=&quot;https://containerd.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;containerd&lt;/a&gt; 也不使用 &lt;a href=&quot;https://github.com/opencontainers/runc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;runc&lt;/a&gt;，而是使用一组 Linux 特性来创建容器。&lt;/p&gt;
&lt;p&gt;vessel 既不是生产就绪的，也没有经过良好测试的软件。这只是一个简单的项目来了解更多关于容器的知识。&lt;/p&gt;
&lt;h2 id=&quot;让我们开始：阅读-Docker！&quot;&gt;&lt;a href=&quot;#让我们开始：阅读-Docker！&quot; class=&quot;headerlink&quot; title=&quot;让我们开始：阅读 Docker！&quot;&gt;&lt;/a&gt;让我们开始：阅读 Docker！&lt;/h2&gt;&lt;p&gt;我发现，在开始编写代码之前，先看一下 &lt;a href=&quot;https://docs.docker.com/get-started/overview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 文档&lt;/a&gt;，了解一下容器是很有用的。&lt;/p&gt;
&lt;p&gt;Docker 就其&lt;a href=&quot;https://docs.docker.com/get-started/overview/#the-underlying-technology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;而言，利用了 linux 内核的几个特性，并将它们组合成一个称为容器格式的包装器。这些特性是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control groups&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Union file systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在让我们浏览一下上面的列表，并简要地了解一下它们是什么。&lt;/p&gt;
&lt;h2 id=&quot;什么是命名空间（Namespace-）&quot;&gt;&lt;a href=&quot;#什么是命名空间（Namespace-）&quot; class=&quot;headerlink&quot; title=&quot;什么是命名空间（Namespace!）?&quot;&gt;&lt;/a&gt;什么是命名空间（Namespace!）?&lt;/h2&gt;&lt;p&gt;Linux 命名空间是最现代容器实现背后的基础技术。名称空间是进程对周围运行的其他事物的感知。命名空间允许隔离一组进程中的全局系统资源。例如，网络命名空间隔离网络堆栈，这意味着该网络命名空间中的进程可以拥有自己的独立路由、防火墙规则和网络设备。&lt;/p&gt;
&lt;p&gt;因此，如果没有命名空间，容器中的进程可能（例如）卸载文件系统，或在另一个容器中设置网络接口。&lt;/p&gt;
&lt;h3 id=&quot;哪些资源可以使用命名空间进行隔离？&quot;&gt;&lt;a href=&quot;#哪些资源可以使用命名空间进行隔离？&quot; class=&quot;headerlink&quot; title=&quot;哪些资源可以使用命名空间进行隔离？&quot;&gt;&lt;/a&gt;哪些资源可以使用命名空间进行隔离？&lt;/h3&gt;&lt;p&gt;在当前的 linux 内核 (5.9) 中，有 8 种类型的不同命名空间。每个命名空间可以隔离某个全局系统资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cgroup&lt;/strong&gt;: 此命名空间隔离控制组根目录。我将在第 2 部分中解释什么是 cgroups。但简而言之，cgroup 允许系统为一组进程定义资源限制。但要注意的是，“cgroup namespce” 仅控制在命名空间中哪些 cgroup 可见。命名空间无法分配资源限制。我们稍后将对此进行深入解释。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPC&lt;/strong&gt;: 此命名空间隔离进程间通信机制，如 System V 和 POSIX 消息队列。理解IPC 并不难，但这篇文章不会讨论这个主题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: 此名称空间隔离路由、防火墙规则和名称空间内的一组进程可以看到的网络设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mount&lt;/strong&gt;：此名称空间隔离每个名称空间中的挂载点列表。在单独的挂载名称空间中运行的进程可以挂载和卸载，而不会影响其他名称空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt;：这个命名空间隔离进程 ID 号空间。它支持在名称空间内挂起/恢复进程之类的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;：这个命名空间隔离了 &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt; 和 &lt;code&gt;CLOCK_BOOTTIME&lt;/code&gt; 系统时钟，它们影响了针对这些时钟（如系统正常运行时间）测量的 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;：此名称空间隔离用户 id、组 id、根目录、密钥和功能。这允许进程在名称空间内是根，但不在命名空间外（如在主机中）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTS&lt;/strong&gt;：这个命名空间隔离主机名和域名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;关于命名空间的重要注意事项&quot;&gt;&lt;a href=&quot;#关于命名空间的重要注意事项&quot; class=&quot;headerlink&quot; title=&quot;关于命名空间的重要注意事项&quot;&gt;&lt;/a&gt;关于命名空间的重要注意事项&lt;/h3&gt;&lt;p&gt;命名空间除了隔离之外什么也没做，这意味着，例如，加入一个新的网络名称空间不会给您提供一组隔离的网络设备，您必须自己创建它们。UTS 命名空间也是如此，它不会改变您的主机名。它所做的唯一事情就是隔离与主机名相关的系统调用。我们将在这个系列中一起做这些事情。&lt;/p&gt;
&lt;h3 id=&quot;命名空间生命周期&quot;&gt;&lt;a href=&quot;#命名空间生命周期&quot; class=&quot;headerlink&quot; title=&quot;命名空间生命周期&quot;&gt;&lt;/a&gt;命名空间生命周期&lt;/h3&gt;&lt;p&gt;当命名空间中的最后一个进程离开命名空间时，命名空间将自动删除。然而，有许多例外情况使名称空间在没有任何成员进程的情况下保持活动。我们将在为 vessel 创建网络名称空间时解释其中一个例外。&lt;/p&gt;
&lt;h3 id=&quot;命名空间的系统调用&quot;&gt;&lt;a href=&quot;#命名空间的系统调用&quot; class=&quot;headerlink&quot; title=&quot;命名空间的系统调用&quot;&gt;&lt;/a&gt;命名空间的系统调用&lt;/h3&gt;&lt;p&gt;现在我们已经简要了解了命名空间是什么，接下来看看如何与命名空间交互。在 Linux 中，有一组允许创建、加入和发现命名空间的系统调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/strong&gt;：此系统调用实际上创建了一个新进程。但是借助 flags 参数，新进程将创建自己的新命名空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;setns&lt;/code&gt;&lt;/strong&gt;：此系统调用允许正在运行的进程加入现有命名空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;unshare&lt;/code&gt;&lt;/strong&gt;：此系统调用实际上与克隆相同，但不同之处在于此系统调用将创建当前进程并将其移动到新的命名空间，而 &lt;code&gt;clone&lt;/code&gt; 将创建具有新的命名空间的新进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;额外提示：&lt;code&gt;fork&lt;/code&gt; 和 &lt;code&gt;vfork&lt;/code&gt; 内部系统调用只是使用不同的参数调用 &lt;code&gt;clone()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;命名空间-Flags&quot;&gt;&lt;a href=&quot;#命名空间-Flags&quot; class=&quot;headerlink&quot; title=&quot;命名空间 Flags&quot;&gt;&lt;/a&gt;命名空间 Flags&lt;/h3&gt;&lt;p&gt;上面提到的系统调用需要一个能够指定所需命名空间的 flag。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWCGROUP Cgroup namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWIPC    IPC namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWNET    Network namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWNS     Mount namespaces$$ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWPID    PID namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWTIME   Time namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWUSER   User namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWUTS    UTS namespaces&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例如，如果你想为当前进程创建一个新的网络命名空间，你应该用 &lt;code&gt;CLONE_NEWNET&lt;/code&gt; 标记调用&lt;code&gt;unshare&lt;/code&gt;，如果您想使用新用户和 UTS 命名空间创建新进程，你应该用&lt;code&gt;CLONE_NEWUSER|CLONE_NEWUTS&lt;/code&gt; 调用 clone。竖线表示或按位组合两个标记。&lt;/p&gt;
&lt;h3 id=&quot;命名空间文件&quot;&gt;&lt;a href=&quot;#命名空间文件&quot; class=&quot;headerlink&quot; title=&quot;命名空间文件&quot;&gt;&lt;/a&gt;命名空间文件&lt;/h3&gt;&lt;p&gt;在上面我提到过 &lt;code&gt;setns&lt;/code&gt; 系统调用将在名称空间之间移动一个正在运行的进程。但是，如何指定要移动到哪个名称空间呢？好的，在创建名称空间之后，成员进程将具有指向命名空间文件的符号链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Unix 中，所有内容都是文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，在您的 shell 中，通过列出 /proc/[pid]/ns 目录下的文件，您可以看到进程命名空间。在这里你可以看到正在运行的 shell 的当前命名空间（&lt;code&gt;self&lt;/code&gt; 代表当前 shell pid）:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /proc/self/ns | cut &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 10-12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgroup            -&amp;gt; cgroup:[4026531835]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipc               -&amp;gt; ipc:[4026531839]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mnt               -&amp;gt; mnt:[4026531840]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net               -&amp;gt; net:[4026532008]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid               -&amp;gt; pid:[4026531836]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_children  -&amp;gt; pid:[4026531836]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time              -&amp;gt; time:[4026531834]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_children -&amp;gt; time:[4026531834]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user              -&amp;gt; user:[4026531837]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uts               -&amp;gt; uts:[4026531838]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样使用 &lt;code&gt;lsns&lt;/code&gt; 命令，您也可以看到进程命名空间列表:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# lsns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NS TYPE   NPROCS   PID USER    COMMAND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531834 time      244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531835 cgroup    244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531836 pid       199     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531837 user      198     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531838 uts       241     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531839 ipc       244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531840 mnt       234     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上 &lt;code&gt;setns&lt;/code&gt; syscall 所做的是更改 &lt;code&gt;/proc/[pid]/ns&lt;/code&gt; 目录下文件的链接。&lt;/p&gt;
&lt;h2 id=&quot;废话少说，让我们编码吧！&quot;&gt;&lt;a href=&quot;#废话少说，让我们编码吧！&quot; class=&quot;headerlink&quot; title=&quot;废话少说，让我们编码吧！&quot;&gt;&lt;/a&gt;废话少说，让我们编码吧！&lt;/h2&gt;&lt;p&gt;现在我们知道我们想要的一切。是时候编写第一个在单独命名空间上运行的代码了。首先让我们看看 &lt;code&gt;unshare&lt;/code&gt; 是如何工作的。下面的代码，在第 1 行使用 &lt;code&gt;syscall&lt;/code&gt; 包和 &lt;code&gt;Unshare&lt;/code&gt; 方法为当前运行的 Go 程序创建一个新的名称空间，然后在第 5 行将主机名设置为“container”，然后在第 9 行，它创建一个新命令并运行它。&lt;code&gt;Run&lt;/code&gt; 启动命令并等待其完成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除用户命名空间外，创建命名空间需要 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 功能。因此，您需要以 root 用户来运行该程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;err := syscall.Unshare(syscall.CLONE_NEWPID|syscall.CLONE_NEWUTS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Fprintln(os.Stderr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;err = syscall.Sethostname([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Fprintln(os.Stderr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdin = os.Stdin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdout = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stderr = os.Stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们构建程序并进行测试。对于 host 中的第一个命令，我运行 ps 来监视正在运行的进程，然后获取主机名和当前 shell PID（例如 self，$$ 代表当前进程 PID）。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PID TTY          TIME CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27973 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27984 pts/2    00:00:00 ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27973&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在让我们看看运行程序后会发生什么。获取主机名它返回“container”。似乎有用！&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;container&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们看看进程 ID 是什么。是的！它是 1，可行。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们运行 ps 来查看在容器内运行的进程。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PID TTY          TIME CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27973 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27998 pts/2    00:00:00 unshare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  28003 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  28011 pts/2    00:00:00 ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发生什么事了!？我们可以看到带有大型 pid 的容器内的主机进程没有意义。&lt;/p&gt;
&lt;p&gt;我将终止其中一个进程，看看会发生什么:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; 27998&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh: &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;: (27998) - No such process&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;没有这样的进程，它说。精彩吗？让我解释一下。代码实际上是有效的，我们在一个新的 PID 命名空间中，我们可以看到我们的进程 ID 是 1。问题是 ps 命令。下面的 ps 使用 proc 伪文件系统列出所有正在运行的进程。为了能够拥有我们自己的 proc 文件系统，我们需要一个新的挂载名称空间，以及一个新的根路径来将 proc 挂载到其中。我们将在下一部分深入讨论。&lt;/p&gt;
&lt;h3 id=&quot;Clone-in-Go&quot;&gt;&lt;a href=&quot;#Clone-in-Go&quot; class=&quot;headerlink&quot; title=&quot;Clone in Go&quot;&gt;&lt;/a&gt;Clone in Go&lt;/h3&gt;&lt;p&gt;在我看来，Go 没有 clone 功能。但是，有一个名为 &lt;a href=&quot;https://github.com/liquidgecka/goclone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;goclone&lt;/a&gt; 的包，它包装了 Go 的 clone 系统调用。但是我们将要使用的解决方案是不同的。在 vessel 中，我们使用一个叫做 &lt;code&gt;reexec&lt;/code&gt; 的包，它是 Docker 团队开发的。&lt;/p&gt;
&lt;h3 id=&quot;reexec-是什么？&quot;&gt;&lt;a href=&quot;#reexec-是什么？&quot; class=&quot;headerlink&quot; title=&quot;reexec 是什么？&quot;&gt;&lt;/a&gt;reexec 是什么？&lt;/h3&gt;&lt;p&gt;Go 允许您使用一组新的名称空间运行命令。&lt;code&gt;reexec&lt;/code&gt; 背后的思想是用新的名称空间重新执行正在运行的程序本身。&lt;code&gt;reexec&lt;/code&gt; 包，后台的 &lt;code&gt;reexec&lt;/code&gt; 包将从调用 &lt;code&gt;/proc/self/exe&lt;/code&gt; 的 Go 标准库返回 &lt;code&gt;*exec.Cmd&lt;/code&gt;。该文件基本上是指向正在运行的程序可执行文件的链接。&lt;/p&gt;
&lt;p&gt;现在您已经了解了 &lt;code&gt;reexec&lt;/code&gt; 是如何工作的，让我们从容器中深入研究一些代码。下面的代码，是在 vessel 的早期阶段。它实际上是使用一组新名称空间运行新进程的代码。这个过程就是我们的容器。在第 1 行到第 4 行，函数创建参数和新的 reexec 命令，然后为其设置标准的输入、输出和错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 容器的 &lt;code&gt;fork&lt;/code&gt; 子命令（第一行）是容器模式。虽然它被隐藏在使用中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;args := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;fork&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd := reexec.Command(args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cloneflags: syscall.CLONE_NEWUTS |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWIPC |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWPID |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWNS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Go 中的  &lt;code&gt;SysProcAttr&lt;/code&gt; 命令包含操作系统特定的属性。这些属性之一是 &lt;code&gt;Cloneflags&lt;/code&gt;，通过将 flags 传递到这个值，该命令将使用新的特定名称空间运行。这样，我们的新进程就有了新的 IPC、UTS、PID 和 Mount (NS) 命名空间。但是网络命名空间呢？!&lt;/p&gt;
&lt;h3 id=&quot;深入研究网络命名空间&quot;&gt;&lt;a href=&quot;#深入研究网络命名空间&quot; class=&quot;headerlink&quot; title=&quot;深入研究网络命名空间&quot;&gt;&lt;/a&gt;深入研究网络命名空间&lt;/h3&gt;&lt;p&gt;正如我已经提到的，命名空间只能隔离资源和容器感知的边界。因此，使用新的网络命名空间运行容器不会有太大帮助。我们也应该做一些连接容器到外部网络的事情。但这怎么可能？!&lt;/p&gt;
&lt;h3 id=&quot;什么是虚拟以太网设备？&quot;&gt;&lt;a href=&quot;#什么是虚拟以太网设备？&quot; class=&quot;headerlink&quot; title=&quot;什么是虚拟以太网设备？&quot;&gt;&lt;/a&gt;什么是虚拟以太网设备？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;veth&lt;/code&gt; 可以充当网络命名空间之间的隧道。这意味着它可以在另一个命名空间中创建与网络设备的连接。&lt;br&gt;&lt;img src=&quot;/images/go/docker_ns_1.png&quot; alt=&quot;figure 1: Virtual Ethernet Devices&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟以太网设备总是成对地创建，并相互连接。在一对中的一个设备上传输的所有数据将立即在另一个设备上接收。当任一设备关闭时，这对设备的链路状态也关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，在图 1 中，有两个 veth 对。在每对设备中，一个对等设备位于主机网络命名空间内，另一个位于容器内。主机命名空间中的设备连接到网桥，该网桥被路由到名为 &lt;code&gt;eth0&lt;/code&gt; 的物理互联网连接设备。&lt;/p&gt;
&lt;p&gt;现在让我们来看看 vessel 是如何创建这样一个网络的。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c *Container)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetupNetwork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bridge &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(filesystem.Unmounter, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nsMountTarget := filepath.Join(netnsPath, c.Digest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vethName := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;veth%.7s&quot;&lt;/span&gt;, c.Digest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	peerName := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;P%s&quot;&lt;/span&gt;, vethName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.SetupVirtualEthernet(vethName, peerName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetMaster(vethName, bridge); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unmount, err := network.MountNewNetworkNamespace(nsMountTarget)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetNsByFile(nsMountTarget, peerName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Change current network namespace to setup the veth&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unset, err := network.SetNetNSByFile(nsMountTarget)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; unset()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctrEthName := &lt;span class=&quot;string&quot;&gt;&quot;eth0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctrEthIPAddr := c.GetIP()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkRename(peerName, ctrEthName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkAddAddr(ctrEthName, ctrEthIPAddr); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetup(ctrEthName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkAddGateway(ctrEthName, &lt;span class=&quot;string&quot;&gt;&quot;172.30.0.1&quot;&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetup(&lt;span class=&quot;string&quot;&gt;&quot;lo&quot;&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码涵盖了容器包的 &lt;code&gt;SetupNetwork&lt;/code&gt; 方法。这个方法的职责是创建一个如图 1 所示的网络。&lt;/p&gt;
&lt;p&gt;在调用此方法之前，vessel 将创建其名为 &lt;code&gt;vessel0&lt;/code&gt; 的桥梁。这是实际传递给 &lt;code&gt;SetupNetwork&lt;/code&gt; 网桥值的名称。&lt;/p&gt;
&lt;p&gt;从现在开始，事情可能会有点混乱，但别担心。请务必多阅读几次，并遵循代码。&lt;/p&gt;
&lt;p&gt;在第 3-4 行，定义了 veth 设备对名称。然后在第 6 行，将使用关联的名称创建 veth。在第 9 行，veth 将指定 &lt;code&gt;vessel0&lt;/code&gt; 作为其主服务器，以便进一步通信。&lt;br&gt;&lt;img src=&quot;/images/go/docker_ns_2.png&quot; alt=&quot;docker_ns_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在是时候创建一个新的网络名称空间，并将其中一个 veth 对移动到其中。我们的容器终究会加入这个网络命名空间。然而，问题是命名空间的生命周期！如前所述，当最后一个进程成员离开名称空间时，名称空间将被删除。我也提到了一些例外。其中一个例外是绑定挂载命名空间时。这就是为什么有一个名为 &lt;code&gt;MountNewNetworkNamespace&lt;/code&gt; 的函数。这个函数创建一个新的名称空间，并将其绑定到一个文件以保持其活动。下面的代码涵盖了此功能。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MountNewNetworkNamespace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nsTarget &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(filesystem.Unmounter, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err := os.OpenFile(nsTarget, syscall.O_RDONLY|syscall.O_CREAT|syscall.O_EXCL, &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;unable to create target file&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// store current network namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	file, err = os.OpenFile(&lt;span class=&quot;string&quot;&gt;&quot;/proc/self/ns/net&quot;&lt;/span&gt;, os.O_RDONLY, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := syscall.Unshare(syscall.CLONE_NEWNET); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;unshare syscall failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mountPoint := filesystem.MountOption&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Source: &lt;span class=&quot;string&quot;&gt;&quot;/proc/self/ns/net&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Target: nsTarget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Type:   &lt;span class=&quot;string&quot;&gt;&quot;bind&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Flag:   syscall.MS_BIND,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unmount, err := filesystem.Mount(mountPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// reset previous network namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := unix.Setns(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(file.Fd()), syscall.CLONE_NEWNET); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;setns syscall failed: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在第 2 行，函数创建一个文件。此文件将用于绑定新的网络命名空间。然后在第 9 行，函数存储了当前的命名空间链接，以便能够返回到它。现在是时候创建一个新的网络命名空间，并在第 15 行使用 &lt;code&gt;unshare&lt;/code&gt; 系统调用连接它。该函数现在将 &lt;code&gt;/proc/self/ns/net&lt;/code&gt; 绑定到第 2 行创建的文件。记住，&lt;code&gt;/proc/self/ns/net&lt;/code&gt; 将在 &lt;code&gt;unshare&lt;/code&gt; 系统调用后改变。&lt;/p&gt;
&lt;p&gt;这一切都很好，我们只需要离开当前的网络命名空间，然后使用第 29 行的 &lt;code&gt;setns&lt;/code&gt; 系统调用返回到我们以前的命名空间。这就是为什么函数首先存储了进程网络名称空间（第 9 行）。&lt;/p&gt;
&lt;p&gt;回到 &lt;code&gt;SetupNetwork&lt;/code&gt; 函数，现在让我们将对等设备移动到我们刚刚在 &lt;code&gt;MountNewNetworkNamespace&lt;/code&gt; 函数中创建的命名空间。由于 &lt;code&gt;nsMountTarget&lt;/code&gt; 值绑定到网络名称空间，因此它表示命名空间本身。因此，我们可以使用该文件的描述符来指定命名空间。&lt;/p&gt;
&lt;p&gt;好吧，毕竟我们有一个虚拟以太网设备对，其中一个设备在主机网络命名空间内，另一个在新的命名空间内。&lt;/p&gt;
&lt;p&gt;现在剩下的唯一任务是在新命名空间内配置设备。问题是设备在主机网络命名空间中不再可见，因此，我们需要使用 &lt;code&gt;SetNetNsByFile&lt;/code&gt; 函数（第21行）再次加入网络命名空间。此函数仅使用给定文件的描述符调用 &lt;code&gt;setns&lt;/code&gt; 系统调用。注意，我们需要 &lt;code&gt;defer&lt;/code&gt; &lt;code&gt;unset&lt;/code&gt; 函数（第 25 行），以将容器网络命名空间保留在函数的末尾。&lt;/p&gt;
&lt;p&gt;现在，代码的其余部分（第 22-43 行）在容器网络命名空间内运行。首先要做的是将容器设备重命名为 eth0（第 29行），然后关联一个新的 IP 地址（第 32 行），设置设备（第 35 行），添加设备的网关（第 38 行），最后设置回环（127.0.0.1）网络接口。现在我们完成了这里的工作，我们的网络命名空间已经完全准备好了。&lt;/p&gt;
&lt;p&gt;还要提到 172.30.0.1 是 &lt;code&gt;vessel0&lt;/code&gt; 网桥的默认 IP 地址，这并不是最好的方法，因为这个 IP 地址可能已经在使用了。我这样做是为了简单。现在你的任务是让它变得更好，并发送一个 Pull 请求。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;我们了解到命名空间是 Linux 特性之一，它为一组进程隔离全局系统资源，因此它是大多数容器中的基本技术。我们还学习了如何在 Go 中使用 &lt;code&gt;unshare&lt;/code&gt;、&lt;code&gt;clone&lt;/code&gt; 和 &lt;code&gt;setns&lt;/code&gt; 系统调用与命名空间进行交互。&lt;/p&gt;
&lt;p&gt;它还没有完成。我们将在下一部分中讨论 union 文件系统，但是现在让我们试着阅读容器代码来理解它。&lt;/p&gt;
&lt;p&gt;另外，别忘了用谷歌搜索 “Liz Rice”，看她谈论容器。&lt;/p&gt;
&lt;p&gt;感谢阅读！&lt;/p&gt;
&lt;p&gt;作者：Ali Josie 来源：medium.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在过去几年中，容器的使用显著增加。容器的概念已经出现好几年了，但是 Docker 易于使用的命令行才从 2013 年开始在开发人员中普及容器。&lt;/p&gt;
&lt;p&gt;在这个系列中，我试图演示容器是如何在下面工作的，以及我是如何开发容器的。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="容器" scheme="http://team.jiunile.com/categories/golang/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="container" scheme="http://team.jiunile.com/tags/container/"/>
    
      <category term="namespace" scheme="http://team.jiunile.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 网络模型来龙去脉</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-network-source.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-network-source.html</id>
    <published>2020-11-11T14:00:00.000Z</published>
    <updated>2020-11-11T03:09:30.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/network_1.jpg&quot; alt=&quot;network&quot;&gt;&lt;br&gt;容器网络发端于 &lt;code&gt;Docker&lt;/code&gt; 的网络。&lt;code&gt;Docker&lt;/code&gt; 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。这种设计的好处在于容器的网络和外部世界是解耦的，无需占用宿主机的 IP 或者宿主机的资源，完全是虚拟的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;它的设计初衷是：当需要访问外部世界时，会采用 &lt;code&gt;SNAT&lt;/code&gt; 这种方法来借用 Node 的 IP 去访问外面的服务。比如容器需要对外提供服务的时候，所用的是 &lt;code&gt;DNAT&lt;/code&gt; 技术，也就是在 Node 上开一个端口，然后通过 &lt;code&gt;iptable&lt;/code&gt; 或者别的某些机制，把流导入到容器的进程上以达到目的。&lt;/p&gt;
&lt;p&gt;该模型的问题在于，外部网络无法区分哪些是容器的网络与流量、哪些是宿主机的网络与流量。比如，如果要做一个高可用的时候，172.16.1.1 和 172.16.1.2 是拥有同样功能的两个容器，此时我们需要将两者绑成一个 Group 对外提供服务，而这个时候我们发现从外部看来两者没有相同之处，它们的 IP 都是借用宿主机的端口，因此很难将两者归拢到一起。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_2.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此基础上，&lt;code&gt;Kubernetes&lt;/code&gt; 提出了这样一种机制：即每一个 Pod，也就是一个功能聚集小团伙应有自己的“身份证”，或者说 ID。在 TCP 协议栈上，这个 ID 就是 IP。&lt;/p&gt;
&lt;p&gt;这个 IP 是真正属于该 Pod 的，外部世界不管通过什么方法一定要给它。对这个 Pod IP 的访问就是真正对它的服务的访问，中间拒绝任何的变化。比如以 10.1.1.1 的 IP 去访问 10.1.2.1 的 Pod，结果到了 10.1.2.1 上发现，它实际上借用的是宿主机的 IP，而不是源 IP，这样是不被允许的。Pod 内部会要求共享这个 IP，从而解决了一些功能内聚的容器如何变成一个部署的原子的问题。&lt;/p&gt;
&lt;p&gt;剩下的问题是我们的部署手段。&lt;code&gt;Kubernetes&lt;/code&gt; 对怎么实现这个模型其实是没有什么限制的，用 &lt;code&gt;underlay&lt;/code&gt; 网络来控制外部路由器进行导流是可以的；如果希望解耦，用 &lt;code&gt;overlay&lt;/code&gt; 网络在底层网络之上再加一层叠加网，这样也是可以的。总之，只要达到模型所要求的目的即可。&lt;/p&gt;
&lt;h2 id=&quot;Pod-究竟如何上网&quot;&gt;&lt;a href=&quot;#Pod-究竟如何上网&quot; class=&quot;headerlink&quot; title=&quot;Pod 究竟如何上网&quot;&gt;&lt;/a&gt;Pod 究竟如何上网&lt;/h2&gt;&lt;p&gt;容器网络的网络包究竟是怎么传送的？&lt;br&gt;&lt;img src=&quot;/images/k8s/network_3.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以从以下两个维度来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议层次&lt;/li&gt;
&lt;li&gt;网络拓扑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-1-协议层次&quot;&gt;&lt;a href=&quot;#2-1-协议层次&quot; class=&quot;headerlink&quot; title=&quot;2.1 协议层次&quot;&gt;&lt;/a&gt;2.1 协议层次&lt;/h3&gt;&lt;p&gt;它和 TCP 协议栈的概念是相同的，需要从两层、三层、四层一层层地摞上去，发包的时候从右往左，即先有应用数据，然后发到了 TCP 或者 UDP 的四层协议，继续向下传送，加上 IP 头，再加上 MAC 头就可以送出去了。收包的时候则按照相反的顺序，首先剥离 MAC 的头，再剥离 IP 的头，最后通过协议号在端口找到需要接收的进程。&lt;/p&gt;
&lt;h3 id=&quot;2-2-网络拓扑&quot;&gt;&lt;a href=&quot;#2-2-网络拓扑&quot; class=&quot;headerlink&quot; title=&quot;2.2 网络拓扑&quot;&gt;&lt;/a&gt;2.2 网络拓扑&lt;/h3&gt;&lt;p&gt;一个容器的包所要解决的问题分为两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，如何从容器的空间 (c1) 跳到宿主机的空间 (infra)；&lt;/li&gt;
&lt;li&gt;第二步，如何从宿主机空间到达远端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我个人的理解是，容器网络的方案可以通过接入、流控、通道这三个层面来考虑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个是接入，就是说我们的容器和宿主机之间是使用哪一种机制做连接，比如 &lt;code&gt;Veth + bridge&lt;/code&gt;、&lt;code&gt;Veth + pair&lt;/code&gt; 这样的经典方式，也有利用高版本内核的新机制等其他方式（如 mac/IPvlan 等），来把包送入到宿主机空间；&lt;/li&gt;
&lt;li&gt;第二个是流控，就是说我的这个方案要不要支持 &lt;code&gt;Network Policy&lt;/code&gt;，如果支持的话又要用何种方式去实现。这里需要注意的是，我们的实现方式一定需要在数据路径必经的一个关节点上。如果数据路径不通过该 Hook 点，那就不会起作用；&lt;/li&gt;
&lt;li&gt;第三个是通道，即两个主机之间通过什么方式完成包的传输。我们有很多种方式，比如以路由的方式，具体又可分为 BGP 路由或者直接路由。还有各种各样的隧道技术等等。最终我们实现的目的就是一个容器内的包通过容器，经过接入层传到宿主机，再穿越宿主机的流控模块（如果有）到达通道送到对端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-3-一个最简单的路由方案：Flannel-host-gw&quot;&gt;&lt;a href=&quot;#2-3-一个最简单的路由方案：Flannel-host-gw&quot; class=&quot;headerlink&quot; title=&quot;2.3 一个最简单的路由方案：Flannel-host-gw&quot;&gt;&lt;/a&gt;2.3 一个最简单的路由方案：Flannel-host-gw&lt;/h3&gt;&lt;p&gt;这个方案采用的是每个 Node 独占网段，每个 Subnet 会绑定在一个 Node 上，网关也设置在本地，或者说直接设在 cni0 这个网桥的内部端口上。该方案的好处是管理简单，坏处就是无法跨 Node 迁移 Pod。就是说这个 IP、网段已经是属于这个 Node 之后就无法迁移到别的 Node 上。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_4.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个方案的精髓在于 route 表的设置，如上图所示。接下来为大家一一解读一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条很简单，我们在设置网卡的时候都会加上这一行。就是指定我的默认路由是通过哪个 IP 走掉，默认设备又是什么；&lt;/li&gt;
&lt;li&gt;第二条是对 Subnet 的一个规则反馈。就是说我的这个网段是 10.244.0.0，掩码是 24 位，它的网关地址就在网桥上，也就是 10.244.0.1。这就是说这个网段的每一个包都发到这个网桥的 IP 上；&lt;/li&gt;
&lt;li&gt;第三条是对对端的一个反馈。如果你的网段是 10.244.1.0（上图右边的 Subnet），我们就把它的 Host 的网卡上的 IP (10.168.0.3) 作为网关。也就是说，如果数据包是往 10.244.1.0 这个网段发的，就请以 10.168.0.3 作为网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再来看一下这个数据包到底是如何跑起来的？&lt;/p&gt;
&lt;p&gt;假设容器 (10.244.0.2) 想要发一个包给 10.244.1.3，那么它在本地产生了 TCP 或者 UDP 包之后，再依次填好对端 IP 地址、本地以太网的 MAC 地址作为源 MAC 以及对端 MAC。一般来说本地会设定一条默认路由，默认路由会把 cni0 上的 IP 作为它的默认网关，对端的 MAC 就是这个网关的 MAC 地址。然后这个包就可以发到桥上去了。如果网段在本桥上，那么通过 MAC 层的交换即可解决。&lt;/p&gt;
&lt;p&gt;这个例子中我们的 IP 并不属于本网段，因此网桥会将其上送到主机的协议栈去处理。主机协议栈恰好找到了对端的 MAC 地址。使用 10.168.0.3 作为它的网关，通过本地 ARP 探查后，我们得到了 10.168.0.3 的 MAC 地址。即通过协议栈层层组装，我们达到了目的，将 Dst-MAC 填为右图主机网卡的 MAC 地址，从而将包从主机的 eth0 发到对端的 eth0 上去。&lt;/p&gt;
&lt;p&gt;所以大家可以发现，这里有一个隐含的限制，上图中的 MAC 地址填好之后一定是能到达对端的，但如果这两个宿主机之间不是二层连接的，中间经过了一些网关、一些复杂的路由，那么这个 MAC 就不能直达，这种方案就是不能用的。当包到达了对端的 MAC 地址之后，发现这个包确实是给它的，但是 IP 又不是它自己的，就开始 Forward 流程，包上送到协议栈，之后再走一遍路由，刚好会发现 10.244.1.0/24 需要发到 10.244.1.1 这个网关上，从而到达了 cni0 网桥，它会找到 10.244.1.3 对应的 MAC 地址，再通过桥接机制，这个包就到达了对端容器。&lt;/p&gt;
&lt;p&gt;大家可以看到，整个过程总是二层、三层，发的时候又变成二层，再做路由，就是一个大环套小环。这是一个比较简单的方案，如果中间要走隧道，则可能会有一条 &lt;code&gt;vxlan tunnel&lt;/code&gt; 的设备，此时就不填直接的路由，而填成对端的隧道号。&lt;/p&gt;
&lt;h2 id=&quot;Service-究竟如何工作&quot;&gt;&lt;a href=&quot;#Service-究竟如何工作&quot; class=&quot;headerlink&quot; title=&quot;Service 究竟如何工作&quot;&gt;&lt;/a&gt;Service 究竟如何工作&lt;/h2&gt;&lt;p&gt;Service 其实是一种负载均衡 (Load Balance) 的机制。&lt;/p&gt;
&lt;p&gt;我们认为它是一种用户侧(Client Side) 的负载均衡，也就是说 VIP 到 RIP 的转换在用户侧就已经完成了，并不需要集中式地到达某一个 NGINX 或者是一个 ELB 这样的组件来进行决策。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_5.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;它的实现是这样的：首先是由一群 Pod 组成一组功能后端，再在前端上定义一个虚 IP 作为访问入口。一般来说，由于 IP 不太好记，我们还会附赠一个 DNS 的域名，Client 先访问域名得到虚 IP 之后再转成实 IP。&lt;code&gt;Kube-proxy&lt;/code&gt;则是整个机制的实现核心，它隐藏了大量的复杂性。它的工作机制是通过 &lt;code&gt;apiserver&lt;/code&gt; 监控 Pod/Service 的变化（比如是不是新增了 Service、Pod）并将其反馈到本地的规则或者是用户态进程。&lt;/p&gt;
&lt;h2 id=&quot;一个-LVS-版的-Service&quot;&gt;&lt;a href=&quot;#一个-LVS-版的-Service&quot; class=&quot;headerlink&quot; title=&quot;一个 LVS 版的 Service&quot;&gt;&lt;/a&gt;一个 LVS 版的 Service&lt;/h2&gt;&lt;p&gt;我们来实际做一个 LVS 版的 Service。LVS 是一个专门用于负载均衡的内核机制。它工作在第四层，性能会比用 &lt;code&gt;iptable&lt;/code&gt; 实现好一些。&lt;/p&gt;
&lt;p&gt;假设我们是一个 &lt;code&gt;Kube-proxy&lt;/code&gt;，拿到了一个 Service 的配置，如下图所示：它有一个 &lt;code&gt;Cluster IP&lt;/code&gt;，在该 IP 上的端口是 9376，需要反馈到容器上的是 80 端口，还有三个可工作的 Pod，它们的 IP 分别是 10.1.2.3, 10.1.14.5, 10.1.3.8。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_6.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;它要做的事情就是：&lt;br&gt;&lt;img src=&quot;/images/k8s/network_7.png&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 步，绑定 VIP 到本地（欺骗内核）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先需要让内核相信它拥有这样的一个虚 IP，这是 LVS 的工作机制所决定的，因为它工作在第四层，并不关心 IP 转发，只有它认为这个 IP 是自己的才会拆到 TCP 或 UDP 这一层。在第一步中，我们将该 IP 设到内核中，告诉内核它确实有这么一个 IP。实现的方法有很多，我们这里用的是 ip route 直接加 local 的方式，用 Dummy 设备上加 IP 的方式也是可以的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 2 步，为这个虚 IP 创建一个 IPVS 的 &lt;code&gt;virtual server&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;告诉它我需要为这个 IP 进行负载均衡分发，后面的参数就是一些分发策略等等。&lt;code&gt;virtual server&lt;/code&gt; 的 IP 其实就是我们的 &lt;code&gt;Cluster IP&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 3 步，为这个 &lt;code&gt;IPVS service&lt;/code&gt; 创建相应的 &lt;code&gt;real server&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要为 &lt;code&gt;virtual server&lt;/code&gt; 配置相应的 &lt;code&gt;real server&lt;/code&gt;，就是真正提供服务的后端是什么。比如说我们刚才看到有三个 Pod，于是就把这三个的 IP 配到 &lt;code&gt;virtual server&lt;/code&gt; 上，完全一一对应过来就可以了。&lt;code&gt;Kube-proxy&lt;/code&gt; 工作跟这个也是类似的。只是它还需要去监控一些 Pod 的变化，比如 Pod 的数量变成 5 个了，那么规则就应变成 5 条。如果这里面某一个 Pod 死掉了或者被杀死了，那么就要相应地减掉一条。又或者整个 Service 被撤销了，那么这些规则就要全部删掉。所以它其实做的是一些管理层面的工作。&lt;/p&gt;
&lt;h2 id=&quot;啥？负载均衡还分内部外部&quot;&gt;&lt;a href=&quot;#啥？负载均衡还分内部外部&quot; class=&quot;headerlink&quot; title=&quot;啥？负载均衡还分内部外部&quot;&gt;&lt;/a&gt;啥？负载均衡还分内部外部&lt;/h2&gt;&lt;p&gt;最后我们介绍一下 Service 的类型，可以分为以下 4 类。&lt;/p&gt;
&lt;h3 id=&quot;5-1-ClusterIP&quot;&gt;&lt;a href=&quot;#5-1-ClusterIP&quot; class=&quot;headerlink&quot; title=&quot;5.1 ClusterIP&quot;&gt;&lt;/a&gt;5.1 ClusterIP&lt;/h3&gt;&lt;p&gt;集群内部的一个虚拟 IP，这个 IP 会绑定到一堆服务的 Group Pod 上面，这也是默认的服务方式。它的缺点是这种方式只能在 Node 内部也就是集群内部使用。&lt;/p&gt;
&lt;h3 id=&quot;5-2-NodePort&quot;&gt;&lt;a href=&quot;#5-2-NodePort&quot; class=&quot;headerlink&quot; title=&quot;5.2 NodePort&quot;&gt;&lt;/a&gt;5.2 NodePort&lt;/h3&gt;&lt;p&gt;供集群外部调用。将 Service 承载在 Node 的静态端口上，端口号和 Service 一一对应，那么集群外的用户就可以通过 &lt;code&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt; 的方式调用到 Service。&lt;/p&gt;
&lt;h3 id=&quot;5-3-LoadBalancer&quot;&gt;&lt;a href=&quot;#5-3-LoadBalancer&quot; class=&quot;headerlink&quot; title=&quot;5.3 LoadBalancer&quot;&gt;&lt;/a&gt;5.3 LoadBalancer&lt;/h3&gt;&lt;p&gt;给云厂商的扩展接口。像阿里云、亚马逊这样的云厂商都是有成熟的 LB 机制的，这些机制可能是由一个很大的集群实现的，为了不浪费这种能力，云厂商可通过这个接口进行扩展。它首先会自动创建 NodePort 和 ClusterIP 这两种机制，云厂商可以选择直接将 LB 挂到这两种机制上，或者两种都不用，直接把 Pod 的 RIP 挂到云厂商的 ELB 的后端也是可以的。&lt;/p&gt;
&lt;h3 id=&quot;5-4-ExternalName&quot;&gt;&lt;a href=&quot;#5-4-ExternalName&quot; class=&quot;headerlink&quot; title=&quot;5.4 ExternalName&quot;&gt;&lt;/a&gt;5.4 ExternalName&lt;/h3&gt;&lt;p&gt;摈弃内部机制，依赖外部设施，比如某个用户特别强，他觉得我们提供的都没什么用，就是要自己实现，此时一个 Service 会和一个域名一一对应起来，整个负载均衡的工作都是外部实现的。&lt;/p&gt;
&lt;p&gt;下图是一个实例。它灵活地应用了 ClusterIP、NodePort 等多种服务方式，又结合了云厂商的 ELB，变成了一个很灵活、极度伸缩、生产上真正可用的一套系统。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_8.png&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先我们用 ClusterIP 来做功能 Pod 的服务入口。大家可以看到，如果有三种 Pod 的话，就有三个 &lt;code&gt;Service Cluster IP&lt;/code&gt; 作为它们的服务入口。这些方式都是 Client 端的，如何在 Server 端做一些控制呢？&lt;/p&gt;
&lt;p&gt;首先会起一些 Ingress 的 Pod（Ingress 是 K8s 后来新增的一种服务，本质上还是一堆同质的 Pod），然后将这些 Pod 组织起来，暴露到一个 NodePort 的 IP，K8s 的工作到此就结束了。&lt;/p&gt;
&lt;p&gt;任何一个用户访问 23456 端口的 Pod 就会访问到 Ingress 的服务，它的后面有一个 Controller，会把 Service IP 和 Ingress 的后端进行管理，最后会调到 ClusterIP，再调到我们的功能 Pod。前面提到我们去对接云厂商的 ELB，我们可以让 ELB 去监听所有集群节点上的 23456 端口，只要在 23456 端口上有服务的，就认为有一个 Ingress 的实例在跑。&lt;/p&gt;
&lt;p&gt;整个的流量经过外部域名的一个解析跟分流到达了云厂商的 ELB，ELB 经过负载均衡并通过 NodePort 的方式到达 Ingress，Ingress 再通过 ClusterIP 调用到后台真正的 Pod。这种系统看起来比较丰富，健壮性也比较好。任何一个环节都不存在单点的问题，任何一个环节也都有管理与反馈。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文的主要内容就到此为止了，这里为大家简单总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大家要从根本上理解 Kubernetes 网络模型的演化来历，理解 PerPodPerIP 的用心在哪里；&lt;/li&gt;
&lt;li&gt;网络的事情万变不离其宗，按照模型从 4 层向下就是发包过程，反正层层剥离就是收包过程，容器网络也是如此；&lt;/li&gt;
&lt;li&gt;Ingress 等机制是在更高的层次上（服务&amp;lt;-&amp;gt;端口）方便大家部署集群对外服务，通过一个真正可用的部署实例，希望大家把 &lt;code&gt;Ingress + Cluster IP + PodIP&lt;/code&gt; 等概念联合来看，理解社区出台新机制、新资源对象的思考。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者：叶磊 来源：阿里巴巴云原生&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/network_1.jpg&quot; alt=&quot;network&quot;&gt;&lt;br&gt;容器网络发端于 &lt;code&gt;Docker&lt;/code&gt; 的网络。&lt;code&gt;Docker&lt;/code&gt; 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。这种设计的好处在于容器的网络和外部世界是解耦的，无需占用宿主机的 IP 或者宿主机的资源，完全是虚拟的。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/categories/kubernetes/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 网络插件在超过 10Gbit/s 下的基准测试结果</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-cni-benchmark.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-cni-benchmark.html</id>
    <published>2020-11-11T12:00:00.000Z</published>
    <updated>2020-11-10T06:26:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在运行 Kubernetes 1.19 和 Ubuntu 18.04 上进行基准测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在我们深入讨论度量之前&lt;/li&gt;
&lt;li&gt;CNI 经过 MTU 调优&lt;/li&gt;
&lt;li&gt;CNI 基准:原始数据&lt;/li&gt;
&lt;li&gt;CNI 加密&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;结论-我的结论&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-在我们深入讨论度量标准之前…&quot;&gt;&lt;a href=&quot;#1-在我们深入讨论度量标准之前…&quot; class=&quot;headerlink&quot; title=&quot;1 在我们深入讨论度量标准之前…&quot;&gt;&lt;/a&gt;1 在我们深入讨论度量标准之前…&lt;/h2&gt;&lt;h3 id=&quot;1-1-自2019年4月以来有什么新鲜事吗&quot;&gt;&lt;a href=&quot;#1-1-自2019年4月以来有什么新鲜事吗&quot; class=&quot;headerlink&quot; title=&quot;1.1 自2019年4月以来有什么新鲜事吗?&quot;&gt;&lt;/a&gt;1.1 自2019年4月以来有什么新鲜事吗?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试您自己的群集&lt;/strong&gt;：现在您可以使用我们发布的“Kubernetes网络基准测试”工具：knb (&lt;a href=&quot;https://github.com/InfraBuilder/k8s-bench-suite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/InfraBuilder/k8s-bench-suite&lt;/a&gt;)在自己的集群上运行基准测试。&lt;/li&gt;
&lt;li&gt;在CNI 竞争中欢迎新的挑战者:&lt;ul&gt;
&lt;li&gt;来自 VMware Tanzu 的 “&lt;a href=&quot;https://antrea.io/docs/master/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Antrea&lt;/a&gt;”&lt;/li&gt;
&lt;li&gt;来自 alauda.io 的 “&lt;a href=&quot;https://github.com/alauda/kube-ovn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kube-OVN&lt;/a&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新场景&lt;/strong&gt;：这个基准测试涵盖了 “Pod-to-Pod” 的网络性能，还包括一个新的 “Pod-to-Service” 场景，该方案涉及真实的测试案例。实际上，您的 API 容器将通过服务而不是容器 IP 消耗服务中的数据库（当然，我们对这两种场景也会测试 TCP 和 UDP）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：现在每个测试都有自己的资源比较。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除应用程序测试&lt;/strong&gt;：我们不再运行 HTTP、FTP 和 SCP 测试。我们与社区和 CNI 维护者卓有成效的合作突显了 iperf TCP 结果和 curl 结果之间的差距，这是由于 CNI 启动的延迟(Pod 启动时的最初几秒钟，与实际用例无关)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开源&lt;/strong&gt;：所有基准测试的源代码（脚本、cni yml 和原始结果）都可以在 github 上获得：&lt;a href=&quot;https://github.com/icyxp/benchmark-k8s-cni-2020-08&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/benchmark-k8s-cni-2020-08&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-基准协议&quot;&gt;&lt;a href=&quot;#1-2-基准协议&quot; class=&quot;headerlink&quot; title=&quot;1.2 基准协议&quot;&gt;&lt;/a&gt;1.2 基准协议&lt;/h3&gt;&lt;p&gt;整个协议详见：&lt;a href=&quot;https://github.com/icyxp/benchmark-k8s-cni-2020-08/blob/master/PROTOCOL.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/benchmark-k8s-cni-2020-08/blob/master/PROTOCOL.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请注意，当前的文章只关注 Ubuntu 18.04 的默认内核。&lt;/p&gt;
&lt;h3 id=&quot;1-3-选择-CNIs-做基准测试&quot;&gt;&lt;a href=&quot;#1-3-选择-CNIs-做基准测试&quot; class=&quot;headerlink&quot; title=&quot;1.3 选择 CNIs 做基准测试&quot;&gt;&lt;/a&gt;1.3 选择 CNIs 做基准测试&lt;/h3&gt;&lt;p&gt;这个基准测试旨在比较可以用单个 yaml 文件设置的 CNIs（因此排除所有基于脚本的安装，如基于 VPP 的 CNIs 等）。&lt;/p&gt;
&lt;p&gt;我们将比较的 CNIs 列表如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Antrea&lt;/code&gt; v.0.9.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Calico&lt;/code&gt; v3.16&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Canal&lt;/code&gt; v3.16 (Flannel network + Calico Network Policies)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cilium&lt;/code&gt; 1.8.2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flannel&lt;/code&gt; 0.12.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kube-router&lt;/code&gt; latest (2020–08–25)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeaveNet&lt;/code&gt; 2.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-CNI-MTU-调优&quot;&gt;&lt;a href=&quot;#2-CNI-MTU-调优&quot; class=&quot;headerlink&quot; title=&quot;2 CNI MTU 调优&quot;&gt;&lt;/a&gt;2 CNI MTU 调优&lt;/h2&gt;&lt;p&gt;首先，我们将检查 &lt;code&gt;MTU detection&lt;/code&gt; 对 TCP 性能的影响：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_1.png&quot; alt=&quot;MTU impact on TCP performance&quot;&gt;&lt;/p&gt;
&lt;p&gt;UDP 的缺点更加明显：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_2.png&quot; alt=&quot;MTU Impact on UDP performance&quot;&gt;&lt;/p&gt;
&lt;p&gt;考虑到这里所揭示的对性能的巨大影响，我们希望向所有 CNI 维护者传达一个希望的消息：请在CNIs 中实现 &lt;code&gt;MTU auto-detection&lt;/code&gt;。你将会拯救小猫，独角兽，甚至是最可爱的一个:  devops 小家伙！&lt;/p&gt;
&lt;p&gt;然而，如果您确实必须选择一个没有实现 &lt;code&gt;auto-MTU&lt;/code&gt; 的 CNI，那么您需要自己对它进行调优以保持性能。请注意，这适用于 &lt;code&gt;Calico&lt;/code&gt;，&lt;code&gt;Canal&lt;/code&gt; 和 &lt;code&gt;Weavenet&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_3.png&quot; alt=&quot;My little message to CNI maintainers ….&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-CNI基准：原始数据&quot;&gt;&lt;a href=&quot;#3-CNI基准：原始数据&quot; class=&quot;headerlink&quot; title=&quot;3 CNI基准：原始数据&quot;&gt;&lt;/a&gt;3 CNI基准：原始数据&lt;/h2&gt;&lt;p&gt;在本节中，我们将比较 CNI 和正确的 MTU（&lt;code&gt;auto-detected&lt;/code&gt; 或手动调优）。这里的主要目标是在图表中显示原始数据。&lt;/p&gt;
&lt;p&gt;颜色代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灰色 : 参考 (裸机)&lt;/li&gt;
&lt;li&gt;绿色 : 带宽 &amp;gt; 9500 Mbit/s&lt;/li&gt;
&lt;li&gt;黄色 : 带宽 &amp;gt; 9000 Mbit/s&lt;/li&gt;
&lt;li&gt;橙色 : 带宽 &amp;gt; 8000 Mbit/s&lt;/li&gt;
&lt;li&gt;红色 : 带宽 &amp;lt; 8000 Mbit/s&lt;/li&gt;
&lt;li&gt;蓝色 : 中性 (与带宽无关)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-1-Idle&quot;&gt;&lt;a href=&quot;#3-1-Idle&quot; class=&quot;headerlink&quot; title=&quot;3.1 Idle&quot;&gt;&lt;/a&gt;3.1 Idle&lt;/h3&gt;&lt;p&gt;首先要建立 CNI 消耗，当整个集群….像是在休眠？&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_4.png&quot; alt=&quot;Idle resource consumption&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-Pod-to-Pod&quot;&gt;&lt;a href=&quot;#3-2-Pod-to-Pod&quot; class=&quot;headerlink&quot; title=&quot;3.2 Pod-to-Pod&quot;&gt;&lt;/a&gt;3.2 Pod-to-Pod&lt;/h3&gt;&lt;p&gt;在这个场景中，客户端 Pod 直接连接到服务器 Pod 的 IP 地址。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_5.png&quot; alt=&quot;Pod-to-Pod scenario&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-1-TCP&quot;&gt;&lt;a href=&quot;#3-2-1-TCP&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 TCP&quot;&gt;&lt;/a&gt;3.2.1 TCP&lt;/h4&gt;&lt;p&gt;“&lt;strong&gt;Pod-to-Pod&lt;/strong&gt;” &lt;strong&gt;TCP&lt;/strong&gt; 相关资源消耗结果如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_6.png&quot; alt=&quot;pod-to-pod tcp&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_7.png&quot; alt=&quot;pod-to-pod tcp&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-2-UDP&quot;&gt;&lt;a href=&quot;#3-2-2-UDP&quot; class=&quot;headerlink&quot; title=&quot;3.2.2 UDP&quot;&gt;&lt;/a&gt;3.2.2 UDP&lt;/h4&gt;&lt;p&gt;“&lt;strong&gt;Pod-to-Pod&lt;/strong&gt;” &lt;strong&gt;UDP&lt;/strong&gt; 相关资源消耗结果如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_8.png&quot; alt=&quot;pod-to-pod udp&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_9.png&quot; alt=&quot;pod-to-pod udp&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-3-Pod-to-Service&quot;&gt;&lt;a href=&quot;#3-3-Pod-to-Service&quot; class=&quot;headerlink&quot; title=&quot;3.3 Pod-to-Service&quot;&gt;&lt;/a&gt;3.3 Pod-to-Service&lt;/h3&gt;&lt;p&gt;在本节中，客户端 Pod 通过 &lt;code&gt;ClusterIP Service&lt;/code&gt; 连接到服务端 Pod。这与实际的用例更相关。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_10.png&quot; alt=&quot;Pod-to-Service scenario&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-3-1-TCP&quot;&gt;&lt;a href=&quot;#3-3-1-TCP&quot; class=&quot;headerlink&quot; title=&quot;3.3.1 TCP&quot;&gt;&lt;/a&gt;3.3.1 TCP&lt;/h4&gt;&lt;p&gt;“&lt;strong&gt;Pod-to-Service&lt;/strong&gt;” &lt;strong&gt;TCP&lt;/strong&gt; 相关资源消耗结果如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_11.png&quot; alt=&quot;pod-to-service tcp&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_12.png&quot; alt=&quot;pod-to-service tcp&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-3-2-UDP&quot;&gt;&lt;a href=&quot;#3-3-2-UDP&quot; class=&quot;headerlink&quot; title=&quot;3.3.2 UDP&quot;&gt;&lt;/a&gt;3.3.2 UDP&lt;/h4&gt;&lt;p&gt;“&lt;strong&gt;Pod-to-Service&lt;/strong&gt;” &lt;strong&gt;UDP&lt;/strong&gt; 相关资源消耗结果如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_13.png&quot; alt=&quot;pod-to-service udp&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_14.png&quot; alt=&quot;pod-to-service udp&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-4-网络策略&quot;&gt;&lt;a href=&quot;#3-4-网络策略&quot; class=&quot;headerlink&quot; title=&quot;3.4 网络策略&quot;&gt;&lt;/a&gt;3.4 网络策略&lt;/h3&gt;&lt;p&gt;在此基准测试中所列出的所有 CNIs 中，唯一不完全支持网络策略的是 Flannel。所有其他的都正确地实现了网络策略，包括入口和出口。做得好!&lt;/p&gt;
&lt;h2 id=&quot;4-CNI-加密&quot;&gt;&lt;a href=&quot;#4-CNI-加密&quot; class=&quot;headerlink&quot; title=&quot;4 CNI 加密&quot;&gt;&lt;/a&gt;4 CNI 加密&lt;/h2&gt;&lt;p&gt;在我们测试的所有 CNIs 中，以下是能够加密 pod 间通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Antrea&lt;/code&gt; with IPsec&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Calico&lt;/code&gt; with wireguard&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cilium&lt;/code&gt; with IPsec&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeaveNet&lt;/code&gt; with IPsec&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-1-带宽&quot;&gt;&lt;a href=&quot;#4-1-带宽&quot; class=&quot;headerlink&quot; title=&quot;4.1 带宽&quot;&gt;&lt;/a&gt;4.1 带宽&lt;/h3&gt;&lt;p&gt;由于在这场对比中 CNIs 较少，因此让我们在一张图中概况所有场景：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_15.png&quot; alt=&quot;encryption&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-2-资源消耗&quot;&gt;&lt;a href=&quot;#4-2-资源消耗&quot; class=&quot;headerlink&quot; title=&quot;4.2 资源消耗&quot;&gt;&lt;/a&gt;4.2 资源消耗&lt;/h3&gt;&lt;p&gt;在本节中，我们将研究 Pod-to-Pod 通信所使用的资源，包括 TCP 和 UDP。在这里显示 Pod-to-Service 的图没有意义，因为它没有提供更多信息。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_16.png&quot; alt=&quot;encryption-tcp&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_17.png&quot; alt=&quot;encryption-udp&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-总结&quot;&gt;&lt;a href=&quot;#5-总结&quot; class=&quot;headerlink&quot; title=&quot;5 总结&quot;&gt;&lt;/a&gt;5 总结&lt;/h2&gt;&lt;p&gt;让我们尝试回顾一下这些图表。我们在这里引入了一点主观性，用修饰符替换了实际值，如“非常快”、“低”等。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni_18.png&quot; alt=&quot;Benchmark result summary (August 2020)&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-结论-我的结论&quot;&gt;&lt;a href=&quot;#6-结论-我的结论&quot; class=&quot;headerlink&quot; title=&quot;6 结论 - 我的结论&quot;&gt;&lt;/a&gt;6 结论 - 我的结论&lt;/h2&gt;&lt;p&gt;最后一部分是主观的，表达了我自己对结果的理解。&lt;/p&gt;
&lt;p&gt;我很高兴看到 CNI 的新成员加入进来。&lt;code&gt;Antrea&lt;/code&gt; 在游戏中表现得很好，它提供了许多特性，甚至在早期版本中也有：&lt;code&gt;auto-mtu&lt;/code&gt;、加密选项和直接安装。&lt;/p&gt;
&lt;p&gt;考虑到性能，除了 &lt;code&gt;Kube-OVN&lt;/code&gt; 和 &lt;code&gt;Kube-Router&lt;/code&gt; 之外，所有 CNIs 都表现的很好。关于 &lt;code&gt;Kube-Router&lt;/code&gt;，它无法检测到 MTU，而且我在文档中找不到调优它的方法（&lt;a href=&quot;https://github.com/cloudnativelabs/kube-router/issues/165&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;有一个关于 MTU 配置的 open issue）。&lt;/p&gt;
&lt;p&gt;在资源消耗方面，&lt;code&gt;Cilium&lt;/code&gt; 仍然比竞争对手使用更多的 RAM，但该公司公开目标是大规模集群，这与在这个 3 节点基准的情况不完全一样。&lt;code&gt;Kube-OVN&lt;/code&gt; 也是 RAM 和 cpu 密集型的，它仍然是一个相当年轻的 CNI，它依赖于 &lt;code&gt;Open vSwitch&lt;/code&gt; (&lt;code&gt;Antrea&lt;/code&gt; 也是，但 &lt;code&gt;Antrea&lt;/code&gt; 更轻，性能更好)。&lt;/p&gt;
&lt;p&gt;网络策略由所有测试的 CNIs 实现，&lt;code&gt;Flannel&lt;/code&gt; 除外。&lt;code&gt;Flannel&lt;/code&gt; 很可能永远不会（永远）实现它，因为他们的目的很明确：越轻越好。&lt;/p&gt;
&lt;p&gt;此外，加密性能在这里是真正的 “哇效果”。&lt;code&gt;Calico&lt;/code&gt; 是最古老的 CNIs 之一，但他们直到几周前才提供加密服务。他们更喜欢 &lt;code&gt;wireguard&lt;/code&gt; 而不是 &lt;code&gt;IPsec&lt;/code&gt;，而且至少可以说，它在这一领域的表现是伟大的，惊人的，完全优秀的对于其他 CNIs。当然，由于加密负载，它会消耗大量 CPU，但它们所实现的带宽是完全值得的（记住，&lt;code&gt;Calico encrypted perf&lt;/code&gt; 大约比&lt;code&gt;Cilium&lt;/code&gt; 好 6 倍，后者排名第二）。此外，在集群上部署 &lt;code&gt;Calico&lt;/code&gt; 之后，您还可以随时激活 &lt;code&gt;wireguard&lt;/code&gt; 加密，您也可以暂时禁用它，或者永远禁用它。这是难以置信的对于用户友好度。但是！我们提醒您，&lt;code&gt;Calico&lt;/code&gt; 目前还不能 &lt;code&gt;auto-detect MTU&lt;/code&gt;（该特性计划很快发布），因此，如果您的网络支持巨型帧（MTU 9000），请不要忘记调整 MTU。&lt;/p&gt;
&lt;p&gt;此外，请注意，&lt;code&gt;Cilium&lt;/code&gt; 能够加密整个节点到节点的通信（不仅仅是 pod 通信），这对于面向公共的集群节点来说可能是一个非常有吸引力的特性。&lt;/p&gt;
&lt;p&gt;总结一下，这是我对以下用例的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我需要一个 CNI 来容纳额外的小型节点集群，或者我不关心安全性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选用 &lt;code&gt;Flannel&lt;/code&gt;，这是最轻最稳定的 CNI。&lt;br&gt;(它也是最古老的之一。根据传说，它是由 Homo-Kubernautus 或 Homo-Containorus 发明的。您可能会对精彩的 &lt;a href=&quot;https://k3s.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;k3s&lt;/a&gt; 项目感兴趣！点击这里查看详情！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我的标准群集需要一个 CNI&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好的，&lt;code&gt;Calico&lt;/code&gt; 是你的选择，如果有必要的话，不要忘记调整 MTU。您可以使用网络策略，轻松启用/禁用加密，等等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我的（非常）大型集群需要一个 CNI&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好吧，该基准测试无法反映大型集群的行为。我很乐意为此工作，但是我们没有数百台具有 10Gbit/s 连接性的服务器。因此，最好的选择是至少使用 &lt;code&gt;Calico&lt;/code&gt; 和 &lt;code&gt;Cilium&lt;/code&gt; 在您的节点上运行自定义的基准测试。&lt;/p&gt;
&lt;p&gt;感谢阅读！&lt;/p&gt;
&lt;p&gt;作者：Alexis Ducastel 来源：medium.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在运行 Kubernetes 1.19 和 Ubuntu 18.04 上进行基准测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在我们深入讨论度量之前&lt;/li&gt;
&lt;li&gt;CNI 经过 MTU 调优&lt;/li&gt;
&lt;li&gt;CNI 基准:原始数据&lt;/li&gt;
&lt;li&gt;CNI 加密&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;结论-我的结论&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-在我们深入讨论度量标准之前…&quot;&gt;&lt;a href=&quot;#1-在我们深入讨论度量标准之前…&quot; class=&quot;headerlink&quot; title=&quot;1 在我们深入讨论度量标准之前…&quot;&gt;&lt;/a&gt;1 在我们深入讨论度量标准之前…&lt;/h2&gt;&lt;h3 id=&quot;1-1-自2019年4月以来有什么新鲜事吗&quot;&gt;&lt;a href=&quot;#1-1-自2019年4月以来有什么新鲜事吗&quot; class=&quot;headerlink&quot; title=&quot;1.1 自2019年4月以来有什么新鲜事吗?&quot;&gt;&lt;/a&gt;1.1 自2019年4月以来有什么新鲜事吗?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;测试您自己的群集&lt;/strong&gt;：现在您可以使用我们发布的“Kubernetes网络基准测试”工具：knb (&lt;a href=&quot;https://github.com/InfraBuilder/k8s-bench-suite&quot;&gt;https://github.com/InfraBuilder/k8s-bench-suite&lt;/a&gt;)在自己的集群上运行基准测试。&lt;/li&gt;
&lt;li&gt;在CNI 竞争中欢迎新的挑战者:&lt;ul&gt;
&lt;li&gt;来自 VMware Tanzu 的 “&lt;a href=&quot;https://antrea.io/docs/master/getting-started/&quot;&gt;Antrea&lt;/a&gt;”&lt;/li&gt;
&lt;li&gt;来自 alauda.io 的 “&lt;a href=&quot;https://github.com/alauda/kube-ovn&quot;&gt;Kube-OVN&lt;/a&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新场景&lt;/strong&gt;：这个基准测试涵盖了 “Pod-to-Pod” 的网络性能，还包括一个新的 “Pod-to-Service” 场景，该方案涉及真实的测试案例。实际上，您的 API 容器将通过服务而不是容器 IP 消耗服务中的数据库（当然，我们对这两种场景也会测试 TCP 和 UDP）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源消耗&lt;/strong&gt;：现在每个测试都有自己的资源比较。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除应用程序测试&lt;/strong&gt;：我们不再运行 HTTP、FTP 和 SCP 测试。我们与社区和 CNI 维护者卓有成效的合作突显了 iperf TCP 结果和 curl 结果之间的差距，这是由于 CNI 启动的延迟(Pod 启动时的最初几秒钟，与实际用例无关)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开源&lt;/strong&gt;：所有基准测试的源代码（脚本、cni yml 和原始结果）都可以在 github 上获得：&lt;a href=&quot;https://github.com/icyxp/benchmark-k8s-cni-2020-08&quot;&gt;https://github.com/icyxp/benchmark-k8s-cni-2020-08&lt;/a&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="基准测试" scheme="http://team.jiunile.com/categories/kubernetes/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/categories/kubernetes/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="cni" scheme="http://team.jiunile.com/tags/cni/"/>
    
      <category term="测试" scheme="http://team.jiunile.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx proxy_pass 配置域名引发的故障</title>
    <link href="http://team.jiunile.com//blog/2020/11/nginx-proxy-pass-domain.html"/>
    <id>http://team.jiunile.com//blog/2020/11/nginx-proxy-pass-domain.html</id>
    <published>2020-11-10T12:00:00.000Z</published>
    <updated>2020-11-09T08:10:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;p&gt;业务场景：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用户 ----&amp;gt; waf ----&amp;gt; 后端服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;waf&lt;/code&gt; 是采用 Nginx 做的二次开发，做了一些安全验证后将请求转发到后端服务，通过 nginx &lt;code&gt;proxy_pass&lt;/code&gt; 转发。 &lt;code&gt;proxy_pass&lt;/code&gt; 后面直接配置的是域名（如：xxxxx-1760550967.cn-northwest-1.elb.amazonaws.com.cn ）&lt;/p&gt;
&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;有部分用户开始反馈访问站点出错 &lt;code&gt;504 Gateway Time-out&lt;/code&gt;, 通过监控查到有部分请求打了一个下线的 IP 上。这里简单简述下故障场景：使用nginx做反向代理，将请求发送到一个域名(例如: &lt;code&gt;proxy_pass http://www.test.com&lt;/code&gt; 该域名对应的 IP 是 A) ，刚开始运行一切正常，但是当运行了一段时间以后，域名对应的 IP 变了(例如 &lt;a href=&quot;http://www.test.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.test.com&lt;/a&gt; 对应的 IP 由 A 变为 B)，nginx 的转发仍然还在向原先的 IP 发送请求，导致业务中断，此时&lt;code&gt;reload nginx&lt;/code&gt; 后才会重新恢复正常，且日志显示数据转发到新的 IP B。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;故障分析&quot;&gt;&lt;a href=&quot;#故障分析&quot; class=&quot;headerlink&quot; title=&quot;故障分析&quot;&gt;&lt;/a&gt;故障分析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;此处只针对 nginx 向后端做代理，且后端代理为域名形式的这种情况做分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、正常情况下启动 nginx 后(或者 -t / reload nginx 时)，nginx 会通过操作系统配置的 DNS 服务器去解析域名对应的 IP&lt;/li&gt;
&lt;li&gt;2、当 nginx 配置文件中的所有涉及到的域名都可以被正常解析到以后，才能启动(或者检查/重新加载)通过&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;这里需要提醒一点，在 &lt;code&gt;nginx -t&lt;/code&gt; 或者 &lt;code&gt;nginx -s reload&lt;/code&gt; 只是检查域名是否可以解析通过，并不会在此时缓存域名对应 IP，只有在通过 nginx 第一次向 &lt;code&gt;proxy_pass&lt;/code&gt; 后端对应的域名做代理数据转发时，这里 nginx 会通过操作系统配置的 DNS 服务器解析域名，此时才会缓存域名对应的 IP，且会缓存很长时间，甚至一个月(整个过程均有生产实例证明，且抓包验证)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何解决？&quot;&gt;&lt;a href=&quot;#如何解决？&quot; class=&quot;headerlink&quot; title=&quot;如何解决？&quot;&gt;&lt;/a&gt;如何解决？&lt;/h2&gt;&lt;p&gt;1、既然是因为 nginx 缓存域名对应 IP 的 DNS 记录造成的，那么怎么才能解决呢，方法有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)、手动 reload nginx，让 nginx 重新解析域名，这个时候解析到域名对应的 IP 是最新的，不会包含已经被废弃的 IP&lt;/li&gt;
&lt;li&gt;(2)、设置 nginx 的 DNS 缓存时间，比如 600s 失效，然后重新去解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、方法(2)当然是最好的，但是 nginx 的 DNS 缓存时间在哪里设置呢，我没有找到！&lt;/p&gt;
&lt;p&gt;3、但是我找到另外一种方法 – nginx 的 &lt;code&gt;resolver&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;nginx-的-resolver-解决方案&quot;&gt;&lt;a href=&quot;#nginx-的-resolver-解决方案&quot; class=&quot;headerlink&quot; title=&quot;nginx 的 resolver 解决方案&quot;&gt;&lt;/a&gt;nginx 的 resolver 解决方案&lt;/h3&gt;&lt;p&gt;1、默认 nginx 会通过操作系统设置的 DNS 服务器（/etc/resolv.conf）去解析域名&lt;/p&gt;
&lt;p&gt;2、其实 nginx 还可以通过自身设置 DNS 服务器，而不用去找操作系统的 DNS&lt;/p&gt;
&lt;p&gt;3、下面来讲一个这个 &lt;code&gt;resolver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       listen      8080;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       server_name localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       resolver 114.114.114.114 223.5.5.5 valid=3600s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       resolver_timeout 3s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       set $qq &amp;quot;www.qq.com&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          proxy_pass http://$qq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resolver&lt;/code&gt; 可以在 http 全局设定，也可在 server 里面设定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolver&lt;/code&gt; 后面指定 DNS 服务器，可以指定多个，空格隔开&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valid&lt;/code&gt; 设置 DNS 缓存失效时间，自己根据情况判断，建议 600 以上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resolver_timeout&lt;/code&gt; 指定解析域名时，DNS 服务器的超时时间，建议 3 秒左右&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;当 &lt;code&gt;resolver&lt;/code&gt; 后面跟多个 DNS 服务器时，一定要保证这些 DNS 服务器都是有效的，因为这种是负载均衡模式的，当 DNS 记录失效了（超过 valid 时间），首先由第一个  DNS 服务器（114.114.114.114）去解析，下一次继续失效时由第二个 DNS 服务器（223.5.5.5）去解析，亲自测试的，如有任何一个 DNS 服务器是坏的，那么这一次的解析会一直持续到 &lt;code&gt;resolver_timeout&lt;/code&gt; ，然后解析失败，且日志报错解析不了域名，通过页面抛出502错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点：&lt;/strong&gt;如上例，在代理到后端域名 &lt;a href=&quot;http://www.qq.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.qq.com&lt;/a&gt; 时，千万不要直接写在 &lt;code&gt;proxy_pass&lt;/code&gt; 中，因为 server 中使用了 &lt;code&gt;resolver&lt;/code&gt;，所以必须先把域名定义到一个变量里面，然后在 &lt;code&gt;proxy_pass http://$变量名&lt;/code&gt;，否则 nginx 语法检测一直会报错，提示解析不了域名。&lt;/p&gt;
&lt;h2 id=&quot;延展阅读&quot;&gt;&lt;a href=&quot;#延展阅读&quot; class=&quot;headerlink&quot; title=&quot;延展阅读&quot;&gt;&lt;/a&gt;延展阅读&lt;/h2&gt;&lt;h3 id=&quot;这里列举几个-proxy-pass、upstream-与-reslover-的应用场景&quot;&gt;&lt;a href=&quot;#这里列举几个-proxy-pass、upstream-与-reslover-的应用场景&quot; class=&quot;headerlink&quot; title=&quot;这里列举几个 proxy_pass、upstream 与 reslover 的应用场景&quot;&gt;&lt;/a&gt;这里列举几个 &lt;code&gt;proxy_pass&lt;/code&gt;、&lt;code&gt;upstream&lt;/code&gt; 与 &lt;code&gt;reslover&lt;/code&gt; 的应用场景&lt;/h3&gt;&lt;h4 id=&quot;1-proxy-pass-upstream&quot;&gt;&lt;a href=&quot;#1-proxy-pass-upstream&quot; class=&quot;headerlink&quot; title=&quot;1. proxy_pass + upstream&quot;&gt;&lt;/a&gt;1. proxy_pass + upstream&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;upstream foo.example.com &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server 127.0.0.1:8001;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问 &lt;a href=&quot;http://localhost/foo，proxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/foo，proxy&lt;/a&gt; 模块会将请求转发到 127.0.0.1 的 8001 端口上。&lt;/p&gt;
&lt;h4 id=&quot;2-只有-proxy-pass，没有-upstream-与-resolver&quot;&gt;&lt;a href=&quot;#2-只有-proxy-pass，没有-upstream-与-resolver&quot; class=&quot;headerlink&quot; title=&quot;2. 只有 proxy_pass，没有 upstream 与 resolver&quot;&gt;&lt;/a&gt;2. 只有 proxy_pass，没有 upstream 与 resolver&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上是隐式创建了 &lt;code&gt;upstream&lt;/code&gt;，&lt;code&gt;upstream&lt;/code&gt; 名字就是 foo.example.com。&lt;code&gt;upstream&lt;/code&gt; 模块利用本机设置的 DNS 服务器（或/etc/hosts），将 foo.example.com 解析成 IP，访问 &lt;a href=&quot;http://localhost/foo，`proxy`&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/foo，`proxy`&lt;/a&gt; 模块会将请求转发到解析后的 IP 上。&lt;/p&gt;
&lt;p&gt;如果本机未设置 DNS 服务器，或者 DNS 服务器无法解析域名，则 nginx 启动时会报类似如下错误：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nginx: [emerg] host not found &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; upstream &lt;span class=&quot;string&quot;&gt;&quot;foo.example.com&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /path/nginx/conf/nginx.conf:110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-proxy-pass-resolver（变量设置域名）&quot;&gt;&lt;a href=&quot;#3-proxy-pass-resolver（变量设置域名）&quot; class=&quot;headerlink&quot; title=&quot;3. proxy_pass + resolver（变量设置域名）&quot;&gt;&lt;/a&gt;3. proxy_pass + resolver（变量设置域名）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolver 114.114.114.114;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set $foo foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://$foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问 &lt;a href=&quot;http://localhost/foo，nginx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/foo，nginx&lt;/a&gt; 会动态利用 &lt;code&gt;resolver&lt;/code&gt; 设置的 DNS 服务器（本机设置的 DNS 服务器或 /etc/hosts 无效），将域名解析成 IP，&lt;code&gt;proxy&lt;/code&gt; 模块会将请求转发到解析后的 IP 上。&lt;/p&gt;
&lt;h4 id=&quot;4-proxy-pass-upstream（显式）-resolver（变量设置域名）&quot;&gt;&lt;a href=&quot;#4-proxy-pass-upstream（显式）-resolver（变量设置域名）&quot; class=&quot;headerlink&quot; title=&quot;4. proxy_pass + upstream（显式） + resolver（变量设置域名）&quot;&gt;&lt;/a&gt;4. proxy_pass + upstream（显式） + resolver（变量设置域名）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;upstream foo.example.com &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server 127.0.0.1:8001;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolver 114.114.114.114;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set $foo foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://$foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问 &lt;a href=&quot;http://localhost/foo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/foo&lt;/a&gt; 时，&lt;code&gt;upstream&lt;/code&gt; 模块会优先查找是否有定义 &lt;code&gt;upstream&lt;/code&gt; 后端服务器，如果有定义则直接利用，不再走 DNS 解析。所以 &lt;code&gt;proxy&lt;/code&gt; 模块会将请求转发到127.0.0.1 的 8001 端口上。&lt;/p&gt;
&lt;h4 id=&quot;5-proxy-pass-upstream（隐式）-resolver（变量设置域名）&quot;&gt;&lt;a href=&quot;#5-proxy-pass-upstream（隐式）-resolver（变量设置域名）&quot; class=&quot;headerlink&quot; title=&quot;5. proxy_pass + upstream（隐式） + resolver（变量设置域名）&quot;&gt;&lt;/a&gt;5. proxy_pass + upstream（隐式） + resolver（变量设置域名）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolver 114.114.114.114;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set $foo foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://$foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;location /foo2 实际上是隐式定义了 &lt;code&gt;upstream foo.example.com&lt;/code&gt;，并由本地 DNS 服务器进行了域名解析，访问 &lt;a href=&quot;http://localhost/foo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/foo&lt;/a&gt; 时，&lt;code&gt;upstream&lt;/code&gt; 模块会优先查找 &lt;code&gt;upstream&lt;/code&gt;，即隐式定义的 foo.example.com，&lt;code&gt;proxy&lt;/code&gt; 模块会将请求转发到解析后的 IP 上。&lt;/p&gt;
&lt;h4 id=&quot;6-proxy-pass-resolver（不用变量设置域名）&quot;&gt;&lt;a href=&quot;#6-proxy-pass-resolver（不用变量设置域名）&quot; class=&quot;headerlink&quot; title=&quot;6. proxy_pass + resolver（不用变量设置域名）&quot;&gt;&lt;/a&gt;6. proxy_pass + resolver（不用变量设置域名）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolver 114.114.114.114;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不使用变量设置域名，则 &lt;code&gt;resolver&lt;/code&gt; 的设置不起作用，此时相当于场景 2，只有 &lt;code&gt;proxy_pass&lt;/code&gt; 的场景。&lt;/p&gt;
&lt;h4 id=&quot;7-proxy-pass-upstream-resolver（不用变量设置域名）&quot;&gt;&lt;a href=&quot;#7-proxy-pass-upstream-resolver（不用变量设置域名）&quot; class=&quot;headerlink&quot; title=&quot;7. proxy_pass + upstream + resolver（不用变量设置域名）&quot;&gt;&lt;/a&gt;7. proxy_pass + upstream + resolver（不用变量设置域名）&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;upstream foo.example.com &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server 127.0.0.1:8001;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolver 114.114.114.114;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://foo.example.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不使用变量设置域名，则 &lt;code&gt;resolver&lt;/code&gt; 的设置不起作用，此时相当于场景 1 &lt;code&gt;proxy_pass + upstream&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;8-proxy-pass-直接指定-IP-加端口号&quot;&gt;&lt;a href=&quot;#8-proxy-pass-直接指定-IP-加端口号&quot; class=&quot;headerlink&quot; title=&quot;8. proxy_pass 直接指定 IP 加端口号&quot;&gt;&lt;/a&gt;8. proxy_pass 直接指定 IP 加端口号&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen       80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name  localhost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://127.0.0.1:8001/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上是隐式创建了 &lt;code&gt;upstream&lt;/code&gt;，&lt;code&gt;proxy_pass&lt;/code&gt; 会将请求转发到 127.0.0.1 的 8001 端口上。&lt;/p&gt;
&lt;h3 id=&quot;主要代码&quot;&gt;&lt;a href=&quot;#主要代码&quot; class=&quot;headerlink&quot; title=&quot;主要代码&quot;&gt;&lt;/a&gt;主要代码&lt;/h3&gt;&lt;p&gt;解析 proxy_pass 指令的代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ngx_http_proxy_pass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;ngx_conf_t&lt;/span&gt; *cf, &lt;span class=&quot;keyword&quot;&gt;ngx_command_t&lt;/span&gt; *cmd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *conf)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_proxy_loc_conf_t&lt;/span&gt; *plcf = conf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;                      add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u_short                     port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_str_t&lt;/span&gt;                  *value, *url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_url_t&lt;/span&gt;                   u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_uint_t&lt;/span&gt;                  n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_core_loc_conf_t&lt;/span&gt;   *clcf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_script_compile_t&lt;/span&gt;   sc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (plcf-&amp;gt;upstream.upstream || plcf-&amp;gt;proxy_lengths) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;is duplicate&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clcf-&amp;gt;handler = ngx_http_proxy_handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (clcf-&amp;gt;name.data[clcf-&amp;gt;name.len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clcf-&amp;gt;auto_redirect = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = cf-&amp;gt;args-&amp;gt;elts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url = &amp;amp;value[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 查找指令中$符号的位置，判断是否使用了变量 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = ngx_http_script_variables_count(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 使用变量设置域名 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_memzero(&amp;amp;sc, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;ngx_http_script_compile_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.cf = cf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.source = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.lengths = &amp;amp;plcf-&amp;gt;proxy_lengths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.values = &amp;amp;plcf-&amp;gt;proxy_values;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.variables = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.complete_lengths = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sc.complete_values = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ngx_http_script_compile(&amp;amp;sc) != NGX_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_ERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (NGX_HTTP_SSL)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        plcf-&amp;gt;ssl = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ngx_strncasecmp(url-&amp;gt;data, (u_char *) &lt;span class=&quot;string&quot;&gt;&quot;http://&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        add = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        port = &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ngx_strncasecmp(url-&amp;gt;data, (u_char *) &lt;span class=&quot;string&quot;&gt;&quot;https://&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (NGX_HTTP_SSL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        plcf-&amp;gt;ssl = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        add = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        port = &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_conf_log_error(NGX_LOG_EMERG, cf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;string&quot;&gt;&quot;https protocol requires SSL support&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_ERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_conf_log_error(NGX_LOG_EMERG, cf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;invalid URL prefix&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_ERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ngx_memzero(&amp;amp;u, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;ngx_url_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.url.len = url-&amp;gt;len - add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.url.data = url-&amp;gt;data + add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.default_port = port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.uri_part = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u.no_resolve = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;upstream.upstream = ngx_http_upstream_add(cf, &amp;amp;u, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (plcf-&amp;gt;upstream.upstream == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_ERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;vars.schema.len = add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;vars.schema.data = url-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;vars.key_start = plcf-&amp;gt;vars.schema;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ngx_http_proxy_set_vars(&amp;amp;u, &amp;amp;plcf-&amp;gt;vars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;location = clcf-&amp;gt;name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (clcf-&amp;gt;named&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (NGX_PCRE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        || clcf-&amp;gt;regex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        || clcf-&amp;gt;noname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (plcf-&amp;gt;vars.uri.len) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_conf_log_error(NGX_LOG_EMERG, cf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&quot;\&quot;proxy_pass\&quot; cannot have URI part in &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&quot;location given by regular expression, &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&quot;or inside named location, &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&quot;or inside \&quot;if\&quot; statement, &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;string&quot;&gt;&quot;or inside \&quot;limit_except\&quot; block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_ERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        plcf-&amp;gt;location.len = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plcf-&amp;gt;url = *url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NGX_CONF_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;upstream 模块初始化请求时的逻辑：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;ngx_http_upstream_init_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;ngx_http_request_t&lt;/span&gt; *r)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_str_t&lt;/span&gt;                      *host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_uint_t&lt;/span&gt;                      i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_resolver_ctx_t&lt;/span&gt;             *ctx, temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_cleanup_t&lt;/span&gt;             *cln;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_upstream_t&lt;/span&gt;            *u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_core_loc_conf_t&lt;/span&gt;       *clcf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_upstream_srv_conf_t&lt;/span&gt;   *uscf, **uscfp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ngx_http_upstream_main_conf_t&lt;/span&gt;  *umcf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r-&amp;gt;aio) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u = r-&amp;gt;upstream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* NGX_HTTP_CACHE 等其他处理 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cln-&amp;gt;handler = ngx_http_upstream_cleanup;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cln-&amp;gt;data = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u-&amp;gt;cleanup = &amp;amp;cln-&amp;gt;handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u-&amp;gt;resolved == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 如果没有使用resolver设置DNS，直接取upstream的设置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uscf = u-&amp;gt;conf-&amp;gt;upstream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (NGX_HTTP_SSL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        u-&amp;gt;ssl_name = u-&amp;gt;resolved-&amp;gt;host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        host = &amp;amp;u-&amp;gt;resolved-&amp;gt;host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u-&amp;gt;resolved-&amp;gt;sockaddr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u-&amp;gt;resolved-&amp;gt;port == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; u-&amp;gt;resolved-&amp;gt;sockaddr-&amp;gt;sa_family != AF_UNIX)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;string&quot;&gt;&quot;no port in upstream \&quot;%V\&quot;&quot;&lt;/span&gt;, host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ngx_http_upstream_create_round_robin_peer(r, u-&amp;gt;resolved)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                != NGX_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_http_upstream_connect(r, u);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uscfp = umcf-&amp;gt;upstreams.elts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 在显式/隐式定义的upstream中查找 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; umcf-&amp;gt;upstreams.nelts; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uscf = uscfp[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (uscf-&amp;gt;host.len == host-&amp;gt;len&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; ((uscf-&amp;gt;port == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; u-&amp;gt;resolved-&amp;gt;no_port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     || uscf-&amp;gt;port == u-&amp;gt;resolved-&amp;gt;port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; ngx_strncasecmp(uscf-&amp;gt;host.data, host-&amp;gt;data, host-&amp;gt;len) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; found;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u-&amp;gt;resolved-&amp;gt;port == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;string&quot;&gt;&quot;no port in upstream \&quot;%V\&quot;&quot;&lt;/span&gt;, host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        temp.name = *host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx = ngx_resolve_start(clcf-&amp;gt;resolver, &amp;amp;temp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ctx == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ctx == NGX_NO_RESOLVER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_log_error(NGX_LOG_ERR, r-&amp;gt;connection-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;string&quot;&gt;&quot;no resolver defined to resolve %V&quot;&lt;/span&gt;, host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_http_upstream_finalize_request(r, u, NGX_HTTP_BAD_GATEWAY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx-&amp;gt;name = *host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx-&amp;gt;handler = ngx_http_upstream_resolve_handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx-&amp;gt;data = r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ctx-&amp;gt;timeout = clcf-&amp;gt;resolver_timeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        u-&amp;gt;resolved-&amp;gt;ctx = ctx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ngx_resolve_name(ctx) != NGX_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            u-&amp;gt;resolved-&amp;gt;ctx = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;found:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (uscf == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_log_error(NGX_LOG_ALERT, r-&amp;gt;connection-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;string&quot;&gt;&quot;no upstream configuration&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; (NGX_HTTP_SSL)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u-&amp;gt;ssl_name = uscf-&amp;gt;host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (uscf-&amp;gt;peer.init(r, uscf) != NGX_OK) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ngx_http_upstream_finalize_request(r, u,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           NGX_HTTP_INTERNAL_SERVER_ERROR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u-&amp;gt;peer.start_time = ngx_current_msec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u-&amp;gt;conf-&amp;gt;next_upstream_tries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;&amp;amp; u-&amp;gt;peer.tries &amp;gt; u-&amp;gt;conf-&amp;gt;next_upstream_tries)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        u-&amp;gt;peer.tries = u-&amp;gt;conf-&amp;gt;next_upstream_tries;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ngx_http_upstream_connect(r, u);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;详细分析&quot;&gt;&lt;a href=&quot;#详细分析&quot; class=&quot;headerlink&quot; title=&quot;详细分析&quot;&gt;&lt;/a&gt;详细分析&lt;/h3&gt;&lt;h4 id=&quot;场景1&quot;&gt;&lt;a href=&quot;#场景1&quot; class=&quot;headerlink&quot; title=&quot;场景1&quot;&gt;&lt;/a&gt;场景1&lt;/h4&gt;&lt;p&gt;解析 &lt;code&gt;proxy_pass&lt;/code&gt; 的函数 &lt;code&gt;ngx_http_proxy_pass&lt;/code&gt; 中，没有找到 $ 符号（即，变量设置域名），走 &lt;code&gt;ngx_http_proxy_pass&lt;/code&gt; 后半部分的处理逻辑。&lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 初始化 &lt;code&gt;upstream&lt;/code&gt; 时，走显式定义 &lt;code&gt;upstream&lt;/code&gt; 的逻辑。&lt;code&gt;proxy_pass&lt;/code&gt; 转发请求初始化时，&lt;code&gt;ngx_http_upstream_init_request&lt;/code&gt; 中直接使用 &lt;code&gt;upstream&lt;/code&gt; 中的后端 server 建立连接。&lt;/p&gt;
&lt;h4 id=&quot;场景2&quot;&gt;&lt;a href=&quot;#场景2&quot; class=&quot;headerlink&quot; title=&quot;场景2&quot;&gt;&lt;/a&gt;场景2&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 初始化 &lt;code&gt;upstream&lt;/code&gt; 时，走隐式定义 upstream 的逻辑，会调用 &lt;code&gt;ngx_inet_resolve_host&lt;/code&gt; 对 &lt;code&gt;proxy_pass&lt;/code&gt; 中的域名进行解析，设置 &lt;code&gt;upstream&lt;/code&gt;。&lt;code&gt;proxy_pass&lt;/code&gt; 转发请求初始化时，&lt;code&gt;ngx_http_upstream_init_request&lt;/code&gt; 中直接使用 &lt;code&gt;upstream&lt;/code&gt; 中的设置，也就是利用本地设置的 DNS 服务器解析出的 IP，建立连接。&lt;/p&gt;
&lt;h4 id=&quot;场景3&quot;&gt;&lt;a href=&quot;#场景3&quot; class=&quot;headerlink&quot; title=&quot;场景3&quot;&gt;&lt;/a&gt;场景3&lt;/h4&gt;&lt;p&gt;解析 &lt;code&gt;proxy_pass&lt;/code&gt; 指令时，找到了 $ 符号，设置 &lt;code&gt;ngx_http_script_compile_t&lt;/code&gt;，并利用 &lt;code&gt;ngx_http_script_compile&lt;/code&gt; 进行编译，不走后半部分逻辑。配置文件没有显式/隐式定义 &lt;code&gt;upstream&lt;/code&gt;，所以不会调用 &lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 方法。&lt;code&gt;proxy_pass&lt;/code&gt; 转发请求初始化时，&lt;code&gt;ngx_http_upstream_init_request&lt;/code&gt; 中发现没有显式也没有隐式定义的 &lt;code&gt;upstream&lt;/code&gt;，随后调用 &lt;code&gt;ngx_resolve_start&lt;/code&gt;，对域名进行解析，之后将请求转发过去。&lt;/p&gt;
&lt;h4 id=&quot;场景4&quot;&gt;&lt;a href=&quot;#场景4&quot; class=&quot;headerlink&quot; title=&quot;场景4&quot;&gt;&lt;/a&gt;场景4&lt;/h4&gt;&lt;p&gt;解析 &lt;code&gt;proxy_pass&lt;/code&gt; 指令时，找到了 $ 符号，设置 &lt;code&gt;ngx_http_script_compile_t&lt;/code&gt;，并利用 &lt;code&gt;ngx_http_script_compile&lt;/code&gt; 进行编译，不走后半部分逻辑。显式调用了 &lt;code&gt;upstream&lt;/code&gt;，所以调用 &lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 方法中的显式 &lt;code&gt;upstream&lt;/code&gt; 的处理逻辑。&lt;code&gt;proxy_pass&lt;/code&gt; 转发请求初始化时，&lt;code&gt;ngx_http_upstream_init_request&lt;/code&gt; 中优先查找 &lt;code&gt;upstream&lt;/code&gt;，如果找到了，直接将请求转发到 &lt;code&gt;upstream&lt;/code&gt; 中的后端 server 上。如果 &lt;code&gt;upstream&lt;/code&gt; 中没有找到，则对域名进行解析，然后将请求转发到解析后的 IP 上。&lt;/p&gt;
&lt;h4 id=&quot;场景5&quot;&gt;&lt;a href=&quot;#场景5&quot; class=&quot;headerlink&quot; title=&quot;场景5&quot;&gt;&lt;/a&gt;场景5&lt;/h4&gt;&lt;p&gt;基本与场景 4 相同，不同之处在于调用 &lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 方法时，走隐式 &lt;code&gt;upstream&lt;/code&gt; 部分的处理逻辑。&lt;/p&gt;
&lt;h4 id=&quot;场景6&quot;&gt;&lt;a href=&quot;#场景6&quot; class=&quot;headerlink&quot; title=&quot;场景6&quot;&gt;&lt;/a&gt;场景6&lt;/h4&gt;&lt;p&gt;与场景 2 相同。&lt;/p&gt;
&lt;h4 id=&quot;场景7&quot;&gt;&lt;a href=&quot;#场景7&quot; class=&quot;headerlink&quot; title=&quot;场景7&quot;&gt;&lt;/a&gt;场景7&lt;/h4&gt;&lt;p&gt;与场景 1 相同。&lt;/p&gt;
&lt;h4 id=&quot;场景8&quot;&gt;&lt;a href=&quot;#场景8&quot; class=&quot;headerlink&quot; title=&quot;场景8&quot;&gt;&lt;/a&gt;场景8&lt;/h4&gt;&lt;p&gt;实际上是隐式创建了 &lt;code&gt;upstream&lt;/code&gt;，但是因为 &lt;code&gt;proxy_pass&lt;/code&gt; 中指定了 IP 和端口号，所以&lt;code&gt;ngx_http_upstream_init_round_robin&lt;/code&gt; 初始化 &lt;code&gt;upstream&lt;/code&gt; 时，&lt;code&gt;us-&amp;gt;servers&lt;/code&gt; 不为空，所以走该函数的上半部分逻辑。与场景 1 有些类似。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/5caa48664da5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/5caa48664da5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/61786355&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/61786355&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;p&gt;业务场景：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用户 ----&amp;gt; waf ----&amp;gt; 后端服务&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;waf&lt;/code&gt; 是采用 Nginx 做的二次开发，做了一些安全验证后将请求转发到后端服务，通过 nginx &lt;code&gt;proxy_pass&lt;/code&gt; 转发。 &lt;code&gt;proxy_pass&lt;/code&gt; 后面直接配置的是域名（如：xxxxx-1760550967.cn-northwest-1.elb.amazonaws.com.cn ）&lt;/p&gt;
&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;有部分用户开始反馈访问站点出错 &lt;code&gt;504 Gateway Time-out&lt;/code&gt;, 通过监控查到有部分请求打了一个下线的 IP 上。这里简单简述下故障场景：使用nginx做反向代理，将请求发送到一个域名(例如: &lt;code&gt;proxy_pass http://www.test.com&lt;/code&gt; 该域名对应的 IP 是 A) ，刚开始运行一切正常，但是当运行了一段时间以后，域名对应的 IP 变了(例如 &lt;a href=&quot;http://www.test.com&quot;&gt;http://www.test.com&lt;/a&gt; 对应的 IP 由 A 变为 B)，nginx 的转发仍然还在向原先的 IP 发送请求，导致业务中断，此时&lt;code&gt;reload nginx&lt;/code&gt; 后才会重新恢复正常，且日志显示数据转发到新的 IP B。&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://team.jiunile.com/categories/nginx/"/>
    
      <category term="反向代理" scheme="http://team.jiunile.com/categories/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    
      <category term="nginx" scheme="http://team.jiunile.com/tags/nginx/"/>
    
      <category term="proxy_pass" scheme="http://team.jiunile.com/tags/proxy-pass/"/>
    
  </entry>
  
  <entry>
    <title>简单直观的阐述 Kubernetes Istio</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-istio-intro.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-istio-intro.html</id>
    <published>2020-11-09T12:00:00.000Z</published>
    <updated>2020-11-09T04:59:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是-Istio？&quot;&gt;&lt;a href=&quot;#什么是-Istio？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Istio？&quot;&gt;&lt;/a&gt;什么是 Istio？&lt;/h2&gt;&lt;p&gt;Istio 是一个服务网格，它允许在集群中的 pods 和服务之间进行更详细、复杂和可观察的通信。&lt;/p&gt;
&lt;p&gt;它通过使用 CRD 扩展 Kubernetes API 来进行管理。它将代理容器注入到所有 pods 中，然后由这些 pods 控制集群中的流量。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-Services&quot;&gt;&lt;a href=&quot;#Kubernetes-Services&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Services&quot;&gt;&lt;/a&gt;Kubernetes Services&lt;/h2&gt;&lt;p&gt;从这里开始，您应该已经了解了 Kubernetes Services，可以阅读&lt;a href=&quot;https://medium.com/swlh/kubernetes-services-simply-visually-explained-2d84e58d70e5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本系列的第 1 部分&lt;/a&gt;。我们现在将简短地探讨如何实现 Kubernetes Services。我认为这有助于理解 Istio 如何做相同和不同的事情。&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_1.png&quot; alt=&quot;Kubernetes native service request&quot;&gt;&lt;/p&gt;
&lt;p&gt;图 1 显示了一个 Kubernetes 集群，该集群有两个节点和 4 个 pod，每个 pod 都有一个容器。服务 &lt;code&gt;service-nginx&lt;/code&gt; 指向 nginx pods，服务 &lt;code&gt;service-python&lt;/code&gt; 指向python pods。红线显示了从 &lt;code&gt;pod1-nginx&lt;/code&gt; 中的 nginx 容器向 &lt;code&gt;service-python&lt;/code&gt; 服务发出的请求，该服务将请求重定向到 &lt;code&gt;pod2-python&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;默认情况下，ClusterIP 服务执行简单的随机或循环分发。Kubernetes 中的 Services 并不存在于特定的节点上，而是存在于整个集群中。我们可以在图 2 中看到更多细节:&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_2.png&quot; alt=&quot;Kubernetes native service request with kube-proxy&quot;&gt;&lt;/p&gt;
&lt;p&gt;图 2 显示了与图 1 相同的示例，只是更详细一些。Kubernetes 中的服务是由运行在每个节点上的 &lt;code&gt;kube-proxy&lt;/code&gt; 组件实现的。该组件创建 iptables 规则，并将请求重定向到 Pod。因此，服务就是 iptables 规则。(还有其他不使用 iptables 的代理模式，但过程是相同的。)&lt;/p&gt;
&lt;p&gt;在图 2 中，我们看到 Kubernetes API 对每个 &lt;code&gt;kube-proxy&lt;/code&gt; 进行编程。每当服务配置或服务的pods 发生更改时，就会发生这种情况。通过这种方式，Kubernetes API (以及整个主节点或控制平面)可以下降，但服务仍然可以工作。&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-Istio&quot;&gt;&lt;a href=&quot;#Kubernetes-Istio&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes Istio&quot;&gt;&lt;/a&gt;Kubernetes Istio&lt;/h2&gt;&lt;p&gt;现在我们来看一个配置了 Istio 的相同示例:&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_3.png&quot; alt=&quot;Istio Control Plane programs istio-proxy&quot;&gt;&lt;/p&gt;
&lt;p&gt;图 3 显示安装了 Istio，它随 Istio 控制平面一起提供。还常见的是，每个 pod 都有第二个称为 &lt;code&gt;istio-proxy&lt;/code&gt; 的容器，该容器在创建期间自动将其注入到 pods 中。&lt;/p&gt;
&lt;p&gt;Istio 最常见的代理是具有惊人能力的 &lt;a href=&quot;https://www.envoyproxy.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Envoy&lt;/a&gt;。虽然可以使用其他代理（&lt;a href=&quot;https://www.nginx.com/blog/nginmesh-nginx-as-a-proxy-in-an-istio-service-mesh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如 Nginx&lt;/a&gt;），这就是为什么我们从现在开始只将代理称为&lt;code&gt;istio-proxy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以看到不再显示 &lt;code&gt;kube-proxy&lt;/code&gt; 组件，这样做是为了保持图像的整洁。这些组件仍然存在，但是拥有 &lt;code&gt;istio-proxy&lt;/code&gt; 的 pods 将不再使用 &lt;code&gt;kube-proxy&lt;/code&gt; 组件。&lt;/p&gt;
&lt;p&gt;每当配置或服务发生变化时，Istio 控制平面就会对所有 &lt;code&gt;istio-proxy&lt;/code&gt; sidecars 进行编程。类似于图 2 中 Kubernetes API 程序所有 &lt;code&gt;kube-proxy&lt;/code&gt; 组件的方式。Istio 控制平面使用现有的 Kubernetes 服务来接收每个服务点所指向的所有 pods 。通过使用 pod IP 地址，Istio 实现了自己的路由。&lt;/p&gt;
&lt;p&gt;在 Istio 控制平面对所有 &lt;code&gt;istio-proxy&lt;/code&gt; sidecars 编程之后，它看起来是这样的:&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_4.png&quot; alt=&quot;Istio Control Plane programmed all istio-proxys&quot;&gt;&lt;/p&gt;
&lt;p&gt;在图 4 中，我们看到 Istio 控制平面如何将当前配置应用到集群中的所有 &lt;code&gt;istio-proxy&lt;/code&gt; 容器。为了简单起见，还包括 “ClusterIP” 声明。虽然 ClusterIP 是 Kubernetes 的内部服务类型。Istio 将把 Kubernetes 服务声明转换成它自己的路由声明。但是想象一下图像中显示的情况会很有帮助。&lt;/p&gt;
&lt;p&gt;让我们看看如何使用 Istio 发出请求:&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_5.png&quot; alt=&quot;Request made with Istio&quot;&gt;&lt;/p&gt;
&lt;p&gt;在图 5 中，所有的 &lt;code&gt;istio-proxy&lt;/code&gt; 容器已经被 Istio 控制平面编程，并包含所有必要的路由信息，如图 3/4 所示。来自 &lt;code&gt;pod1-nginx&lt;/code&gt; 的 nginx 容器向 &lt;code&gt;service-python&lt;/code&gt; 发出请求。&lt;/p&gt;
&lt;p&gt;请求被 &lt;code&gt;pod1-nginx&lt;/code&gt; 的 &lt;code&gt;istio-proxy&lt;/code&gt; 容器拦截，并被重定向到一个 python pod 的 &lt;code&gt;istio-proxy&lt;/code&gt; 容器，该容器随后将请求重定向到 python 容器。&lt;/p&gt;
&lt;h2 id=&quot;这里发生了什么&quot;&gt;&lt;a href=&quot;#这里发生了什么&quot; class=&quot;headerlink&quot; title=&quot;这里发生了什么?&quot;&gt;&lt;/a&gt;这里发生了什么?&lt;/h2&gt;&lt;p&gt;图 1-5 显示了使用 nginx 和 python pod 的 Kubernetes 应用程序的相同示例。我们已经看到了使用默认的 Kubernetes 服务和使用 Istio 是如何发生请求的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重要的是&lt;/strong&gt;：无论使用什么方法，结果都是相同的，并且不需要更改应用程序本身，只需要更改基础结构代码。&lt;/p&gt;
&lt;h2 id=&quot;为什么要这样，为什么要使用-Istio？&quot;&gt;&lt;a href=&quot;#为什么要这样，为什么要使用-Istio？&quot; class=&quot;headerlink&quot; title=&quot;为什么要这样，为什么要使用 Istio？&quot;&gt;&lt;/a&gt;为什么要这样，为什么要使用 Istio？&lt;/h2&gt;&lt;p&gt;如果在使用 Istio 的时候没有什么变化(nginx pod 仍然可以像以前一样连接到 python pod)，为什么要首先使用 Istio 呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其惊人的优势是&lt;/strong&gt;，现在所有流量都通过每个 Pod 中的 &lt;code&gt;istio-proxy&lt;/code&gt; 容器进行路由。每当 &lt;code&gt;istio-proxy&lt;/code&gt; 接收并重定向一个请求时，它还会将有关该请求的信息提交给 Istio 控制平面。&lt;/p&gt;
&lt;p&gt;因此 Istio 控制平面可以准确地知道该请求来自哪个 pod、存在哪些 HTTP 头、从一个&lt;code&gt;istio-proxy&lt;/code&gt; 到另一个 &lt;code&gt;istio-proxy&lt;/code&gt; 的请求需要多长时间等等。在具有许多彼此通信的服务的群集中，这可以提高可观察性并更好地控制所有流量。&lt;/p&gt;
&lt;h3 id=&quot;先进的路由&quot;&gt;&lt;a href=&quot;#先进的路由&quot; class=&quot;headerlink&quot; title=&quot;先进的路由&quot;&gt;&lt;/a&gt;先进的路由&lt;/h3&gt;&lt;p&gt;Kubernetes 内部 Services 只能对 pods 执行轮询或随机分发请求。使用 Istio 可以实现更复杂的方式。比如，如果发生错误，根据请求头进行重定向，或者重定向到最少使用的服务。&lt;/p&gt;
&lt;h3 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h3&gt;&lt;p&gt;它允许将一定比例的流量路由到特定的服务版本，因此允许绿色/蓝色和金丝雀部署。&lt;/p&gt;
&lt;h3 id=&quot;加密&quot;&gt;&lt;a href=&quot;#加密&quot; class=&quot;headerlink&quot; title=&quot;加密&quot;&gt;&lt;/a&gt;加密&lt;/h3&gt;&lt;p&gt;可以对 pods 之间从 &lt;code&gt;istio-proxy&lt;/code&gt; 到 &lt;code&gt;istio-proxy&lt;/code&gt; 的集群内部通信进行加密。&lt;/p&gt;
&lt;h3 id=&quot;监控-图形生成&quot;&gt;&lt;a href=&quot;#监控-图形生成&quot; class=&quot;headerlink&quot; title=&quot;监控/图形生成&quot;&gt;&lt;/a&gt;监控/图形生成&lt;/h3&gt;&lt;p&gt;Istio 连接到 Prometheus 等监控工具。它也可以与 Kiali 一起很好的显示所有的服务和他们的流量。&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_6.png&quot; alt=&quot;kiali&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;追踪&quot;&gt;&lt;a href=&quot;#追踪&quot; class=&quot;headerlink&quot; title=&quot;追踪&quot;&gt;&lt;/a&gt;追踪&lt;/h3&gt;&lt;p&gt;因为 Istio 控制平面拥有大量关于请求的数据，所以可以使用 Jaeger 等工具跟踪和检查这些数据。&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_7.png&quot; alt=&quot;jaeger&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;多集群-mesh&quot;&gt;&lt;a href=&quot;#多集群-mesh&quot; class=&quot;headerlink&quot; title=&quot;多集群 mesh&quot;&gt;&lt;/a&gt;多集群 mesh&lt;/h3&gt;&lt;p&gt;Istio 有一个内部服务注册中心，它可以使用现有的 Kubernetes i服务。但是也可以从集群外部添加资源，甚至将不同的集群连接到一个网格中。&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_8.png&quot; alt=&quot;multiple-clusters&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sidecar-注入&quot;&gt;&lt;a href=&quot;#Sidecar-注入&quot; class=&quot;headerlink&quot; title=&quot;Sidecar 注入&quot;&gt;&lt;/a&gt;Sidecar 注入&lt;/h2&gt;&lt;p&gt;为了使 Istio 工作，每一个作为网状结构一部分的 pod 都需要注入 &lt;code&gt;istio-proxy&lt;/code&gt; sidecar。这可以在 pod 创建期间为整个名称空间自动完成(通过 &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Admission Controller 钩子&lt;/a&gt;，也可以手动完成。&lt;/p&gt;
&lt;h2 id=&quot;Istio-会取代-Kubernetes-的服务吗&quot;&gt;&lt;a href=&quot;#Istio-会取代-Kubernetes-的服务吗&quot; class=&quot;headerlink&quot; title=&quot;Istio 会取代 Kubernetes 的服务吗?&quot;&gt;&lt;/a&gt;Istio 会取代 Kubernetes 的服务吗?&lt;/h2&gt;&lt;p&gt;不。当我开始使用 Istio 时，我问自己的一个问题是它是否会取代现有的 Kubernetes 服务。答案是否定的。Istio 使用现有的 Kubernetes 服务获取它们的所有 endpoints/pod IP 地址。&lt;/p&gt;
&lt;h2 id=&quot;Istio-取代了-Kubernetes-的-Ingress-吗&quot;&gt;&lt;a href=&quot;#Istio-取代了-Kubernetes-的-Ingress-吗&quot; class=&quot;headerlink&quot; title=&quot;Istio 取代了 Kubernetes 的 Ingress 吗?&quot;&gt;&lt;/a&gt;Istio 取代了 Kubernetes 的 Ingress 吗?&lt;/h2&gt;&lt;p&gt;是的。Istio 提供了新的资源，比如网关和虚拟服务，甚至还附带了 ingress 转换器&lt;code&gt;istioctl convert-ingress&lt;/code&gt;。一个很好的来源是 &lt;a href=&quot;https://istio.io/docs/concepts/traffic-management&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://istio.io/docs/concepts/traffic-management&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图 6 显示了 Istio 网关如何处理进入流量。网关本身也是一个 &lt;code&gt;istio-proxy&lt;/code&gt; 组件。&lt;br&gt;&lt;img src=&quot;/images/k8s/istio_9.png&quot; alt=&quot;Istio Gateway&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;控制平面组件&quot;&gt;&lt;a href=&quot;#控制平面组件&quot; class=&quot;headerlink&quot; title=&quot;控制平面组件&quot;&gt;&lt;/a&gt;控制平面组件&lt;/h2&gt;&lt;p&gt;Istio 控制平面由几个较小的部件组成，如 &lt;code&gt;Pilot&lt;/code&gt;、&lt;code&gt;Mixer&lt;/code&gt;、&lt;code&gt;Citadel&lt;/code&gt; 和 &lt;code&gt;Galley&lt;/code&gt;。如果您想深入研究，我建议您访问 &lt;a href=&quot;https://istio.io/docs/ops/deployment/architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://istio.io/docs/ops/deployment/architecture&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如果-Istio-控制平面关闭会发生什么？&quot;&gt;&lt;a href=&quot;#如果-Istio-控制平面关闭会发生什么？&quot; class=&quot;headerlink&quot; title=&quot;如果 Istio 控制平面关闭会发生什么？&quot;&gt;&lt;/a&gt;如果 Istio 控制平面关闭会发生什么？&lt;/h2&gt;&lt;p&gt;因为所有的 &lt;code&gt;istio-proxy&lt;/code&gt;  sidecar 都已经编程好了，所以 istio 的控制平面可以关闭，流量也会像以前一样工作。但是配置更新或新创建的 pods 不会被应用。&lt;/p&gt;
&lt;p&gt;但对于高级路由，如将流量发送到使用最少的 pod 或策略(&lt;a href=&quot;https://istio.io/docs/tasks/policy-enforcement&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://istio.io/docs/tasks/policy-enforcement&lt;/a&gt;)，所有 &lt;code&gt;istio-proxys&lt;/code&gt; 之间需要通过 istio 控制平面进行通信。然后，在允许请求之前，每个 &lt;code&gt;istio-proxy&lt;/code&gt; 都需要检查 istio 控制平面。&lt;/p&gt;
&lt;p&gt;为了使这些配置正常工作，我认为控制平面必须始终可用。如果您有与此相关的链接，请随时添加评论。&lt;/p&gt;
&lt;h2 id=&quot;下一步你能做什么？&quot;&gt;&lt;a href=&quot;#下一步你能做什么？&quot; class=&quot;headerlink&quot; title=&quot;下一步你能做什么？&quot;&gt;&lt;/a&gt;下一步你能做什么？&lt;/h2&gt;&lt;p&gt;我写了一篇关于 &lt;a href=&quot;https://medium.com/@wuestkamp/kubernetes-istio-canary-deployment-5ecfd7920e1c?source=friends_link&amp;amp;sk=2be48393ac175a2199bf5d486cb91acf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Istio Canray&lt;/a&gt; 部署的示例文章。&lt;/p&gt;
&lt;p&gt;Istio 提供了一个很好的示例应用程序和一些微服务。如果你喜欢进入 Istio，这是一个很好的开始方法：&lt;a href=&quot;https://istio.io/docs/setup/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://istio.io/docs/setup/getting-started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你想更深入地研究，&lt;a href=&quot;https://www.youtube.com/watch?v=cB611FtjHcQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这段视频&lt;/a&gt;也是很棒的。&lt;/p&gt;
&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;这是一个简单的介绍和广泛的概述，我希望对人们有所帮助。Istio 无疑在 Kubernetes 之上又增加了另一层次的复杂性。尽管对于现代微服务架构来说，它实际上提供了一种比必须在应用程序代码本身中实现跟踪或可观察性更简单的方法。&lt;/p&gt;
&lt;p&gt;作者：Kim Wuestkamp 来源：medium.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Istio？&quot;&gt;&lt;a href=&quot;#什么是-Istio？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Istio？&quot;&gt;&lt;/a&gt;什么是 Istio？&lt;/h2&gt;&lt;p&gt;Istio 是一个服务网格，它允许在集群中的 pods 和服务之间进行更详细、复杂和可观察的通信。&lt;/p&gt;
&lt;p&gt;它通过使用 CRD 扩展 Kubernetes API 来进行管理。它将代理容器注入到所有 pods 中，然后由这些 pods 控制集群中的流量。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="istio" scheme="http://team.jiunile.com/categories/kubernetes/istio/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="istio" scheme="http://team.jiunile.com/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>k8s ingress 在删除资源时 hang 住无法删除</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-finalizers.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-finalizers.html</id>
    <published>2020-10-30T12:00:00.000Z</published>
    <updated>2020-10-30T09:24:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近将 aws &lt;a href=&quot;https://github.com/kubernetes-sigs/aws-load-balancer-controller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ALBIgressController&lt;/a&gt; 升级到 2.0 后发现在中国区有点问题，随后就将 &lt;code&gt;alb-ingress-controller&lt;/code&gt; 回退到 1.x。具体 2.0 的问题已经解决，原因是中国区 aws 没有对应的 &lt;code&gt;waf&lt;/code&gt; ，解决方法是将 &lt;code&gt;waf&lt;/code&gt; 相关的配置关闭即可。当然，这不是重点，重点是当我回退到 1.x 后遇到了几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;kube-controller-manager 报如下错误日志&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E1029 02:43:20.921678       1 reflector.go:153] k8s.io/client-go/metadata/metadatainformer/informer.go:89: Failed to list *v1.PartialObjectMetadata: the server could not find the requested resource&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;k8s ingress 资源无法删除，hang 住了，查看对应的 ingress yaml 看到如下信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;creationTimestamp: &lt;span class=&quot;string&quot;&gt;&quot;2020-10-28T10:22:42Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deletionGracePeriodSeconds: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deletionTimestamp: &lt;span class=&quot;string&quot;&gt;&quot;2020-10-29T06:57:04Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finalizers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- ingress.k8s.aws/resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;针对问题一这里就不做过多分析了，原因是：&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/79610&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dynamic informers do not stop when custom resource definition is removed #79610&lt;/a&gt; 对应详细的分析点击链接访问即可。目前根本原因还未解决，临时解决方法是将对应的 CRD 资源恢复即可。&lt;/p&gt;
&lt;p&gt;针对问题二就比较棘手，一时也无法定位到根本原因，从 ingress yaml 中对比分析只有 &lt;code&gt;deletion&lt;/code&gt; 和 &lt;code&gt;finalizers&lt;/code&gt; 这两个字样有异常，后来查阅相关文档了解才明白，解决方案是将 ingress 中 &lt;code&gt;finalizers&lt;/code&gt; 对应的内容清空即可强制删除 ingress 。&lt;/p&gt;
&lt;h2 id=&quot;Finalizers&quot;&gt;&lt;a href=&quot;#Finalizers&quot; class=&quot;headerlink&quot; title=&quot;Finalizers&quot;&gt;&lt;/a&gt;Finalizers&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Finalizers&lt;/code&gt; 允许 Operator 控制器实现异步的 &lt;code&gt;pre-delete hook&lt;/code&gt;。比如你给 API 类型中的每个对象都创建了对应的外部资源，你希望在 k8s 删除对应资源时同时删除关联的外部资源，那么可以通过 &lt;code&gt;Finalizers&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Finalizers&lt;/code&gt; 是由字符串组成的列表，当 &lt;code&gt;Finalizers&lt;/code&gt; 字段存在时，相关资源不允许被强制删除。存在 &lt;code&gt;Finalizers&lt;/code&gt; 字段的的资源对象接收的第一个删除请求设置 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 字段的值， 但不删除具体资源，在该字段设置后， &lt;code&gt;finalizer&lt;/code&gt; 列表中的对象只能被删除，不能做其他操作。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 字段非空时，&lt;code&gt;controller watch&lt;/code&gt; 对象并执行对应 &lt;code&gt;finalizers&lt;/code&gt; 的动作，当所有动作执行完后，需要清空 &lt;code&gt;finalizers&lt;/code&gt; ，之后 k8s 会删除真正想要删除的资源。&lt;/p&gt;
&lt;h2 id=&quot;Operator-finalizers-使用&quot;&gt;&lt;a href=&quot;#Operator-finalizers-使用&quot; class=&quot;headerlink&quot; title=&quot;Operator finalizers 使用&quot;&gt;&lt;/a&gt;Operator finalizers 使用&lt;/h2&gt;&lt;p&gt;介绍了 &lt;code&gt;Finalizers&lt;/code&gt; 概念，那么我们来看看在 Operator 中如何使用，在 Operator Controller 中，最重要的逻辑就是 &lt;code&gt;Reconcile&lt;/code&gt; 方法，&lt;code&gt;finalizers&lt;/code&gt; 也是在 &lt;code&gt;Reconcile&lt;/code&gt; 中实现的。要注意的是，设置了 &lt;code&gt;Finalizers&lt;/code&gt; 会导致 k8s 的 delete 动作转为设置 &lt;code&gt;metadata.deletionTimestamp&lt;/code&gt; 字段，如果你通过 &lt;code&gt;kubectl get&lt;/code&gt; 命令看到资源存在这个字段，则表示资源正在删除（deleting）。&lt;/p&gt;
&lt;p&gt;有以下几点需要理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果资源对象未被删除且未设置 &lt;code&gt;finalizers&lt;/code&gt;，则添加 &lt;code&gt;finalizer&lt;/code&gt; 并更新 k8s 资源对象；&lt;/li&gt;
&lt;li&gt;如果正在删除资源对象并且 &lt;code&gt;finalizers&lt;/code&gt; 仍然存在于 &lt;code&gt;finalizers&lt;/code&gt; 列表中，则执行 &lt;code&gt;pre-delete hook&lt;/code&gt; 并删除 &lt;code&gt;finalizers&lt;/code&gt; ，更新资源对象；&lt;/li&gt;
&lt;li&gt;由于以上两点，需要确保 &lt;code&gt;pre-delete hook&lt;/code&gt; 是幂等的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;kuberbuilder-示例&quot;&gt;&lt;a href=&quot;#kuberbuilder-示例&quot; class=&quot;headerlink&quot; title=&quot;kuberbuilder 示例&quot;&gt;&lt;/a&gt;kuberbuilder 示例&lt;/h3&gt;&lt;p&gt;我们来看一个 kubebuilder 官方示例：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(r *CronJobReconciler)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reconcile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req ctrl.Request)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(ctrl.Result, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ctx := context.Background()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log := r.Log.WithValues(&lt;span class=&quot;string&quot;&gt;&quot;cronjob&quot;&lt;/span&gt;, req.NamespacedName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cronJob batch.CronJob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := r.Get(ctx, req.NamespacedName, &amp;amp;cronJob); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Error(err, &lt;span class=&quot;string&quot;&gt;&quot;unable to fetch CronJob&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl.Result&amp;#123;&amp;#125;, ignoreNotFound(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 声明 finalizer 字段，类型为字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myFinalizerName := &lt;span class=&quot;string&quot;&gt;&quot;storage.finalizers.tutorial.kubebuilder.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过检查 DeletionTimestamp 字段是否为0 判断资源是否被删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cronJob.ObjectMeta.DeletionTimestamp.IsZero() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果为0 ，则资源未被删除，我们需要检测是否存在 finalizer，如果不存在，则添加，并更新到资源对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cronJob.ObjectMeta.Finalizers = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(cronJob.ObjectMeta.Finalizers, myFinalizerName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := r.Update(context.Background(), cronJob); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl.Result&amp;#123;&amp;#125;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果不为 0 ，则对象处于删除中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; containsString(cronJob.ObjectMeta.Finalizers, myFinalizerName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果存在 finalizer 且与上述声明的 finalizer 匹配，那么执行对应 hook 逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := r.deleteExternalResources(cronJob); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 如果删除失败，则直接返回对应 err，controller 会自动执行重试逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl.Result&amp;#123;&amp;#125;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 如果对应 hook 执行成功，那么清空 finalizers， k8s 删除对应资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cronJob.ObjectMeta.Finalizers = removeString(cronJob.ObjectMeta.Finalizers, myFinalizerName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := r.Update(context.Background(), cronJob); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl.Result&amp;#123;&amp;#125;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctrl.Result&amp;#123;&amp;#125;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(r *Reconciler)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteExternalResources&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cronJob *batch.CronJob)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除 crobJob关联的外部资源逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 需要确保实现是幂等的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;containsString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(slice []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, s &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; item == s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(slice []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, s &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(result []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; item == s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;cluster-api-provider-vsphere-实现&quot;&gt;&lt;a href=&quot;#cluster-api-provider-vsphere-实现&quot; class=&quot;headerlink&quot; title=&quot;cluster-api-provider-vsphere 实现&quot;&gt;&lt;/a&gt;cluster-api-provider-vsphere 实现&lt;/h3&gt;&lt;p&gt;看完了示例，我们来找一个具体项目看看，&lt;code&gt;cluster-api-provider-vsphere&lt;/code&gt; 是 cluster-api 相关项目，用于提供 vsphere 相关资源创建的 &lt;code&gt;Operator&lt;/code&gt;，采用 &lt;code&gt;kubebuilder&lt;/code&gt; 来实现的。&lt;/p&gt;
&lt;p&gt;vspheremachine_controller.go 中实现了 &lt;code&gt;Reconcile&lt;/code&gt; 方法：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reconcile ensures the back-end state reflects the Kubernetes resource state intent.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(r *VSphereMachineReconciler)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reconcile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(req ctrl.Request)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(_ ctrl.Result, reterr error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Always close the context when exiting this function so we can persist any VSphereMachine changes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := machineContext.Patch(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; reterr == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			reterr = err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Handle deleted machines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !vsphereMachine.ObjectMeta.DeletionTimestamp.IsZero() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r.reconcileDelete(machineContext)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Handle non-deleted machines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r.reconcileNormal(machineContext)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Reconcile&lt;/code&gt; 中检测了 &lt;code&gt;DeletionTimestamp&lt;/code&gt; 是否为 0 ，如果不为 0 ，则表示资源处于正在删除中，那么来看下 &lt;code&gt;reconcileDelete&lt;/code&gt; 实现：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(r *VSphereMachineReconciler)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reconcileDelete&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx *context.MachineContext)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(reconcile.Result, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctx.Logger.Info(&lt;span class=&quot;string&quot;&gt;&quot;Handling deleted VSphereMachine&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vmService services.VirtualMachineService = &amp;amp;govmomi.VMService&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 执行删除虚拟机逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vm, err := vmService.DestroyVM(ctx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果删除失败，则直接返回错误，controller 会自动重试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reconcile.Result&amp;#123;&amp;#125;, errors.Wrapf(err, &lt;span class=&quot;string&quot;&gt;&quot;failed to destroy VM&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 重新调度删除虚拟机逻辑，直到虚拟机状态处于 notfound 状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; vm.State != infrav1.VirtualMachineStateNotFound &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ctx.Logger.V(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;).Info(&lt;span class=&quot;string&quot;&gt;&quot;requeuing operation until vm state is reconciled&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;expected-vm-state&quot;&lt;/span&gt;, infrav1.VirtualMachineStateNotFound, &lt;span class=&quot;string&quot;&gt;&quot;actual-vm-state&quot;&lt;/span&gt;, vm.State)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reconcile.Result&amp;#123;RequeueAfter: config.DefaultRequeue&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// pre-delete hook执行成功，也就是上面的删除虚拟机逻辑执行成功，则清空 Finalizers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctx.VSphereMachine.Finalizers = clusterutilv1.Filter(ctx.VSphereMachine.Finalizers, infrav1.MachineFinalizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reconcile.Result&amp;#123;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到整体逻辑与示例的使用是一致的，主要通过这种方式来达到 pre-delete hook 的效果。&lt;/p&gt;
&lt;h3 id=&quot;k8s-initializer-finalizer-practice&quot;&gt;&lt;a href=&quot;#k8s-initializer-finalizer-practice&quot; class=&quot;headerlink&quot; title=&quot;k8s-initializer-finalizer-practice&quot;&gt;&lt;/a&gt;k8s-initializer-finalizer-practice&lt;/h3&gt;&lt;p&gt;在搜索相关资料的时候，看到有人在 SO 上问了如何使用的&lt;a href=&quot;https://stackoverflow.com/questions/53057185/kubernetes-crd-finalizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;问题&lt;/a&gt;，其中有个回答中附上了一个练习项目，项目很小，很适合了解 &lt;code&gt;Finalizers&lt;/code&gt; 概念。&lt;/p&gt;
&lt;p&gt;相关逻辑如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	customdeployment:=obj.(*crdv1alpha1.CustomDeployment).DeepCopy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Event..............................&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; customdeployment.DeletionTimestamp != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// check if it has finalizer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; customdeployment.GetFinalizers()!=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			finalizers:=customdeployment.GetFinalizers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// check if first finalizer match with deletepod.crd.emruz.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; finalizers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&quot;deletepods.crd.emruz.com&quot;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_,err:=myutil.PatchCustomDeployment(c.clientset,customdeployment, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(deployment *crdv1alpha1.CustomDeployment)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;crdv1alpha1&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;CustomDeployment&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// delete pods under this deployment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					err:=myutil.DeletePods(c.kubeclient,c.podLabel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err!=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Failed to remove all pods. Reason: &quot;&lt;/span&gt;,err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// pods sucessfully removed. remove the finalizer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					customdeployment.ObjectMeta=myutil.RemoveFinalizer(customdeployment.ObjectMeta)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; customdeployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err!=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在开发 &lt;code&gt;Operator&lt;/code&gt; 时，&lt;code&gt;pre-delete hook&lt;/code&gt; 是一个很常见的需求，目前只发现了 &lt;code&gt;Finalizers&lt;/code&gt; 适合实现这个功能，需要好好掌握。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zdyxry.github.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/53057185/kubernetes-crd-finalizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackoverflow.com/questions/53057185/kubernetes-crd-finalizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://book.kubebuilder.io/reference/using-finalizers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://book.kubebuilder.io/reference/using-finalizers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#finalizers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#finalizers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近将 aws &lt;a href=&quot;https://github.com/kubernetes-sigs/aws-load-balancer-controller&quot;&gt;ALBIgressController&lt;/a&gt; 升级到 2.0 后发现在中国区有点问题，随后就将 &lt;code&gt;alb-ingress-controller&lt;/code&gt; 回退到 1.x。具体 2.0 的问题已经解决，原因是中国区 aws 没有对应的 &lt;code&gt;waf&lt;/code&gt; ，解决方法是将 &lt;code&gt;waf&lt;/code&gt; 相关的配置关闭即可。当然，这不是重点，重点是当我回退到 1.x 后遇到了几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;kube-controller-manager 报如下错误日志&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E1029 02:43:20.921678       1 reflector.go:153] k8s.io/client-go/metadata/metadatainformer/informer.go:89: Failed to list *v1.PartialObjectMetadata: the server could not find the requested resource&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;k8s ingress 资源无法删除，hang 住了，查看对应的 ingress yaml 看到如下信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;creationTimestamp: &lt;span class=&quot;string&quot;&gt;&quot;2020-10-28T10:22:42Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deletionGracePeriodSeconds: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deletionTimestamp: &lt;span class=&quot;string&quot;&gt;&quot;2020-10-29T06:57:04Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finalizers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- ingress.k8s.aws/resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="ingress" scheme="http://team.jiunile.com/categories/kubernetes/ingress/"/>
    
      <category term="问题" scheme="http://team.jiunile.com/categories/kubernetes/ingress/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="aws" scheme="http://team.jiunile.com/tags/aws/"/>
    
      <category term="ingress" scheme="http://team.jiunile.com/tags/ingress/"/>
    
      <category term="finalizers" scheme="http://team.jiunile.com/tags/finalizers/"/>
    
      <category term="ALBIngressController" scheme="http://team.jiunile.com/tags/ALBIngressController/"/>
    
  </entry>
  
  <entry>
    <title>如何为 Kubernetes 实现原地升级</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-pod-update-local.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-pod-update-local.html</id>
    <published>2020-10-28T12:00:00.000Z</published>
    <updated>2020-10-29T06:01:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原地升级&lt;/strong&gt;一词中，“升级”不难理解，是将应用实例的版本由旧版替换为新版。那么如何结合 Kubernetes 环境来理解“原地”呢？&lt;/p&gt;
&lt;p&gt;我们先来看看 K8s 原生 workload 的发布方式。这里假设我们需要部署一个应用，包括 foo、bar 两个容器在 Pod 中。其中，foo 容器第一次部署时用的镜像版本是 v1，我们需要将其升级为 v2 版本镜像，该怎么做呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个应用使用 Deployment 部署，那么升级过程中 Deployment 会触发新版本 ReplicaSet 创建 Pod，并删除旧版本 Pod。如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/update-1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在本次升级过程中，原 Pod 对象被删除，一个新 Pod 对象被创建。新 Pod 被调度到另一个 Node 上，分配到一个新的 IP，并把 foo、bar 两个容器在这个 Node 上重新拉取镜像、启动容器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个应该使用 StatefulSet 部署，那么升级过程中 StatefulSet 会先删除旧 Pod 对象，等删除完成后用同样的名字在创建一个新的 Pod 对象。如下图所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/update-2.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，尽管新旧两个 Pod 名字都叫 pod-0，但其实是两个完全不同的 Pod 对象（uid也变了）。StatefulSet 等到原先的 pod-0 对象完全从 Kubernetes 集群中被删除后，才会提交创建一个新的 pod-0 对象。而这个新的 Pod 也会被重新调度、分配IP、拉镜像、启动容器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;而所谓原地升级模式，就是在应用升级过程中避免将整个 Pod 对象删除、新建，而是基于原有的 Pod 对象升级其中某一个或多个容器的镜像版本：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/update-3.png&quot; alt=&quot;3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在原地升级的过程中，我们仅仅更新了原 Pod 对象中 foo 容器的 image 字段来触发 foo 容器升级到新版本。而不管是 Pod 对象，还是 Node、IP 都没有发生变化，甚至 foo 容器升级的过程中 bar 容器还一直处于运行状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：这种只更新 Pod 中某一个或多个容器版本、而不影响整个 Pod 对象、其余容器的升级方式，被我们称为 Kubernetes 中的原地升级&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;收益分析&quot;&gt;&lt;a href=&quot;#收益分析&quot; class=&quot;headerlink&quot; title=&quot;收益分析&quot;&gt;&lt;/a&gt;收益分析&lt;/h2&gt;&lt;p&gt;那么，我们为什么要在 Kubernetes 中引入这种原地升级的理念和设计呢？&lt;/p&gt;
&lt;p&gt;首先，这种原地升级的模式极大地提升了应用发布的效率，根据非完全统计数据，在阿里环境下原地升级至少比完全重建升级提升了 80% 以上的发布速度。这其实很容易理解，原地升级为发布效率带来了以下优化点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节省了调度的耗时，Pod 的位置、资源都不发生变化；&lt;/li&gt;
&lt;li&gt;节省了分配网络的耗时，Pod 还使用原有的 IP；&lt;/li&gt;
&lt;li&gt;节省了分配、挂载远程盘的耗时，Pod 还使用原有的 PV（且都是已经在 Node 上挂载好的）；&lt;/li&gt;
&lt;li&gt;节省了大部分拉取镜像的耗时，因为 Node 上已经存在了应用的旧镜像，当拉取新版本镜像时只需要下载很少的几层 layer。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其次，当我们升级 Pod 中一些 sidecar 容器（如采集日志、监控等）时，其实并不希望干扰到业务容器的运行。但面对这种场景，Deployment 或 StatefulSet 的升级都会将整个 Pod 重建，势必会对业务造成一定的影响。而容器级别的原地升级变动的范围非常可控，只会将需要升级的容器做重建，其余容器包括网络、挂载盘都不会受到影响。&lt;/p&gt;
&lt;p&gt;最后，原地升级也为我们带来了集群的稳定性和确定性。当一个 Kubernetes 集群中大量应用触发重建 Pod 升级时，可能造成大规模的 Pod 飘移，以及对 Node 上一些低优先级的任务 Pod 造成反复的抢占迁移。这些大规模的 Pod 重建，本身会对 apiserver、scheduler、网络/磁盘分配等中心组件造成较大的压力，而这些组件的延迟也会给 Pod 重建带来恶性循环。而采用原地升级后，整个升级过程只会涉及到 controller 对 Pod 对象的更新操作和 kubelet 重建对应的容器。&lt;/p&gt;
&lt;h2 id=&quot;技术背景&quot;&gt;&lt;a href=&quot;#技术背景&quot; class=&quot;headerlink&quot; title=&quot;技术背景&quot;&gt;&lt;/a&gt;技术背景&lt;/h2&gt;&lt;p&gt;支持原地升级的控制器就位于 &lt;a href=&quot;https://github.com/openkruise/kruise?spm=a2c6h.12873639.0.0.4bc314b5SPKTQY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenKruise&lt;/a&gt; 开源项目中。&lt;/p&gt;
&lt;p&gt;也就是说，云原生应用都是统一使用 &lt;code&gt;OpenKruise&lt;/code&gt; 中的扩展 workload 做部署管理的，而并没有采用原生 &lt;code&gt;Deployment/StatefulSet&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;那么 &lt;code&gt;OpenKruise&lt;/code&gt; 是如何实现原地升级能力的呢？在介绍原地升级实现原理之前，我们先来看一些原地升级功能所依赖的原生 Kubernetes 功能：&lt;/p&gt;
&lt;h3 id=&quot;背景-1：Kubelet-针对-Pod-容器的版本管理&quot;&gt;&lt;a href=&quot;#背景-1：Kubelet-针对-Pod-容器的版本管理&quot; class=&quot;headerlink&quot; title=&quot;背景 1：Kubelet 针对 Pod 容器的版本管理&quot;&gt;&lt;/a&gt;背景 1：Kubelet 针对 Pod 容器的版本管理&lt;/h3&gt;&lt;p&gt;每个 Node 上的 Kubelet，会针对本机上所有 Pod.spec.containers 中的每个 container 计算一个 hash 值，并记录到实际创建的容器中。&lt;/p&gt;
&lt;p&gt;如果我们修改了 Pod 中某个 container 的 image 字段，kubelet 会发现 container 的 hash 发生了变化、与机器上过去创建的容器 hash 不一致，而后 kubelet 就会把旧容器停掉，然后根据最新 Pod spec 中的 container 来创建新的容器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个功能，其实就是针对单个 Pod 的原地升级的核心原理&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;背景-2：Pod-更新限制&quot;&gt;&lt;a href=&quot;#背景-2：Pod-更新限制&quot; class=&quot;headerlink&quot; title=&quot;背景 2：Pod 更新限制&quot;&gt;&lt;/a&gt;背景 2：Pod 更新限制&lt;/h3&gt;&lt;p&gt;在原生 kube-apiserver 中，对 Pod 对象的更新请求有严格的 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/core/validation/validation.go?spm=a2c6h.12873639.0.0.4bc314b5SPKTQY#L3729&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;validation 校验逻辑&lt;/a&gt;：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// validate updateable fields:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.  spec.containers[*].image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.  spec.initContainers[*].image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3.  spec.activeDeadlineSeconds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单来说，对于一个已经创建出来的 Pod，在 Pod Spec 中只允许修改 containers/initContainers 中的 image 字段，以及 activeDeadlineSeconds 字段。对 Pod Spec 中所有其他字段的更新，都会被 kube-apiserver 拒绝。&lt;/p&gt;
&lt;h3 id=&quot;背景-3：containerStatuses-上报&quot;&gt;&lt;a href=&quot;#背景-3：containerStatuses-上报&quot; class=&quot;headerlink&quot; title=&quot;背景 3：containerStatuses 上报&quot;&gt;&lt;/a&gt;背景 3：containerStatuses 上报&lt;/h3&gt;&lt;p&gt;kubelet 会在 pod.status 中上报 containerStatuses，对应 Pod 中所有容器的实际运行状态：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; nginx:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containerStatuses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; nginx:mainline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imageID:&lt;/span&gt; docker-pullable://nginx@sha256:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;f68b99bc0d6d25d0c56876b924ec20418544ff28e1fb89a4c27679a40da811b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;绝大多数情况下，spec.containers[x].image 与 status.containerStatuses[x].image 两个镜像是一致的。&lt;/p&gt;
&lt;p&gt;但是也有上述这种情况，kubelet 上报的与 spec 中的 image 不一致（spec 中是 nginx:latest，但 status 中上报的是 nginx:mainline）。&lt;/p&gt;
&lt;p&gt;这是因为，kubelet 所上报的 image 其实是从 CRI 接口中拿到的容器对应的镜像名。而如果 Node 机器上存在多个镜像对应了一个 imageID，那么上报的可能是其中任意一个：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker images | grep nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx            latest              2622e6cca7eb        2 days ago          132MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx            mainline            2622e6cca7eb        2 days ago&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，一个 Pod 中 spec 和 status 的 image 字段不一致，并不意味着宿主机上这个容器运行的镜像版本和期望的不一致。&lt;/p&gt;
&lt;h3 id=&quot;背景-4：ReadinessGate-控制-Pod-是否-Ready&quot;&gt;&lt;a href=&quot;#背景-4：ReadinessGate-控制-Pod-是否-Ready&quot; class=&quot;headerlink&quot; title=&quot;背景 4：ReadinessGate 控制 Pod 是否 Ready&quot;&gt;&lt;/a&gt;背景 4：ReadinessGate 控制 Pod 是否 Ready&lt;/h3&gt;&lt;p&gt;在 Kubernetes 1.12 版本之前，一个 Pod 是否处于 Ready 状态只是由 kubelet 根据容器状态来判定：如果 Pod 中容器全部 ready，那么 Pod 就处于 Ready 状态。&lt;/p&gt;
&lt;p&gt;但事实上，很多时候上层 operator 或用户都需要能控制 Pod 是否 Ready 的能力。因此，Kubernetes 1.12 版本之后提供了一个 readinessGates 功能来满足这个场景。如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  readinessGates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - conditionType:&lt;/span&gt; MyDemo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  conditions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - type:&lt;/span&gt; MyDemo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - type:&lt;/span&gt; ContainersReady&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - type:&lt;/span&gt; Ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前 kubelet 判定一个 Pod 是否 Ready 的两个前提条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pod 中容器全部 Ready（其实对应了 ContainersReady condition 为 True）；&lt;/li&gt;
&lt;li&gt;如果 pod.spec.readinessGates 中定义了一个或多个 conditionType，那么需要这些 conditionType 在 pod.status.conditions 中都有对应的 status: “true” 的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只有满足上述两个前提，kubelet 才会上报 Ready condition 为 True&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;了解了上面的四个背景之后，接下来分析一下 OpenKruise 是如何在 Kubernetes 中实现原地升级的原理。&lt;/p&gt;
&lt;h3 id=&quot;1-单个-Pod-如何原地升级？&quot;&gt;&lt;a href=&quot;#1-单个-Pod-如何原地升级？&quot; class=&quot;headerlink&quot; title=&quot;1. 单个 Pod 如何原地升级？&quot;&gt;&lt;/a&gt;1. 单个 Pod 如何原地升级？&lt;/h3&gt;&lt;p&gt;由“背景 1”可知，其实我们对一个存量 Pod 的 spec.containers[x] 中字段做修改，kubelet 会感知到这个 container 的 hash 发生了变化，随即就会停掉对应的旧容器，并用新的 container 来拉镜像、创建和启动新容器。&lt;/p&gt;
&lt;p&gt;由“背景 2”可知，当前我们对一个存量 Pod 的 spec.containers[x] 中的修改，仅限于 image 字段。&lt;/p&gt;
&lt;p&gt;因此，得出第一个实现原理：**对于一个现有的 Pod 对象，我们能且只能修改其中的 spec.containers[x].image 字段，来触发 Pod 中对应容器升级到一个新的 image。&lt;/p&gt;
&lt;h3 id=&quot;2-如何判断-Pod-原地升级成功？&quot;&gt;&lt;a href=&quot;#2-如何判断-Pod-原地升级成功？&quot; class=&quot;headerlink&quot; title=&quot;2. 如何判断 Pod 原地升级成功？&quot;&gt;&lt;/a&gt;2. 如何判断 Pod 原地升级成功？&lt;/h3&gt;&lt;p&gt;接下来的问题是，当我们修改了 Pod 中的 spec.containers[x].image 字段后，如何判断 kubelet 已经将容器重建成功了呢？&lt;/p&gt;
&lt;p&gt;由“背景 3”可知，比较 spec 和 status 中的 image 字段是不靠谱的，因为很有可能 status 中上报的是 Node 上存在的另一个镜像名（相同 imageID）。&lt;/p&gt;
&lt;p&gt;因此，得出第二个实现原理：&lt;strong&gt;判断 Pod 原地升级是否成功，相对来说比较靠谱的办法，是在原地升级前先将 status.containerStatuses[x].imageID 记录下来。在更新了 spec 镜像之后，如果观察到 Pod 的 status.containerStatuses[x].imageID 变化了，我们就认为原地升级已经重建了容器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但这样一来，我们对原地升级的 image 也有了一个要求：&lt;strong&gt;不能用 image 名字（tag）不同、但实际对应同一个 imageID 的镜像来做原地升级，否则可能一直都被判断为没有升级成功（因为 status 中 imageID 不会变化）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然，后续我们还可以继续优化。OpenKruise 即将开源镜像预热的能力，会通过 DaemonSet 在每个 Node 上部署一个 NodeImage Pod。通过 NodeImage 上报我们可以得知 pod spec 中的 image 所对应的 imageID，然后和 pod status 中的 imageID 比较即可准确判断原地升级是否成功。&lt;/p&gt;
&lt;h3 id=&quot;3-如何确保原地升级过程中流量无损？&quot;&gt;&lt;a href=&quot;#3-如何确保原地升级过程中流量无损？&quot; class=&quot;headerlink&quot; title=&quot;3. 如何确保原地升级过程中流量无损？&quot;&gt;&lt;/a&gt;3. 如何确保原地升级过程中流量无损？&lt;/h3&gt;&lt;p&gt;在 Kubernetes 中，一个 Pod 是否 Ready 就代表了它是否可以提供服务。因此，像 Service 这类的流量入口都会通过判断 Pod Ready 来选择是否能将这个 Pod 加入 endpoints 端点中。&lt;/p&gt;
&lt;p&gt;由“背景 4”可知，从 Kubernetes 1.12+ 之后，operator/controller 这些组件也可以通过设置 readinessGates 和更新 pod.status.conditions 中的自定义 type 状态，来控制 Pod 是否可用。&lt;/p&gt;
&lt;p&gt;因此，得出第三个实现原理：&lt;strong&gt;可以在 &lt;code&gt;pod.spec.readinessGates&lt;/code&gt; 中定义一个叫 &lt;code&gt;InPlaceUpdateReady&lt;/code&gt; 的 conditionType&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在原地升级时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;先将 pod.status.conditions 中的 InPlaceUpdateReady condition 设为 “False”，这样就会触发 kubelet 将 Pod 上报为 NotReady，从而使流量组件（如 endpoint controller）将这个 Pod 从服务端点摘除&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再更新 pod spec 中的 image 触发原地升级&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原地升级结束后，再将 InPlaceUpdateReady condition 设为 “True”，使 Pod 重新回到 Ready 状态。&lt;/p&gt;
&lt;p&gt;另外在原地升级的两个步骤中，第一步将 Pod 改为 NotReady 后，流量组件异步 watch 到变化并摘除端点可能是需要一定时间的。因此我们也提供优雅原地升级的能力，即通过 gracePeriodSeconds 配置在修改 NotReady 状态和真正更新 image 触发原地升级两个步骤之间的静默期时间。&lt;/p&gt;
&lt;h3 id=&quot;4-组合发布策略&quot;&gt;&lt;a href=&quot;#4-组合发布策略&quot; class=&quot;headerlink&quot; title=&quot;4. 组合发布策略&quot;&gt;&lt;/a&gt;4. 组合发布策略&lt;/h3&gt;&lt;p&gt;原地升级和 Pod 重建升级一样，可以配合各种发布策略来执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;partition&lt;/strong&gt;：如果配置 partition 做灰度，那么只会将 replicas-partition 数量的 Pod 做原地升级；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxUnavailable&lt;/strong&gt;：如果配置 maxUnavailable，那么只会将满足 unavailable 数量的 Pod 做原地升级；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxSurge&lt;/strong&gt;：如果配置 maxSurge 做弹性，那么当先扩出来 maxSurge 数量的 Pod 之后，存量的 Pod 仍然使用原地升级；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;priority/scatter&lt;/strong&gt;：如果配置了发布优先级/打散策略，会按照策略顺序对 Pod 做原地升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;如上文所述，&lt;a href=&quot;https://github.com/openkruise/kruise?spm=a2c6h.12873639.0.0.4bc314b5SPKTQY&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenKruise&lt;/a&gt; 结合 Kubernetes 原生提供的 kubelet 容器版本管理、readinessGates 等功能，实现了针对 Pod 的原地升级能力。&lt;/p&gt;
&lt;p&gt;而原地升级也为应用发布带来大幅的效率、稳定性提升。值得关注的是，随着集群、应用规模的增大，这种提升的收益越加明显。&lt;/p&gt;
&lt;p&gt;来源：阿里云开发者社区 作者：王思宇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念介绍&quot;&gt;&lt;a href=&quot;#概念介绍&quot; class=&quot;headerlink&quot; title=&quot;概念介绍&quot;&gt;&lt;/a&gt;概念介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原地升级&lt;/strong&gt;一词中，“升级”不难理解，是将应用实例的版本由旧版替换为新版。那么如何结合 Kubernetes 环境来理解“原地”呢？&lt;/p&gt;
&lt;p&gt;我们先来看看 K8s 原生 workload 的发布方式。这里假设我们需要部署一个应用，包括 foo、bar 两个容器在 Pod 中。其中，foo 容器第一次部署时用的镜像版本是 v1，我们需要将其升级为 v2 版本镜像，该怎么做呢？&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="升级策略" scheme="http://team.jiunile.com/categories/kubernetes/%E5%8D%87%E7%BA%A7%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="升级策略" scheme="http://team.jiunile.com/tags/%E5%8D%87%E7%BA%A7%E7%AD%96%E7%95%A5/"/>
    
      <category term="原地升级" scheme="http://team.jiunile.com/tags/%E5%8E%9F%E5%9C%B0%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>docker 卡死引起的 container runtime is down</title>
    <link href="http://team.jiunile.com//blog/2020/10/docker-hang.html"/>
    <id>http://team.jiunile.com//blog/2020/10/docker-hang.html</id>
    <published>2020-10-26T12:00:00.000Z</published>
    <updated>2020-10-27T06:03:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1 背景&quot;&gt;&lt;/a&gt;1 背景&lt;/h2&gt;&lt;p&gt;最近升级了一版 kubelet，修复因 kubelet 删除 Pod 慢导致平台删除集群超时的问题。在灰度 redis 隔离集群的时候，发现升级 kubelet 并重启服务后，少量宿主状态变成了 NotReady，并且回滚 kubelet 至之前版本，宿主状态仍然是 NotReady。查看宿主状态时提示 ‘container runtime is down’ ，根据经验，此时一般就是容器运行时出了问题。弹性云使用的容器运行时是 docker，我们就去检查 docker 的状态，检测结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt; 查看所有容器状态，执行正常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker inspect&lt;/code&gt; 查看某一容器详细状态，执行阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型的 &lt;code&gt;docker hang&lt;/code&gt; 死行为。因为我们最近在升级 docker 版本，存量宿主 docker 的版本为 1.13.1，并且在逐步升级至 18.06.3，新宿主的 docker 版本都是 18.06.3。&lt;code&gt;docker hang&lt;/code&gt; 死问题在 1.13.1 版本上表现得更彻底，在执行 &lt;code&gt;docker ps&lt;/code&gt; 的时候就已经 hang 死了，一旦某个容器出了问题，docker 就处于无响应状态；而 docker 18.06.3 做了一点小小的优化，在执行 docker ps 时去掉了针对容器级别的加锁操作，但是 &lt;code&gt;docker inspect&lt;/code&gt; 依然会加容器锁，因此某一个容器出现问题，并不会造成 docker 服务不可响应，受影响的也仅仅是该容器，无法执行任何操作。&lt;/p&gt;
&lt;p&gt;至于为什么以 &lt;code&gt;docker ps&lt;/code&gt; 与 &lt;code&gt;docker inspect&lt;/code&gt; 为指标检查 docker 状态，因为 kubelet 就是依赖这两个 docker API 获取容器状态。&lt;/p&gt;
&lt;p&gt;所以，现在问题有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker hang&lt;/code&gt; 死的根因是什么？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker hang&lt;/code&gt; 死时，为什么重启 kubelet，会导致宿主状态变为 NotReady？&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-重启-kubelet-变更宿主状态&quot;&gt;&lt;a href=&quot;#2-重启-kubelet-变更宿主状态&quot; class=&quot;headerlink&quot; title=&quot;2 重启 kubelet 变更宿主状态&quot;&gt;&lt;/a&gt;2 重启 kubelet 变更宿主状态&lt;/h2&gt;&lt;p&gt;kubelet 重启后宿主状态从 Ready 变为 NotReady，这个问题相较 &lt;code&gt;docker hang&lt;/code&gt; 死而言，没有那么复杂，所以我们先排查这个问题。&lt;/p&gt;
&lt;p&gt;kubelet 针对宿主会设置多个 Condition，表明宿主当前所处的状态，比如宿主内存是否告急、线程数是否告急，以及宿主是否就绪。其中 ReadyCondition 表明宿主是否就绪，kubectl 查看宿主状态时，展示的 Statue 信息就是 ReadCondition 的内容，常见的状态及其含义定义如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Ready 状态&lt;/strong&gt;：表明当前宿主状态一切 OK，能正常响应 Pod 事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NotReady 状态&lt;/strong&gt;：表明宿主的 kubelet 仍在运行，但是此时已经无法处理 Pod 事件。NotReady 绝大多数情况都是容器运行时出了问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown 状态&lt;/strong&gt;：表明宿主 kubelet 已停止运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kubelet 定义的 ReadyCondition 的判定条件如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// defaultNodeStatusFuncs is a factory that generates the default set of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// setNodeStatus funcs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(kl *Kubelet)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;defaultNodeStatusFuncs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; []&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*v1.Node)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   setters = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(setters,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.OutOfDiskCondition(kl.clock.Now, kl.recordNodeStatusEvent),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.MemoryPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderMemoryPressure, kl.recordNodeStatusEvent),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.DiskPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderDiskPressure, kl.recordNodeStatusEvent),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.PIDPressureCondition(kl.clock.Now, kl.evictionManager.IsUnderPIDPressure, kl.recordNodeStatusEvent),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.ReadyCondition(kl.clock.Now, kl.runtimeState.runtimeErrors, kl.runtimeState.networkErrors, validateHostFunc, kl.containerManager.Status, kl.recordNodeStatusEvent),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nodestatus.VolumesInUse(kl.volumeManager.ReconcilerStatesHasBeenSynced, kl.volumeManager.GetVolumesInUse),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// TODO(mtaufen): I decided not to move this setter for now, since all it does is send an event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// and record state back to the Kubelet runtime object. In the future, I&#39;d like to isolate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// these side-effects by decoupling the decisions to send events and partial status recording&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// from the Node setters.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      kl.recordNodeSchedulableEvent,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; setters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;深入 nodestatus.ReadyCondition 的实现可以发现，宿主是否 Ready 取决于很多条件，包含运行时判定、网络判定、基本资源判定等。这里我们只需关注运行时判定即可：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *runtimeState)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runtimeErrors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; []&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; s.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !s.lastBaseRuntimeSync.Add(s.baseRuntimeSyncThreshold).After(time.Now()) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ret = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ret, &lt;span class=&quot;string&quot;&gt;&quot;container runtime is down&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; s.internalError != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ret = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ret, s.internalError.Error())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, hc := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; s.healthChecks &amp;#123;                                            &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ok, err := hc.fn(); !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ret = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(ret, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s is not healthy: %v&quot;&lt;/span&gt;, hc.name, err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当出现如下两种状况之一时，则判定运行时检查不通过：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;距最近一次运行时同步操作的时间间隔超过指定阈值（默认 30s）&lt;/li&gt;
&lt;li&gt;运行时健康检查未通过&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，当时宿主的 NotReady 是由哪种状况引起的呢？结合 kubelet 日志分析，kubelet 每隔 5s 就输出一条日志：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0715 10:43:28.049240   16315 kubelet.go:1835] skipping pod synchronization - [container runtime is down]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0715 10:43:33.049359   16315 kubelet.go:1835] skipping pod synchronization - [container runtime is down]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0715 10:43:38.049492   16315 kubelet.go:1835] skipping pod synchronization - [container runtime is down]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，状况 1 是宿主 NotReady 的元凶。&lt;/p&gt;
&lt;p&gt;我们继续分析为什么 kubelet 没有按照预期设置 lastBaseRuntimeSync。kubelet 启动时会创建一个 goroutine，并在该 goroutine 中循环设置 lastBaseRuntimeSync，循环如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(kl *Kubelet)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(updates &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; kubetypes.PodUpdate)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; wait.Until(kl.updateRuntimeUp, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;*time.Second, wait.NeverStop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(kl *Kubelet)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateRuntimeUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   kl.updateRuntimeMux.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; kl.updateRuntimeMux.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   kl.oneTimeInitializer.Do(kl.initializeRuntimeDependentModules)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   kl.runtimeState.setRuntimeSync(kl.clock.Now())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正常情况下，kubelet 每隔 5s 会将 lastBaseRuntimeSync 设置为当前时间，而宿主状态异常时，这个时间戳一直未被更新。也即 updateRuntimeUp 一直被阻塞在设置 lastBaseRuntimeSync 之前的某一步。我们只需逐个排查 updateRuntimeUp 内的函数调用即可，具体过程不再展示，最终的函数调用链路如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initializeRuntimeDependentModules -&amp;gt; kl.cadvisor.Start -&amp;gt; cc.Manager.Start -&amp;gt; self.createContainer -&amp;gt; m.createContainerLocked -&amp;gt; container.NewContainerHandler -&amp;gt; factory.CanHandleAndAccept -&amp;gt; self.client.ContainerInspect&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于某个容器状态异常，kubelet 执行 &lt;code&gt;docker inspect&lt;/code&gt; 操作也被 hang 死。&lt;/p&gt;
&lt;p&gt;因此，重启 kubelet 引起宿主状态从 Ready 变为 NotReady，其根因在于某个容器状态异常，执行 docker inspect 时被 hang 死。而如果 &lt;code&gt;docker inspect hang&lt;/code&gt; 死发生在 kubelet 重启之后，则不会对宿主的 Ready 状态造成任何影响，因为 oneTimeInitializer 是 &lt;code&gt;sync.Once&lt;/code&gt; 类型，也即仅仅会在 kebelet 启动时执行一次。那时 kubelet 仅仅是不能处理该 Pod 相关的任何事件，包含删除、变更等，但是仍然能够处理其他 Pod 的任意事件。&lt;/p&gt;
&lt;p&gt;可能有人会问，为什么 kubelet 重启时访问 &lt;code&gt;docker inspect&lt;/code&gt; 操作不加超时控制？确实，如果添加了超时控制，kubelet 重启不会引起宿主状态变更。待详细挖掘后再来补充，我们先继续分析 &lt;code&gt;docker hang&lt;/code&gt; 死的问题。&lt;/p&gt;
&lt;h2 id=&quot;3-docker-hang-死&quot;&gt;&lt;a href=&quot;#3-docker-hang-死&quot; class=&quot;headerlink&quot; title=&quot;3 docker hang 死&quot;&gt;&lt;/a&gt;3 docker hang 死&lt;/h2&gt;&lt;p&gt;我们对 &lt;code&gt;docker hang&lt;/code&gt; 死并不陌生，因为已经发生了好多起。其发生时的现象也多种多样。以往针对 docker 1.13.1 版本的排查都发现了一些线索，但是并没有定位到根因，最终绝大多数也是通过重启 docker 解决。而这一次发生在 docker 18.06.3 版本的 &lt;code&gt;docker hang&lt;/code&gt; 死行为，经过我们 4 人小分队接近一周的望闻问切，终于确定了其病因。注意，&lt;code&gt;docker hang&lt;/code&gt; 死的原因不止一种，因此本处方并非是个万能药。&lt;/p&gt;
&lt;p&gt;现在，我们掌握的知识仅仅是 docker 异常了，无法响应特定容器的 &lt;code&gt;docker inspect&lt;/code&gt; 操作，而对详细信息则一无所知。&lt;/p&gt;
&lt;h3 id=&quot;3-1-链路跟踪&quot;&gt;&lt;a href=&quot;#3-1-链路跟踪&quot; class=&quot;headerlink&quot; title=&quot;3.1 链路跟踪&quot;&gt;&lt;/a&gt;3.1 链路跟踪&lt;/h3&gt;&lt;p&gt;首先，我们希望对 docker 运行的全局状况有一个大致的了解，熟悉 go 语言开发的用户自然能联想到神器 pprof。我们借助 pprof 描绘出了 docker 当时运行的蓝图：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;goroutine profile: total 722373&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;717594 @ 0x7fe8bc202980 0x7fe8bc202a40 0x7fe8bc2135d8 0x7fe8bc2132ef 0x7fe8bc238c1a 0x7fe8bd56f7fe 0x7fe8bd56f6bd 0x7fe8bcea8719 0x7fe8bcea938b 0x7fe8bcb726ca 0x7fe8bcb72b01 0x7fe8bc71c26b 0x7fe8bcb85f4a 0x7fe8bc4b9896 0x7fe8bc72a438 0x7fe8bcb849e2 0x7fe8bc4bc67e 0x7fe8bc4b88a3 0x7fe8bc230711&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc2132ee	sync.runtime_SemacquireMutex+0x3e																/usr/local/go/src/runtime/sema.go:71&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc238c19	sync.(*Mutex).Lock+0x109																	/usr/local/go/src/sync/mutex.go:134&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd56f7fd	github.com/docker/docker/daemon.(*Daemon).ContainerInspectCurrent+0x8d												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd56f6bc	github.com/docker/docker/daemon.(*Daemon).ContainerInspect+0x11c												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea8718	github.com/docker/docker/api/server/router/container.(*containerRouter).getContainersByName+0x118								/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/inspect.go:15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea938a	github.com/docker/docker/api/server/router/container.(*containerRouter).(github.com/docker/docker/api/server/router/container.getContainersByName)-fm+0x6a	/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/container.go:39&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb726c9	github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1+0xd9									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb72b00	github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1+0x400									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc71c26a	github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1+0x7aa										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb85f49	github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1+0x199											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b9895	net/http.HandlerFunc.ServeHTTP+0x45																/usr/local/go/src/net/http/server.go:1947&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc72a437	github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP+0x227										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:103&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb849e1	github.com/docker/docker/api/server.(*routerSwapper).ServeHTTP+0x71												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router_swapper.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4bc67d	net/http.serverHandler.ServeHTTP+0xbd																/usr/local/go/src/net/http/server.go:2694&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b88a2	net/http.(*conn).serve+0x652																	/usr/local/go/src/net/http/server.go:1830&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4175 @ 0x7fe8bc202980 0x7fe8bc202a40 0x7fe8bc2135d8 0x7fe8bc2132ef 0x7fe8bc238c1a 0x7fe8bcc2eccf 0x7fe8bd597af4 0x7fe8bcea2456 0x7fe8bcea956b 0x7fe8bcb73dff 0x7fe8bcb726ca 0x7fe8bcb72b01 0x7fe8bc71c26b 0x7fe8bcb85f4a 0x7fe8bc4b9896 0x7fe8bc72a438 0x7fe8bcb849e2 0x7fe8bc4bc67e 0x7fe8bc4b88a3 0x7fe8bc230711&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc2132ee	sync.runtime_SemacquireMutex+0x3e																/usr/local/go/src/runtime/sema.go:71&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc238c19	sync.(*Mutex).Lock+0x109																	/usr/local/go/src/sync/mutex.go:134&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcc2ecce	github.com/docker/docker/container.(*State).IsRunning+0x2e													/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/state.go:240&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd597af3	github.com/docker/docker/daemon.(*Daemon).ContainerStats+0xb3													/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/stats.go:30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea2455	github.com/docker/docker/api/server/router/container.(*containerRouter).getContainersStats+0x1e5								/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/container_routes.go:115&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea956a	github.com/docker/docker/api/server/router/container.(*containerRouter).(github.com/docker/docker/api/server/router/container.getContainersStats)-fm+0x6a	/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/container.go:42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb73dfe	github.com/docker/docker/api/server/router.cancellableHandler.func1+0xce											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/local.go:92&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb726c9	github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1+0xd9									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb72b00	github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1+0x400									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc71c26a	github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1+0x7aa										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb85f49	github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1+0x199											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b9895	net/http.HandlerFunc.ServeHTTP+0x45																/usr/local/go/src/net/http/server.go:1947&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc72a437	github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP+0x227										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:103&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb849e1	github.com/docker/docker/api/server.(*routerSwapper).ServeHTTP+0x71												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router_swapper.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4bc67d	net/http.serverHandler.ServeHTTP+0xbd																/usr/local/go/src/net/http/server.go:2694&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b88a2	net/http.(*conn).serve+0x652																	/usr/local/go/src/net/http/server.go:1830&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 @ 0x7fe8bc202980 0x7fe8bc202a40 0x7fe8bc2135d8 0x7fe8bc2131fb 0x7fe8bc239a3b 0x7fe8bcbb679d 0x7fe8bcc26774 0x7fe8bd570b20 0x7fe8bd56f81c 0x7fe8bd56f6bd 0x7fe8bcea8719 0x7fe8bcea938b 0x7fe8bcb726ca 0x7fe8bcb72b01 0x7fe8bc71c26b 0x7fe8bcb85f4a 0x7fe8bc4b9896 0x7fe8bc72a438 0x7fe8bcb849e2 0x7fe8bc4bc67e 0x7fe8bc4b88a3 0x7fe8bc230711&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc2131fa	sync.runtime_Semacquire+0x3a																	/usr/local/go/src/runtime/sema.go:56&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc239a3a	sync.(*RWMutex).RLock+0x4a																	/usr/local/go/src/sync/rwmutex.go:50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcbb679c	github.com/docker/docker/daemon/exec.(*Store).List+0x4c														/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec/exec.go:140&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcc26773	github.com/docker/docker/container.(*Container).GetExecIDs+0x33													/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/container/container.go:423&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd570b1f	github.com/docker/docker/daemon.(*Daemon).getInspectData+0x5cf													/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:178&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd56f81b	github.com/docker/docker/daemon.(*Daemon).ContainerInspectCurrent+0xab												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd56f6bc	github.com/docker/docker/daemon.(*Daemon).ContainerInspect+0x11c												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/inspect.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea8718	github.com/docker/docker/api/server/router/container.(*containerRouter).getContainersByName+0x118								/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/inspect.go:15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea938a	github.com/docker/docker/api/server/router/container.(*containerRouter).(github.com/docker/docker/api/server/router/container.getContainersByName)-fm+0x6a	/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/container.go:39&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb726c9	github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1+0xd9									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb72b00	github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1+0x400									/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc71c26a	github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1+0x7aa										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb85f49	github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1+0x199											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b9895	net/http.HandlerFunc.ServeHTTP+0x45																/usr/local/go/src/net/http/server.go:1947&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc72a437	github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP+0x227										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:103&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb849e1	github.com/docker/docker/api/server.(*routerSwapper).ServeHTTP+0x71												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router_swapper.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4bc67d	net/http.serverHandler.ServeHTTP+0xbd																/usr/local/go/src/net/http/server.go:2694&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b88a2	net/http.(*conn).serve+0x652																	/usr/local/go/src/net/http/server.go:1830&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 @ 0x7fe8bc202980 0x7fe8bc212946 0x7fe8bc8b6881 0x7fe8bc8b699d 0x7fe8bc8e259b 0x7fe8bc8e1695 0x7fe8bc8c47d5 0x7fe8bd2e0c06 0x7fe8bd2eda96 0x7fe8bc8c42fb 0x7fe8bc8c4613 0x7fe8bd2a6474 0x7fe8bd2e6976 0x7fe8bd3661c5 0x7fe8bd56842f 0x7fe8bcea7bdb 0x7fe8bcea9f6b 0x7fe8bcb726ca 0x7fe8bcb72b01 0x7fe8bc71c26b 0x7fe8bcb85f4a 0x7fe8bc4b9896 0x7fe8bc72a438 0x7fe8bcb849e2 0x7fe8bc4bc67e 0x7fe8bc4b88a3 0x7fe8bc230711&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8b6880	github.com/docker/docker/vendor/google.golang.org/grpc/transport.(*Stream).waitOnHeader+0x100											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/transport/transport.go:222&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8b699c	github.com/docker/docker/vendor/google.golang.org/grpc/transport.(*Stream).RecvCompress+0x2c											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/transport/transport.go:233&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8e259a	github.com/docker/docker/vendor/google.golang.org/grpc.(*csAttempt).recvMsg+0x63a												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:515&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8e1694	github.com/docker/docker/vendor/google.golang.org/grpc.(*clientStream).RecvMsg+0x44												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/stream.go:395&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8c47d4	github.com/docker/docker/vendor/google.golang.org/grpc.invoke+0x184														/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/call.go:83&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd2e0c05	github.com/docker/docker/vendor/github.com/containerd/containerd.namespaceInterceptor.unary+0xf5										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/grpc.go:35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd2eda95	github.com/docker/docker/vendor/github.com/containerd/containerd.(namespaceInterceptor).(github.com/docker/docker/vendor/github.com/containerd/containerd.unary)-fm+0xf5	/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/grpc.go:51&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8c42fa	github.com/docker/docker/vendor/google.golang.org/grpc.(*ClientConn).Invoke+0x10a												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/call.go:35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc8c4612	github.com/docker/docker/vendor/google.golang.org/grpc.Invoke+0xc2														/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/google.golang.org/grpc/call.go:60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd2a6473	github.com/docker/docker/vendor/github.com/containerd/containerd/api/services/tasks/v1.(*tasksClient).Start+0xd3								/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:421&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd2e6975	github.com/docker/docker/vendor/github.com/containerd/containerd.(*process).Start+0xf5												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/containerd/containerd/process.go:109&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd3661c4	github.com/docker/docker/libcontainerd.(*client).Exec+0x4b4															/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/libcontainerd/client_daemon.go:381&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bd56842e	github.com/docker/docker/daemon.(*Daemon).ContainerExecStart+0xb4e														/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/daemon/exec.go:251&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea7bda	github.com/docker/docker/api/server/router/container.(*containerRouter).postContainerExecStart+0x34a										/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/exec.go:125&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcea9f6a	github.com/docker/docker/api/server/router/container.(*containerRouter).(github.com/docker/docker/api/server/router/container.postContainerExecStart)-fm+0x6a			/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router/container/container.go:59&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb726c9	github.com/docker/docker/api/server/middleware.ExperimentalMiddleware.WrapHandler.func1+0xd9											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/experimental.go:26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb72b00	github.com/docker/docker/api/server/middleware.VersionMiddleware.WrapHandler.func1+0x400											/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/middleware/version.go:62&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc71c26a	github.com/docker/docker/pkg/authorization.(*Middleware).WrapHandler.func1+0x7aa												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/pkg/authorization/middleware.go:59&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb85f49	github.com/docker/docker/api/server.(*Server).makeHTTPHandler.func1+0x199													/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/server.go:141&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b9895	net/http.HandlerFunc.ServeHTTP+0x45																		/usr/local/go/src/net/http/server.go:1947&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc72a437	github.com/docker/docker/vendor/github.com/gorilla/mux.(*Router).ServeHTTP+0x227												/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/vendor/github.com/gorilla/mux/mux.go:103&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bcb849e1	github.com/docker/docker/api/server.(*routerSwapper).ServeHTTP+0x71														/root/rpmbuild/BUILD/src/engine/.gopath/src/github.com/docker/docker/api/server/router_swapper.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4bc67d	net/http.serverHandler.ServeHTTP+0xbd																		/usr/local/go/src/net/http/server.go:2694&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7fe8bc4b88a2	net/http.(*conn).serve+0x652																			/usr/local/go/src/net/http/server.go:1830&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意，这是一份精简后的 docker 协程栈信息。从上面的蓝图，我们可以总结出如下结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有 717594 个协程被阻塞在 &lt;code&gt;docker inspect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有 4175 个协程被阻塞在 &lt;code&gt;docker stats&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有 1 个协程被阻塞在获取 &lt;code&gt;docker exec&lt;/code&gt; 的任务 ID&lt;/li&gt;
&lt;li&gt;有 1 个协程被阻塞在 &lt;code&gt;docker exec&lt;/code&gt; 的执行过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上面的结论，我们基本了解了异常容器 hang 死的原因，在于该容器执行 docker exec 后未返回 (4)，进而导致获取 &lt;code&gt;docker exec&lt;/code&gt; 的任务 ID 阻塞 (3)，由于 (3) 实现获取了容器锁，进而导致了 &lt;code&gt;docker inspect&lt;/code&gt; (1) 与 &lt;code&gt;docker stats&lt;/code&gt; (2) 卡死。所以病因并非是 &lt;code&gt;docker inspect&lt;/code&gt;，而是 &lt;code&gt;docker exec&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要想继续往下挖掘，我们现在有必要补充一下背景知识。kubelet 启动容器或者在容器内执行命令的完整调用路径如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                                              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +------------+                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |            |                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |   kubelet  |                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |            |                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +------|-----+                                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|          |                                                   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +------v-----+       +---------------+                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |            |       |               |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |   dockerd  -------&amp;gt;|  containerd   |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |            |       |               |                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   +------------+       +-------|-------+                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                |                             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        +-------v-------+     +-----------+   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        |               |     |           |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        |containerd-shim-----&amp;gt;|   runc    |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        |               |     |           |   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                        +---------------+     +-----------+   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                                                              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;dockerd 与 containerd 可以当做两层 nginx 代理，containerd-shim 是容器的监护人，而 runc 则是容器启动与命令执行的真正工具人。runc 干的事情也非常简单：按照用户指定的配置创建 NS，或者进入特定 NS，然后执行用户命令。说白了，创建容器就是新建 NS，然后在该 NS 内执行用户指定的命令。&lt;/p&gt;
&lt;p&gt;按照上面介绍的背景知识，我们继续往下探索 containerd。幸运的是，借助 pprof，我们也可以描绘出 containerd 此时的运行蓝图：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;goroutine profile: total 430&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 @ 0x7f6e55f82740 0x7f6e55f92616 0x7f6e56a8412c 0x7f6e56a83d6d 0x7f6e56a911bf 0x7f6e56ac6e3b 0x7f6e565093de 0x7f6e5650dd3b 0x7f6e5650392b 0x7f6e56b51216 0x7f6e564e5909 0x7f6e563ec76a 0x7f6e563f000a 0x7f6e563f6791 0x7f6e55fb0151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e56a8412b	github.com/containerd/containerd/vendor/github.com/stevvooe/ttrpc.(*Client).dispatch+0x24b				/go/src/github.com/containerd/containerd/vendor/github.com/stevvooe/ttrpc/client.go:102&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e56a83d6c	github.com/containerd/containerd/vendor/github.com/stevvooe/ttrpc.(*Client).Call+0x15c					/go/src/github.com/containerd/containerd/vendor/github.com/stevvooe/ttrpc/client.go:73&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e56a911be	github.com/containerd/containerd/linux/shim/v1.(*shimClient).Start+0xbe							/go/src/github.com/containerd/containerd/linux/shim/v1/shim.pb.go:1745&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e56ac6e3a	github.com/containerd/containerd/linux.(*Process).Start+0x8a								/go/src/github.com/containerd/containerd/linux/process.go:125&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e565093dd	github.com/containerd/containerd/services/tasks.(*local).Start+0x14d							/go/src/github.com/containerd/containerd/services/tasks/local.go:187&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e5650dd3a	github.com/containerd/containerd/services/tasks.(*service).Start+0x6a							/go/src/github.com/containerd/containerd/services/tasks/service.go:72&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e5650392a	github.com/containerd/containerd/api/services/tasks/v1._Tasks_Start_Handler.func1+0x8a					/go/src/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:624&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e56b51215	github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.UnaryServerInterceptor+0xa5	/go/src/github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus/server.go:29&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e564e5908	github.com/containerd/containerd/api/services/tasks/v1._Tasks_Start_Handler+0x168					/go/src/github.com/containerd/containerd/api/services/tasks/v1/tasks.pb.go:626&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e563ec769	github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).processUnaryRPC+0x849				/go/src/github.com/containerd/containerd/vendor/google.golang.org/grpc/server.go:920&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e563f0009	github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).handleStream+0x1319				/go/src/github.com/containerd/containerd/vendor/google.golang.org/grpc/server.go:1142&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#	0x7f6e563f6790	github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1+0xa0			/go/src/github.com/containerd/containerd/vendor/google.golang.org/grpc/server.go:637&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样，我们仅保留了关键的协程信息，从上面的协程栈可以看出，containerd 阻塞在接收 exec 返回结果处，附上关键代码佐证：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c *Client)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context, req *Request, resp *Response)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   errs := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   call := &amp;amp;callRequest&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      req:  req,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resp: resp,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      errs: errs,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; c.calls &amp;lt;- call:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c.done:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;        &lt;span class=&quot;comment&quot;&gt;// 此处对应上面协程栈 /go/src/github.com/containerd/containerd/vendor/github.com/stevvooe/ttrpc/client.go:102&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; err := &amp;lt;-errs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filterCloseErr(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c.done:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;containerd 将请求传递至 containerd-shim 之后，一直在等待 containerd-shim 的返回。&lt;/p&gt;
&lt;p&gt;正常情况下，如果我们能够按照调用链路逐个分析每个组件的协程调用栈信息，我们能够很快的定位问题所在。不幸的是，由于线上 docker 没有开启 debug 模式，我们无法收集 containerd-shim 的 pprof 信息，并且 runc 也没有开启 pprof。因此单纯依赖协程调用链路定位问题这条路被堵死了。&lt;/p&gt;
&lt;p&gt;截至目前，我们已经收集了部分关键信息，同时也将问题排查范围更进一步地缩小在 containerd-shim 与 runc 之间。接下来我们换一种思路继续排查。&lt;/p&gt;
&lt;h3 id=&quot;3-2-进程排查&quot;&gt;&lt;a href=&quot;#3-2-进程排查&quot; class=&quot;headerlink&quot; title=&quot;3.2 进程排查&quot;&gt;&lt;/a&gt;3.2 进程排查&lt;/h3&gt;&lt;p&gt;当组件的运行状态无法继续获取时，我们转换一下思维，获取容器的运行状态，也即异常容器此时的进程状态。&lt;/p&gt;
&lt;p&gt;既然 &lt;code&gt;docker ps&lt;/code&gt; 执行正常，而 &lt;code&gt;docker inspect hang&lt;/code&gt; 死，首先我们定位异常容器，命令如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker ps | grep -v NAME | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; cid; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$cid&lt;/span&gt;; docker inspect &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &amp;#123;&amp;#123;.State.Pid&amp;#125;&amp;#125; &lt;span class=&quot;variable&quot;&gt;$cid&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;拿到异常容器的 ID 之后，我们就能扫描与该容器相关的所有进程：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root     11646  6655  0 Jun17 ?        00:01:04 docker-containerd-shim -namespace moby -workdir /home/docker_rt/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5 -address /var/run/docker/containerd/docker-containerd.sock -containerd-binary /usr/bin/docker-containerd -runtime-root /var/run/docker/runtime-runc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     11680 11646  0 Jun17 ?        00:00:00 /dockerinit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     15581 11646  0 Jun17 ?        00:00:00 docker-runc --root /var/run/docker/runtime-runc/moby --log /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/log.json --log-format json &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; --process /tmp/runc-process616674997 --detach --pid-file /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/0594c5897a41d401e4d1d7ddd44dacdd316c7e7d53bfdae7f16b0f6b26fcbcda.pid bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root     15638 15581  0 Jun17 ?        00:00:00 docker-runc init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;核心进程列表如上，简单备注下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6655：containerd 进程&lt;/li&gt;
&lt;li&gt;11646：异常容器的 containerd-shim 进程&lt;/li&gt;
&lt;li&gt;11680：异常容器的容器启动进程。在容器内查看，因 PID NS 的隔离，该进程 ID 是 1&lt;/li&gt;
&lt;li&gt;15581：在异常容器内执行用户命令的进程&lt;/li&gt;
&lt;li&gt;15638：在异常容器内执行用户命令时，进入容器 NS 的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里再补充一个背景知识：当我们启动容器时，首先会创建 &lt;code&gt;runc init&lt;/code&gt; 进程，创建并进入新的容器 NS；而当我们在容器内执行命令时，首先也会创建 &lt;code&gt;runc init&lt;/code&gt; 进程，进入容器的 NS。进入容器的隔离 NS 中，才会执行用户指定的命令。&lt;/p&gt;
&lt;p&gt;面对上面的进程列表，我们无法直观地感受问题究竟由哪个进程引起。因此，我们还需要了解进程当前所处的状态。借助 strace，我们逐一展示进程的活动状态：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 11646 (container-shim)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 11646 attached with 10 threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 37342] epoll_pwait(5,  &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11656] futex(0x818cc0, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11655] restart_syscall(&amp;lt;... resuming interrupted call ...&amp;gt; &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11654] futex(0x818bd8, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11653] futex(0x7&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;730, FUTEX_WAKE, 1 &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11651] futex(0xc4200b4148, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11650] futex(0xc420082948, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11649] futex(0xc420082548, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11647] restart_syscall(&amp;lt;... resuming interrupted call ...&amp;gt; &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11646] futex(0x7fd008, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11653] &amp;lt;... futex resumed&amp;gt; )       = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11647] &amp;lt;... restart_syscall resumed&amp;gt; ) = -1 EAGAIN (Resource temporarily unavailable)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11653] epoll_&lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;(4,  &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11647] pselect6(0, NULL, NULL, NULL, &amp;#123;0, 20000&amp;#125;, 0) = 0 (Timeout)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 11647] futex(0x7&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;730, FUTEX_WAIT, 0, &amp;#123;60, 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 11581 (runc &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 15581 attached with 7 threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15619] &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(6,  &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15592] futex(0xc4200be148, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15591] futex(0x7fd6d25f6238, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15590] futex(0xc420084d48, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15586] futex(0x7fd6d25f6320, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15584] restart_syscall(&amp;lt;... resuming interrupted call ...&amp;gt; &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15581] futex(0x7fd6d25d9b28, FUTEX_WAIT, 0, NULL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 11638 (runc init)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Process 15638 attached with 7 threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15648] futex(0x7f512cea5320, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15647] futex(0x7f512cea5238, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15645] futex(0xc4200bc148, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15643] futex(0xc420082d48, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15642] futex(0xc420082948, FUTEX_WAIT, 0, NULL &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15639] restart_syscall(&amp;lt;... resuming interrupted call ...&amp;gt; &amp;lt;unfinished ...&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid 15638] write(2, &lt;span class=&quot;string&quot;&gt;&quot;/usr/local/go/src/runtime/proc.g&quot;&lt;/span&gt;..., 33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从关联进程的活动状态，我们可以得出如下结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runc exec&lt;/code&gt; 在等待从 6 号 FD 读取数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runc init&lt;/code&gt; 在等待从 2 号 FD 写入数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些 FD 究竟对应的是什么文件呢？我们借助 lsof 可以查看：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 11638 (runc init)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND     PID USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  cwd       DIR               0,41      192 1066743071 /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  rtd       DIR               0,41      192 1066743071 /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  txt       REG                0,4  7644224 1070360467 /memfd:runc_cloned:/proc/self/exe (deleted)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3  2107816    1053962 /usr/lib64/libc-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3    19512    1054285 /usr/lib64/libdl-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3   266688    1050626 /usr/lib64/libseccomp.so.2.3.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3   142296    1055698 /usr/lib64/libpthread-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3    27168    3024893 /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/gundam/gundam_client/preload/lib64/gundam_preload.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root  mem       REG                8,3   164432    1054515 /usr/lib64/ld-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root    0r     FIFO                0,8      0t0 1070361745 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root    1w     FIFO                0,8      0t0 1070361746 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root    2w     FIFO                0,8      0t0 1070361747 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root    3u     unix 0xffff881ff8273000      0t0 1070361341 socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runc:[2:I 15638 root    5u  a_inode                0,9        0       7180 [eventpoll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 11581 (runc &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND     PID USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  cwd       DIR               0,18      120 1066743076 /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  rtd       DIR                8,3     4096          2 /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  txt       REG                8,3  7644224     919775 /usr/bin/docker-runc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3  2107816    1053962 /usr/lib64/libc-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3    19512    1054285 /usr/lib64/libdl-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3   266688    1050626 /usr/lib64/libseccomp.so.2.3.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3   142296    1055698 /usr/lib64/libpthread-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3    27168    3024893 /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/gundam/gundam_client/preload/lib64/gundam_preload.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root  mem       REG                8,3   164432    1054515 /usr/lib64/ld-2.17.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    0r     FIFO                0,8      0t0 1070361745 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    1w     FIFO                0,8      0t0 1070361746 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    2w     FIFO                0,8      0t0 1070361747 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    3w      REG               0,18     5456 1066709902 /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/log.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    4u  a_inode                0,9        0       7180 [eventpoll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-ru 15581 root    6u     unix 0xffff881ff8275400      0t0 1070361342 socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 11646 (container-shim)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND     PID USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root  cwd       DIR               0,18      120 1066743076 /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root  rtd       DIR                8,3     4096          2 /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root  txt       REG                8,3  4173632     919772 /usr/bin/docker-containerd-shim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    0r      CHR                1,3      0t0       2052 /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    1w      CHR                1,3      0t0       2052 /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    2w      CHR                1,3      0t0       2052 /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    3r     FIFO                0,8      0t0 1070361745 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    4u  a_inode                0,9        0       7180 [eventpoll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    5u  a_inode                0,9        0       7180 [eventpoll]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    6u     unix 0xffff881e8cac2800      0t0 1066743079 @/containerd-shim/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/shim.sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    7u     unix 0xffff881e8cac3400      0t0 1066743968 @/containerd-shim/moby/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/shim.sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    8r     FIFO                0,8      0t0 1066743970 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root    9w     FIFO                0,8      0t0 1070361745 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   10r     FIFO                0,8      0t0 1066743971 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   11u     FIFO               0,18      0t0 1066700778 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   12r     FIFO                0,8      0t0 1066743972 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   13w     FIFO               0,18      0t0 1066700778 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   14u     FIFO               0,18      0t0 1066700778 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   15r     FIFO               0,18      0t0 1066700778 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   16u     FIFO               0,18      0t0 1066700779 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   17w     FIFO               0,18      0t0 1066700779 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   18u     FIFO               0,18      0t0 1066700779 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   19r     FIFO               0,18      0t0 1066700779 /run/docker/containerd/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/init-stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   20r     FIFO                0,8      0t0 1070361746 pipe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-co 11646 root   26r     FIFO                0,8      0t0 1070361747 pipe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有心人结合 strace 与 lsof 的结果，已经能够自己得出结论：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;runc init&lt;/code&gt; 往 2 号 FD 内写数据时阻塞，2 号 FD 对应的类型是 pipe 类型。而 linux pipe 有一个默认的数据大小，当写入的数据超过该 Size（这个 Size 可以借助 ulimit 获取）时，同时读端并未读取数据，写段就会被阻塞。总结一下：containerd-shim 启动 runc exec 去容器内执行用户命令，&lt;code&gt;runc exec&lt;/code&gt; 启动 &lt;code&gt;runc init&lt;/code&gt; 进入容器时，由于往 2 号 FD 写数据超过限制大小而被阻塞。当最底层的 &lt;code&gt;runc init&lt;/code&gt; 被阻塞时，造成了调用链路上所有进程都被阻塞：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runc init → runc &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; → containerd-shim &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; → containerd &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; → dockerd &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题定位至此，我们已经了解了 &lt;code&gt;docker hang&lt;/code&gt; 死的原因。但是，现在我们还有如下问题并未解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么 &lt;code&gt;runc init&lt;/code&gt; 会往 2 号 FD （对应 go 语言的 os.Stderr) 中写入超过 linux pipe 大小限制的数据？&lt;/li&gt;
&lt;li&gt;为什么 &lt;code&gt;runc init&lt;/code&gt; 出现问题只发生在特定容器？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果常态下 &lt;code&gt;runc init&lt;/code&gt; 就需要往 os.Stdout 或者 os.Stderr 中写入很多数据，那么所有容器的创建都应该有问题。所以，我们可以确定是该异常容器出现了什么未知原因，导致 &lt;code&gt;runc init&lt;/code&gt; 非预期往 os.Stderr 写入了大量数据。而这被写入的数据就很有可能揭示非预期的异常。&lt;/p&gt;
&lt;p&gt;所以，我们需要获取 &lt;code&gt;runc init&lt;/code&gt; 当前正在写入的数据。由于 &lt;code&gt;runc init&lt;/code&gt; 的 2 号 FD 是个匿名 pipe，我们无法使用常规文件读取的方式获取 pipe 内的数据。这里感谢鹤哥趟坑，找到了一种读取匿名 pipe 内容的方法：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cat /proc/15638/fd/2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime/cgo: pthread_create failed: Resource temporarily unavailable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SIGABRT: abort&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PC=0x7f512b7365f7 m=0 sigcode=18446744073709551610&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;goroutine 0 [idle]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime: unknown pc 0x7f512b7365f7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack: frame=&amp;#123;sp:0x7ffe1121a658, fp:0x0&amp;#125; stack=[0x7ffe0ae1bb28,0x7ffe1121ab50)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a558:  00007ffe1121a6d8  00007ffe1121a6b0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a568:  0000000000000001  00007f512c527660&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a578:  00007f512c54d560  00007f512c54d208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a588:  00007f512c333e6f  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a598:  00007f512c527660  0000000000000005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5a8:  0000000000000000  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5b8:  00007f512c54d208  00007f512c528000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5c8:  00007ffe1121a600  00007f512b704b0c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5d8:  00007f512b7110c0  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5e8:  00007f512c54d560  00007ffe1121a620&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5f8:  00007ffe1121a610  000000000f11ed7d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a608:  00007f512c550153  00000000ffffffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a618:  00007f512c550a9b  00007f512b707d00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a628:  00007f512babc868  00007f512c9e9e5e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a638:  00007f512d3bb080  00000000000000f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a648:  0000000000000011  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a658: &amp;lt;00007f512b737ce8  0000000000000020&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a668:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a678:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a688:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a698:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6a8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6b8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6c8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6d8:  0000000000000000  00007f512babc868&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6e8:  00007f512c9e9e5e  00007f512d3bb080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6f8:  00007f512c33f260  00007f512babc1c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a708:  00007f512babc1c0  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a718:  00007f512babc243  00000000000000f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a728:  00007f512b7787ec  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a738:  00007f512babc1c0  000000000000000a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a748:  00007f512b7e8a4d  000000000000000a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime: unknown pc 0x7f512b7365f7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack: frame=&amp;#123;sp:0x7ffe1121a658, fp:0x0&amp;#125; stack=[0x7ffe0ae1bb28,0x7ffe1121ab50)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a558:  00007ffe1121a6d8  00007ffe1121a6b0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a568:  0000000000000001  00007f512c527660&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a578:  00007f512c54d560  00007f512c54d208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a588:  00007f512c333e6f  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a598:  00007f512c527660  0000000000000005&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5a8:  0000000000000000  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5b8:  00007f512c54d208  00007f512c528000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5c8:  00007ffe1121a600  00007f512b704b0c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5d8:  00007f512b7110c0  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5e8:  00007f512c54d560  00007ffe1121a620&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a5f8:  00007ffe1121a610  000000000f11ed7d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a608:  00007f512c550153  00000000ffffffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a618:  00007f512c550a9b  00007f512b707d00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a628:  00007f512babc868  00007f512c9e9e5e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a638:  00007f512d3bb080  00000000000000f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a648:  0000000000000011  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a658: &amp;lt;00007f512b737ce8  0000000000000020&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a668:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a678:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a688:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a698:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6a8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6b8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6c8:  0000000000000000  0000000000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6d8:  0000000000000000  00007f512babc868&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6e8:  00007f512c9e9e5e  00007f512d3bb080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a6f8:  00007f512c33f260  00007f512babc1c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a708:  00007f512babc1c0  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a718:  00007f512babc243  00000000000000f1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a728:  00007f512b7787ec  0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a738:  00007f512babc1c0  000000000000000a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00007ffe1121a748:  00007f512b7e8a4d  000000000000000a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;goroutine 1 [running, locked to thread]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.systemstack_switch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/asm_amd64.s:363 fp=0xc4200a3ed0 sp=0xc4200a3ec8 pc=0x7f512c7281d0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.startTheWorld()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/proc.go:978 +0x2f fp=0xc4200a3ee8 sp=0xc4200a3ed0 pc=0x7f512c70221f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.GOMAXPROCS(0x1, 0xc42013d9a0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/debug.go:30 +0xa0 fp=0xc4200a3f10 sp=0xc4200a3ee8 pc=0x7f512c6d9810&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.init.0()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/go/src/github.com/opencontainers/runc/init.go:14 +0x61 fp=0xc4200a3f30 sp=0xc4200a3f10 pc=0x7f512c992801&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;autogenerated&amp;gt;:1 +0x624 fp=0xc4200a3f88 sp=0xc4200a3f30 pc=0x7f512c9a1014&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/proc.go:186 +0x1d2 fp=0xc4200a3fe0 sp=0xc4200a3f88 pc=0x7f512c6ff962&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.goexit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/asm_amd64.s:2361 +0x1 fp=0xc4200a3fe8 sp=0xc4200a3fe0 pc=0x7f512c72ad71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;goroutine 6 [syscall]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os/signal.signal_recv(0x0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/runtime/sigqueue.go:139 +0xa8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os/signal.loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/os/signal/signal_unix.go:22 +0x24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;created by os/signal.init.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/go/src/os/signal/signal_unix.go:28 +0x43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rax    0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rbx    0x7f512babc868&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rcx    0xffffffffffffffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdx    0x6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdi    0x271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rsi    0x271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rbp    0x7f512c9e9e5e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rsp    0x7ffe1121a658&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r8     0xa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r9     0x7f512c524740&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r10    0x8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r11    0x206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r12    0x7f512d3bb080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r13    0xf1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r14    0x11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r15    0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rip    0x7f512b7365f7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rflags 0x206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cs     0x33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs     0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gs     0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; failed: container_linux.go:348: starting container process caused &lt;span class=&quot;string&quot;&gt;&quot;read init-p: connection reset by peer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;额，&lt;code&gt;runc init&lt;/code&gt; 因资源不足创建线程失败？？？这种输出显然不是 runc 的输出，而是 go runtime 非预期的输出内容。那么资源不足，究竟是什么资源类型资源不足呢？我们在结合 &lt;code&gt;/var/log/message&lt;/code&gt; 日志分析：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: runc:[2:INIT] invoked oom-killer: gfp_mask=0xd0, order=0, oom_score_adj=997&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: CPU: 14 PID: 12788 Comm: runc:[2:INIT] Tainted: G        W  OE  ------------ T 3.10.0-514.16.1.el7.stable.v1.4.x86_64 &lt;span class=&quot;comment&quot;&gt;#1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Hardware name: Inspur SA5212M4/YZMB-00370-107, BIOS 4.1.10 11/14/2016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: ffff88103841dee0 00000000c4394691 ffff880263e4bcb8 ffffffff8168863d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: ffff880263e4bd50 ffffffff81683585 ffff88203cc5e300 ffff880ee02b2380&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: 0000000000000001 0000000000000000 0000000000000000 0000000000000046&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Call Trace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff8168863d&amp;gt;] dump_stack+0x19/0x1b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81683585&amp;gt;] dump_header+0x85/0x27f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81185b06&amp;gt;] ? find_lock_task_mm+0x56/0xc0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81185fbe&amp;gt;] oom_&lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;_process+0x24e/0x3c0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81093c2e&amp;gt;] ? has_capability_noaudit+0x1e/0x30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff811f4d91&amp;gt;] mem_cgroup_oom_synchronize+0x551/0x580&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff811f41b0&amp;gt;] ? mem_cgroup_charge_common+0xc0/0xc0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81186844&amp;gt;] pagefault_out_of_memory+0x14/0x90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff816813fa&amp;gt;] mm_fault_error+0x68/0x12b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81694405&amp;gt;] __&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;_page_fault+0x395/0x450&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff816944f5&amp;gt;] &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;_page_fault+0x35/0x90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [&amp;lt;ffffffff81690708&amp;gt;] page_fault+0x28/0x30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: memory: usage 3145728kB, &lt;span class=&quot;built_in&quot;&gt;limit&lt;/span&gt; 3145728kB, failcnt 14406932&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: memory+swap: usage 3145728kB, &lt;span class=&quot;built_in&quot;&gt;limit&lt;/span&gt; 9007199254740988kB, failcnt 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: kmem: usage 3143468kB, &lt;span class=&quot;built_in&quot;&gt;limit&lt;/span&gt; 9007199254740988kB, failcnt 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup stats &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda: cache:0KB rss:0KB rss_huge:0KB mapped_file:0KB swap:0KB inactive_anon:0KB active_anon:0KB inactive_file:0KB active_file:0KB unevictable:0KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup stats &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda/b761e05249245695278b3f409d2d6e5c6a5bff6995ff0cf44d03af4aa9764a30: cache:0KB rss:40KB rss_huge:0KB mapped_file:0KB swap:0KB inactive_anon:0KB active_anon:40KB inactive_file:0KB active_file:0KB unevictable:0KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup stats &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda/1d1750ecc627cc5d60d80c071b2eb4d515ee8880c5b5136883164f08319869b0: cache:0KB rss:0KB rss_huge:0KB mapped_file:0KB swap:0KB inactive_anon:0KB active_anon:0KB inactive_file:0KB active_file:0KB unevictable:0KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup stats &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5: cache:0KB rss:2220KB rss_huge:0KB mapped_file:0KB swap:0KB inactive_anon:0KB active_anon:2140KB inactive_file:0KB active_file:0KB unevictable:0KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup stats &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5/super-agent: cache:0KB rss:0KB rss_huge:0KB mapped_file:0KB swap:0KB inactive_anon:0KB active_anon:0KB inactive_file:0KB active_file:0KB unevictable:0KB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [ pid ]   uid  tgid total_vm      rss nr_ptes swapents oom_score_adj name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [30598]     0 30598      255        1       4        0          -998 pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [11680]     0 11680   164833     1118      20        0           997 dockerinit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: [12788]     0 12788   150184     1146      23        0           997 runc:[2:INIT]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: oom-kill:,cpuset=bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5,mems_allowed=0-1,oom_memcg=/kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda,task_memcg=/kubepods/burstable/pod6c4333b3&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;663-11ea-b39f-6c92bf85beda/bbd5e4b5f9c13666dd0ec7ff7afb2c4c2b0ede40a4adf1de43cc31c606f283f5,task=runc:[2:INIT],pid=12800,uid=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Memory cgroup out of memory: Kill process 12800 (runc:[2:INIT]) score 997 or sacrifice child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jun 17 03:18:17 host-xx kernel: Killed process 12788 (runc:[2:INIT]) total-vm:600736kB, anon-rss:3296kB, file-rss:276kB, shmem-rss:1012kB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/var/log/message&lt;/code&gt; 中可以找到该容器在大约 1 个月前大量的 OOM 日志记录，同时时间也基本匹配。&lt;/p&gt;
&lt;p&gt;所以总结下，在一个非常关键的时间节点，&lt;code&gt;runc init&lt;/code&gt; 由于内存资源不足，创建线程失败，触发 go runtime 的非预期输出，进而造成 &lt;code&gt;runc init&lt;/code&gt; 阻塞在写 pipe 操作。&lt;/p&gt;
&lt;p&gt;定位至此，问题的全貌已经基本描述清楚。但是我们还有一个疑问，既然 &lt;code&gt;runc init&lt;/code&gt; 再往 pipe 中写数据，难道没有其他进程来读取这个内容吗？&lt;/p&gt;
&lt;p&gt;大家还记得上面 lsof 执行的结果吗？有心人一定发现了该 pipe 的读端是谁了，对，就是 containerd-shim，对应的 pipe 的 inode 编号为 1070361747。那么，为什么 containerd-shim 没有来读 pipe 里面的内容呢？我们结合代码来分析：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(e *execProcess)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(err error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := e.parent.runtime.Exec(ctx, e.parent.id, e.spec, opts); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 执行 runc init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(e.waitBlock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; e.parent.runtimeError(err, &lt;span class=&quot;string&quot;&gt;&quot;OCI runtime exec failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !e.stdio.IsNull() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fifoCtx, cancel := context.WithTimeout(ctx, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;*time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := copyPipes(fifoCtx, e.io, e.stdio.Stdin, e.stdio.Stdout, e.stdio.Stderr, &amp;amp;e.wg, &amp;amp;copyWaitGroup); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 读 pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;failed to start io pipe copy&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(r *Runc)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(context context.Context, id &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, spec specs.Process, opts *ExecOpts)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cmd := r.command(context, &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(args, id)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; opts != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; opts.IO != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      opts.Set(cmd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ec, err := Monitor.Start(cmd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   status, err := Monitor.Wait(cmd, ec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;额，containerd-shim 的设计是，等待 &lt;code&gt;runc init&lt;/code&gt; 执行完成之后，再来读取 pipe 中的内容。但是此时的 &lt;code&gt;runc init&lt;/code&gt; 由于非预期的写入数据量比较大，被阻塞在了写 pipe 操作处。完美的死锁。&lt;/p&gt;
&lt;p&gt;终于，本次 &lt;code&gt;docker hang&lt;/code&gt; 死问题的核心脉络都已清楚。接下来我们聊聊怎么解决方案。&lt;/p&gt;
&lt;h2 id=&quot;4-解决方案&quot;&gt;&lt;a href=&quot;#4-解决方案&quot; class=&quot;headerlink&quot; title=&quot;4 解决方案&quot;&gt;&lt;/a&gt;4 解决方案&lt;/h2&gt;&lt;p&gt;当大家了解了 &lt;code&gt;docker hang&lt;/code&gt; 死的成因之后，我们可以针对性的提出如下解决办法。&lt;/p&gt;
&lt;h3 id=&quot;4-1-最直观的办法&quot;&gt;&lt;a href=&quot;#4-1-最直观的办法&quot; class=&quot;headerlink&quot; title=&quot;4.1 最直观的办法&quot;&gt;&lt;/a&gt;4.1 最直观的办法&lt;/h3&gt;&lt;p&gt;既然 &lt;code&gt;docker exec&lt;/code&gt; 可能会引起 &lt;code&gt;docker hang&lt;/code&gt; 死，那么我们禁用系统中所有的 &lt;code&gt;docker exec&lt;/code&gt; 操作即可。最典型的是 kubelet 的 probe，当前我们默认给所有 Pod 添加了 ReadinessProbe，并且是以 exec 的形式进入容器内执行命令。我们调整 kubelet 的探测行为，修改为 tcp 或者 http probe 即可。&lt;/p&gt;
&lt;p&gt;这里虽然改动不大，但是涉及业务容器的改造成本太大了，如何迁移存量集群是个大问题。&lt;/p&gt;
&lt;h3 id=&quot;4-2-最根本的办法&quot;&gt;&lt;a href=&quot;#4-2-最根本的办法&quot; class=&quot;headerlink&quot; title=&quot;4.2 最根本的办法&quot;&gt;&lt;/a&gt;4.2 最根本的办法&lt;/h3&gt;&lt;p&gt;既然当前 containerd-shim 读 pipe 需要等待 &lt;code&gt;runc exec&lt;/code&gt; 执行完毕，如果我们将读 pipe 的操作提前至 &lt;code&gt;runc exec&lt;/code&gt; 命令执行之前，理论上也可以避免死锁。&lt;/p&gt;
&lt;p&gt;同样。这种方案的升级成本太高了，升级 containerd-shim 时需要重启存量的所有容器，这个方案基本不可能通过。&lt;/p&gt;
&lt;h3 id=&quot;4-3-最简单的办法&quot;&gt;&lt;a href=&quot;#4-3-最简单的办法&quot; class=&quot;headerlink&quot; title=&quot;4.3 最简单的办法&quot;&gt;&lt;/a&gt;4.3 最简单的办法&lt;/h3&gt;&lt;p&gt;既然 &lt;code&gt;runc init&lt;/code&gt; 阻塞在写 pipe，我们主动读取 pipe 内的内容，也能让 &lt;code&gt;runc init&lt;/code&gt; 顺利退出。&lt;/p&gt;
&lt;p&gt;在将本解决方案自动化的过程中，如何能够识别如 &lt;code&gt;docker hang&lt;/code&gt; 死是由于写 pipe 导致的，是一个小小的挑战。但是相对于以上两种解决方案，我认为还是值得一试，毕竟影响面微乎其微。&lt;/p&gt;
&lt;p&gt;来源：www.likakuli.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1 背景&quot;&gt;&lt;/a&gt;1 背景&lt;/h2&gt;&lt;p&gt;最近升级了一版 kubelet，修复因 kubelet 删除 Pod 慢导致平台删除集群超时的问题。在灰度 redis 隔离集群的时候，发现升级 kubelet 并重启服务后，少量宿主状态变成了 NotReady，并且回滚 kubelet 至之前版本，宿主状态仍然是 NotReady。查看宿主状态时提示 ‘container runtime is down’ ，根据经验，此时一般就是容器运行时出了问题。弹性云使用的容器运行时是 docker，我们就去检查 docker 的状态，检测结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt; 查看所有容器状态，执行正常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker inspect&lt;/code&gt; 查看某一容器详细状态，执行阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型的 &lt;code&gt;docker hang&lt;/code&gt; 死行为。因为我们最近在升级 docker 版本，存量宿主 docker 的版本为 1.13.1，并且在逐步升级至 18.06.3，新宿主的 docker 版本都是 18.06.3。&lt;code&gt;docker hang&lt;/code&gt; 死问题在 1.13.1 版本上表现得更彻底，在执行 &lt;code&gt;docker ps&lt;/code&gt; 的时候就已经 hang 死了，一旦某个容器出了问题，docker 就处于无响应状态；而 docker 18.06.3 做了一点小小的优化，在执行 docker ps 时去掉了针对容器级别的加锁操作，但是 &lt;code&gt;docker inspect&lt;/code&gt; 依然会加容器锁，因此某一个容器出现问题，并不会造成 docker 服务不可响应，受影响的也仅仅是该容器，无法执行任何操作。&lt;/p&gt;
&lt;p&gt;至于为什么以 &lt;code&gt;docker ps&lt;/code&gt; 与 &lt;code&gt;docker inspect&lt;/code&gt; 为指标检查 docker 状态，因为 kubelet 就是依赖这两个 docker API 获取容器状态。&lt;/p&gt;
&lt;p&gt;所以，现在问题有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker hang&lt;/code&gt; 死的根因是什么？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker hang&lt;/code&gt; 死时，为什么重启 kubelet，会导致宿主状态变为 NotReady？
    
    </summary>
    
      <category term="docker" scheme="http://team.jiunile.com/categories/docker/"/>
    
      <category term="error" scheme="http://team.jiunile.com/categories/docker/error/"/>
    
    
      <category term="docker" scheme="http://team.jiunile.com/tags/docker/"/>
    
      <category term="error" scheme="http://team.jiunile.com/tags/error/"/>
    
      <category term="kubelet" scheme="http://team.jiunile.com/tags/kubelet/"/>
    
  </entry>
  
  <entry>
    <title>使用 Linux tracepoint、perf 和 eBPF 跟踪数据包</title>
    <link href="http://team.jiunile.com//blog/2020/10/trace-packet-with-perf-ebpf.html"/>
    <id>http://team.jiunile.com//blog/2020/10/trace-packet-with-perf-ebpf.html</id>
    <published>2020-10-25T12:00:00.000Z</published>
    <updated>2020-10-26T02:19:50.000Z</updated>
    
    <content type="html">&lt;p&gt;一段时间以来，我一直在寻找 Linux 上的底层网络调试（debug）工具。&lt;/p&gt;
&lt;p&gt;Linux 允许在主机上用&lt;strong&gt;虚拟网卡&lt;/strong&gt;（virtual interface）和&lt;strong&gt;网络命名空间&lt;/strong&gt;（network namespace）构建复杂的网络。但出现故障时，排障（troubleshooting）相当痛苦。如果是 3 层路由问题，&lt;code&gt;mtr&lt;/code&gt; 可以排上用场。但如果是更底层的问题，我通常只能手动检查每个网 卡/网桥/网络命名空间/iptables 规则，用 &lt;code&gt;tcpdump&lt;/code&gt; 抓一些包，以确定到底是什么状况。如 果不了解故障之前的网络设置，那感觉就像在走迷宫。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-开篇&quot;&gt;&lt;a href=&quot;#1-开篇&quot; class=&quot;headerlink&quot; title=&quot;1 开篇&quot;&gt;&lt;/a&gt;1 开篇&lt;/h2&gt;&lt;h3 id=&quot;1-1-逃离迷宫：上帝视角&quot;&gt;&lt;a href=&quot;#1-1-逃离迷宫：上帝视角&quot; class=&quot;headerlink&quot; title=&quot;1.1 逃离迷宫：上帝视角&quot;&gt;&lt;/a&gt;1.1 逃离迷宫：上帝视角&lt;/h3&gt;&lt;p&gt;逃离迷宫的一种方式是在&lt;strong&gt;迷宫内&lt;/strong&gt;不断左右尝试（exploring），寻找通往出口的路 。当你在玩迷宫游戏（置身迷宫内）时，你只能如此。不过，如果不是在游戏内，那还有另 一种方式：&lt;strong&gt;转换视角，高空俯视&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用 Linux 术语来说，就是转换到&lt;strong&gt;内核视角&lt;/strong&gt;（the kernel point of view）。在这种视 角下，&lt;strong&gt;网络命名空间不再是容器（”containers”），而只是一些标签（labels）。内核、 数据包、网卡等此时都是“肉眼可见”的对象（objects）&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文注：上面的 “containers” 我加了引号，因为从技术上说，网络命名空间是 构成 Linux 容器的核心部件之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-2-网络跟踪：渴求利器&quot;&gt;&lt;a href=&quot;#1-2-网络跟踪：渴求利器&quot; class=&quot;headerlink&quot; title=&quot;1.2 网络跟踪：渴求利器&quot;&gt;&lt;/a&gt;1.2 网络跟踪：渴求利器&lt;/h3&gt;&lt;p&gt;所以我想要的是这样一个工具，它可以直接告诉我 “嗨，我看到你的包了：它从&lt;strong&gt;属于这个网络命名空间的这个网卡&lt;/strong&gt;上发出来，然后&lt;strong&gt;依次经过这些函数&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;本质上，我想要的是一个 &lt;strong&gt;2 层的 &lt;code&gt;mtr&lt;/code&gt;&lt;/strong&gt;。这样的工具存在吗？不存在我们就造一个！&lt;/p&gt;
&lt;p&gt;本文结束时，我们将拥有一个简单、易于使用的底层&lt;strong&gt;网络包跟踪器&lt;/strong&gt;（packet tracker ）。如果你 ping 本机上的一个 Docker 容器，它会显示类似如下信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping -4 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-巨人肩膀：perf-eBPF&quot;&gt;&lt;a href=&quot;#1-3-巨人肩膀：perf-eBPF&quot; class=&quot;headerlink&quot; title=&quot;1.3 巨人肩膀：perf/eBPF&quot;&gt;&lt;/a&gt;1.3 巨人肩膀：perf/eBPF&lt;/h3&gt;&lt;p&gt;在本文中，我将聚焦两个跟踪工具：&lt;code&gt;perf&lt;/code&gt; 和 &lt;code&gt;eBPF&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;perf&lt;/code&gt; 是 Linux 上的最重要的性能分析工具之一。它和内核出自同一个源码树（source tree），但编译需要针对指定的内核版本。&lt;code&gt;perf&lt;/code&gt; 可以跟踪内核，也可以跟踪用户程序， 还可用于采样或者设置跟踪点。&lt;strong&gt;可以把它想象成开销更低，但功能更强大的 &lt;code&gt;strace&lt;/code&gt;&lt;/strong&gt;。 本文只会使用非常简单的 &lt;code&gt;perf&lt;/code&gt; 命令。想了解更多，强烈建议访问 &lt;a href=&quot;http://www.brendangregg.com/perf.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brendan Gregg&lt;/a&gt; 的博客。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eBPF&lt;/code&gt; 是 Linux 内核新近加入的，其中 e 是 &lt;code&gt;extended&lt;/code&gt; 的缩写。从名字可以看出，它 是 BPF（Berkeley Packet Filter）字节码过滤器的增强版，后者是 BSD family 的网络包 过滤工具。在 Linux 上，eBPF 可以在运行中的内核（live kernel）中安全地执行任何平 台无关（platform independent）代码，只要这些代码满足一些安全前提。例如，在程序执 行之前必须验证内存访问合法性，而且要能证明程序会在有限时间内退出。如果内核无法验 证这些条件，那即使 eBPF 代码是安全的并且确定会退出，它也仍然会被拒绝。&lt;/p&gt;
&lt;p&gt;eBPF 程序可用于 &lt;strong&gt;QOS 网络分类器&lt;/strong&gt;（network classifier）、&lt;strong&gt;XDP&lt;/strong&gt;（eXpress Data Plane） 很底层的网络功能和过滤功能组件、&lt;strong&gt;跟踪代理&lt;/strong&gt;（tracing agent），以及其他很多方面。 &lt;strong&gt;任何在 &lt;code&gt;/proc/kallsyms&lt;/code&gt; 导出的符号（内核函数）或者跟踪点（tracepoints）， 都可以插入 eBPF 跟踪点&lt;/strong&gt;（tracing probes）。&lt;/p&gt;
&lt;p&gt;本文将主要关注 attach 到 tracepoints 的跟踪代理（tracing agents attached to tracepoints）。如果想看一些在内核函数埋点进行跟踪的例子，或者入门级介绍，建议阅读这篇 &lt;a href=&quot;https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eBPF 文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Perf&quot;&gt;&lt;a href=&quot;#Perf&quot; class=&quot;headerlink&quot; title=&quot;Perf&quot;&gt;&lt;/a&gt;Perf&lt;/h2&gt;&lt;p&gt;本文只会使用 perf 做非常简单的内核跟踪。&lt;/p&gt;
&lt;h3 id=&quot;2-1-安装-perf&quot;&gt;&lt;a href=&quot;#2-1-安装-perf&quot; class=&quot;headerlink&quot; title=&quot;2.1 安装 perf&quot;&gt;&lt;/a&gt;2.1 安装 perf&lt;/h3&gt;&lt;p&gt;我的环境基于 Ubuntu 17.04 （Zesty）：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt install linux-tools-generic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ perf &lt;span class=&quot;comment&quot;&gt;# test perf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-测试环境&quot;&gt;&lt;a href=&quot;#2-2-测试环境&quot; class=&quot;headerlink&quot; title=&quot;2.2 测试环境&quot;&gt;&lt;/a&gt;2.2 测试环境&lt;/h3&gt;&lt;p&gt;我们将使用 4 个 IP，其中 2 个为外部可路由网段（&lt;code&gt;192.168&lt;/code&gt;）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;localhost，IP &lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个干净的容器，IP &lt;code&gt;172.17.0.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我的手机，通过 USB 连接，IP &lt;code&gt;192.168.42.129&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我的手机，通过 WiFi 连接，IP &lt;code&gt;192.168.43.1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-3-初体验：跟踪-ping-包&quot;&gt;&lt;a href=&quot;#2-3-初体验：跟踪-ping-包&quot; class=&quot;headerlink&quot; title=&quot;2.3 初体验：跟踪 ping 包&quot;&gt;&lt;/a&gt;2.3 初体验：跟踪 ping 包&lt;/h3&gt;&lt;p&gt;&lt;code&gt;perf trace&lt;/code&gt; 是 &lt;code&gt;perf&lt;/code&gt; 子命令，能够跟踪 packet 路径，默认输出类似于 &lt;code&gt;strace&lt;/code&gt;（头 信息少很多）。&lt;/p&gt;
&lt;p&gt;跟踪 ping 向 &lt;code&gt;172.17.0.2&lt;/code&gt; 容器的包，这里我们只关心 &lt;code&gt;net&lt;/code&gt; 事件，忽略系统调用信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo perf trace --no-syscalls --event &lt;span class=&quot;string&quot;&gt;&#39;net:*&#39;&lt;/span&gt; ping 172.17.0.2 -c1 &amp;gt; /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.000 net:net_dev_queue:dev=docker0 skbaddr=0xffff96d481988700 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.008 net:net_dev_start_xmit:dev=docker0 queue_mapping=0 skbaddr=0xffff96d481988700 vlan_tagged=0 vlan_proto=0x0000 vlan_tci=0x0000 protocol=0x0800 ip_summed=0 len=98 data_len=0 network_offset=14 transport_offset_valid=1 transport_offset=34 tx_flags=0 gso_size=0 gso_segs=0 gso_&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.014 net:net_dev_queue:dev=veth79215ff skbaddr=0xffff96d481988700 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.016 net:net_dev_start_xmit:dev=veth79215ff queue_mapping=0 skbaddr=0xffff96d481988700 vlan_tagged=0 vlan_proto=0x0000 vlan_tci=0x0000 protocol=0x0800 ip_summed=0 len=98 data_len=0 network_offset=14 transport_offset_valid=1 transport_offset=34 tx_flags=0 gso_size=0 gso_segs=0 gso_&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.020 net:netif_rx:dev=eth0 skbaddr=0xffff96d481988700 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.022 net:net_dev_xmit:dev=veth79215ff skbaddr=0xffff96d481988700 len=98 rc=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.024 net:net_dev_xmit:dev=docker0 skbaddr=0xffff96d481988700 len=98 rc=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.027 net:netif_receive_skb:dev=eth0 skbaddr=0xffff96d481988700 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.044 net:net_dev_queue:dev=eth0 skbaddr=0xffff96d481988b00 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.046 net:net_dev_start_xmit:dev=eth0 queue_mapping=0 skbaddr=0xffff96d481988b00 vlan_tagged=0 vlan_proto=0x0000 vlan_tci=0x0000 protocol=0x0800 ip_summed=0 len=98 data_len=0 network_offset=14 transport_offset_valid=1 transport_offset=34 tx_flags=0 gso_size=0 gso_segs=0 gso_&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.048 net:netif_rx:dev=veth79215ff skbaddr=0xffff96d481988b00 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.050 net:net_dev_xmit:dev=eth0 skbaddr=0xffff96d481988b00 len=98 rc=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.053 net:netif_receive_skb:dev=veth79215ff skbaddr=0xffff96d481988b00 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.060 net:netif_receive_skb_entry:dev=docker0 napi_id=0x3 queue_mapping=0 skbaddr=0xffff96d481988b00 vlan_tagged=0 vlan_proto=0x0000 vlan_tci=0x0000 protocol=0x0800 ip_summed=2 &lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt;=0x00000000 l4_&lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt;=0 len=84 data_len=0 truesize=768 mac_header_valid=1 mac_header=-14 nr_frags=0 gso_size=0 gso_&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     0.061 net:netif_receive_skb:dev=docker0 skbaddr=0xffff96d481988b00 len=84)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只保留事件名和 &lt;code&gt;skbaddr&lt;/code&gt;，看起来清晰很多：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net_dev_queue           dev=docker0     skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_start_xmit      dev=docker0     skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_queue           dev=veth79215ff skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_start_xmit      dev=veth79215ff skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_rx                dev=eth0        skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_xmit            dev=veth79215ff skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_xmit            dev=docker0     skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_receive_skb       dev=eth0        skbaddr=0xffff96d481988700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_queue           dev=eth0        skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_start_xmit      dev=eth0        skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_rx                dev=veth79215ff skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net_dev_xmit            dev=eth0        skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_receive_skb       dev=veth79215ff skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_receive_skb_entry dev=docker0     skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;netif_receive_skb       dev=docker0     skbaddr=0xffff96d481988b00&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面有很多信息。&lt;/p&gt;
&lt;p&gt;首先注意，&lt;strong&gt;&lt;code&gt;skbaddr&lt;/code&gt; 在中间变了（0xffff96d481988700 -&amp;gt; 0xffff96d481988b00）&lt;/strong&gt;。变的这里，就是&lt;strong&gt;生成了 ICMP echo reply 包&lt;/strong&gt;，并作为应答包发送的地方。接下来的 时间，这个包的 &lt;code&gt;skbaddr&lt;/code&gt; 保持不变，说明没有 copy。copy 非常耗时。&lt;/p&gt;
&lt;p&gt;其次，我们可以清楚地看到 &lt;strong&gt;packet 在内核的传输路径&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker0&lt;/code&gt; 网桥&lt;/li&gt;
&lt;li&gt;veth pair 的宿主机端（&lt;code&gt;veth79215ff&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;veth pair 的容器端（容器里的 &lt;code&gt;eth0&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;接下来是相反的返回路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;至此，虽然我们还没有看到网络命名空间，但已经得到了一个不错的全局视图&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-4-进阶：选择跟踪点&quot;&gt;&lt;a href=&quot;#2-4-进阶：选择跟踪点&quot; class=&quot;headerlink&quot; title=&quot;2.4 进阶：选择跟踪点&quot;&gt;&lt;/a&gt;2.4 进阶：选择跟踪点&lt;/h3&gt;&lt;p&gt;上面的信息有些杂，还有很多重复。我们可以选择几个最合适的跟踪点，使得输出看起来 更清爽。要查看所有可用的网络跟踪点，执行 &lt;code&gt;perf list&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo perf list &lt;span class=&quot;string&quot;&gt;&#39;net:*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个命令会列出 &lt;code&gt;tracepoint&lt;/code&gt; 列表，名字类似于 &lt;code&gt;net:netif_rx&lt;/code&gt;。&lt;strong&gt;冒号前面是事件类型 ，后面是事件名字&lt;/strong&gt;。这里我选择了 4 个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net_dev_queue&lt;/li&gt;
&lt;li&gt;netif_receive_skb_entry&lt;/li&gt;
&lt;li&gt;netif_rx&lt;/li&gt;
&lt;li&gt;napi_gro_receive_entry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo perf trace --no-syscalls           \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --event &lt;span class=&quot;string&quot;&gt;&#39;net:net_dev_queue&#39;&lt;/span&gt;           \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --event &lt;span class=&quot;string&quot;&gt;&#39;net:netif_receive_skb_entry&#39;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --event &lt;span class=&quot;string&quot;&gt;&#39;net:netif_rx&#39;&lt;/span&gt;                \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --event &lt;span class=&quot;string&quot;&gt;&#39;net:napi_gro_receive_entry&#39;&lt;/span&gt;  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ping 172.17.0.2 -c1 &amp;gt; /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.000 net:net_dev_queue:dev=docker0 skbaddr=0xffff8e847720a900 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.010 net:net_dev_queue:dev=veth7781d5c skbaddr=0xffff8e847720a900 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.014 net:netif_rx:dev=eth0 skbaddr=0xffff8e847720a900 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.034 net:net_dev_queue:dev=eth0 skbaddr=0xffff8e849cb8&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;00 len=98)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.036 net:netif_rx:dev=veth7781d5c skbaddr=0xffff8e849cb8&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;00 len=84)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0.045 net:netif_receive_skb_entry:dev=docker0 napi_id=0x1 queue_mapping=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;漂亮！&lt;/p&gt;
&lt;h2 id=&quot;3-eBPF&quot;&gt;&lt;a href=&quot;#3-eBPF&quot; class=&quot;headerlink&quot; title=&quot;3 eBPF&quot;&gt;&lt;/a&gt;3 eBPF&lt;/h2&gt;&lt;p&gt;前面介绍的内容已经可以满足大部分 tracing 场景的需求了。如果你只是想学习如何在 Linux 上跟踪一个 packet 的传输路径，那到此已经足够了。但如果想跟更进一步，学习如 何写一个自定义的过滤器，跟踪网络命名空间、源 IP、目的 IP 等信息，请继续往下读。&lt;/p&gt;
&lt;h3 id=&quot;3-1-eBPF-和-kprobes&quot;&gt;&lt;a href=&quot;#3-1-eBPF-和-kprobes&quot; class=&quot;headerlink&quot; title=&quot;3.1 eBPF 和 kprobes&quot;&gt;&lt;/a&gt;3.1 eBPF 和 kprobes&lt;/h3&gt;&lt;p&gt;从 Linux 内核 4.7 开始，eBPF 程序可以 attach 到内核跟踪点（kernel tracepoints） 。在此之前，要完成类似的工作，只能用 kprobes 之类的工具 attach 到&lt;strong&gt;导出的内核函数&lt;/strong&gt;（exported kernel sysbols）。后者虽然可以完成工作，但存在很多不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核的内部（internal）API 不稳定&lt;/li&gt;
&lt;li&gt;出于性能考虑，大部分网络相关的内层函数（inner functions）都是内联或者静态的（ inlined or static），两者都不可探测&lt;/li&gt;
&lt;li&gt;找出调用某个函数的所有地方是相当乏味的，有时所需的字段数据不全具备&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这篇博客的早期版本使用了 kprobes，但结果并不是太好。 现在，诚实地说，通过内核 tracepoints 访问数据比通过 kprobe 要更加乏味。我尽量保持本文简洁，如果你想了解本文稍老的版本，可以访问这里&lt;a href=&quot;https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;3-2-安装&quot;&gt;&lt;a href=&quot;#3-2-安装&quot; class=&quot;headerlink&quot; title=&quot;3.2 安装&quot;&gt;&lt;/a&gt;3.2 安装&lt;/h3&gt;&lt;p&gt;我不是徒手汇编控（fans of handwritten assembly），因此接下来将使用 &lt;code&gt;bcc&lt;/code&gt;。&lt;code&gt;bcc&lt;/code&gt; 是一个灵活强大的工具，允许用受限的 C 语法（restricted C）写内核探测代码，然后用 Python 在用户态做控制。这种方式对于生产环境算是重量级，但对开发来说非常完美。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：eBPF 需要 Linux Kernel 4.7+&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Ubuntu 17.04 &lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/INSTALL.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装 (GitHub)&lt;/a&gt; &lt;code&gt;bcc&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt install bison build-essential cmake flex git libedit-dev python zlib1g-dev libelf-dev libllvm4.0 llvm-dev libclang-dev luajit luajit-5.1-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Grab the sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/iovisor/bcc.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir bcc/build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; bcc/build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cmake .. -DCMAKE_INSTALL_PREFIX=/usr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-3-自定义跟踪器：Hello-World&quot;&gt;&lt;a href=&quot;#3-3-自定义跟踪器：Hello-World&quot; class=&quot;headerlink&quot; title=&quot;3.3 自定义跟踪器：Hello World&quot;&gt;&lt;/a&gt;3.3 自定义跟踪器：Hello World&lt;/h3&gt;&lt;p&gt;接下来我们从一个简单的 hello world 例子展示如何在底层打点。我们还是用上一篇 文章里选择的四个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net_dev_queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netif_receive_skb_entry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netif_rx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;napi_gro_receive_entry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每当网络包经过这些点，我们的处理逻辑就会触发。为保持简单，我们的处理逻辑只是将程 序的 &lt;code&gt;comm&lt;/code&gt; 字段（16 字节）发送出来（到用户空间程序），这个字段里存的是发 送相应的网络包的程序的名字。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;bcc/proto.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;linux/sched.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Event structure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;route_evt_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; comm[TASK_COMM_LEN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BPF_PERF_OUTPUT(route_evt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_trace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* ctx, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sk_buff* skb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Built event for userland&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;route_evt_t&lt;/span&gt; evt = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bpf_get_current_comm(evt.comm, TASK_COMM_LEN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Send event to userland&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    route_evt.perf_submit(ctx, &amp;amp;evt, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(evt));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * Attach to Kernel Tracepoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRACEPOINT_PROBE(net, netif_rx) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_trace(args, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sk_buff*)args-&amp;gt;skbaddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRACEPOINT_PROBE(net, net_dev_queue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_trace(args, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sk_buff*)args-&amp;gt;skbaddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRACEPOINT_PROBE(net, napi_gro_receive_entry) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_trace(args, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sk_buff*)args-&amp;gt;skbaddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRACEPOINT_PROBE(net, netif_receive_skb_entry) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_trace(args, (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sk_buff*)args-&amp;gt;skbaddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，程序 attach 到 4 个 tracepoint，并会访问 &lt;code&gt;skbaddr&lt;/code&gt; 字段，将其传给处理 逻辑函数，这个函数现在只是将程序名字发送出来。你可能会有疑问，&lt;code&gt;args-&amp;gt;skbaddr&lt;/code&gt; 是 哪里来的？答案是，每次用 &lt;code&gt;TRACEPONT_PROBE&lt;/code&gt; 定义一个 tracepoint，&lt;code&gt;bcc&lt;/code&gt; 就会为其自 动生成 &lt;code&gt;args&lt;/code&gt; 参数，由于它是动态生成的，因此要查看它的定义不太容易。&lt;/p&gt;
&lt;p&gt;不过，有另外一种简单的方式可以查看。在 Linux 上每个 tracepoint 都对应一个 &lt;code&gt;/sys/kernel/debug/tracing/events&lt;/code&gt; 条目。例如，查看 &lt;code&gt;net:netif_rx&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /sys/kernel/debug/tracing/events/net/netif_rx/format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: netif_rx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ID: 1183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;format:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:unsigned short common_&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;;         offset:0; size:2; signed:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:unsigned char common_flags;         offset:2; size:1; signed:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:unsigned char common_preempt_count; offset:3; size:1; signed:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:int common_pid;                     offset:4; size:4; signed:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:void * skbaddr;         offset:8;  size:8; signed:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:unsigned int len;       offset:16; size:4; signed:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	field:__data_loc char[] name; offset:20; size:4; signed:1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; fmt: &lt;span class=&quot;string&quot;&gt;&quot;dev=%s skbaddr=%p len=%u&quot;&lt;/span&gt;, __get_str(name), REC-&amp;gt;skbaddr, REC-&amp;gt;len&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意最后一行 &lt;code&gt;print fmt&lt;/code&gt;，这正是 &lt;code&gt;perf trace&lt;/code&gt; 打印相应消息的格式。&lt;/p&gt;
&lt;p&gt;在底层插入这样的探测点之后，我们再写个 Python 脚本，接收内核发出来的消息，每个 eBPF 发出的数据都打印一行：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# coding: utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; socket &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; inet_ntop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bcc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BPF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ctypes &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_text = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&amp;lt;SEE CODE SNIPPET ABOVE&amp;gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK_COMM_LEN = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# linux/sched.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RouteEvt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ct.Structure)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _fields_ = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;string&quot;&gt;&quot;comm&quot;&lt;/span&gt;,    ct.c_char * TASK_COMM_LEN),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;event_printer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cpu, data, size)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Decode event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event = ct.cast(data, ct.POINTER(RouteEvt)).contents&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Print event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Just got a packet from %s&quot;&lt;/span&gt; % (event.comm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = BPF(text=bpf_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b[&lt;span class=&quot;string&quot;&gt;&quot;route_evt&quot;&lt;/span&gt;].open_perf_buffer(event_printer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b.kprobe_poll()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在可以测试了，注意需要 root 权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：现在的代码没有对包做任何过滤，因此即便你的机器网络流量很小，输出也很可能刷屏&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;gt; sudo python ./tracepkt.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Just got a packet from ping6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Just got a packet from ping6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Just got a packet from ping&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Just got a packet from irq/46-iwlwifi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的输出显示，我正在使用 ping 和 ping6，另外 WiFi 驱动也收到了一些包。&lt;/p&gt;
&lt;h3 id=&quot;3-4-自定义跟踪器：改进&quot;&gt;&lt;a href=&quot;#3-4-自定义跟踪器：改进&quot; class=&quot;headerlink&quot; title=&quot;3.4 自定义跟踪器：改进&quot;&gt;&lt;/a&gt;3.4 自定义跟踪器：改进&lt;/h3&gt;&lt;p&gt;接下来添加一些有用的数据/过滤条件。&lt;/p&gt;
&lt;h4 id=&quot;3-4-1-添加网卡信息&quot;&gt;&lt;a href=&quot;#3-4-1-添加网卡信息&quot; class=&quot;headerlink&quot; title=&quot;3.4.1 添加网卡信息&quot;&gt;&lt;/a&gt;3.4.1 添加网卡信息&lt;/h4&gt;&lt;p&gt;首先，可以安全地删除前面代码中的 &lt;code&gt;comm&lt;/code&gt; 字段，它在这里没什么用处。然后，include &lt;code&gt;net/inet_sock.h&lt;/code&gt; 头文件，这里有我们所需要的函数声明。最后给 &lt;code&gt;event&lt;/code&gt; 结构体添加 &lt;code&gt;char ifname[IFNAMSIZ]&lt;/code&gt; 字段。&lt;/p&gt;
&lt;p&gt;现在可以从 &lt;code&gt;device&lt;/code&gt; 结构体中访问 device name 字段。这里开始展示出&lt;strong&gt;代码的强大之处：我们可以访问任何受控范围内的字段&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Get device pointer, we&#39;ll need it to get the name and network namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; net_device *dev;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_probe_read(&amp;amp;dev, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(skb-&amp;gt;dev), ((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;*)skb) + offsetof(typeof(*skb), dev));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Load interface name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_probe_read(&amp;amp;evt.ifname, IFNAMSIZ, dev-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在你可以测试一下，这样是能工作的。注意相应地修改一下 Python 部分。那么，它是怎 么工作的呢？&lt;/p&gt;
&lt;p&gt;我们引入了 &lt;code&gt;net_device&lt;/code&gt; 结构体来访问&lt;strong&gt;网卡名字&lt;/strong&gt;字段。第一个 &lt;code&gt;bpf_probe_read&lt;/code&gt; 从内核 的网络包中将网卡名字拷贝到 &lt;code&gt;dev&lt;/code&gt;，第二个将其接力复制到 &lt;code&gt;evt.ifname&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不要忘了，eBPF 的目标是允许安全地编写在内核运行的脚本。这意味着，随机内存访问是绝 对不允许的。所有的内存访问都要经过验证。除非你要访问的内存在协议栈，否则你需要通 过 &lt;code&gt;bpf_probe_read&lt;/code&gt; 读取数据。这会使得代码看起来很繁琐，但非常安全。&lt;code&gt;bpf_probe_read&lt;/code&gt; 像是 &lt;code&gt;memcpy&lt;/code&gt; 的一个更安全的版本，它定义在内核源文件 &lt;a href=&quot;http://elixir.free-electrons.com/linux/v4.10.17/source/kernel/trace/bpf_trace.c#L64&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bpf_trace.c&lt;/a&gt; 中:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它和 memcpy 类似，因此注意内存拷贝的代价&lt;/li&gt;
&lt;li&gt;如果遇到错误，它会返回一个错误和一个初始化为 0 的缓冲区，而不会造成程序崩溃或停 止运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来为使代码看起来更加简洁，我将使用如下宏：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; member_read(destination, source_struct, source_member)                 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  do&amp;#123;                                                                          \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bpf_probe_read(                                                            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      destination,                                                             \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sizeof(source_struct-&amp;gt;source_member),                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ((char*)source_struct) + offsetof(typeof(*source_struct), source_member) \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );                                                                         \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样上面的例子就可以写成：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;member_&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(&amp;amp;dev, skb, dev);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-4-2-添加网络命名空间-ID&quot;&gt;&lt;a href=&quot;#3-4-2-添加网络命名空间-ID&quot; class=&quot;headerlink&quot; title=&quot;3.4.2 添加网络命名空间 ID&quot;&gt;&lt;/a&gt;3.4.2 添加网络命名空间 ID&lt;/h4&gt;&lt;p&gt;采集网络命名空间信息非常有用，但是实现起来要复杂一些。原理上可以从两个地方访问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket 结构体 &lt;code&gt;sk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;device 结构体 &lt;code&gt;dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我在写 &lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/tools/solisten.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;solisten.py&lt;/a&gt; 时 ，我使用的时 socket 结构体。不幸的是，不知道为什么，网络命名空间 ID 在跨命名空间的地 方消失了。这个字段全是 0，很明显是有非法内存访问时的返回值（回忆前面介绍的 &lt;code&gt;bpf_probe_read&lt;/code&gt; 如何处理错误）。&lt;/p&gt;
&lt;p&gt;幸好，device 结构体工作正常。想象一下，我们可以问一个 &lt;code&gt;packet&lt;/code&gt; 它在哪个&lt;code&gt;网卡&lt;/code&gt;，进而 问这个网卡它在哪个&lt;code&gt;网络命名空间&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; net* net;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Get netns id. Equivalent to: evt.netns = dev-&amp;gt;nd_net.net-&amp;gt;ns.inum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;possible_net_t&lt;/span&gt; *skc_net = &amp;amp;dev-&amp;gt;nd_net;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;member_read(&amp;amp;net, skc_net, net);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ns_common* ns = member_address(net, ns);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;member_read(&amp;amp;evt.netns, ns, inum);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的宏定义如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; member_address(source_struct, source_member) \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;#123;                                                   \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void* __ret;                                       \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __ret = (void*) (((char*)source_struct) + offsetof(typeof(*source_struct), source_member)); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __ret;                                             \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个宏还可以用于简化 &lt;code&gt;member_read&lt;/code&gt;，这个就留给读者作为练习了。&lt;/p&gt;
&lt;p&gt;好了，有了以上实现，我们再运行的效果就是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;gt; sudo python ./tracepkt.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 ping 一个容器，你看到的就是类似上面的输出。packet 首先经过本地的 docker0 网桥， 然后经 veth pair 跨过网络命名空间，最后到达容器的 eth0 网卡。应答包沿着相反的路径回 到宿主机。&lt;/p&gt;
&lt;p&gt;至此，功能是实现了，不过还太粗糙，继续改进。&lt;/p&gt;
&lt;h4 id=&quot;3-4-3-只跟踪-ICMP-echo-request-reply-包&quot;&gt;&lt;a href=&quot;#3-4-3-只跟踪-ICMP-echo-request-reply-包&quot; class=&quot;headerlink&quot; title=&quot;3.4.3 只跟踪 ICMP echo request/reply 包&quot;&gt;&lt;/a&gt;3.4.3 只跟踪 ICMP echo request/reply 包&lt;/h4&gt;&lt;p&gt;这次我们将读取包的 IP 信息，这里我只展示 IPv4 的例子，IPv6 的与此类似。&lt;/p&gt;
&lt;p&gt;不过，事情也并没有那么简单。我们是在和 kernel 的网络部分打交道。一些包可能还没被打 开，这意味着，变量的很多字段是没有初始化的。我们只能从 MAC 头开始，用 offset 的方式 计算 IP 头和 ICMP 头的位置。&lt;/p&gt;
&lt;p&gt;首先从 MAC 头地址推导 IP 头地址。这里我们不(从 &lt;code&gt;skb&lt;/code&gt; 的相应字段)加载 MAC 头长度信息，就认为 它是固定的 14 字节。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Compute MAC header address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* head;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u16 mac_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;member_read(&amp;amp;head,       skb, head);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;member_read(&amp;amp;mac_header, skb, mac_header);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Compute IP Header address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAC_HEADER_SIZE 14;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* ip_header_address = head + mac_header + MAC_HEADER_SIZE;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这表示我们假设 IP 头开始的地方在：&lt;code&gt;skb-&amp;gt;head + skb-&amp;gt;mac_header + MAC_HEADER_SIZE&lt;/code&gt; 。 现在，我们可以解析 IP 头第一个字节的前 4 个 bit：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Load IP protocol version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u8 ip_version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_probe_read(&amp;amp;ip_version, sizeof(u8), ip_header_address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip_version = ip_version &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp; &lt;span class=&quot;number&quot;&gt;0xf&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Filter IPv4 packets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip_version != &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后加载整个 IP 头，获取 IP 地址，以使得 Python 程序的输出看起来更有意义。另外注意，IP 包内的下一个头就是 ICMP 头。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Load IP Header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct iphdr iphdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_probe_read(&amp;amp;iphdr, sizeof(iphdr), ip_header_address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Load protocol &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; address&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u8 icmp_offset_from_ip_header = iphdr.ihl * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.saddr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = iphdr.saddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.daddr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = iphdr.daddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Filter ICMP packets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iphdr.protocol != IPPROTO_ICMP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，我们加载 ICMP 头，如果是 ICMP echo request 或 reply，就读取序列号：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Compute ICMP header address &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; load ICMP header&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char* icmp_header_address = ip_header_address + icmp_offset_from_ip_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct icmphdr icmphdr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bpf_probe_read(&amp;amp;icmphdr, sizeof(icmphdr), icmp_header_address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Filter ICMP echo request &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; echo reply&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (icmphdr.type != ICMP_ECHO &amp;amp;&amp;amp; icmphdr.type != ICMP_ECHOREPLY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Get ICMP info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.icmptype = icmphdr.type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.icmpid   = icmphdr.un.echo.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.icmpseq  = icmphdr.un.echo.sequence;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Fix endian&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.icmpid  = be16_to_cpu(evt.icmpid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evt.icmpseq = be16_to_cpu(evt.icmpseq);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就是全部工作了。&lt;/p&gt;
&lt;p&gt;如果你想过滤特定的 ping 进程的包，你可以认为 &lt;code&gt;evt.icmpid&lt;/code&gt; 就是相应 ping 进程的进程号， 至少 Linux 上如此。&lt;/p&gt;
&lt;h3 id=&quot;3-5-最终效果&quot;&gt;&lt;a href=&quot;#3-5-最终效果&quot; class=&quot;headerlink&quot; title=&quot;3.5 最终效果&quot;&gt;&lt;/a&gt;3.5 最终效果&lt;/h3&gt;&lt;p&gt;再写一些比较简单的 Python 程序配合，我们就可以测试我们的跟踪器在多种场景下的用途。 以 root 权限启动这个程序，在不同终端发起几个 ping 进程，就会看到：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping -4 localhost&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]               lo request &lt;span class=&quot;comment&quot;&gt;#20212.001 127.0.0.1 -&amp;gt; 127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]               lo request &lt;span class=&quot;comment&quot;&gt;#20212.001 127.0.0.1 -&amp;gt; 127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]               lo   reply &lt;span class=&quot;comment&quot;&gt;#20212.001 127.0.0.1 -&amp;gt; 127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]               lo   reply &lt;span class=&quot;comment&quot;&gt;#20212.001 127.0.0.1 -&amp;gt; 127.0.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个 ICMP 请求是进程 20212（Linux ping 的 ICMP ID）在 loopback 网卡发出的，最后的 reply 原路回到了这个 loopback。这个环回接口既是发送网卡又是接收网卡。&lt;/p&gt;
&lt;p&gt;如果是我的 WiFi 网关会是什么样子内？&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping -4 192.168.43.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]           wlp2s0 request &lt;span class=&quot;comment&quot;&gt;#20710.001 192.168.43.191 -&amp;gt; 192.168.43.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]           wlp2s0   reply &lt;span class=&quot;comment&quot;&gt;#20710.001 192.168.43.1 -&amp;gt; 192.168.43.191&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这种情况下走的是 WiFi 网卡，也没问题。&lt;/p&gt;
&lt;p&gt;另外，让我们的话题稍微偏一下，还记得刚开始我们只打印程序名字的版本吗？在 上面这种情况下，ICMP 请求的程序名字会是 ping，而应答包的程序的名字会是 WiFi 驱动，因 为是驱动发的应答包，至少 Linux 上是如此。&lt;/p&gt;
&lt;p&gt;最后还是拿我最喜欢的例子：ping 容器。之所以最喜欢并不是因为 Docker，而是它展示了 eBPF 的强大，&lt;strong&gt;就像给 ping 过程做了一次 X 射线检查&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ping -4 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0 request &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.1 -&amp;gt; 172.17.0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026532258]             eth0   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]      vetha373ab6   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[  4026531957]          docker0   reply &lt;span class=&quot;comment&quot;&gt;#17146.001 172.17.0.2 -&amp;gt; 172.17.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来点 ASCII 艺术，就变成：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       Host netns           | Container netns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------------+-----------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| docker0 ---&amp;gt; veth0e65931 ---&amp;gt; eth0          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------------+-----------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h2&gt;&lt;p&gt;在 eBPF/bcc 出现之前，要深入的排查和追踪很多网络问题，只能靠给内核打补丁。现在，我 们可以比较方便地用 eBPF/bcc 编写一些工具来完成这些事情。跟踪点(tracepoint)也很方便 ，它们提示了我们可以在哪些地方进行探测，避免了去看繁杂的内核代码。kprobe 无法探测 的一些地方，例如一些内联函数和静态函数，eBPF/bcc 也可以探测。&lt;/p&gt;
&lt;p&gt;本文的例子要添加对 IPv6 的支持也非常简单，我就留给读者作为练习。&lt;/p&gt;
&lt;p&gt;如果要使本文更加完善的话，我需要对我们的程序做性能测试。但考虑到文章本身已经非常 长，这里就不做了。&lt;/p&gt;
&lt;p&gt;对我们的代码进行改进，用在跟踪路由和 iptables 判决，或是 ARP 包，也是很有意思的。 这将会把它变成一个完美的 X 射线跟踪器，对像我这样需要经常处理复杂网络问题的 人来说将非常有用。&lt;/p&gt;
&lt;p&gt;完整的（包含 IPv6 支持）代码可以访问：&lt;a href=&quot;https://github.com/icyxp/tracepkt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/tracepkt&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文翻译自：Tracing a packet’s journey using Linux tracepoints, perf and eBPF 来源：arthurchiao.art 作者：ArthurChiao&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一段时间以来，我一直在寻找 Linux 上的底层网络调试（debug）工具。&lt;/p&gt;
&lt;p&gt;Linux 允许在主机上用&lt;strong&gt;虚拟网卡&lt;/strong&gt;（virtual interface）和&lt;strong&gt;网络命名空间&lt;/strong&gt;（network namespace）构建复杂的网络。但出现故障时，排障（troubleshooting）相当痛苦。如果是 3 层路由问题，&lt;code&gt;mtr&lt;/code&gt; 可以排上用场。但如果是更底层的问题，我通常只能手动检查每个网 卡/网桥/网络命名空间/iptables 规则，用 &lt;code&gt;tcpdump&lt;/code&gt; 抓一些包，以确定到底是什么状况。如 果不了解故障之前的网络设置，那感觉就像在走迷宫。&lt;br&gt;
    
    </summary>
    
      <category term="抓包" scheme="http://team.jiunile.com/categories/%E6%8A%93%E5%8C%85/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/categories/%E6%8A%93%E5%8C%85/debug/"/>
    
    
      <category term="tcpdump" scheme="http://team.jiunile.com/tags/tcpdump/"/>
    
      <category term="perf" scheme="http://team.jiunile.com/tags/perf/"/>
    
      <category term="eBPF" scheme="http://team.jiunile.com/tags/eBPF/"/>
    
  </entry>
  
  <entry>
    <title>Docker 中 Storage-driver 启用 Overlay2 并限制单个容器的磁盘空间</title>
    <link href="http://team.jiunile.com//blog/2020/10/docker-storage-driver.html"/>
    <id>http://team.jiunile.com//blog/2020/10/docker-storage-driver.html</id>
    <published>2020-10-23T12:00:00.000Z</published>
    <updated>2020-10-23T06:42:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1 简介&quot;&gt;&lt;/a&gt;1 简介&lt;/h2&gt;&lt;p&gt;目前 docker 中常见的 Storage-driver 主要有 AUFS、Devicemapper 以及 Overlay2，这三种文件存储驱动这里简单介绍下。同时着重介绍 Overlay2 的使用事项。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-AUFS&quot;&gt;&lt;a href=&quot;#2-AUFS&quot; class=&quot;headerlink&quot; title=&quot;2 AUFS&quot;&gt;&lt;/a&gt;2 AUFS&lt;/h2&gt;&lt;h3 id=&quot;2-1-如何存储文件？&quot;&gt;&lt;a href=&quot;#2-1-如何存储文件？&quot; class=&quot;headerlink&quot; title=&quot;2.1 如何存储文件？&quot;&gt;&lt;/a&gt;2.1 如何存储文件？&lt;/h3&gt;&lt;p&gt;AUFS 使用多层目录存储，每一次目录在 Docker 中称之为层（layer），最终呈现给用户的则是一个普通的单层文件系统，我们把多层以单一层的方式呈现出来的过程叫做联合挂载。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/mnt       联合挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ↓     ↓     ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff      容器层（可读写）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ↓     ↓     ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff      镜像层（只读）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff 文件夹&lt;/code&gt;：存储镜像内容，每一层都存储在以镜像层 ID 命名的子文件夹中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layers 文件夹&lt;/code&gt;：存储镜像层关系的元数据，在 diff 文件夹下的每个镜像层在这里都会有一个文件，文件的内容为该层镜像的父级镜像的 ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mnt 文件夹&lt;/code&gt;：联合挂载点目录，未生成容器时，该目录为空。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-读写文件&quot;&gt;&lt;a href=&quot;#2-2-读写文件&quot; class=&quot;headerlink&quot; title=&quot;2.2 读写文件&quot;&gt;&lt;/a&gt;2.2 读写文件&lt;/h3&gt;&lt;h4 id=&quot;2-2-1-读文件&quot;&gt;&lt;a href=&quot;#2-2-1-读文件&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 读文件&quot;&gt;&lt;/a&gt;2.2.1 读文件&lt;/h4&gt;&lt;p&gt;当读取的文件在容器层时，直接从容器层读取，当文件不存在容器层时，则从镜像层中读取，当文件既在镜像层又在容器层时，则从容器层读取&lt;/p&gt;
&lt;h4 id=&quot;2-2-2-修改或删除文件&quot;&gt;&lt;a href=&quot;#2-2-2-修改或删除文件&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 修改或删除文件&quot;&gt;&lt;/a&gt;2.2.2 修改或删除文件&lt;/h4&gt;&lt;p&gt;当第一次修改文件时，AUFS 会触发写时复制，先从镜像层复制文件到容器层，然后在执行修改操作。当修改文件或目录时，AUFS 并不会真正从镜像中删除，而是创建一个特殊的文件或文件夹（whiteout），这种特殊的文件或文件夹会组织容器访问。&lt;/p&gt;
&lt;h3 id=&quot;2-3-优缺点&quot;&gt;&lt;a href=&quot;#2-3-优缺点&quot; class=&quot;headerlink&quot; title=&quot;2.3 优缺点&quot;&gt;&lt;/a&gt;2.3 优缺点&lt;/h3&gt;&lt;p&gt;在容器密度比较高的场景下，AUFS 是非常好的选择，因为 AUFS 的容器间共享镜像层的特性使其磁盘利用率很高，容器的启动时间很短。&lt;/p&gt;
&lt;p&gt;AUFS 的写时复制策略会带来很高的性能开销，因为 AUFS 对文件的第一次更改需要将整个文件复制到读写层，当容器层数很多或文件所在目录很深时尤其明显。其次 AUFS 未能进入 Linux 内核主线。&lt;/p&gt;
&lt;h2 id=&quot;3-Devicemapper&quot;&gt;&lt;a href=&quot;#3-Devicemapper&quot; class=&quot;headerlink&quot; title=&quot;3 Devicemapper&quot;&gt;&lt;/a&gt;3 Devicemapper&lt;/h2&gt;&lt;h3 id=&quot;3-1-如何存储文件？&quot;&gt;&lt;a href=&quot;#3-1-如何存储文件？&quot; class=&quot;headerlink&quot; title=&quot;3.1 如何存储文件？&quot;&gt;&lt;/a&gt;3.1 如何存储文件？&lt;/h3&gt;&lt;p&gt;Devicemapper 使用专门的块设备来实现镜像的存储，并且像 AUFS 一样使用了写时复制的技术来保障最大程度节省存储空间，Devicemapper 的镜像分层使用快照的方式实现。&lt;/p&gt;
&lt;p&gt;Devicemapper 创建镜像的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个精简配置池，精简配置池由块设备或稀疏文件创建。&lt;/li&gt;
&lt;li&gt;接下来创建一个基础设备。&lt;/li&gt;
&lt;li&gt;每个镜像和镜像层都是基础设备的快照；在写快照支持写时复制策略，这意味着它们起始都是空的，当有数据写入时才耗费空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/sd-dm.jpg&quot; alt=&quot;device mapper&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-读写文件&quot;&gt;&lt;a href=&quot;#3-2-读写文件&quot; class=&quot;headerlink&quot; title=&quot;3.2 读写文件&quot;&gt;&lt;/a&gt;3.2 读写文件&lt;/h3&gt;&lt;h4 id=&quot;3-2-1-读文件&quot;&gt;&lt;a href=&quot;#3-2-1-读文件&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 读文件&quot;&gt;&lt;/a&gt;3.2.1 读文件&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/sd-dm-read.jpg&quot; alt=&quot;device mapper read&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某个进程发出读取文件的请求；由于容器只是镜像的精简快照 (thin snapshot)，它并没有这个文件。但它有指向这个文件在下面层中存储位置的指针。&lt;/li&gt;
&lt;li&gt;Devicemapper 由指针找到在镜像层号为 a005e 中的块号为 0xf33 的数据；&lt;/li&gt;
&lt;li&gt;Devicemapper 将这个位置的文件复制到容器的存储区内；&lt;/li&gt;
&lt;li&gt;Devicemapper 将数据返回给应用进程；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-2-2-写文件&quot;&gt;&lt;a href=&quot;#3-2-2-写文件&quot; class=&quot;headerlink&quot; title=&quot;3.2.2 写文件&quot;&gt;&lt;/a&gt;3.2.2 写文件&lt;/h4&gt;&lt;p&gt;在 Devicemapper 中，对容器的写操作由“需要时分配”策略完成。更新已有数据由“写时复制”策略完成，这些操作都在块的层次上完成。当我们需要写数据时，则向瘦供给池（thinpool）动态申请存储空间生成读写层，然后把数据复制到读写层进行修改。Devicemapper 默认每次申请的大小是 64KB 或者 64KB 的倍数，因此每次新生成的读写层的大小都是 64KB 或者 64KB 的倍数。&lt;/p&gt;
&lt;h3 id=&quot;3-3-优缺点&quot;&gt;&lt;a href=&quot;#3-3-优缺点&quot; class=&quot;headerlink&quot; title=&quot;3.3 优缺点&quot;&gt;&lt;/a&gt;3.3 优缺点&lt;/h3&gt;&lt;p&gt;Devicemapper 的写时复制策略以 64KB 作为粒度，意味着无论是对 32KB 的文件还是对 1GB 大小的文件的修改都仅复制 64KB 大小的文件。这相对于在文件层面进行的读操作具有很明显的性能优势。&lt;/p&gt;
&lt;p&gt;但是，如果容器频繁对小于 64KB 的文件进行改写，Devicemapper 的性能是低于 AUFS 的。同时 Devicemapper 不是最有效使用存储空间的 storage driver，启动 n 个相同的容器就复制了 n 份文件在内存中，这对内存的影响很大。所以 Devicemapper 并不适合容器密度高的场景。&lt;/p&gt;
&lt;h2 id=&quot;4-Overlay2&quot;&gt;&lt;a href=&quot;#4-Overlay2&quot; class=&quot;headerlink&quot; title=&quot;4 Overlay2&quot;&gt;&lt;/a&gt;4 Overlay2&lt;/h2&gt;&lt;h3 id=&quot;4-1-如何存储文件？&quot;&gt;&lt;a href=&quot;#4-1-如何存储文件？&quot; class=&quot;headerlink&quot; title=&quot;4.1 如何存储文件？&quot;&gt;&lt;/a&gt;4.1 如何存储文件？&lt;/h3&gt;&lt;p&gt;Overlay2 将一个 Linux 主机中的两个目录组合起来，一个在上，一个在下，对外提供统一的视图。这两个目录就是层 layer，将两个层组合在一起的技术被称为联合挂载（union mount）。在 Overlay2 中，上层的目录被称作 &lt;code&gt;upperdir&lt;/code&gt;，下层的，目录被称作 &lt;code&gt;lowerdir&lt;/code&gt;，对外提供的统一视图被称作 &lt;code&gt;merged&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/images/sd-ol2.jpg&quot; alt=&quot;overlay2&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意到，镜像层和容器层可以有相同的文件，这种情况下，&lt;code&gt;upperdir&lt;/code&gt; 中的文件覆盖 &lt;code&gt;lowerdir&lt;/code&gt; 中的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Overlay2 文件系统最多支持 128 个层数叠加，也就是说你的 Dockerfile 最多只能写 128 行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-2-读写文件&quot;&gt;&lt;a href=&quot;#4-2-读写文件&quot; class=&quot;headerlink&quot; title=&quot;4.2 读写文件&quot;&gt;&lt;/a&gt;4.2 读写文件&lt;/h3&gt;&lt;h4 id=&quot;4-2-1-读文件&quot;&gt;&lt;a href=&quot;#4-2-1-读文件&quot; class=&quot;headerlink&quot; title=&quot;4.2.1 读文件&quot;&gt;&lt;/a&gt;4.2.1 读文件&lt;/h4&gt;&lt;p&gt;要读的文件不在 container layer 中，那就从 &lt;code&gt;lowerdir&lt;/code&gt; 中读，会耗费一点性能；要读的文件存在于 container layer 中，直接从 &lt;code&gt;upperdir&lt;/code&gt; 中读；要读的文件在container layer 和 image layer 中都存在, 从 &lt;code&gt;upperdir&lt;/code&gt; 中读文件&lt;/p&gt;
&lt;h4 id=&quot;4-2-2-写文件&quot;&gt;&lt;a href=&quot;#4-2-2-写文件&quot; class=&quot;headerlink&quot; title=&quot;4.2.2 写文件&quot;&gt;&lt;/a&gt;4.2.2 写文件&lt;/h4&gt;&lt;p&gt;在第一次修改时，文件不在 container layer(upperdir) 中，overlay driver 调用写时复制将文件从 &lt;code&gt;lowerdir&lt;/code&gt; 读到 &lt;code&gt;upperdir&lt;/code&gt; 中，然后对文件的副本做出修改。文件被删除时，和 AUFS 一样，相应的 whiteout 文件被创建在 &lt;code&gt;upperdir&lt;/code&gt;。并不删除容器层(lowerdir) 中的文件，&lt;code&gt;whiteout&lt;/code&gt; 文件屏蔽了它的存在。&lt;/p&gt;
&lt;h3 id=&quot;4-3-优缺点&quot;&gt;&lt;a href=&quot;#4-3-优缺点&quot; class=&quot;headerlink&quot; title=&quot;4.3 优缺点&quot;&gt;&lt;/a&gt;4.3 优缺点&lt;/h3&gt;&lt;p&gt;Overlay2 的拷贝操作工作在文件层面上，也就是对文件的第一次修改需要复制整个文件，会带来一些性能开销，在修改大文件时尤其明显。但 Overlay2 的拷贝操作比 AUFS 还是快一点，因为 AUFS 有很多层，而 Overlay2 只有两层，所以 Overlay2 在文件的搜索方面相对于 AUFS 具有优势。Overlay2 支持页缓存的共享，这意味着多个使用同一文件的容器可以共享同一页缓存，这使得 Overlay2 具有很高的内存使用效率。&lt;/p&gt;
&lt;h2 id=&quot;5-如何使用-Overlay2&quot;&gt;&lt;a href=&quot;#5-如何使用-Overlay2&quot; class=&quot;headerlink&quot; title=&quot;5 如何使用 Overlay2&quot;&gt;&lt;/a&gt;5 如何使用 Overlay2&lt;/h2&gt;&lt;h3 id=&quot;5-1-先决条件&quot;&gt;&lt;a href=&quot;#5-1-先决条件&quot; class=&quot;headerlink&quot; title=&quot;5.1 先决条件&quot;&gt;&lt;/a&gt;5.1 先决条件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Docker 版本必须高于 17.06.02&lt;/li&gt;
&lt;li&gt;如果操作系统是 RHEL 或 CentOS，内核版本必须高于 3.10.0-514，其他 Linux 内核版本必须高于 4.0&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overlay2 最好搭配 xfs 文件系统使用，并且使用 xfs 作为底层文件系统时，d_type 必须开启&lt;/p&gt;
&lt;p&gt;验证 d_type 是否开启：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xfs_info /var/lib/docker | grep ftype&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当输出结果中有 &lt;code&gt;ftype=1&lt;/code&gt; 时，表示 d_type 已经开启。如果为 0 时，则需要重新格式化磁盘。命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkfs.xfs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; -n ftype=1 /path/to/disk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;5-2-限制单个容器可占用磁盘空间&quot;&gt;&lt;a href=&quot;#5-2-限制单个容器可占用磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;5.2 限制单个容器可占用磁盘空间&quot;&gt;&lt;/a&gt;5.2 限制单个容器可占用磁盘空间&lt;/h3&gt;&lt;h4 id=&quot;5-2-1-开启-xfs-的-quota-特性&quot;&gt;&lt;a href=&quot;#5-2-1-开启-xfs-的-quota-特性&quot; class=&quot;headerlink&quot; title=&quot;5.2.1 开启 xfs 的 quota 特性&quot;&gt;&lt;/a&gt;5.2.1 开启 xfs 的 quota 特性&lt;/h4&gt;&lt;p&gt;在 &lt;code&gt;/etc/fstab&lt;/code&gt; 中设置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UUID=4cbf4a19-1fba-4027-bf92-9aa969683fa9     /var/lib/docker   xfs    defaults,pquota  0   0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;/var/lib/docker&lt;/code&gt; 卸载后重新挂载即可。&lt;/p&gt;
&lt;h4 id=&quot;5-2-2-配置-docker-daemon&quot;&gt;&lt;a href=&quot;#5-2-2-配置-docker-daemon&quot; class=&quot;headerlink&quot; title=&quot;5.2.2 配置 docker daemon&quot;&gt;&lt;/a&gt;5.2.2 配置 docker daemon&lt;/h4&gt;&lt;p&gt;&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; 配置文件如下，这里将每个容器可以使用的磁盘空间设置为1G：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;storage-driver&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;overlay2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;storage-opts&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;overlay2.override_kernel_check=true&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;overlay2.size=1G&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-2-3-写入文件测试&quot;&gt;&lt;a href=&quot;#5-2-3-写入文件测试&quot; class=&quot;headerlink&quot; title=&quot;5.2.3 写入文件测试&quot;&gt;&lt;/a&gt;5.2.3 写入文件测试&lt;/h4&gt;&lt;p&gt;重启docker后，启动一个容器，在容器中创建文件。&lt;/p&gt;
&lt;p&gt;先创建一个1000M的文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# dd if=/dev/zero of=/a bs=100M count=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10+0 records &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10+0 records out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建第二个1000M的文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# dd if=/dev/zero of=/b bs=100M count=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd: writing &lt;span class=&quot;string&quot;&gt;&#39;/b&#39;&lt;/span&gt;: No space left on device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2+0 records &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0+1 records out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到第二个 1000M 文件因为空间不足创建失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1 简介&quot;&gt;&lt;/a&gt;1 简介&lt;/h2&gt;&lt;p&gt;目前 docker 中常见的 Storage-driver 主要有 AUFS、Devicemapper 以及 Overlay2，这三种文件存储驱动这里简单介绍下。同时着重介绍 Overlay2 的使用事项。&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://team.jiunile.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://team.jiunile.com/tags/docker/"/>
    
      <category term="storage-driver" scheme="http://team.jiunile.com/tags/storage-driver/"/>
    
      <category term="overlay2" scheme="http://team.jiunile.com/tags/overlay2/"/>
    
  </entry>
  
  <entry>
    <title>带你了解 Kube-proxy 工作原理</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-kube-proxy.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-kube-proxy.html</id>
    <published>2020-10-22T12:00:00.000Z</published>
    <updated>2020-10-22T07:20:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;kube-proxy介绍&quot;&gt;&lt;a href=&quot;#kube-proxy介绍&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy介绍&quot;&gt;&lt;/a&gt;kube-proxy介绍&lt;/h2&gt;&lt;h3 id=&quot;为什么需要kube-proxy&quot;&gt;&lt;a href=&quot;#为什么需要kube-proxy&quot; class=&quot;headerlink&quot; title=&quot;为什么需要kube-proxy&quot;&gt;&lt;/a&gt;为什么需要kube-proxy&lt;/h3&gt;&lt;p&gt;我们知道容器的特点是快速创建、快速销毁，Kubernetes Pod 和容器一样只具有临时的生命周期，一个 Pod 随时有可能被终止或者漂移，随着集群的状态变化而变化，一旦Pod 变化，则该 Pod 提供的服务也就无法访问，如果直接访问 Pod 则无法实现服务的连续性和高可用性，因此显然不能使用 Pod 地址作为服务暴露端口。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法和传统数据中心解决无状态服务高可用的思路完全一样，通过负载均衡和 VIP 实现后端真实服务的自动转发、故障转移。&lt;/p&gt;
&lt;p&gt;这个负载均衡在 Kubernetes 中称为 Service，VIP 即 Service ClusterIP，因此可以认为Kubernetes 的 Service 就是一个四层负载均衡，Kubernetes 对应的还有七层负载均衡 Ingress，本文仅介绍 Kubernetes Service。&lt;/p&gt;
&lt;p&gt;这个 Service 就是由 kube-proxy 实现的，ClusterIP 不会因为 Pod 状态改变而变，需要注意的是 VIP 即 ClusterIP 是个假的 IP，这个 IP 在整个集群中根本不存在，当然也就无法通过IP协议栈无法路由，底层 underlay 设备更无法感知这个 IP 的存在，因此 ClusterIP 只能是单主机（Host Only）作用域可见，这个IP在其他节点以及集群外均无法访问。&lt;/p&gt;
&lt;p&gt;Kubernetes 为了实现在集群所有的节点都能够访问 Service，kube-proxy 默认会在所有的 Node 节点都创建这个 VIP 并且实现负载，所以在部署 Kubernetes 后发现 kube-proxy 是一个 DaemonSet。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而 Service 负载之所以能够在 Node 节点上实现是因为无论 Kubernetes 使用哪个网络模型，均需要保证满足如下三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器之间要求不需要任何NAT能直接通信；&lt;/li&gt;
&lt;li&gt;容器与Node之间要求不需要任何NAT能直接通信；&lt;/li&gt;
&lt;li&gt;容器看到自身的IP和外面看到它的IP必须是一样的，即不存在IP转化的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至少第 2 点是必须满足的，有了如上几个假设，Kubernetes Service 才能在 Node 上实现，否则 Node 不通 Pod IP 也就实现不了了。&lt;/p&gt;
&lt;p&gt;有人说既然 kube-proxy 是四层负载均衡，那 kube-proxy 应该可以使用 haproxy、nginx 等作为负载后端啊？&lt;/p&gt;
&lt;p&gt;事实上确实没有问题，不过唯一需要考虑的就是性能问题，如上这些负载均衡功能都强大，但毕竟还是基于用户态转发或者反向代理实现的，性能必然不如在内核态直接转发处理好。&lt;/p&gt;
&lt;p&gt;因此 kube-proxy 默认会优先选择基于内核态的负载作为后端实现机制，目前 kube-proxy 默认是通过 iptables 实现负载的，在此之前还有一种称为 userspace 模式，其实也是基于 iptables 实现，可以认为当前的 iptables 模式是对之前 userspace 模式的优化。&lt;/p&gt;
&lt;p&gt;本节接下来将详细介绍kube-proxy iptables模式的实现原理。&lt;/p&gt;
&lt;h3 id=&quot;kube-proxy-iptables-模式实现原理&quot;&gt;&lt;a href=&quot;#kube-proxy-iptables-模式实现原理&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy iptables 模式实现原理&quot;&gt;&lt;/a&gt;kube-proxy iptables 模式实现原理&lt;/h3&gt;&lt;h4 id=&quot;ClusterIP&quot;&gt;&lt;a href=&quot;#ClusterIP&quot; class=&quot;headerlink&quot; title=&quot;ClusterIP&quot;&gt;&lt;/a&gt;ClusterIP&lt;/h4&gt;&lt;p&gt;首先创建了一个 ClusterIP 类型的 Service:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc -l owner=int32bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   ClusterIP   10.106.224.41   &amp;lt;none&amp;gt;        8080/TCP   163m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 ClusterIP 为 10.106.224.41，我们可以验证这个IP在本地是不存在的:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# ping -c 2 -w 2 10.106.224.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.106.224.41 (10.106.224.41) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 10.106.224.41 ping statistics ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 packets transmitted, 0 received, 100% packet loss, time 1025ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# ip a | grep 10.106.224.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;不要尝试去 ping ClusterIP，它不可能通的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时在 Node 节点 192.168.193.172 上访问该 Service 服务，首先流量到达的是 OUTPUT 链，这里我们只关心 nat 表的 OUTPUT 链：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A OUTPUT&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A OUTPUT -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该链跳转到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 子链中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SERVICES&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.244.0.0/16 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.106.224.41/32 -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1: cluster IP&quot;&lt;/span&gt; -m tcp --dport 8080 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.106.224.41/32 -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1: cluster IP&quot;&lt;/span&gt; -m tcp --dport 8080 -j KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现与之相关的有两条规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条负责打标记 &lt;code&gt;MARK 0x4000/0x4000&lt;/code&gt;，后面会用到这个标记。&lt;/li&gt;
&lt;li&gt;第二条规则跳到 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 子链。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 子链规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SVC-RPP7DHNHMGOIIFDC&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-FTIQ6MSD3LWO5HZX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-SQBK6CVV7ZCKBTVI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -j KUBE-SEP-IAZPHGLZVO2SWOVD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这几条规则看起来复杂，其实实现的功能很简单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/3 的概率跳到子链 &lt;code&gt;KUBE-SEP-FTIQ6MSD3LWO5HZX&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;剩下概率的 1/2，(1 - 1/3) * 1/2 == 1/3，即 1/3 的概率跳到子链 &lt;code&gt;KUBE-SEP-SQBK6CVV7ZCKBTVI&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;剩下 1/3 的概率跳到 &lt;code&gt;KUBE-SEP-IAZPHGLZVO2SWOVD&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们查看其中一个子链 KUBE-SEP-FTIQ6马上到！3LWO5HZX规则:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SEP-FTIQ6MSD3LWO5HZX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-FTIQ6MSD3LWO5HZX -p tcp -m tcp -j DNAT --to-destination 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见这条规则的目的是做了一次 DNAT，DNAT 目标为其中一个 Endpoint，即 Pod 服务。&lt;/p&gt;
&lt;p&gt;由此可见子链 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 的功能就是按照概率均等的原则DNAT 到其中一个 Endpoint IP，即 Pod IP，假设为 10.244.1.2，&lt;/p&gt;
&lt;p&gt;此时相当于:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.106.224.41:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxX -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着来到 POSTROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A POSTROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes postrouting rules&quot;&lt;/span&gt; -j KUBE-POSTROUTING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-POSTROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service traffic requiring SNAT&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两条规则只做一件事就是只要标记了 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包就一律做 MASQUERADE（SNAT)，由于 10.244.1.2 默认是从 flannel.1 转发出去的，因此会把源IP改为 flannel.1 的IP &lt;code&gt;10.244.0.0&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.106.224.41:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  SNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是常规的走 Vxlan 隧道转发流程了，这里不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;NodePort&quot;&gt;&lt;a href=&quot;#NodePort&quot; class=&quot;headerlink&quot; title=&quot;NodePort&quot;&gt;&lt;/a&gt;NodePort&lt;/h4&gt;&lt;p&gt;接下来研究下 NodePort 过程，首先创建如下 Service:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc -l owner=int32bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   NodePort   10.106.224.41   &amp;lt;none&amp;gt;        8080:30419/TCP   3h30m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 Service 的 NodePort 端口为 30419。&lt;/p&gt;
&lt;p&gt;假设有一个外部IP 192.168.193.197，通过 &lt;code&gt;192.168.193.172:30419&lt;/code&gt; 访问服务。&lt;/p&gt;
&lt;p&gt;首先到达 PREROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A PREROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A PREROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SERVICES&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PREROUTING 的规则非常简单，凡是发给自己的包，则交给子链 &lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 处理。注意前面省略了判断 ClusterIP 的部分规则。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-NODEPORTS&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1:&quot;&lt;/span&gt; -m tcp --dport 30419 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1:&quot;&lt;/span&gt; -m tcp --dport 30419 -j KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个规则首先给包打上标记 &lt;code&gt;0x4000/0x4000&lt;/code&gt;，然后交给子链 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 处理， &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 刚刚已经见面过了，其功能就是按照概率均等的原则 DNAT 到其中一个 Endpoint IP，即 Pod IP，假设为10.244.1.2。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:30419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时发现 10.244.1.2 不是自己的IP，于是经过路由判断目标为 10.244.1.2 需要从 flannel.1 发出去。&lt;/p&gt;
&lt;p&gt;接着到了 &lt;code&gt;FORWARD&lt;/code&gt; 链，&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t filter | grep -- &#39;-A FORWARD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A FORWARD -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes forwarding rules&quot;&lt;/span&gt; -j KUBE-FORWARD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t filter | grep -- &#39;-A KUBE-FORWARD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-FORWARD -m conntrack --ctstate INVALID -j DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-FORWARD -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes forwarding rules&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;FORWARD 表在这里只是判断下，只允许打了标记 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包才允许转发。&lt;/p&gt;
&lt;p&gt;最后来到 &lt;code&gt;POSTROUTING&lt;/code&gt; 链，这里和 ClusterIP 就完全一样了，在 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt; 中做一次 &lt;code&gt;MASQUERADE&lt;/code&gt;(SNAT)，最后结果:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:30419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  SNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;kube-proxy-使用-iptables-存在的问题&quot;&gt;&lt;a href=&quot;#kube-proxy-使用-iptables-存在的问题&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy 使用 iptables 存在的问题&quot;&gt;&lt;/a&gt;kube-proxy 使用 iptables 存在的问题&lt;/h3&gt;&lt;p&gt;我们发现基于 iptables 模式的 kube-proxy ClusterIP 和 NodePort 都是基于 iptables 规则实现的，我们至少发现存在如下几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iptables 规则复杂零乱，真要出现什么问题，排查 iptables 规则必然得掉层皮。 &lt;code&gt;LOG+TRACE&lt;/code&gt; 大法也不好使。&lt;/li&gt;
&lt;li&gt;iptables 规则多了之后性能下降，这是因为 iptables 规则是基于链表实现，查找复杂度为 O(n)，当规模非常大时，查找和处理的开销就特别大。据&lt;a href=&quot;https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方说法&lt;/a&gt;，当节点到达5000 个时，假设有 2000 个 NodePort Service，每个 Service 有 10 个 Pod，那么在每个 Node 节点中至少有 20000 条规则，内核根本支撑不住，iptables 将成为最主要的性能瓶颈。&lt;/li&gt;
&lt;li&gt;iptables 主要是专门用来做主机防火墙的，而不是专长做负载均衡的。虽然通过 iptables 的 &lt;code&gt;statistic&lt;/code&gt; 模块以及 DNAT 能够实现最简单的只支持概率轮询的负载均衡，但是往往我们还需要更多更灵活的算法，比如基于最少连接算法、源地址 HASH 算法等。而同样基于 netfilter 的 ipvs 却是专门做负载均衡的，配置简单，基于散列查找 O(1) 复杂度性能好，支持数十种调度算法。因此显然 ipvs 比 iptables 更适合做 kube-proxy 的后端，毕竟专业的人做专业的事，物尽其美。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文接下来将介绍 kube-proxy 的 ipvs 实现，由于本人之前也是对 ipvs 很陌生，没有用过，专门学习了下 ipvs，因此在第二章简易介绍了下 ipvs，如果已经很熟悉 ipvs 了，可以直接跳过，这一章和 Kubernetes 几乎没有任何关系。&lt;/p&gt;
&lt;h2 id=&quot;IPVS-简易入门&quot;&gt;&lt;a href=&quot;#IPVS-简易入门&quot; class=&quot;headerlink&quot; title=&quot;IPVS 简易入门&quot;&gt;&lt;/a&gt;IPVS 简易入门&lt;/h2&gt;&lt;h3 id=&quot;IPVS-简介&quot;&gt;&lt;a href=&quot;#IPVS-简介&quot; class=&quot;headerlink&quot; title=&quot;IPVS 简介&quot;&gt;&lt;/a&gt;IPVS 简介&lt;/h3&gt;&lt;p&gt;我们接触比较多的是应用层负载均衡，比如 haproxy、nginx、F5 等，这些负载均衡工作在用户态，因此会有对应的进程和监听 socket，一般能同时支持 4 层负载和 7 层负载，使用起来也比较方便。&lt;/p&gt;
&lt;p&gt;LVS 是国内章文嵩博士开发并贡献给社区的（&lt;a href=&quot;http://jm.taobao.org/2016/06/02/zhangwensong-and-load-balance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;章文嵩博士和他背后的负载均衡帝国&lt;/a&gt;)，主要由 ipvs 和 ipvsadm 组成，ipvs 是工作在内核态的 4 层负载均衡，和 iptables 一样都是基于内核底层 netfilter 实现，netfilter 主要通过各个链的钩子实现包处理和转发。ipvsadm 和 ipvs 的关系，就好比 netfilter 和 iptables 的关系，它运行在用户态，提供简单的 CLI 接口进行 ipvs 配置。&lt;/p&gt;
&lt;p&gt;由于 ipvs 工作在内核态，直接基于内核处理包转发，所以最大的特点就是性能非常好。又由于它工作在 4 层，因此不会处理应用层数据，经常有人问 ipvs 能不能做 SSL 证书卸载、或者修改 HTTP 头部数据，显然这些都不可能做的。&lt;/p&gt;
&lt;p&gt;我们知道应用层负载均衡大多数都是基于反向代理实现负载的，工作在应用层，当用户的包到达负载均衡监听器 listening 后，基于一定的算法从后端服务列表中选择其中一个后端服务进行转发。当然中间可能还会有一些额外操作，最常见的如 SSL 证书卸载。&lt;/p&gt;
&lt;p&gt;而 ipvs 工作在内核态，只处理四层协议，因此只能基于路由或者 NAT 进行数据转发，可以把 ipvs 当作一个特殊的路由器网关，这个网关可以根据一定的算法自动选择下一跳，或者把 ipvs 当作一个多重 DNAT，按照一定的算法把 ip 包的目标地址 DNAT 到其中真实服务的目标 IP。针对如上两种情况分别对应 ipvs 的两种模式–网关模式和 NAT 模式，另外 ipip 模式则是对网关模式的扩展，本文下面会针对这几种模式的实现原理进行详细介绍。&lt;/p&gt;
&lt;h3 id=&quot;IPVS-用法&quot;&gt;&lt;a href=&quot;#IPVS-用法&quot; class=&quot;headerlink&quot; title=&quot;IPVS 用法&quot;&gt;&lt;/a&gt;IPVS 用法&lt;/h3&gt;&lt;p&gt;ipvsadm 命令行用法和 iptables 命令行用法非常相似，毕竟是兄弟，比如 &lt;code&gt;-L&lt;/code&gt; 列举， &lt;code&gt;-A&lt;/code&gt; 添加， &lt;code&gt;-D&lt;/code&gt; 删除。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.172:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是其实 ipvsadm 相对 iptables 命令简直太简单了，因为没有像 iptables 那样存在各种table，table 嵌套各种链，链里串着一堆规则，ipvsadm 就只有两个核心实体，分别为service 和 server，service 就是一个负载均衡实例，而 server 就是后端 member，ipvs术语中叫做 real server，简称 RS。&lt;/p&gt;
&lt;p&gt;如下命令创建一个 service 实例 &lt;code&gt;172.17.0.1:32016&lt;/code&gt;， -t 指定监听的为 TCP 端口， -s 指定算法为轮询算法 rr(Round Robin)，ipvs 支持简单轮询(rr)、加权轮询(wrr)、最少连接(lc)、源地址或者目标地址散列(sh、dh)等 10 种调度算法。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 172.17.0.1:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后把 10.244.1.2:8080、10.244.1.3:8080、10.244.3.2:8080 添加到 service 后端 member 中。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.3.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;-t&lt;/code&gt; 指定 service 实例， &lt;code&gt;-r&lt;/code&gt; 指定 server 地址， &lt;code&gt;-w&lt;/code&gt; 指定权值， &lt;code&gt;-m&lt;/code&gt; 即前面说的转发模式，其中 &lt;code&gt;-m&lt;/code&gt; 表示为 &lt;code&gt;masquerading&lt;/code&gt;，即 NAT 模式， &lt;code&gt;-g&lt;/code&gt; 为 &lt;code&gt;gatewaying&lt;/code&gt;，即直连路由模式， &lt;code&gt;-i&lt;/code&gt; 为 ipip，即 &lt;code&gt;IPIP&lt;/code&gt; 隧道模式。&lt;/p&gt;
&lt;p&gt;与 iptables-save、iptables-restore 对应的工具 ipvs 也有 ipvsadm-save、ipvsadm-restore。&lt;/p&gt;
&lt;h3 id=&quot;NAT-network-access-translation-模式&quot;&gt;&lt;a href=&quot;#NAT-network-access-translation-模式&quot; class=&quot;headerlink&quot; title=&quot;NAT(network access translation) 模式&quot;&gt;&lt;/a&gt;NAT(network access translation) 模式&lt;/h3&gt;&lt;p&gt;​NAT 模式由字面意思理解就是通过 NAT 实现的，但究竟是如何 NAT 转发的，我们通过实验环境验证下。&lt;/p&gt;
&lt;p&gt;现环境中 LB 节点 IP 为 192.168.193.197，三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了模拟 LB 节点 IP 和 RS 不在同一个网络的情况，在 LB 节点中添加一个虚拟 IP 地址:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip addr add 10.222.0.1/24 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建负载均衡 Service 并把 RS 添加到 Service 中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 10.222.0.1:8080 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.194:30620 -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.226:30620 -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.172:30620 -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是，和应用层负载均衡如 haproxy、nginx 不一样的是，haproxy、nginx进程是运行在用户态，因此会创建 socket，本地会监听端口，而 &lt;strong&gt;ipvs 的负载是直接运行在内核态的，因此不会出现监听端口&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# netstat -lnpt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Active Internet connections (only servers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      674/systemd-resolve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      950/sshd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::22                   :::*                    LISTEN      950/sshd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可见并没有监听 10.222.0.1:8080 Socket&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Client 节点IP为 192.168.193.226，为了和 LB 节点的虚拟 IP 10.222.0.1通，我们手动添加静态路由如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip r add 10.222.0.1 via 192.168.193.197 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时 Client 节点能够 ping 通 LB 节点 VIP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# ping -c 2 -w 2 10.222.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.222.0.1 (10.222.0.1) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.222.0.1: icmp_seq=1 ttl=64 time=0.345 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.222.0.1: icmp_seq=2 ttl=64 time=0.249 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 10.222.0.1 ping statistics ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 packets transmitted, 2 received, 0% packet loss, time 1022ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rtt min/avg/max/mdev = 0.249/0.297/0.345/0.048 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 Client 节点到 VIP 的链路没有问题，那是否能够访问我们的 Service 呢？&lt;/p&gt;
&lt;p&gt;我们验证下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 2001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;非常意外的结果是并不通。&lt;/p&gt;
&lt;p&gt;在 RS 节点抓包如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-1.png&quot; alt=&quot;tcpdump ipvs&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现数据包的源 IP 为 Client IP，目标 IP 为 RS IP，换句话说，LB 节点 IPVS 只做了 DNAT，把目标 IP 改成 RS IP了，而没有修改源 IP。此时虽然 RS 和 Client 在同一个子网，链路连通性没有问题，&lt;strong&gt;但是由于 Client 节点发出去的包的目标 IP 和收到的包源 IP 不一致，因此会被直接丢弃，相当于给张三发信，李四回的信，显然不受信任&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;既然 IPVS 没有给我们做 SNAT，那自然想到的是我们手动做 SNAT，在 LB 节点添加如下 iptables 规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -m ipvs  --vaddr 10.222.0.1 --vport 8080 -j LOG --log-prefix &lt;span class=&quot;string&quot;&gt;&#39;[int32bit ipvs]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -m ipvs  --vaddr 10.222.0.1 --vport 8080 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查 Service 是否可以访问:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 2001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;服务依然不通。并且在 LB 节点的 iptables 日志为空:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:~&lt;span class=&quot;comment&quot;&gt;# cat /var/log/syslog | grep &#39;int32bit ipvs&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说，ipvs 的包根本不会经过 iptables nat 表 POSTROUTING 链？&lt;/p&gt;
&lt;p&gt;那 mangle 表呢？我们打开 LOG 查看下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t mangle -A POSTROUTING -m ipvs --vaddr 10.222.0.1 --vport 8080 -j LOG --log-prefix &lt;span class=&quot;string&quot;&gt;&quot;[int32bit ipvs]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时查看日志如下：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-iptables_ipvs.png&quot; alt=&quot;iptables_ipvs&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现在 mangle 表中可以看到 DNAT 后的包。&lt;/p&gt;
&lt;p&gt;只是 mangle 表的 POSTROUTING 并不支持 NAT 功能:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-dmesg_log.png&quot; alt=&quot;dmesg_log&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比 Kubernetes 配置发现需要设置如下系统参数:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.vs.conntrack=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次验证&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 15:28:06 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-g9bkx | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终于通了，查看 RS 抓包：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_5.png&quot; alt=&quot;tcpdump_5&quot;&gt;&lt;/p&gt;
&lt;p&gt;如期望，修改了源 IP 为 LB IP。&lt;/p&gt;
&lt;p&gt;原来需要配置 net.ipv4.vs.conntrack = 1 参数，这个问题折腾了一个晚上，不得不说目前 ipvs 的文档都太老了。&lt;/p&gt;
&lt;p&gt;前面是通过手动 iptables 实现 SNAT 的，性能可能会有损耗，于是如下开源项目通过修改 lvs 直接做 SNAT:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小米运维部在 LVS 的 FULLNAT 基础上，增加了 SNAT 网关功能，参考 &lt;a href=&quot;https://github.com/xiaomi-sa/dsnat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xiaomi-sa/dsnat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jlijian3/lvs-snat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lvs-snat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 SNAT 的办法，是否还有其他办法呢？想想我们最初的问题，Client 节点发出去的包的目标 IP 和收到的包源 IP 不一致导致包被丢弃，那解决问题的办法就是把包重新引到 LB 节点上，只需要在所有的 RS 节点增加如下路由即可:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip r add 192.168.193.226 via 192.168.193.197 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时我们再次检查我们的 Service 是否可连接:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 03:21:47 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-4v9z4 | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果没有问题。&lt;/p&gt;
&lt;p&gt;不过我们是通过手动添加 Client IP 到所有 RS 的明细路由实现的，如果 Client 不固定，这种方案仍然不太可行，所以通常做法是干脆把所有 RS 默认路由指向 LB 节点，即把LB 节点当作所有 RS 的默认网关。&lt;/p&gt;
&lt;p&gt;由此可知，用户通过 LB 地址访问服务，LB 节点 IPVS 会把用户的目标 IP 由 LB IP 改为 RS IP，源 IP 不变，包不经过 iptables 的 OUTPUT 直接到达 POSTROUTING 转发出去，包回来的时候也必须先到 LB 节点，LB 节点把目标 IP 再改成用户的源 IP，最后转发给用户。&lt;/p&gt;
&lt;p&gt;显然这种模式来回都需要经过 LB 节点，因此又称为双臂模式。&lt;/p&gt;
&lt;h3 id=&quot;网关-Gatewaying-模式&quot;&gt;&lt;a href=&quot;#网关-Gatewaying-模式&quot; class=&quot;headerlink&quot; title=&quot;网关(Gatewaying)模式&quot;&gt;&lt;/a&gt;网关(Gatewaying)模式&lt;/h3&gt;&lt;p&gt;网关模式（Gatewaying）又称为直连路由模式（Direct Routing）、透传模式，&lt;strong&gt;所谓透传即 LB 节点不会修改数据包的源 IP、端口以及目标 IP、端口&lt;/strong&gt;，LB 节点做的仅仅是路由转发出去，可以把 LB 节点看作一个特殊的路由器网关，而 RS 节点则是网关的下一跳，这就相当于对于同一个目标地址，会有多个下一跳，这个路由器网关的特殊之处在于能够根据一定的算法选择其中一个 RS 作为下一跳，达到负载均衡和冗余的效果。&lt;/p&gt;
&lt;p&gt;既然是通过直连路由的方式转发，那显然 LB 节点必须与所有的 RS 节点在同一个子网，不能跨子网，否则路由不可达。换句话说，&lt;strong&gt;这种模式只支持内部负载均衡(Internal LoadBalancer)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外如前面所述，LB 节点不会修改源端口和目标端口，因此这种模式也无法支持端口映射，换句话说 &lt;strong&gt;LB 节点监听的端口和所有 RS 节点监听的端口必须一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在假设有LB节点IP为 192.168.193.197，有三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建负载均衡Service并把RS添加到Service中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.197:30620 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.194:30620 -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.226:30620 -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.172:30620 -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到我们的 Service 监听的端口 30620 和 RS 的端口是一样的，并且通过 &lt;code&gt;-g&lt;/code&gt; 参数指定为直连路由模式(网关模式)。&lt;/p&gt;
&lt;p&gt;Client 节点 IP 为 192.168.193.226，我们验证 Service 是否可连接：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 5 -sSL 192.168.193.197:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 5001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现并不通，在其中一个 RS 节点 192.168.193.172 上抓包:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_1.png&quot; alt=&quot;tcpdump_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如前面所说，LB 是通过路由转发的，根据路由的原理，源 MAC 地址修改为 LB 的MAC 地址，而目标 MAC 地址修改为 RS MAC 地址，相当于 RS 是 LB 的下一跳。&lt;/p&gt;
&lt;p&gt;并且源 IP 和目标 IP 都不会修改。问题就来了，我们 Client 期望访问的是 RS，但 RS 收到的目标 IP 却是 LB 的 IP，发现这个目标 IP 并不是自己的 IP，因此不会通过 INPUT链转发到用户空间，这时要不直接丢弃这个包，要不根据路由再次转发到其他地方，总之两种情况都不是我们期望的结果。&lt;/p&gt;
&lt;p&gt;那怎么办呢？为了让 RS 接收这个包，必须得让 R S有这个目标 IP 才行。于是不妨在 lo上添加个虚拟 IP，IP 地址伪装成 LB IP 192.168.193.197:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ifconfig lo:0 192.168.193.197/32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题又来了，这就相当于有两个相同的 IP，IP 重复了怎么办？办法是隐藏这个虚拟网卡，不让它回复 ARP，其他主机的 neigh 也就不可能知道有这么个网卡的存在了，参考 &lt;a href=&quot;http://kb.linuxvirtualserver.org/wiki/Using_arp_announce/arp_ignore_to_disable_ARP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using arp announce/arp ignore to disable ARP&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.lo.arp_ignore=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.lo.arp_announce=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时再次从客户端curl:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 192.168.193.197:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-4v9z4 | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终于通了。&lt;/p&gt;
&lt;p&gt;我们从前面的抓包中知道，源 IP 为 Client IP 192.168.193.226，因此直接回包给 Client即可，不可能也不需要再回到 LB 节点了，即 A-&amp;gt;B,B-&amp;gt;C，C-&amp;gt;A，流量方向是三角形状的，因此这种模式又称为三角模式。&lt;/p&gt;
&lt;p&gt;我们从原理中不难得出如下结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client、LB 以及所有的 RS 必须在同一个子网。&lt;/li&gt;
&lt;li&gt;LB 节点直接通过路由转发，因此性能非常高。&lt;/li&gt;
&lt;li&gt;不能做端口映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ipip-隧道模式&quot;&gt;&lt;a href=&quot;#ipip-隧道模式&quot; class=&quot;headerlink&quot; title=&quot;ipip 隧道模式&quot;&gt;&lt;/a&gt;ipip 隧道模式&lt;/h3&gt;&lt;p&gt;前面介绍了网关直连路由模式，要求所有的节点在同一个子网，而 ipip 隧道模式则主要解决这种限制，LB 节点 IP 和 RS 可以不在同一个子网，此时需要通过 ipip 隧道进行传输。&lt;/p&gt;
&lt;p&gt;现在假设有 LB 节点 IP为 &lt;code&gt;192.168.193.77/25&lt;/code&gt;，在该节点上增加一个VIP地址:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip addr add 192.168.193.48/25 dev eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上三个 RS 节点子网掩码均为 255.255.255.128，即 25 位子网，显然和 VIP 192.168.193.48/25 不在同一个子网。&lt;/p&gt;
&lt;p&gt;创建负载均衡 Service 并把 RS 添加到 Service 中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.48:30620 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.194:30620 -i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.226:30620 -i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.172:30620 -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到我们的 Service 监听的端口 30620 和 RS 的端口是一样的，并且通过 -i 参数指定为 ipip 隧道模式。&lt;/p&gt;
&lt;p&gt;在所有的 RS 节点上加载 ipip 模块以及添加 VIP (和直连路由类型）:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;modprobe ipip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ifconfig tunl0  192.168.193.48/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.tunl0.arp_ignore=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.tunl0.arp_announce=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Client节点IP为192.168.193.226/25，我们验证 Service 是否可连接：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i -sSL 192.168.193.48:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 07:05:40 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-dgn74 | v=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Service 可访问，我们在 RS 节点上抓包如下：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_3.png&quot; alt=&quot;tcpdump_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现和直连路由一样，源 IP 和目标 IP 没有修改。&lt;/p&gt;
&lt;p&gt;所以 IPIP 模式和网关 (Gatewaying) 模式原理基本一样，唯一不同的是网关 (Gatewaying) 模式要求所有的 RS 节点和 LB 节点在同一个子网，而 IPIP 模式则可以支持跨子网的情况，为了解决跨子网通信问题，使用了 ipip 隧道进行数据传输。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;ipvs 是一个内核态的四层负载均衡，支持 NAT、Gateway 以及 IPIP 隧道模式，Gateway 模式性能最好，但 LB 和 RS 不能跨子网，IPIP 性能次之，通过 ipip 隧道解决跨网段传输问题，因此能够支持跨子网。而 NAT 模式没有限制，这也是唯一一种支持端口映射的模式。&lt;/p&gt;
&lt;p&gt;我们不难猜想，由于 Kubernetes Service 需要使用端口映射功能，因此 kube-proxy 必然只能使用 ipvs 的 NAT 模式。&lt;/p&gt;
&lt;h2 id=&quot;kube-proxy-使用-ipvs-模式&quot;&gt;&lt;a href=&quot;#kube-proxy-使用-ipvs-模式&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy 使用 ipvs 模式&quot;&gt;&lt;/a&gt;kube-proxy 使用 ipvs 模式&lt;/h2&gt;&lt;h3 id=&quot;配置-kube-proxy-使用-ipvs-模式&quot;&gt;&lt;a href=&quot;#配置-kube-proxy-使用-ipvs-模式&quot; class=&quot;headerlink&quot; title=&quot;配置 kube-proxy 使用 ipvs 模式&quot;&gt;&lt;/a&gt;配置 kube-proxy 使用 ipvs 模式&lt;/h3&gt;&lt;p&gt;使用 kubeadm 安装 Kubernetes 可参考文档 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md#cluster-created-by-kubeadm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cluster Created by Kubeadm&lt;/a&gt;，不过这个文档的安装配置有问题 &lt;a href=&quot;https://github.com/kubernetes/kubeadm/issues/1182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubeadm #1182&lt;/a&gt;，如下官方配置不生效:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kubeProxy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  config:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    featureGates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      SupportIPVSProxyMode:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    mode:&lt;/span&gt; ipvs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要修改为如下配置:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubeproxy.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeProxyConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;mode:&lt;/span&gt; ipvs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过如下命令确认 kube-proxy 是否修改为 ipvs:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get configmaps kube-proxy -n kube-system -o yaml | awk &#39;/mode/&amp;#123;print $2&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Service-ClusterIP-原理&quot;&gt;&lt;a href=&quot;#Service-ClusterIP-原理&quot; class=&quot;headerlink&quot; title=&quot;Service ClusterIP 原理&quot;&gt;&lt;/a&gt;Service ClusterIP 原理&lt;/h3&gt;&lt;p&gt;创建一个 ClusterIP 类似的 Service 如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc | grep kubernetes-bootcamp-v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   ClusterIP   10.96.54.11   &amp;lt;none&amp;gt;        8080/TCP   2m11s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ClusterIP 10.96.54.11 为我们查看 ipvs 配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ipvsadm -S -n | grep 10.96.54.11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A -t 10.96.54.11:8080 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.2.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 ipvs 的 LB IP 为 ClusterIP，算法为 rr，RS 为 Pod 的 IP。&lt;/p&gt;
&lt;p&gt;另外我们发现使用的模式为 NAT 模式，这是显然的，因为除了 NAT 模式支持端口映射，其他两种均不支持端口映射，所以必须选择 NAT 模式。&lt;/p&gt;
&lt;p&gt;由前面的理论知识，ipvs 的 VIP 必须在本地存在，我们可以验证:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ip addr show kube-ipvs0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4: kube-ipvs0: &amp;lt;BROADCAST,NOARP&amp;gt; mtu 1500 qdisc noop state DOWN group default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link/ether 46:6b:9e:af:b0:60 brd ff:ff:ff:ff:ff:ff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.0.1/32 brd 10.96.0.1 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.0.10/32 brd 10.96.0.10 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.54.11/32 brd 10.96.54.11 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ethtool -i kube-ipvs0 | grep driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver: dummy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 kube-proxy 首先会创建一个 dummy 虚拟网卡 kube-ipvs0，然后把所有的 Service IP 添加到 kube-ipvs0 中。&lt;/p&gt;
&lt;p&gt;我们知道基于 iptables 的 Service，ClusterIP 是一个虚拟的 IP，因此这个 IP 是 ping 不通的，但 ipvs 中这个 IP 是在每个节点上真实存在的，因此可以 ping 通:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-ping_cluster_ip.png&quot; alt=&quot;ping_cluster_ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然由于这个 IP 就是配置在本地虚拟网卡上，所以对诊断问题没有一点用处的。&lt;/p&gt;
&lt;p&gt;我们接下来研究下 ClusterIP 如何传递的。&lt;/p&gt;
&lt;p&gt;当我们通过如下命令连接服务时:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时由于 10.96.54.11 就在本地，所以会以这个 IP 作为出口地址，即源 IP 和目标 IP 都是 10.96.54.11，此时相当于:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 xxxx 为随机端口。&lt;/p&gt;
&lt;p&gt;然后经过 ipvs，ipvs 会从 RS ip 列中选择其中一个 Pod ip 作为目标 IP，假设为10.244.2.2:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | IPVS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们从 iptables LOG 可以验证:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-iptables_log_1.png&quot; alt=&quot;iptables_log_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们查看 OUTPUT 安全组规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A OUTPUT -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.244.0.0/16 -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;Kubernetes service cluster ip + port for masquerade purpose&quot;&lt;/span&gt; -m &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 ipset 集合 &lt;code&gt;KUBE-CLUSTER-IP&lt;/code&gt; 保存着所有的 ClusterIP 以及监听端口。&lt;/p&gt;
&lt;p&gt;如上规则的意思就是除了 Pod 以外访问ClusterIP的包都打上 &lt;code&gt;0x4000/0x4000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;到了 POSTROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes postrouting rules&quot;&lt;/span&gt; -j KUBE-POSTROUTING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service traffic requiring SNAT&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上规则的意思就是只要匹配 &lt;code&gt;mark 0x4000/0x4000&lt;/code&gt; 的包都做 SNAT，由于 10.244.2.2 是从 flannel.1 出去的，因此源 ip 会改成 flannel.1 的 ip &lt;code&gt;10.244.0.0&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | IPVS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后通过 Vxlan 隧道发到 Pod 的 Node上，转发给 Pod 的 veth，回包通过路由到达源Node 节点，源 Node 节点通过之前的 MASQUERADE 再把目标IP还原为 10.96.54.11。&lt;/p&gt;
&lt;h3 id=&quot;NodeIP-实现原理&quot;&gt;&lt;a href=&quot;#NodeIP-实现原理&quot; class=&quot;headerlink&quot; title=&quot;NodeIP 实现原理&quot;&gt;&lt;/a&gt;NodeIP 实现原理&lt;/h3&gt;&lt;p&gt;查看 Service 如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# kubectl get svc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes               ClusterIP   10.96.0.1     &amp;lt;none&amp;gt;        443/TCP          30h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   NodePort    10.96.54.11   &amp;lt;none&amp;gt;        8080:32016/TCP   8h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Service kubernetes-bootcamp-v1 的 NodePort 为 32016。&lt;/p&gt;
&lt;p&gt;现在假设集群外的一个 IP 192.168.193.197 访问 192.168.193.172:32016:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:32016&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最先到达 PREROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A PREROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODE-PORT -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;Kubernetes nodeport TCP port for masquerade purpose&quot;&lt;/span&gt; -m &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; --match-set KUBE-NODE-PORT-TCP dst -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上 4 条规则看起来复杂，其实就做一件事，如果目标地址为 NodeIP，则把包标记 &lt;code&gt;0x4000 / 0x4000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们查看 ipvs:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ipvsadm -S -n | grep 32016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A -t 192.168.193.172:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.3.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现和 ClusterIP 实现原理非常相似，ipvs Service 的 VIP 为 Node IP，端口为NodePort。ipvs 会选择其中一个 Pod IP 作为 DNAT 目标，这里假设为 10.244.3.2：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:32016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     | DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxx  --&amp;gt; 10.244.3.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;剩下的到了 POSTROUTING 链就和 Service ClusterIP 完全一样了，只要匹配 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包就会做SNAT。&lt;/p&gt;
&lt;h3 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;Kubernetes 的 ClusterIP 和 NodePort 都是通过 ipvs service 实现的，Pod 当作 ipvs service 的 server，通过 NAT MQSQ 实现转发。&lt;/p&gt;
&lt;p&gt;简单来说 kube-proxy 主要在所有的 Node 节点做如下三件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有 dummy 类型虚拟网卡，则创建一个，默认名称为 &lt;code&gt;kube-ipvs0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;把 Kubernetes ClusterIP 地址添加到 &lt;code&gt;kube-ipvs0&lt;/code&gt;，同时添加到 ipset 中。&lt;/li&gt;
&lt;li&gt;创建 ipvs service，ipvs service 地址为 ClusterIP 以及 Cluster Port，ipvs server 为所有的 Endpoint 地址，即 Pod IP 及端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 ipvs 作为 kube-proxy 后端，不仅提高了转发性能，结合 ipset 还使 iptables 规则变得更“干净”清楚，从此再也不怕 iptables。&lt;/p&gt;
&lt;p&gt;更多关于 kube-proxy ipvs 参考 &lt;a href=&quot;https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IPVS-Based In-Cluster Load Balancing Deep Dive&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结-2&quot;&gt;&lt;a href=&quot;#总结-2&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文首先介绍了 kube-proxy 的功能以及 kube-proxy 基于 iptables 的实现原理，然后简单介绍了 ipvs，了解了 ipvs 支持的三种转发模式，最后介绍了 kube-proxy 基于 ipvs 的实现原理。&lt;/p&gt;
&lt;p&gt;ipvs 是专门设计用来做内核态四层负载均衡的，由于使用了 hash 表的数据结构，因此相比 iptables 来说性能会更好。基于 ipvs 实现 Service 转发，Kubernetes 几乎能够具备无限的水平扩展能力。随着 Kubernetes 的部署规模越来越大，应用越来越广泛，ipvs必然会取代 iptables 成为 Kubernetes Service 的默认实现后端。&lt;/p&gt;
&lt;p&gt;本文作者：int32bit&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kube-proxy介绍&quot;&gt;&lt;a href=&quot;#kube-proxy介绍&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy介绍&quot;&gt;&lt;/a&gt;kube-proxy介绍&lt;/h2&gt;&lt;h3 id=&quot;为什么需要kube-proxy&quot;&gt;&lt;a href=&quot;#为什么需要kube-proxy&quot; class=&quot;headerlink&quot; title=&quot;为什么需要kube-proxy&quot;&gt;&lt;/a&gt;为什么需要kube-proxy&lt;/h3&gt;&lt;p&gt;我们知道容器的特点是快速创建、快速销毁，Kubernetes Pod 和容器一样只具有临时的生命周期，一个 Pod 随时有可能被终止或者漂移，随着集群的状态变化而变化，一旦Pod 变化，则该 Pod 提供的服务也就无法访问，如果直接访问 Pod 则无法实现服务的连续性和高可用性，因此显然不能使用 Pod 地址作为服务暴露端口。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法和传统数据中心解决无状态服务高可用的思路完全一样，通过负载均衡和 VIP 实现后端真实服务的自动转发、故障转移。&lt;/p&gt;
&lt;p&gt;这个负载均衡在 Kubernetes 中称为 Service，VIP 即 Service ClusterIP，因此可以认为Kubernetes 的 Service 就是一个四层负载均衡，Kubernetes 对应的还有七层负载均衡 Ingress，本文仅介绍 Kubernetes Service。&lt;/p&gt;
&lt;p&gt;这个 Service 就是由 kube-proxy 实现的，ClusterIP 不会因为 Pod 状态改变而变，需要注意的是 VIP 即 ClusterIP 是个假的 IP，这个 IP 在整个集群中根本不存在，当然也就无法通过IP协议栈无法路由，底层 underlay 设备更无法感知这个 IP 的存在，因此 ClusterIP 只能是单主机（Host Only）作用域可见，这个IP在其他节点以及集群外均无法访问。&lt;/p&gt;
&lt;p&gt;Kubernetes 为了实现在集群所有的节点都能够访问 Service，kube-proxy 默认会在所有的 Node 节点都创建这个 VIP 并且实现负载，所以在部署 Kubernetes 后发现 kube-proxy 是一个 DaemonSet。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kubrenetes/kube-proxy/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/tags/ipvs/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>使用 eBPF 调试生产环境的 Go 程序</title>
    <link href="http://team.jiunile.com//blog/2020/10/go-debug-with-bpf.html"/>
    <id>http://team.jiunile.com//blog/2020/10/go-debug-with-bpf.html</id>
    <published>2020-10-21T12:00:00.000Z</published>
    <updated>2020-10-21T07:26:26.000Z</updated>
    
    <content type="html">&lt;p&gt;不用重新编译/部署线上程序而是借助 eBPF 即可实现对程序进行调试，接下来我们会用一个系列文章介绍我们是怎么做的，这是开篇。本篇描述了如何使用 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gobpf&lt;/a&gt; 和 uprobe 来构建一个跟踪 Go 程序函数入口参数变化的应用。这里介绍的技术可以扩展到其它编译型语言，如 C++, Rust 等等。本系列文章后续将会讨论如何使用 eBPF 来跟踪 HTTP/gRPC 数据和 SSL 等等。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当调试程序时，我们一般对捕获程序的运行时状态非常感兴趣。因为这可以让我们检查程序在干什么，并能让我们确定 bug 出现在程序的哪一块。观察运行时状态的一个简单方式是使用调试器。比如针对 Go 程序，我们可以使用 Delve 和 gdb。&lt;/p&gt;
&lt;p&gt;Delve 和 gdb 在开发环境中做调试表现没得说，但是我们一般不会在线上使用此类工具。它们的长处同时也是它们的短处，因为调试器会导致线上程序中断，甚至如果在调试过程中不小心改错某个变量的值而导致线上程序出现异常。&lt;/p&gt;
&lt;p&gt;为了让线上调试过程的侵入和影响更小，我们将会探索使用增强版的 BPF (&lt;a href=&quot;https://ebpf.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eBPF&lt;/a&gt;, Linux 4.x+ 内核可用）和更高级的 Go 库 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gobpf&lt;/a&gt; 来达成目标。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是-eBPF&quot;&gt;&lt;a href=&quot;#什么是-eBPF&quot; class=&quot;headerlink&quot; title=&quot;什么是 eBPF&quot;&gt;&lt;/a&gt;什么是 eBPF&lt;/h2&gt;&lt;p&gt;扩展型 BPF(eBPF) 是一项在 Linux 4.x+ 内核可用的技术。你可以把它看作一个轻量级的沙箱 VM, 它运行在 Linux 内核中并且提供了针对内核内存的可信访问。&lt;/p&gt;
&lt;p&gt;就像下面要说的，eBPF 允许内核运行 BPF 字节码。虽然可用的前端（这里指的是编译器前端）语言多样，但通常都是 C 语言的真子集。通常 C 代码先通过 Clang 被编译为 BPF 字节码，然后字节被验证以确保可以安全执行。这些严格的验证保证了机器码不会有意或无意地危及 Linux 内核，同时也确保了 BPF 探针在每次被触发时将会执行有限数目的指令。这些保证确保了 eBPF 可以被用于性能敏感的应用中，比如包过滤，网络监控等等。&lt;/p&gt;
&lt;p&gt;从功能上说，eBPF 允许你针对某些事件（如定时器事件，网络事件或是函数调用事件）运行受限的 C 代码。当因为一个函数调用事件被触发时，我们把这些 eBPF 代码叫做探针。这些探针既可以针对内核函数调用事件被触发（这时叫 kprobe, k 即 kernelspace), 也可以针对用户空间的函数调用事件被触发（这时叫 uprobe, u 即 userspace). 本篇文章讲解如何通过 uprobe 实现函数参数的动态追踪。&lt;/p&gt;
&lt;h2 id=&quot;Uprobes&quot;&gt;&lt;a href=&quot;#Uprobes&quot; class=&quot;headerlink&quot; title=&quot;Uprobes&quot;&gt;&lt;/a&gt;Uprobes&lt;/h2&gt;&lt;p&gt;Uprobes 允许我们通过插入一个 debug trap 指令（在 x86 上就是 &lt;code&gt;int3&lt;/code&gt;) 触发一个软中断从而实现对运行在用户空间的程序进行拦截。这也是调试器的工作原理。uprobe 运行过程本质上与其它 BPF 程序一样，可以总结为下面图示：&lt;br&gt;&lt;img src=&quot;/images/go/bpf-tracing.jpg&quot; alt=&quot;用于跟踪的 BPF（来自 Brendan Gregg)&quot;&gt;&lt;/p&gt;
&lt;p&gt;编译和验证过的 BPF 程序作为 uprobe 的一部分被执行，同时执行结果写入到一个 buffer 中。&lt;/p&gt;
&lt;p&gt;下面让我们研究下 uprobes 如何起作用的。为了演示部署 uprobes 并捕获函数参数，我们会用到这个简单的 demo 应用。该 demo 相关部分下面介绍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; 方法是一个简单的 HTTP server, 它暴露了一个监听 /e 端点的 GET 接口，该接口通过迭代逼近计算自然常数 &lt;code&gt;e&lt;/code&gt;（也叫欧拉数）. &lt;code&gt;computeE&lt;/code&gt; 方法有一个参数 iters, 它指定了逼近时的迭代次数。迭代次数越多，结果越精确，当然耗费 CPU 也越多。迭代逼近算法不是我们本次关注重点，感兴趣的可以自己研究下。我们仅对追踪调用 &lt;code&gt;computeE&lt;/code&gt; 方法时的参数感兴趣。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;computeE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iterations &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;float64&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res := &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fact := &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); i &amp;lt; iterations; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fact *= &lt;span class=&quot;keyword&quot;&gt;float64&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / fact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/e&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... 省略代码用于从 get 请求中解析 iters 参数，若为空则使用默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;e = %0.4f\n&quot;&lt;/span&gt;, computeE(iters))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 启动 server...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了进行后面的实验以及为最后采用 gdb 验证修改生效，我们采用如下指令编译该代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build  -gcflags &lt;span class=&quot;string&quot;&gt;&quot;-N -l&quot;&lt;/span&gt; app.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了理解 uprobe 如何工作的，我们看看可执行文件中要追踪的符号。既然 uprobes 通过插入一个 debug trap 指令到可执行文件来实现，我们先要确定要追踪的函数地址是什么。Go 程序在 Linux 上的二进制采用 ELF 格式存储 debug 信息，该信息甚至在优化过的二进制中也是存在的，除非 debug 数据被裁剪掉了。我们可以使用命令 &lt;code&gt;objdump&lt;/code&gt; 来检查二进制文件中的符号：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行下面命令之前需要你先将上面 go 程序编译为名为 app 的二进制文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# objdump --syms 可以从可执行程序中导出全部符号，然后通过 grep 查找 computeE.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 具体输出可能与你机器上不同，这没什么问题。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ objdump --syms app | grep computeE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000x6600e0 g     F .text  000000000000004b             main.computeE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上述输出可以看到，&lt;code&gt;computeE&lt;/code&gt; 方法的入口地址为 &lt;code&gt;0x0x6600e0&lt;/code&gt;. 为了看一下这个地址附近的指令，我们可以通过 &lt;code&gt;objdump&lt;/code&gt; 来反汇编该二进制文件（通过命令行选项 &lt;code&gt;-d&lt;/code&gt;). 反汇编代码如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ objdump &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; app | grep -A 1 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000x6600e0 &amp;lt;main.computeE&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0x6600e0:       48 8b 44 24 08          mov    0x8(%rsp),%rax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面汇编代码可以看到当 &lt;code&gt;computeE&lt;/code&gt; 方法被调用时会执行哪些指令。第一条指令是 &lt;code&gt;mov 0x8(%rsp),%rax&lt;/code&gt;, 该指令将寄存器 &lt;code&gt;rsp&lt;/code&gt; 保存的地址（栈指针寄存器保存的是 &lt;code&gt;computeE&lt;/code&gt; 方法的入口地址）相对偏移量为 &lt;code&gt;0x8&lt;/code&gt; 处的内容移动到寄存器 &lt;code&gt;rax&lt;/code&gt; 中。这个被移动的值即为 &lt;code&gt;computeE&lt;/code&gt; 方法的入参 &lt;code&gt;iterations&lt;/code&gt; 的值。Go 程序的参数通过栈来传递。&lt;/p&gt;
&lt;p&gt;好了，记住上面提到的信息，我们来看看如何实现针对 &lt;code&gt;computeE&lt;/code&gt; 方法的参数追踪。&lt;/p&gt;
&lt;h2 id=&quot;构建追踪程序&quot;&gt;&lt;a href=&quot;#构建追踪程序&quot; class=&quot;headerlink&quot; title=&quot;构建追踪程序&quot;&gt;&lt;/a&gt;构建追踪程序&lt;/h2&gt;&lt;p&gt;我们给这个追踪程序起个名叫 Tracer. 为了捕获前面提到的事件，我们需要注册一个 uprobe 函数，并且还得有个用户态函数负责去读 uprobe 的输出，具体如下图所示：&lt;br&gt;&lt;img src=&quot;/images/go/app-tracer.png&quot; alt=&quot;app-tracer&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们编写一个叫做 &lt;code&gt;tracer&lt;/code&gt; 的应用，由它负责注册 BPF 代码，同时读取这些 BPF 代码的输出。如上图所示，uprobe 将会简单地输出到一个 &lt;code&gt;perf-buffer&lt;/code&gt; 中，该结构体是用于 perf 事件的 linux 内核数据结构。&lt;/p&gt;
&lt;p&gt;万事俱备，我们来看看当我们增加一个 uprobe 时会发生哪些事情。下面的图显示了 Linux 内核如何使用一个 uprobe 来修改一个已有的二进制程序。前文提到的软中断 &lt;code&gt;int3&lt;/code&gt; 作为第一条指令被插入到 &lt;code&gt;main.computeE&lt;/code&gt; 方法中。这条指令将会在执行时触发一个软中断，从而允许 Linux 内核来执行 BPF 代码。然后我们把 &lt;code&gt;computeE&lt;/code&gt; 每次被调用时的参数输出到 perf-buffer 中，这些值会被我们编写的 &lt;code&gt;tracer&lt;/code&gt; 应用异步地读取。&lt;br&gt;&lt;img src=&quot;/images/go/app-trace.png&quot; alt=&quot;app-trace&quot;&gt;&lt;/p&gt;
&lt;p&gt;就我们这个需求来说，相应的 BPF 代码很简单，C 代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;uapi/linux/ptrace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BPF_PERF_OUTPUT(trace);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 该函数将会被注册，以便每次 main.computeE 被调用时该函数也会被调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;computeECalled&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pt_regs *ctx)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// main.computeE 的入参保存在了 ax 寄存器里。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; val = ctx-&amp;gt;ax;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace.perf_submit(ctx, &amp;amp;val, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(val));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们注册上面代码以便 &lt;code&gt;main.computeE&lt;/code&gt; 方法被调用它们也会被执行。这些代码被执行时，我们仅仅读取函数参数然后写到 perf-buffer 中。实现这个功能需要很多样板代码，为了方便示意这里都省掉了，完整的例子见 &lt;a href=&quot;https://github.com/pixie-labs/pixie/blob/main/demos/simple-gotracing/trace_example/trace.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;好了，我们现在有个针对 &lt;code&gt;main.computeE&lt;/code&gt; 的功能齐全的端到端参数追踪器了！执行结果见下面动图：&lt;br&gt;&lt;img src=&quot;/images/go/e2e-demo.gif&quot; alt=&quot;End-to-End demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;上述动图执行步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 localhost:9090 启动待追踪程序 &lt;code&gt;./app&lt;/code&gt;, 此时我们可以用 curl 访问该应用了，具体命令为 &lt;code&gt;curl http://localhost:9090/e?iters=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动 trace 应用，注意指定参数 &lt;code&gt;sudo ./trace --binary ../app/app&lt;/code&gt;, 参数是第一步中待追踪程序对应的二进制文件的路径。&lt;/li&gt;
&lt;li&gt;不停的执行 curl 命令，使其 iters 参数取值不同，则会看到 trace 应用输出你指定的 iters 值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有个有意思的事情，我们真的可以通过 GDB 看到针对二进制文件的修改。下面我们 dump 出 &lt;code&gt;0x0x6600e0&lt;/code&gt; 处的指令，在我们运行 &lt;code&gt;trace&lt;/code&gt; 之前是这样的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gdb ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb) display /4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1: x/4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e0 &amp;lt;main.computeE&amp;gt;:    sub    &lt;span class=&quot;variable&quot;&gt;$0x20&lt;/span&gt;,%rsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e4 &amp;lt;main.computeE+4&amp;gt;:  mov    %rbp,0x18(%rsp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e9 &amp;lt;main.computeE+9&amp;gt;:  lea    0x18(%rsp),%rbp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600ee &amp;lt;main.computeE+14&amp;gt;: xorps  %xmm0,%xmm0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在我们运行 &lt;code&gt;trace&lt;/code&gt; 之后，再次查看：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gdb ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb) display /4i 0x65fecf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2: x/4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e0 &amp;lt;main.computeE&amp;gt;:    int3   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e1 &amp;lt;main.computeE+1&amp;gt;:  sub    &lt;span class=&quot;variable&quot;&gt;$0x20&lt;/span&gt;,%esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e4 &amp;lt;main.computeE+4&amp;gt;:  mov    %rbp,0x18(%rsp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e9 &amp;lt;main.computeE+9&amp;gt;:  lea    0x18(%rsp),%rbp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？&lt;code&gt;0x6600e0&lt;/code&gt; 插入了 &lt;code&gt;int3&lt;/code&gt; 指令。&lt;/p&gt;
&lt;p&gt;尽管我们为这个特定的示例硬编码了跟踪程序，但是可以使这个过程通用化。Go 的许多特性，比如嵌套的指针、接口、通道等，使得这个过程具有挑战性，但解决这些问题可实现现有系统中无法使用的另一种检测模式。而且，由于这个过程是在二进制层面工作的，所以它可以用于其他语言编译的二进制文件 (c++、Rust 等）。我们只需要考虑他们各自 ABI 的差异。&lt;/p&gt;
&lt;h2 id=&quot;接下来？&quot;&gt;&lt;a href=&quot;#接下来？&quot; class=&quot;headerlink&quot; title=&quot;接下来？&quot;&gt;&lt;/a&gt;接下来？&lt;/h2&gt;&lt;p&gt;使用 uprobes 进行 BPF 跟踪具有其自身的优点和缺点。当我们需要对二进制状态进行观察时，使用 BPF 是有益的，即使在附加调试器将会有问题或有害的环境中运行（例如，生产二进制文件）。最大的缺点是，即使是很小的应用程序状态的跟踪也需要去编写代码。虽然 BPF 代码是相对容易的，但它的编写和维护是复杂的。如果没有实际的高级工具，就不太可能将其用于通用调试。&lt;/p&gt;
&lt;h2 id=&quot;番外&quot;&gt;&lt;a href=&quot;#番外&quot; class=&quot;headerlink&quot; title=&quot;番外&quot;&gt;&lt;/a&gt;番外&lt;/h2&gt;&lt;h3 id=&quot;安装-BCC&quot;&gt;&lt;a href=&quot;#安装-BCC&quot; class=&quot;headerlink&quot; title=&quot;安装 BCC&quot;&gt;&lt;/a&gt;安装 BCC&lt;/h3&gt;&lt;p&gt;编译前文提到的 &lt;code&gt;trace&lt;/code&gt; 应用之前需要安装 bcc. 以 Ubuntu 16.04 为例（其它系统请参考 &lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/INSTALL.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;):&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;deb https://repo.iovisor.org/apt/&lt;span class=&quot;variable&quot;&gt;$(lsb_release -cs)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(lsb_release -cs)&lt;/span&gt; main&quot;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/iovisor.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果安装速度慢，而且你设置了 &lt;code&gt;http_proxy/https_proxy&lt;/code&gt;, 请编辑 &lt;code&gt;/etc/sudoers&lt;/code&gt; 新增一行 &lt;code&gt;Defaults env_keep = &amp;quot;http_proxy https_proxy&amp;quot;&lt;/code&gt;, 这样速度至少会有百倍提升。&lt;/p&gt;
&lt;h3 id=&quot;too-many-arguments-编译错误&quot;&gt;&lt;a href=&quot;#too-many-arguments-编译错误&quot; class=&quot;headerlink&quot; title=&quot;too many arguments 编译错误&quot;&gt;&lt;/a&gt;too many arguments 编译错误&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# github.com/iovisor/gobpf/bcc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../../../../go/pkg/mod/github.com/iovisor/gobpf@v0.0.0-20200614202714&lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt;6b321d32103/bcc/module.go:98:40: too many arguments &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; call to _Cfunc_bpf_module_create_c_from_string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        have (*_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, number, **_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;__Bool, nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        want (*_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, **_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;__Bool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../../../../go/pkg/mod/github.com/iovisor/gobpf@v0.0.0-20200614202714&lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt;6b321d32103/bcc/module.go:230:28: too many arguments &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; call to _C2func_bcc_func_load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        have (unsafe.Pointer, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_struct_bpf_insn, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        want (unsafe.Pointer, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_struct_bpf_insn, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原因为 &lt;a href=&quot;https://github.com/iovisor/gobpf/commit/3ecafd366e4b239946d03c17f5a4beb5aef4935e#diff-f11d8f44bec322f0ba3a2ee148c82966&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这一行&lt;/a&gt; 增加的特性 Update bcc_func_load to libbcc 0.11 with hardware offload support, 以及 &lt;a href=&quot;https://github.com/iovisor/gobpf/commit/cda73bdde3bf14fc898d07b8936073e1aa197708&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这一行&lt;/a&gt; 增加的特性 bcc: update bpf_module_create_c_from_string for bcc 0.11.0 (fixes #202).&lt;/p&gt;
&lt;p&gt;我没有深究具体是什么导致的（初步怀疑是系统版本）, 如果你急着看结果，可以根据上面报错地址知道到 &lt;code&gt;module.go&lt;/code&gt; 文件，把涉及的两个函数的最后一个 &lt;code&gt;nil&lt;/code&gt; 参数去掉就可以顺利编译了。&lt;/p&gt;
&lt;p&gt;本文翻译自：Debugging Go in prod using eBPF 作者：Zain Asgar&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不用重新编译/部署线上程序而是借助 eBPF 即可实现对程序进行调试，接下来我们会用一个系列文章介绍我们是怎么做的，这是开篇。本篇描述了如何使用 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot;&gt;gobpf&lt;/a&gt; 和 uprobe 来构建一个跟踪 Go 程序函数入口参数变化的应用。这里介绍的技术可以扩展到其它编译型语言，如 C++, Rust 等等。本系列文章后续将会讨论如何使用 eBPF 来跟踪 HTTP/gRPC 数据和 SSL 等等。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当调试程序时，我们一般对捕获程序的运行时状态非常感兴趣。因为这可以让我们检查程序在干什么，并能让我们确定 bug 出现在程序的哪一块。观察运行时状态的一个简单方式是使用调试器。比如针对 Go 程序，我们可以使用 Delve 和 gdb。&lt;/p&gt;
&lt;p&gt;Delve 和 gdb 在开发环境中做调试表现没得说，但是我们一般不会在线上使用此类工具。它们的长处同时也是它们的短处，因为调试器会导致线上程序中断，甚至如果在调试过程中不小心改错某个变量的值而导致线上程序出现异常。&lt;/p&gt;
&lt;p&gt;为了让线上调试过程的侵入和影响更小，我们将会探索使用增强版的 BPF (&lt;a href=&quot;https://ebpf.io/&quot;&gt;eBPF&lt;/a&gt;, Linux 4.x+ 内核可用）和更高级的 Go 库 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot;&gt;gobpf&lt;/a&gt; 来达成目标。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/categories/golang/debug/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/tags/debug/"/>
    
      <category term="ebpf" scheme="http://team.jiunile.com/tags/ebpf/"/>
    
  </entry>
  
  <entry>
    <title>（译）深入理解 Kubernetes 网络模型 - 自己实现 kube-proxy 的功能</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-node-proxy.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-node-proxy.html</id>
    <published>2020-10-19T12:00:00.000Z</published>
    <updated>2020-10-20T02:31:24.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;背景知识&lt;/li&gt;
&lt;li&gt;节点代理模型&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;实现：通过 userspace socket 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 iptables 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 ipvs/ipset 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 bpf 实现 proxy&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;li&gt;附录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubernetes 中有几种类型的代理。其中有 &lt;strong&gt;node proxier&lt;/strong&gt; 或 &lt;code&gt;kube-proxy&lt;/code&gt;，它在每个节点上反映 Kubernetes API 中定义的服务，可以跨一组后端执行简单的 TCP/UDP/SCTP 流转发 [1]。&lt;/p&gt;
&lt;p&gt;为了更好地理解节点代理模型，在这篇文章中，我们将用不同的方法设计和实现我们自己版本的 &lt;code&gt;kube-proxy&lt;/code&gt;; 尽管这些只是 &lt;code&gt;toy-proxy&lt;/code&gt;，但从&lt;strong&gt;透明流量拦截、转发、负载均衡&lt;/strong&gt;等方面来说，它们的工作方式与 K8S 集群中运行的普通 &lt;code&gt;kube-proxy&lt;/code&gt; 基本相同。&lt;/p&gt;
&lt;p&gt;通过我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序，非 K8S 节点（不在 K8S 集群中）上的应用程序（无论是宿主本地应用程序，还是在 VM/容器中运行的应用程序）也可以通过 &lt;strong&gt;ClusterIP&lt;/strong&gt; 访问 K8S 服务 – &lt;strong&gt;注意，在 kubernetes 的设计中，ClusterIP 只能在 K8S 集群节点中访问。（在某种意义上，我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序将非 K8S 节点变成了 K8S 节点。)&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;p&gt;了解 Linux 内核中的流量拦截和代理需要具备以下背景知识。&lt;/p&gt;
&lt;h3 id=&quot;Netfilter&quot;&gt;&lt;a href=&quot;#Netfilter&quot; class=&quot;headerlink&quot; title=&quot;Netfilter&quot;&gt;&lt;/a&gt;Netfilter&lt;/h3&gt;&lt;p&gt;Netfilter 是 Linux 内核内部的&lt;strong&gt;包过滤和处理框架&lt;/strong&gt;。如果您不熟悉 Iptables 和 Netfilter 体系结构，请参阅 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Deep Dive into Iptables and Netfilter Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机上的&lt;strong&gt;所有数据包&lt;/strong&gt;都将通过 netfilter 框架&lt;/li&gt;
&lt;li&gt;在 netfilter 框架中有&lt;strong&gt; 5 个钩子&lt;/strong&gt;点：&lt;code&gt;PRE_ROUTING&lt;/code&gt;, &lt;code&gt;INPUT&lt;/code&gt;, &lt;code&gt;FORWARD&lt;/code&gt;, &lt;code&gt;OUTPUT&lt;/code&gt;, &lt;code&gt;POST_ROUTING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令行工具 &lt;code&gt;iptables&lt;/code&gt; 可用于&lt;strong&gt;动态地将规则插入到钩子点中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以通过组合各种 &lt;code&gt;iptables&lt;/code&gt; 规则来操作数据包（接受/重定向/删除/修改，等等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_hooks.png&quot; alt=&quot;The 5 hook points in netfilter framework&quot;&gt;&lt;br&gt;此外，这 5 个钩子点还可以与内核的其他网络设施，如内核路由子系统进行协同工作。&lt;/p&gt;
&lt;p&gt;此外，在每个钩子点中，规则被组织到具有预定义优先级的不同链中。为了按目的管理链，链被进一步组织到表中。现在有 5 个表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: 做正常的过滤，如接受，拒绝/删，跳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;: 网络地址转换，包括 SNAT（源 nat) 和 DNAT（目的 nat)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt;: 修改包属性，例如 TTL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;: 最早的处理点，连接跟踪前的特殊处理 (conntrack 或 CT，也包含在上图中，但这不是链）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt;: 本文未涉及&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将表/链添加到上图中，我们可以得到更详细的视图：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_hooks-and-tables.png&quot; alt=&quot;iptables table/chains inside hook points&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;VIP-与负载均衡-LB&quot;&gt;&lt;a href=&quot;#VIP-与负载均衡-LB&quot; class=&quot;headerlink&quot; title=&quot;VIP 与负载均衡 (LB)&quot;&gt;&lt;/a&gt;VIP 与负载均衡 (LB)&lt;/h3&gt;&lt;p&gt;虚拟 IP (IP) 将所有后端 IP 隐藏给客户端/用户，因此客户端/用户总是与 VIP 的后端服务通信，而不需要关心 VIP 后面有多少实例。&lt;/p&gt;
&lt;p&gt;VIP 总是伴随着负载均衡，因为它需要在不同的后端之间分配流量。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_vip-and-lb.png&quot; alt=&quot;VIP and load balancing&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Cross-host-网络模型&quot;&gt;&lt;a href=&quot;#Cross-host-网络模型&quot; class=&quot;headerlink&quot; title=&quot;Cross-host 网络模型&quot;&gt;&lt;/a&gt;Cross-host 网络模型&lt;/h3&gt;&lt;p&gt;主机 A 上的实例（容器、VM 等）如何与主机 B 上的另一个实例通信？有很多解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接路由：BGP 等&lt;/li&gt;
&lt;li&gt;隧道：VxLAN, IPIP, GRE 等&lt;/li&gt;
&lt;li&gt;NAT: 例如 docker 的桥接网络模式&lt;/li&gt;
&lt;li&gt;其它方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;节点代理模型&quot;&gt;&lt;a href=&quot;#节点代理模型&quot; class=&quot;headerlink&quot; title=&quot;节点代理模型&quot;&gt;&lt;/a&gt;节点代理模型&lt;/h2&gt;&lt;p&gt;在 kubernetes 中，您可以将应用程序定义为 &lt;code&gt;Service&lt;/code&gt;。&lt;code&gt;Service&lt;/code&gt; 是一种抽象，它定义了一组 Pods 的逻辑集和访问它们的策略。&lt;/p&gt;
&lt;h3 id=&quot;Service-类型&quot;&gt;&lt;a href=&quot;#Service-类型&quot; class=&quot;headerlink&quot; title=&quot;Service 类型&quot;&gt;&lt;/a&gt;Service 类型&lt;/h3&gt;&lt;p&gt;K8S 中定义了 4 种 &lt;code&gt;Service&lt;/code&gt; 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClusterIP&lt;/code&gt;: 通过 VIP 访问 Service，但该 VIP 只能在此集群内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodePort&lt;/code&gt;: 通过 NodeIP:NodePort 访问 Service，这意味着该端口将保留在集群内的所有节点上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExternalIP&lt;/code&gt;: 与 &lt;code&gt;ClusterIP&lt;/code&gt; 相同，但是这个 VIP 可以从这个集群之外访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoadBalancer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章将关注 &lt;code&gt;ClusterIP&lt;/code&gt;，但是其他三种类型在流量拦截和转发方面的底层实现非常相似。&lt;/p&gt;
&lt;h3 id=&quot;节点代理&quot;&gt;&lt;a href=&quot;#节点代理&quot; class=&quot;headerlink&quot; title=&quot;节点代理&quot;&gt;&lt;/a&gt;节点代理&lt;/h3&gt;&lt;p&gt;一个 Service 有一个 VIP （本文中的 &lt;code&gt;ClusterIP&lt;/code&gt;) 和多个端点（后端 pods)。每个 pod 或节点都可以通过 VIP 直接访问应用程序。要做到这一点，节点代理程序需要在每个节点上运行，它应该能够透明地拦截到任何 &lt;code&gt;ClusterIP:Port&lt;/code&gt;[注解 1] 的流量，并将它们重定向到一个或多个后端 pods。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_k8s-proxier-model.png&quot; alt=&quot;Kubernetes proxier model&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注解 1&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;ClusterIP&lt;/code&gt; 的一个常见误解是，&lt;code&gt;ClusterIP&lt;/code&gt; 是可访问的——它们不是通过定义访问的。如果 ping 一个 &lt;code&gt;ClusterIP&lt;/code&gt;，可能会发现它不可访问。&lt;/p&gt;
&lt;p&gt;根据定义，&lt;strong&gt;&lt;protocol,clusterip,port&gt;&lt;/protocol,clusterip,port&gt;&lt;/strong&gt; 元组独特地定义了一个服务（因此也定义了一个拦截规则）。例如，如果一个服务被定义为 &lt;code&gt;&amp;lt;tcp,10.7.0.100,80&amp;gt;&lt;/code&gt;，那么代理只处理 &lt;code&gt;tcp:10.7.0.100:80&lt;/code&gt; 的流量，其他流量，例如。&lt;code&gt;tcp:10.7.0.100:8080&lt;/code&gt;, &lt;code&gt;udp:10.7.0.100:80&lt;/code&gt; 将不会被代理。因此，也无法访问 ClusterIP (ICMP 流量）。&lt;/p&gt;
&lt;p&gt;但是，如果您使用的是带有 IPVS 模式的 &lt;code&gt;kube-proxy&lt;/code&gt;，那么确实可以通过 ping 访问&lt;code&gt;ClusterIP&lt;/code&gt;。这是因为 IPVS 模式实现比定义所需要的做得更多。您将在下面几节中看到不同之处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;节点代理的角色：反向代理&quot;&gt;&lt;a href=&quot;#节点代理的角色：反向代理&quot; class=&quot;headerlink&quot; title=&quot;节点代理的角色：反向代理&quot;&gt;&lt;/a&gt;节点代理的角色：反向代理&lt;/h3&gt;&lt;p&gt;想想节点代理的作用，在 K8S 网络模型中，它实际上是一个反向代理，也就是说，在每个节点上，它将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有后端 Pods 隐藏到客户端&lt;/li&gt;
&lt;li&gt;过滤所有出口流量（对后端的请求）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 ingress traffic，它什么也不做。&lt;/p&gt;
&lt;h3 id=&quot;性能问题&quot;&gt;&lt;a href=&quot;#性能问题&quot; class=&quot;headerlink&quot; title=&quot;性能问题&quot;&gt;&lt;/a&gt;性能问题&lt;/h3&gt;&lt;p&gt;如果我们在主机上有一个应用程序，并且在 K8S 集群中有 1K 个服务，那么我们永远无法猜测该应用程序在下一时刻将访问哪个服务（这里忽略网络策略）。因此，为了让应用程序能够访问所有服务，我们必须为节点上的所有服务应用所有代理规则。将这个想法推广到整个集群，这意味着：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有服务的代理规则应该应用于整个集群中的所有节点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在某种意义上，这是一个完全分布式的代理模型，因为任何节点都拥有集群的所有规则。&lt;/p&gt;
&lt;p&gt;当集群变大时，这会导致严重的性能问题，因为每个节点上可能有数十万条规则 [6,7]。&lt;/p&gt;
&lt;h2 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h2&gt;&lt;h3 id=&quot;集群拓扑和测试环境&quot;&gt;&lt;a href=&quot;#集群拓扑和测试环境&quot; class=&quot;headerlink&quot; title=&quot;集群拓扑和测试环境&quot;&gt;&lt;/a&gt;集群拓扑和测试环境&lt;/h3&gt;&lt;p&gt;我们将使用以下环境进行测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 k8s 集群&lt;ul&gt;
&lt;li&gt;一个 master 节点&lt;/li&gt;
&lt;li&gt;一个 node 节点&lt;/li&gt;
&lt;li&gt;网络解决方案：直接路由 (PodIP 可直接路由）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个非 k8s 节点，但是它可以到达工作节点和 Pod（得益于直接路由网络方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_test-env.png&quot; alt=&quot;test env&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们将在工作节点上部署 Pods，并从 test 节点通过 &lt;code&gt;ClusterIP&lt;/code&gt; 访问 Pods 中的应用程序。&lt;/p&gt;
&lt;h3 id=&quot;创建一个-Service&quot;&gt;&lt;a href=&quot;#创建一个-Service&quot; class=&quot;headerlink&quot; title=&quot;创建一个 Service&quot;&gt;&lt;/a&gt;创建一个 Service&lt;/h3&gt;&lt;p&gt;创建一个简单的 &lt;code&gt;Statefulset&lt;/code&gt;，其中包括一个 &lt;code&gt;Service&lt;/code&gt;，该 &lt;code&gt;Service&lt;/code&gt; 将有一个或多个后端 Pods:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# see appendix for webapp.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; webapp.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get svc -o wide webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE     SELECTOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp   ClusterIP   10.7.111.132   &amp;lt;none&amp;gt;        80/TCP    2m11s   app=webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod -o wide | grep webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-0    2/2     Running   0    2m12s 10.5.41.204    node1    &amp;lt;none&amp;gt;  &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;应用程序在带有 tcp 协议的 80 端口上运行。&lt;/p&gt;
&lt;h3 id=&quot;可达性测试&quot;&gt;&lt;a href=&quot;#可达性测试&quot; class=&quot;headerlink&quot; title=&quot;可达性测试&quot;&gt;&lt;/a&gt;可达性测试&lt;/h3&gt;&lt;p&gt;首先访问 PodIP+Port:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功的！然后用 &lt;code&gt;ClusterIP&lt;/code&gt; 替换 PodIP 再试一次：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl 10.7.111.132:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如所料，它是不可访问的！&lt;/p&gt;
&lt;p&gt;在下一节中，我们将研究如何使用不同的方法使 &lt;code&gt;ClusterIP&lt;/code&gt; 可访问。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-userspace-socket-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-userspace-socket-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 userspace socket 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 userspace socket 实现 proxy&lt;/h2&gt;&lt;h3 id=&quot;中间人模型&quot;&gt;&lt;a href=&quot;#中间人模型&quot; class=&quot;headerlink&quot; title=&quot;中间人模型&quot;&gt;&lt;/a&gt;中间人模型&lt;/h3&gt;&lt;p&gt;最容易理解的实现是在此主机上的通信路径中插入我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 作为中间人：对于从本地客户端到 ClusterIP:Port 的每个连接，&lt;strong&gt;我们拦截该连接并将其分割为两个单独的连接&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地客户端和 &lt;code&gt;toy-proxy&lt;/code&gt; 之间的连接&lt;/li&gt;
&lt;li&gt;连接 &lt;code&gt;toy-proxy&lt;/code&gt; 和后端 pods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现此目的的最简单方法是在用户空间中实现它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;监听资源&lt;/code&gt;: 启动一个守护进程，监听 K8S apiserver、监视服务 (ClusterIP) 和端点 (Pod) 的变化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代理通信&lt;/code&gt;: 对于从本地客户端到服务 (ClusterIP) 的每个连接请求，通过充当中间人来拦截请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;动态应用代理规则&lt;/code&gt;: 对于任何 Service/Endpoint 更新，相应地更改 &lt;code&gt;toy-proxy&lt;/code&gt; 连接设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于我们上面的测试应用 &lt;code&gt;webapp&lt;/code&gt;，数据流程如下图：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_userspace-proxier.png&quot; alt=&quot;userspace-proxier&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;POC-实现&quot;&gt;&lt;a href=&quot;#POC-实现&quot; class=&quot;headerlink&quot; title=&quot;POC 实现&quot;&gt;&lt;/a&gt;POC 实现&lt;/h3&gt;&lt;p&gt;让我们来看看上图的概念验证实现。&lt;/p&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;以下代码省略了一些错误处理代码，便于阅读：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	clusterIP := &lt;span class=&quot;string&quot;&gt;&quot;10.7.111.132&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	podIP := &lt;span class=&quot;string&quot;&gt;&quot;10.5.41.204&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	port := &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	proto := &lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addRedirectRules(clusterIP, port, proto)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createProxy(podIP, port, proto)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addRedirectRules&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(clusterIP &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, port &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, proto &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p := strconv.Itoa(port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;iptables&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-t&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;nat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-A&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;OUTPUT&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-p&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;-d&quot;&lt;/span&gt;, clusterIP, &lt;span class=&quot;string&quot;&gt;&quot;--dport&quot;&lt;/span&gt;, p, &lt;span class=&quot;string&quot;&gt;&quot;-j&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;REDIRECT&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;--to-port&quot;&lt;/span&gt;, p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cmd.Run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createProxy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(podIP &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, port &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, proto &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	host := &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener, err := net.Listen(proto, net.JoinHostPort(host, strconv.Itoa(port)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		inConn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		outConn, err := net.Dial(proto, net.JoinHostPort(podIP, strconv.Itoa(port)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(in, out *net.TCPConn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			wg.Add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Proxying %v &amp;lt;-&amp;gt; %v &amp;lt;-&amp;gt; %v &amp;lt;-&amp;gt; %v\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				in.RemoteAddr(), in.LocalAddr(), out.LocalAddr(), out.RemoteAddr())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; copyBytes(in, out, &amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; copyBytes(out, in, &amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;(inConn.(*net.TCPConn), outConn.(*net.TCPConn))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copyBytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dst, src *net.TCPConn, wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, err := io.Copy(dst, src); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !strings.HasSuffix(err.Error(), &lt;span class=&quot;string&quot;&gt;&quot;use of closed network connection&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;io.Copy error: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dst.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	src.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;一些解释&quot;&gt;&lt;a href=&quot;#一些解释&quot; class=&quot;headerlink&quot; title=&quot;一些解释&quot;&gt;&lt;/a&gt;一些解释&lt;/h4&gt;&lt;h5 id=&quot;traffic-拦截&quot;&gt;&lt;a href=&quot;#traffic-拦截&quot; class=&quot;headerlink&quot; title=&quot;traffic 拦截&quot;&gt;&lt;/a&gt;traffic 拦截&lt;/h5&gt;&lt;p&gt;我们想拦截所有发往 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 的流量，但是在这个节点上任何设备都没有配置&lt;code&gt;ClusterIP&lt;/code&gt;，因此我们无法执行诸如 listen（ClusterIP，Port）之类的操作，那么我们如何才能拦截呢？答案是：使用&lt;code&gt;iptables/netfilter&lt;/code&gt; 提供的 &lt;code&gt;REDIRECT&lt;/code&gt; 能力。&lt;/p&gt;
&lt;p&gt;以下命令会将所有发往 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 的流量定向到 &lt;code&gt;localhost:Port&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo iptables -t nat -A OUTPUT -p tcp &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j REDIRECT --to-port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你现在不能理解这一点，不要害怕。稍后我们将讨论这个问题。&lt;/p&gt;
&lt;p&gt;通过下面命令的输出来验证这一点：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REDIRECT   tcp  --  0.0.0.0/0   10.7.111.132         tcp dpt:80 redir ports 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在代码中，函数 &lt;code&gt;addRedirectRules()&lt;/code&gt; 包装了上述过程。&lt;/p&gt;
&lt;h5 id=&quot;创建-proxy&quot;&gt;&lt;a href=&quot;#创建-proxy&quot; class=&quot;headerlink&quot; title=&quot;创建 proxy&quot;&gt;&lt;/a&gt;创建 proxy&lt;/h5&gt;&lt;p&gt;函数 &lt;code&gt;createProxy()&lt;/code&gt; 创建用户空间代理，并执行双向转发。&lt;/p&gt;
&lt;h4 id=&quot;可达性测试-1&quot;&gt;&lt;a href=&quot;#可达性测试-1&quot; class=&quot;headerlink&quot; title=&quot;可达性测试&quot;&gt;&lt;/a&gt;可达性测试&lt;/h4&gt;&lt;p&gt;编译代码并执行二进制文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build toy-proxy-userspace.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ./toy-proxy-userspace&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在测试访问：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功！我们的代理传达的信息是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ./toy-proxy-userspace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating proxy between &amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 127.0.0.1:80 &amp;lt;-&amp;gt; &amp;lt;host ip&amp;gt;:40194 &amp;lt;-&amp;gt; 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表示，对于原 &lt;code&gt;&amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 10.7.111.132:80&lt;/code&gt; 的连接请求，将其拆分为两个连接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 127.0.0.1:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;host ip&amp;gt;:40194 &amp;lt;-&amp;gt; 10.5.41.204:80&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除这条规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    REDIRECT   tcp  --  0.0.0.0/0   10.7.111.132         tcp dpt:80 redir ports 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables -t nat -D OUTPUT &amp;lt;num&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者删除（刷新）所有规则，如果你把 iptabels 弄的一团糟的情况下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -F &lt;span class=&quot;comment&quot;&gt;# delete all rules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -X &lt;span class=&quot;comment&quot;&gt;# delete all custom chains&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;改进&quot;&gt;&lt;a href=&quot;#改进&quot; class=&quot;headerlink&quot; title=&quot;改进&quot;&gt;&lt;/a&gt;改进&lt;/h4&gt;&lt;p&gt;在这个 &lt;code&gt;toy-proxy&lt;/code&gt; 实现中，我们拦截了 &lt;code&gt;ClusterIP:80&lt;/code&gt; 到 &lt;code&gt;localhost:80&lt;/code&gt;，但是如果该主机上的本机应用程序也想使用 &lt;code&gt;localhost:80&lt;/code&gt; 怎么办？此外，如果多个服务都公开 80 端口会怎样？显然，我们需要区分这些应用程序或服务。解决这个问题的正确方法是：为每个代理分配一个未使用的临时端口 TmpPort，拦截 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 到 &lt;code&gt;local:TmpPort&lt;/code&gt;。例如，app1 使用 10001, app2 使用 10002。&lt;/p&gt;
&lt;p&gt;其次，上面的代码只处理一个后端，如果有多个后端 pods 怎么办？因此，我们需要通过负载均衡算法将请求分发到不同的后端 pods。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_userspace-proxier-2.png&quot; alt=&quot;userspace-proxier-2&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;优缺点&quot;&gt;&lt;a href=&quot;#优缺点&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h4&gt;&lt;p&gt;这种方法非常容易理解和实现，但是，它的性能会很差，因为它必须在两端以及内核和用户空间内存之间复制字节。&lt;/p&gt;
&lt;p&gt;我们没有在这上面花太多时间，如果您感兴趣，可以在这里查看用户空间 &lt;code&gt;kube-proxy&lt;/code&gt; 的简单实现。&lt;/p&gt;
&lt;p&gt;接下来，让我们看看实现这个任务的另一种方法。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-iptables-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-iptables-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 iptables 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 iptables 实现 proxy&lt;/h2&gt;&lt;p&gt;用户空间代理程序的主要瓶颈来自内核-用户空间切换和数据复制。&lt;strong&gt;如果我们可以完全在内核空间中实现代理&lt;/strong&gt;，它将在性能上大大提高，从而击败用户空间的代理。&lt;code&gt;iptables&lt;/code&gt; 可用于实现这一目标。&lt;/p&gt;
&lt;p&gt;在开始之前，让我们首先弄清楚在执行 &lt;code&gt;curl ClusterIP:Port&lt;/code&gt; 时的流量路径，然后研究如何使用 &lt;code&gt;iptables&lt;/code&gt; 规则使其可访问。&lt;/p&gt;
&lt;h3 id=&quot;Host-gt-ClusterIP-（单一后端）&quot;&gt;&lt;a href=&quot;#Host-gt-ClusterIP-（单一后端）&quot; class=&quot;headerlink&quot; title=&quot;Host -&amp;gt; ClusterIP （单一后端）&quot;&gt;&lt;/a&gt;Host -&amp;gt; ClusterIP （单一后端）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ClusterIP&lt;/code&gt; 不存在于任何网络设备上，所以为了让我们的数据包最终到达后端 Pod，我们需要将 &lt;code&gt;ClusterIP&lt;/code&gt; 转换为 PodIP（可路由），即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件：匹配 &lt;code&gt;dst=ClusterIP,proto=tcp,dport=80&lt;/code&gt; 的数据包&lt;/li&gt;
&lt;li&gt;操作：将数据包的 IP 报头中的 &lt;code&gt;dst=ClusterIP&lt;/code&gt; 替换为 &lt;code&gt;dst=PodIP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用网络术语来说，这是一个网络地址转换 (NAT) 过程。&lt;/p&gt;
&lt;h4 id=&quot;在哪里做-DNAT&quot;&gt;&lt;a href=&quot;#在哪里做-DNAT&quot; class=&quot;headerlink&quot; title=&quot;在哪里做 DNAT&quot;&gt;&lt;/a&gt;在哪里做 DNAT&lt;/h4&gt;&lt;p&gt;通过 curl 查看出口数据包路径（下图展示了数据流向过程）：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-dnat.png&quot; alt=&quot;host-to-clusterip-dnat&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;curl process&amp;gt; -&amp;gt; raw -&amp;gt; CT -&amp;gt; mangle -&amp;gt; dnat -&amp;gt; filter -&amp;gt; security -&amp;gt; snat -&amp;gt; &amp;lt;ROUTING&amp;gt; -&amp;gt; mangle -&amp;gt; snat -&amp;gt; NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很明显，在 OUTPUT 钩中只有一个 dnat（链），我们可以在其中进行 DNAT。&lt;/p&gt;
&lt;p&gt;让我们看看我们将如何进行黑客入侵。&lt;/p&gt;
&lt;h4 id=&quot;检查当前的-NAT-规则&quot;&gt;&lt;a href=&quot;#检查当前的-NAT-规则&quot; class=&quot;headerlink&quot; title=&quot;检查当前的 NAT 规则&quot;&gt;&lt;/a&gt;检查当前的 NAT 规则&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NAT&lt;/code&gt; 规则被组织到 &lt;code&gt;nat&lt;/code&gt; 表中。检查 &lt;code&gt;nat&lt;/code&gt; 表中的当前规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -t &amp;lt;table&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -L list rules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -n numeric output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain PREROUTING (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain INPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER     all  --  0.0.0.0/0    !127.0.0.0/8   ADDRTYPE match dst-type LOCAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain POSTROUTING (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出显示除了与 DOCKER 相关的规则外，没有其他规则。这些 DOCKER 规则是 DOCKER 在安装时插入的，但它们不会影响我们在这篇文章中的实验。所以我们忽略它们。&lt;/p&gt;
&lt;h4 id=&quot;增加-DNAT-规则&quot;&gt;&lt;a href=&quot;#增加-DNAT-规则&quot; class=&quot;headerlink&quot; title=&quot;增加 DNAT 规则&quot;&gt;&lt;/a&gt;增加 DNAT 规则&lt;/h4&gt;&lt;p&gt;为了便于查看，我们不会用 go 代码包装 &lt;code&gt;iptables&lt;/code&gt; 命令，而是直接显示命令本身。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确认目前无法访问 ClusterIP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在添加我们的出口 NAT 规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat ENV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLUSTER_IP=10.7.111.132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POD_IP=10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PORT=80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROTO=tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -p               &amp;lt;protocol&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -A               add rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --dport          &amp;lt;dst port&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -d               &amp;lt;dst ip&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -j               jump to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --to-destination &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查规则表：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0   10.7.111.132   tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到规则已经被添加。&lt;/p&gt;
&lt;h4 id=&quot;测试可达性&quot;&gt;&lt;a href=&quot;#测试可达性&quot; class=&quot;headerlink&quot; title=&quot;测试可达性&quot;&gt;&lt;/a&gt;测试可达性&lt;/h4&gt;&lt;p&gt;现在再一次访问：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就是这样！访问成功。&lt;/p&gt;
&lt;p&gt;但是等等！我们期望出口的交通应该是正确的，但我们没有添加任何 NAT 规则的入口路径，怎么可能交通是正常的两个方向？事实证明，当你为一个方向添加一个 NAT 规则时，Linux 内核会自动为另一个方向添加保留规则！这与 conntrack (CT，连接跟踪）模块协同工作。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-dnat-ct.png&quot; alt=&quot;host-to-clusterip-dnat-ct&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;清理&quot;&gt;&lt;a href=&quot;#清理&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h4&gt;&lt;p&gt;删除这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    DNAT       tcp  --  0.0.0.0/0   10.7.111.132   tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables -t &amp;lt;table&amp;gt; -D &amp;lt;chain&amp;gt; &amp;lt;num&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Host-gt-ClusterIP-（多个后端）&quot;&gt;&lt;a href=&quot;#Host-gt-ClusterIP-（多个后端）&quot; class=&quot;headerlink&quot; title=&quot;Host -&amp;gt; ClusterIP （多个后端）&quot;&gt;&lt;/a&gt;Host -&amp;gt; ClusterIP （多个后端）&lt;/h3&gt;&lt;p&gt;在上一节中，我们展示了如何使用一个后端 Pod 执行 NAT。现在让我们看看多后端情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;伸缩-webapp&quot;&gt;&lt;a href=&quot;#伸缩-webapp&quot; class=&quot;headerlink&quot; title=&quot;伸缩 webapp&quot;&gt;&lt;/a&gt;伸缩 webapp&lt;/h4&gt;&lt;p&gt;首先扩大我们的服务到 2 个后端 pods:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl scale sts webapp --replicas=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;statefulset.apps/webapp scaled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod -o wide | grep webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-0   2/2     Running   0   1h24m   10.5.41.204    node1    &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-1   2/2     Running   0   11s     10.5.41.5      node1    &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;通过负载平衡添加-DNAT-规则&quot;&gt;&lt;a href=&quot;#通过负载平衡添加-DNAT-规则&quot; class=&quot;headerlink&quot; title=&quot;通过负载平衡添加 DNAT 规则&quot;&gt;&lt;/a&gt;通过负载平衡添加 DNAT 规则&lt;/h4&gt;&lt;p&gt;我们需要 &lt;code&gt;iptables&lt;/code&gt; 中的 &lt;code&gt;statistic&lt;/code&gt; 模块以概率的方式将请求分发到后端 Pods，这样才能达到负载均衡的效果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -m &amp;lt;module&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -m statistic --mode random --probability 0.5  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -m statistic --mode random --probability 1.0  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的命令指定在两个 Pods 之间随机分配请求，每个都有 50% 的概率。&lt;/p&gt;
&lt;p&gt;现在检查这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target  prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 0.50000000000 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 1.00000000000 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-lb-ct.png&quot; alt=&quot;host-to-clusterip-lb-ct&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h4&gt;&lt;p&gt;现在，我们来验证下负载均衡是否生效。我们发出 8 个 请求，并捕获到这个主机通信的真实 PodIPs:&lt;/p&gt;
&lt;p&gt;在测试节点上打开一个 shell:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;1..8&amp;#125;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; sleep 1; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试节点上的另一个 shell 窗口：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tcpdump -nn -i eth0 port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; | grep &lt;span class=&quot;string&quot;&gt;&quot;GET /&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48306 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48308 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48310 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48312 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48314 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48316 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48318 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48320 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 Pod1 中有 4 次，在 Pod2 中有 4 次，每个 pod 有 50%，这正是我们所期望的。&lt;/p&gt;
&lt;h4 id=&quot;清理-1&quot;&gt;&lt;a href=&quot;#清理-1&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 0.50000000000 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3    DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 1.00000000000 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pod-app-A-gt-ClusterIP-app-B&quot;&gt;&lt;a href=&quot;#Pod-app-A-gt-ClusterIP-app-B&quot; class=&quot;headerlink&quot; title=&quot;Pod (app A) -&amp;gt; ClusterIP (app B)&quot;&gt;&lt;/a&gt;Pod (app A) -&amp;gt; ClusterIP (app B)&lt;/h3&gt;&lt;p&gt;如果想通过 hostA 上的 &lt;code&gt;Pod A&lt;/code&gt; 通过 &lt;code&gt;ClusterIP&lt;/code&gt; 访问 &lt;code&gt;Pod B&lt;/code&gt;, B 的 Pod 驻留在 hostB 上，我们应该做什么？&lt;/p&gt;
&lt;p&gt;实际上，这与 &lt;code&gt;Host -&amp;gt; ClusterIP&lt;/code&gt; 情况非常相似，但是有一点需要注意：在执行 NAT 之后，源节点 (hostA) 需要将包发送到目的地 Pod 所在的正确目的地节点 (hostB)。根据不同的跨主机网络解决方案，这有很大不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于直接路由的情况下，主机只是发送数据包。对应的有这些解决方案&lt;ul&gt;
&lt;li&gt;calico + bird&lt;/li&gt;
&lt;li&gt;cilium + kube-router(Cilium BGP 的默认解决方案） &lt;/li&gt;
&lt;li&gt;cilium + bird（实际上这只是我们的测试环境网络解决方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于隧道的情况，每个主机上必须有一个代理，它在 DNAT 之后执行 encap，在 SNAT 之前执行 decap。这些解决方案包括：&lt;ul&gt;
&lt;li&gt;calico + VxLAN 模式&lt;/li&gt;
&lt;li&gt;flannel + IPIP 模式&lt;/li&gt;
&lt;li&gt;flannel + VxLAN 模式&lt;/li&gt;
&lt;li&gt;cilium + VxLAN 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;像 aws 的 ENI 模式：类似于直接路由，但不需要 BGP 代理&lt;ul&gt;
&lt;li&gt;cilium + ENI 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了隧道的情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_tunneling.png&quot; alt=&quot;tunneling&quot;&gt;&lt;/p&gt;
&lt;p&gt;代理与隧道相关的职责包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步所有节点之间的隧道信息&lt;/strong&gt;，例如描述哪个实例在哪个节点上的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 DNAT 之后对 pod 流量执行封装&lt;/strong&gt;: 对于所有的出口流量，例如来自 hostA 的&lt;code&gt;dst=&amp;lt;PodIP&amp;gt;&lt;/code&gt;，其中 PodIP 在 hostB 上，通过添加另一个头来封装数据包，例如 VxLAN 头，其中封装头有 &lt;code&gt;src=hostA_IP,dst=hostB_IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 SNAT 之前对 Pod 流量执行解封装&lt;/strong&gt;: 解封装每个入口封装的数据包：删除外层（例如 VxLAN 标头）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，主机需要决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些数据包应该交给解码器 (pod 流量），哪些不应该（例如主机流量）&lt;/li&gt;
&lt;li&gt;哪些包应该封装 (pod 流量），哪些不应该（例如主机流量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;重新构造-iptables-规则&quot;&gt;&lt;a href=&quot;#重新构造-iptables-规则&quot; class=&quot;headerlink&quot; title=&quot;重新构造 iptables 规则&quot;&gt;&lt;/a&gt;重新构造 iptables 规则&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当您有大量的 Service 时，每个节点上的 iptables 规则将相当复杂，因此您需要进行一些结构化工作来组织这些规则。&lt;/p&gt;
&lt;p&gt;在本节中，我们将在 nat 表中创建几个专用的 iptables 链，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;: 拦截 nat 表的输出链中所有到此链的出口流量，如果它们被指定为 ClusterIP，则执行 DNAT&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt;: 如果 &lt;code&gt;dst&lt;/code&gt;、&lt;code&gt;proto&lt;/code&gt; 和 &lt;code&gt;port&lt;/code&gt; 匹配，则拦截该链 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 中的所有流量&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SEP-WEBAPP1&lt;/code&gt;: 拦截 50%的流量在 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt; 到这里&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SEP-WEBAPP2&lt;/code&gt;: 拦截 50%的流量在 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt; 到这里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNAT 路径现在为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OUTPUT -&amp;gt; KUBE-SERVICES -&amp;gt; KUBE-SVC-WEBAPP --&amp;gt; KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                          \--&amp;gt; KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你有多个 Service，DNAT 路径如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OUTPUT -&amp;gt; KUBE-SERVICES -&amp;gt; KUBE-SVC-A --&amp;gt; KUBE-SEP-A1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |              \--&amp;gt; KUBE-SEP-A2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |--&amp;gt; KUBE-SVC-B --&amp;gt; KUBE-SEP-B1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |              \--&amp;gt; KUBE-SEP-B2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |--&amp;gt; KUBE-SVC-C --&amp;gt; KUBE-SEP-C1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     \--&amp;gt; KUBE-SEP-C2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;iptables 命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat add-dnat-structured.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ../ENV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE_SVCS=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SERVICES&quot;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;# chain that serves as kubernetes service portal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SVC_WEBAPP=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SVC-WEBAPP&quot;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# chain that serves as DNAT entrypoint for webapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WEBAPP_EP1=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SEP-WEBAPP1&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# chain that performs dnat to pod1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WEBAPP_EP2=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SEP-WEBAPP2&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# chain that performs dnat to pod2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# OUTPUT -&amp;gt; KUBE-SERVICES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A OUTPUT -p all &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -j &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# KUBE-SERVICES -&amp;gt; KUBE-SVC-WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# KUBE-SVC-WEBAPP -&amp;gt; KUBE-SEP-WEBAPP*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 0.5  -j &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 1.0  -j &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在测试我们设计：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./add-dnat-structured.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ KUBE_SVCS=KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ SVC_WEBAPP=KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ WEBAPP_EP1=KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ WEBAPP_EP2=KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A OUTPUT -p all &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SERVICES -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.7.111.132 --dport 80 -j KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SEP-WEBAPP1 -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport 80 -j DNAT --to-destination 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SEP-WEBAPP2 -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport 80 -j DNAT --to-destination 10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SVC-WEBAPP -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 0.5 -j KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SVC-WEBAPP -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 1.0 -j KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检查这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-WEBAPP1 (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-WEBAPP2 (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SERVICES (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SVC-WEBAPP  tcp  --  0.0.0.0/0            10.7.111.132         tcp dpt:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SVC-WEBAPP (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-WEBAPP1  tcp  --  0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-WEBAPP2  tcp  --  0.0.0.0/0            0.0.0.0/0            statistic mode random probability 1.00000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功！&lt;/p&gt;
&lt;p&gt;如果您将上面的输出与普通的 &lt;code&gt;kube-proxy&lt;/code&gt; 规则进行比较，这两个规则是非常相似的，下面是从启用 &lt;code&gt;kube-proxy&lt;/code&gt; 的节点提取的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target         prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SERVICES (2 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target                     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SVC-YK2SNH4V42VSDWIJ  tcp  --  0.0.0.0/0            10.7.22.18           /* default/nginx:web cluster IP */ tcp dpt:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SVC-YK2SNH4V42VSDWIJ (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target                     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-GL2BLSI2B4ICU6WH  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ statistic mode random probability 0.33332999982&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-AIRRSG3CIF42U3PX  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-GL2BLSI2B4ICU6WH (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target          prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT            tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ tcp to:10.244.3.181:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-AIRRSG3CIF42U3PX (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target          prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT            tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ tcp to:10.244.3.182:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;进一步重新构造-iptables-规则&quot;&gt;&lt;a href=&quot;#进一步重新构造-iptables-规则&quot; class=&quot;headerlink&quot; title=&quot;进一步重新构造 iptables 规则&quot;&gt;&lt;/a&gt;进一步重新构造 iptables 规则&lt;/h3&gt;&lt;p&gt;TODO: 为来自集群外部的流量添加规则。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-ipvs-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-ipvs-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 ipvs 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 ipvs 实现 proxy&lt;/h2&gt;&lt;p&gt;虽然基于 iptables 的代理在性能上优于基于用户空间的代理，但在集群服务过多的情况下也会导致性能严重下降 [6,7]。&lt;/p&gt;
&lt;p&gt;本质上，这是因为 iptables 判决是基于链的，它是一个复杂度为 O(n) 的线性算法。iptables 的一个好的替代方案是 IPVS——内核中的 L4 负载均衡器，它在底层使用 ipset（哈希实现），因此复杂度为 O(1)。&lt;/p&gt;
&lt;p&gt;让我们看看如何使用 ipvs 实现相同的目标。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装-IPVS&quot;&gt;&lt;a href=&quot;#安装-IPVS&quot; class=&quot;headerlink&quot; title=&quot;安装 IPVS&quot;&gt;&lt;/a&gt;安装 IPVS&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install -y ipvsadm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -l  list load balancing status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -n  numeric output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -ln&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Prot LocalAddress:Port Scheduler Flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认无规则&lt;/p&gt;
&lt;h4 id=&quot;增加虚拟-真正的-services&quot;&gt;&lt;a href=&quot;#增加虚拟-真正的-services&quot; class=&quot;headerlink&quot; title=&quot;增加虚拟/真正的 services&quot;&gt;&lt;/a&gt;增加虚拟/真正的 services&lt;/h4&gt;&lt;p&gt;使用 ipvs 实现负载均衡：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -A/--add-service           add service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -t/--tcp-service &amp;lt;address&amp;gt; VIP + Port&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -s &amp;lt;method&amp;gt;                scheduling-method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -r/--real-server &amp;lt;address&amp;gt; real backend IP + Port&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -m                         masquerading (NAT)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -A -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -r &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt; -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -r &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt; -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者使用我的脚本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./ipvs-add-server.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding virtual server CLUSTER_IP:PORT=10.7.111.132:80 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding real servers ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查状态：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -ln&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Prot LocalAddress:Port Scheduler Flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TCP  10.7.111.132:80 rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; 10.5.41.5:80                 Masq    1      0          0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; 10.5.41.204:80               Masq    1      0          0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一些解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于所有发往 &lt;code&gt;10.7.111.132:80&lt;/code&gt; 的流量，将负载均衡到 &lt;code&gt;10.5.41.5:80&lt;/code&gt; 和&lt;code&gt;10.5.41.204:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用轮询 (rr) 算法实现负载均衡&lt;/li&gt;
&lt;li&gt;两个后端，每个后端的权重为 1（各 50％）&lt;/li&gt;
&lt;li&gt;使用 MASQ（增强型 SNAT）在 VIP 和 RealIP 之间进行流量转发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;验证-1&quot;&gt;&lt;a href=&quot;#验证-1&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;1..8&amp;#125;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; sleep 1; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tcpdump -nn -i eth0 port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; | grep &lt;span class=&quot;string&quot;&gt;&quot;HTTP: GET&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49556 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49558 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49560 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49562 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49566 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49568 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49570 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49572 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完美！&lt;/p&gt;
&lt;h3 id=&quot;清理-2&quot;&gt;&lt;a href=&quot;#清理-2&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./ipvs-del-server.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleting real servers ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleting virtual server CLUSTER_IP:PORT=10.7.111.132:80 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现：通过-bpf-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-bpf-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 bpf 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 bpf 实现 proxy&lt;/h2&gt;&lt;p&gt;这也是一个 &lt;code&gt;O(1)&lt;/code&gt; 代理，但是与 IPVS 相比具有更高的性能。&lt;/p&gt;
&lt;p&gt;让我们看看如何在不到 100 行 C 代码中使用 eBPF 实现代理功能。&lt;/p&gt;
&lt;h3 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h3&gt;&lt;p&gt;如果你有足够的时间和兴趣来阅读 eBPF/BPF，可以考虑阅读 &lt;a href=&quot;https://docs.cilium.io/en/v1.6/bpf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cilium: BPF and XDP Reference Guide&lt;/a&gt;，它对开发人员来说是一个完美的 BPF 文档。&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;让我们看看出口部分的基本概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于所有流量，匹配 &lt;code&gt;dst=CLUSTER_IP &amp;amp;&amp;amp; proto==TCP &amp;amp;&amp;amp; dport==80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更改目标 IP: &lt;code&gt;CLUSTER_IP -&amp;gt; POD_IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新 IP 和 TCP 报头中的校验和文件（否则我们的数据包将被丢弃）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__section(&lt;span class=&quot;string&quot;&gt;&quot;egress&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tc_egress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __sk_buff *skb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 cluster_ip = &lt;span class=&quot;number&quot;&gt;0x846F070A&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10.7.111.132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 pod_ip = &lt;span class=&quot;number&quot;&gt;0x0529050A&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 10.5.41.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l3_off = ETH_HLEN;    &lt;span class=&quot;comment&quot;&gt;// IP header offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l4_off = l3_off + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// TCP header offset: l3_off + sizeof(struct iphdr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __be32 sum;                     &lt;span class=&quot;comment&quot;&gt;// IP checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data_end = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data_end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data_end &amp;lt; data + l4_off) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// not our packet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ip4 = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)(data + l3_off);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip4-&amp;gt;daddr != cluster_ip || ip4-&amp;gt;protocol != IPPROTO_TCP &lt;span class=&quot;comment&quot;&gt;/* || tcp-&amp;gt;dport == 80 */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// DNAT: cluster_ip -&amp;gt; pod_ip, then update L3 and L4 checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = csum_diff((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;ip4-&amp;gt;daddr, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;pod_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    skb_store_bytes(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, daddr), (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;pod_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l3_csum_replace(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l4_csum_replace(skb, l4_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, BPF_F_PSEUDO_HDR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于入口部分，非常类似于出口代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__section(&lt;span class=&quot;string&quot;&gt;&quot;ingress&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tc_ingress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __sk_buff *skb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 cluster_ip = &lt;span class=&quot;number&quot;&gt;0x846F070A&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10.7.111.132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 pod_ip = &lt;span class=&quot;number&quot;&gt;0x0529050A&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 10.5.41.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l3_off = ETH_HLEN;    &lt;span class=&quot;comment&quot;&gt;// IP header offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l4_off = l3_off + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// TCP header offset: l3_off + sizeof(struct iphdr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __be32 sum;                     &lt;span class=&quot;comment&quot;&gt;// IP checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data_end = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data_end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data_end &amp;lt; data + l4_off) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// not our packet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ip4 = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)(data + l3_off);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip4-&amp;gt;saddr != pod_ip || ip4-&amp;gt;protocol != IPPROTO_TCP &lt;span class=&quot;comment&quot;&gt;/* || tcp-&amp;gt;dport == 80 */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// SNAT: pod_ip -&amp;gt; cluster_ip, then update L3 and L4 header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = csum_diff((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;ip4-&amp;gt;saddr, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;cluster_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    skb_store_bytes(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, saddr), (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;cluster_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l3_csum_replace(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l4_csum_replace(skb, l4_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, BPF_F_PSEUDO_HDR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __license[] __section(&lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;) = &lt;span class=&quot;string&quot;&gt;&quot;GPL&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;编译并加载到内核中&quot;&gt;&lt;a href=&quot;#编译并加载到内核中&quot; class=&quot;headerlink&quot; title=&quot;编译并加载到内核中&quot;&gt;&lt;/a&gt;编译并加载到内核中&lt;/h3&gt;&lt;p&gt;现在使用我的小脚本编译和加载到内核：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./compile-and-load.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo tc filter show dev eth0 egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0 handle 0x1 toy-proxy-bpf.o:[egress] direct-action not_&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;_hw id 18 tag f5f39a21730006aa jited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo tc filter show dev eth0 ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0 handle 0x1 toy-proxy-bpf.o:[ingress] direct-action not_&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;_hw id 19 tag b41159c5873bcbc9 jited&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;脚本是这样的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat compile-and-load.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NIC=eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# compile c code into bpf code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang -O2 -Wall -c toy-proxy-bpf.c -target bpf -o toy-proxy-bpf.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add tc queuing discipline (egress and ingress buffer)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc qdisc del dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc qdisc add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# load bpf code into the tc egress and ingress hook respectively&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; egress bpf da obj toy-proxy-bpf.o sec egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; ingress bpf da obj toy-proxy-bpf.o sec ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# show info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter show dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter show dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; ingress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;验证-2&quot;&gt;&lt;a href=&quot;#验证-2&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完美！&lt;/p&gt;
&lt;h3 id=&quot;清理-3&quot;&gt;&lt;a href=&quot;#清理-3&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo tc qdisc del dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在这篇文章中，我们用不同的方法手工实现了 &lt;code&gt;kube-proxy&lt;/code&gt; 的核心功能。希望您现在对 kubernetes 节点代理有了更好的理解，以及关于网络的其他一些配置。&lt;/p&gt;
&lt;p&gt;在这篇文章中使用的代码和脚本：&lt;a href=&quot;https://github.com/icyxp/icyxp.github.io/tree/master/images/k8s/proxy/code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes Doc: CLI - kube-proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0011-ipvs-proxier.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/enhancements: enhancements/0011-ipvs-proxier.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes Doc: Service types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/proxies/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxies in Kubernetes - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@benmeier_/a-quick-minimal-ipvs-load-balancer-demo-d5cc42d0deb4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A minimal IPVS Load Balancer demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1BaIAywY2qqeHtyGZtlyAp89JIZs59MZLKcFLxKE6LyM/edit#slide=id.p3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scaling Kubernetes to Support 50,000 Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37230013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;华为云在 K8S 大规模场景下的 Service 性能优化实践&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;p&gt;webapp.yaml:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  serviceName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;webapp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# affinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#   nodeAffinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#     requiredDuringSchedulingIgnoredDuringExecution:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#       nodeSelectorTerms:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#       - matchExpressions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#         - key: kubernetes.io/hostname&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           operator: In&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           values:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           - node1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      tolerations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - effect:&lt;/span&gt; NoSchedule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        key:&lt;/span&gt; smoke&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        operator:&lt;/span&gt; Equal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        value:&lt;/span&gt; test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; nginx-slim:&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;翻译自：Cracking kubernetes node proxy 作者：ArthurChiao&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;背景知识&lt;/li&gt;
&lt;li&gt;节点代理模型&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;实现：通过 userspace socket 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 iptables 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 ipvs/ipset 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 bpf 实现 proxy&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;li&gt;附录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubernetes 中有几种类型的代理。其中有 &lt;strong&gt;node proxier&lt;/strong&gt; 或 &lt;code&gt;kube-proxy&lt;/code&gt;，它在每个节点上反映 Kubernetes API 中定义的服务，可以跨一组后端执行简单的 TCP/UDP/SCTP 流转发 [1]。&lt;/p&gt;
&lt;p&gt;为了更好地理解节点代理模型，在这篇文章中，我们将用不同的方法设计和实现我们自己版本的 &lt;code&gt;kube-proxy&lt;/code&gt;; 尽管这些只是 &lt;code&gt;toy-proxy&lt;/code&gt;，但从&lt;strong&gt;透明流量拦截、转发、负载均衡&lt;/strong&gt;等方面来说，它们的工作方式与 K8S 集群中运行的普通 &lt;code&gt;kube-proxy&lt;/code&gt; 基本相同。&lt;/p&gt;
&lt;p&gt;通过我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序，非 K8S 节点（不在 K8S 集群中）上的应用程序（无论是宿主本地应用程序，还是在 VM/容器中运行的应用程序）也可以通过 &lt;strong&gt;ClusterIP&lt;/strong&gt; 访问 K8S 服务 – &lt;strong&gt;注意，在 kubernetes 的设计中，ClusterIP 只能在 K8S 集群节点中访问。（在某种意义上，我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序将非 K8S 节点变成了 K8S 节点。)&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kubernetes/kube-proxy/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/categories/kubernetes/kube-proxy/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/tags/ipvs/"/>
    
      <category term="bpf" scheme="http://team.jiunile.com/tags/bpf/"/>
    
      <category term="netfilter" scheme="http://team.jiunile.com/tags/netfilter/"/>
    
      <category term="proxy" scheme="http://team.jiunile.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes CPUThrottlingHigh 告警解析</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-cpu-alert.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-cpu-alert.html</id>
    <published>2020-10-13T12:00:00.000Z</published>
    <updated>2020-10-13T05:42:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用Kubernetes的过程中，我们看到过这样一个告警信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[K8S]告警主题: CPUThrottlingHigh&lt;br&gt;告警级别: warning&lt;br&gt;告警类型: CPUThrottlingHigh&lt;br&gt;故障实例: xxxx&lt;br&gt;告警详情: 27% throttling of CPU in namespace kube-system for container kube-proxy in pod kube-proxy-9pj9j.&lt;br&gt;触发时间: 2020-05-08 17:34:17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个告警信息说明 &lt;code&gt;kube-proxy&lt;/code&gt; 容器被 &lt;code&gt;throttling&lt;/code&gt; 了，然而查看该容器的资源使用历史信息，发现该容器以及容器所在的节点的 CPU 资源使用率都不高：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/m-1.png&quot; alt=&quot;告警期间容器所在节点CPU使用率&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/m-2.png&quot; alt=&quot;告警期间kube-proxy的资源使用率&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过我们的分析，发现该告警实际上是和 Kubernetes 对于 CPU 资源的限制和管控机制有关。Kubernetes 依赖于容器的 &lt;code&gt;runtime&lt;/code&gt; 进行 CPU 资源的调度，而容器 &lt;code&gt;runtime&lt;/code&gt; 以 Docker 为例，是借助于 &lt;code&gt;cgroup&lt;/code&gt; 和 &lt;code&gt;CFS&lt;/code&gt; 调度机制进行资源管控。本文基于这个告警案例，首先分析了 &lt;code&gt;CFS&lt;/code&gt; 的基本原理，然后对于 Kubernetes 借助 &lt;code&gt;CFS&lt;/code&gt; 进行 CPU 资源的调度和管控方法进行了介绍，最后使用一个例子来分析 &lt;code&gt;CFS&lt;/code&gt; 的一些调度特性来解释这个告警的 &lt;code&gt;root cause&lt;/code&gt; 和解决方案。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;CFS-基本原理&quot;&gt;&lt;a href=&quot;#CFS-基本原理&quot; class=&quot;headerlink&quot; title=&quot;CFS 基本原理&quot;&gt;&lt;/a&gt;CFS 基本原理&lt;/h2&gt;&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;p&gt;Linux 在 2.6.23 之后开始引入 CFS 逐步替代O1调度器作为新的进程调度器，正如它名字所描述的，&lt;a href=&quot;https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS(Completely Fair Scheduler) 调度器&lt;/a&gt;追求的是对所有进程的全面公平，实际上它的做法就是在一个特定的调度周期内，保证所有待调度的进程都能被执行一遍，主要和当前已经占用的 CPU 时间经权重除权之后的值(vruntime，见下面公式)来决定本轮调度周期内所能占用的 CPU 时间，vruntime 越少，本轮能占用的 CPU时间越多；总体而言，CFS 就是通过保证各个进程 vruntime 的大小尽量一致来达到公平调度的效果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;进程的运行时间计算公式为:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;进程运行时间 = 调度周期 * 进程权重 / 所有进程权重之和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vruntime = 进程运行时间 * NICE_0_LOAD / 进程权重 = (调度周期 * 进程权重 / 所有进程总权重) * NICE_0_LOAD / 进程权重 = 调度周期 * NICE_0_LOAD / 所有进程总权重&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面两个公式，可以看到 vruntime 不是进程实际占用 CPU 的时间，而是剔除权重影响之后的 CPU 时间，这样所有进程在被调度决策的时候的依据是一致的，而实际占用 CPU 时间是经进程优先级权重放大的。这种方式使得系统的调度粒度更小来，更加适合高负载和多交互的场景。&lt;/p&gt;
&lt;h3 id=&quot;Kernel-配置&quot;&gt;&lt;a href=&quot;#Kernel-配置&quot; class=&quot;headerlink&quot; title=&quot;Kernel 配置&quot;&gt;&lt;/a&gt;Kernel 配置&lt;/h3&gt;&lt;p&gt;在kernel文件系统中，可以通过调整如下几个参数来改变CFS的一些行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_min_granularity_ns&lt;/code&gt;，表示进程最少运行时间，防止频繁的切换，对于交互系统&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_nr_migrate&lt;/code&gt;，在多 CPU 情况下进行负载均衡时，一次最多移动多少个进程到另一个 CPU 上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_wakeup_granularity_ns&lt;/code&gt;，表示进程被唤醒后至少应该运行的时间，这个数值越小，那么发生抢占的概率也就越高&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_latency_ns&lt;/code&gt;，表示一个运行队列所有进程运行一次的时间长度(&lt;strong&gt;正常情况下的队列调度周期，P&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sched_nr_latency&lt;/code&gt;，这个参数是内核内部参数，无法直接设置，是通过&lt;code&gt;sched_latency_ns/sched_min_granularity_ns&lt;/code&gt; 这个公式计算出来的；在实际运行中，如果队列排队进程数 &lt;code&gt;nr_running &amp;gt; sched_nr_latency&lt;/code&gt;，则调度周期就不是&lt;code&gt;sched_latency_ns&lt;/code&gt;，而是 &lt;code&gt;P = sched_min_granularity_ns * nr_running&lt;/code&gt;，如果 &lt;code&gt;nr_running &amp;lt;= sched_nr_latency&lt;/code&gt;，则 &lt;code&gt;P = sched_latency_ns&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在阿里云的Kubernetes节点上，这些参数配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_nr_migrate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_wakeup_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 24000000 / 10000000 = 2.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在阿里云普通的虚拟机上的参数如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@prod-tomcat-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@prod-tomcat-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 15000000 / 3000000 = 5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而在普通的CentOS Linux release 7.5.1804 (Core) 上的参数如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_nr_migrate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_wakeup_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 24000000 / 3000000 = 8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，阿里云的 Kubernetes 节点设置了更长的最小执行时间，在进程队列稍有等待(2.4) 的时候就开始保证每个进程的最小运行时间不少于 10 毫秒。&lt;/p&gt;
&lt;h3 id=&quot;运行和观察&quot;&gt;&lt;a href=&quot;#运行和观察&quot; class=&quot;headerlink&quot; title=&quot;运行和观察&quot;&gt;&lt;/a&gt;运行和观察&lt;/h3&gt;&lt;p&gt;部署这样一个 yaml POD：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;64Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;250m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;128Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;500m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;while true; do sleep 10; done&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  restartPolicy:&lt;/span&gt; Always&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到该容器内部的进程对应的CPU调度信息变化如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229360324.308323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             0.179610&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            31.190620&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229480327.896307&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             0.149504&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            33.325310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229520328.862396&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             1.531536&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            34.053116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 sum_exec_runtime 表示实际运行的物理时间。&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-借助-CFS-进行-CPU-管理&quot;&gt;&lt;a href=&quot;#Kubernetes-借助-CFS-进行-CPU-管理&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 借助 CFS 进行 CPU 管理&quot;&gt;&lt;/a&gt;Kubernetes 借助 CFS 进行 CPU 管理&lt;/h2&gt;&lt;h3 id=&quot;CFS-进行-CPU-资源限流-throtting-的原理&quot;&gt;&lt;a href=&quot;#CFS-进行-CPU-资源限流-throtting-的原理&quot; class=&quot;headerlink&quot; title=&quot;CFS 进行 CPU 资源限流(throtting) 的原理&quot;&gt;&lt;/a&gt;CFS 进行 CPU 资源限流(throtting) 的原理&lt;/h3&gt;&lt;p&gt;Kubernetes 的资源定义：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;64Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;250m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;128Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;500m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如里面的 CPU 需求，会被翻译成容器 runtime 的运行时参数，并最终变成 cgroups 和CFS 的参数配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.shares&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_quota_us&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_period_us&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一个默认的参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/sys/kernel/&lt;span class=&quot;built_in&quot;&gt;sched&lt;/span&gt;_latency_ns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以在这个节点上，正常压力下，系统的 CFS 调度周期是 24ms，CFS 重分配周期是 100ms，而该 POD 在一个重分配周期最多占用 50ms 的时间，在有压力的情况下，POD 可以占据的 CPU share 比例是 256。&lt;/p&gt;
&lt;p&gt;下面一个例子可以说明不同资源需求的 POD 容器是如何在 CFS 的调度下占用 CPU 资源的：&lt;br&gt;&lt;img src=&quot;/images/k8s/m-3.png&quot; alt=&quot;CPU资源配置和CFS调度&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，有如下系统配置情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFS 调度周期为 10ms，正常负载情况下，进程 ready 队列里面的进程在每 10ms 的间隔内都会保证被执行一次&lt;/li&gt;
&lt;li&gt;CFS 重分配周期为 100ms，用于保证一个进程的 limits 设置会被反映在每 100ms 的重分配周期内可以占用的 CPU 时间数，在多核系统中，limit 最大值可以是 CFS重分配周期*CPU核数&lt;/li&gt;
&lt;li&gt;该执行进程队列只有进程A和进程B两个进程&lt;/li&gt;
&lt;li&gt;进程A和B定义的 CPU share 占用都一样，所以在系统资源紧张的时候可以保证A和B进程都可以占用可用 CPU 资源的一半&lt;/li&gt;
&lt;li&gt;定义的 CFS 重分配周期都是 100ms&lt;/li&gt;
&lt;li&gt;进程A在 100ms 内最多占用 50ms，进程B在 100ms 内最多占用 20ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在一个 CFS 重分配周期(相当于10个 CFS 调度周期)内，进程队列的执行情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在前面的4个 CFS 调度周期内，进程A和B由于 share 值是一样的，所以每个 CFS 调度内(10ms)，进程A和B都会占用 5ms&lt;/li&gt;
&lt;li&gt;在第4个 CFS 调度周期结束的时候，在本 CFS 重分配周期内，进程B已经占用了 20ms，在剩下的8个 CFS 调度周期即 80ms 内，进程B都会被限流，一直到下一个 CFS 重分配周期内，进程B才可以继续占用 CPU&lt;/li&gt;
&lt;li&gt;在第5-7这3个 CFS 调度周期内，由于进程B被限流，所以进程A可以完全拥有这3个 CFS 调度的 CPU 资源，占用 30ms 的执行时间，这样在本 CFS 重分配周期内，进程A已经占用了50ms 的 CPU 时间，在后面剩下的3个 CFS 调度周期即后面的 30ms 内，进程A也会被限流，一直到下一个 CFS 重分配周期内，进程A才可以继续占用 CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果进程被限流了，可以在如下的路径看到：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /sys/fs/cgroup/cpu/kubepods/pod5326d6f4-789d-11ea-b093-fa163e23cb69/69336c973f9f414c3f9fdfbd90200b7083b35f4d54ce302a4f5&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;330f2889846/cpu.stat &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_periods 14001693&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_throttled 2160435&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;throttled_time 570069950532853&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;本文开头问题的原因分析&quot;&gt;&lt;a href=&quot;#本文开头问题的原因分析&quot; class=&quot;headerlink&quot; title=&quot;本文开头问题的原因分析&quot;&gt;&lt;/a&gt;本文开头问题的原因分析&lt;/h3&gt;&lt;p&gt;根据 3.1 描述的原理，很容易理解本文开通的告警信息的出现，是由于在某些特定的 CFS 重分配周期内，&lt;code&gt;kube-proxy&lt;/code&gt; 的 CPU 占用率超过了给它分配的 limits ，而参看 &lt;code&gt;kube-proxy daemonset&lt;/code&gt; 的配置，确实它的 limits 配置只有 200ms，这就意味着在默认的100ms 的 CFS 重调度周期内，它只能占用 20ms，所以在特定繁忙场景会有问题&lt;br&gt;&lt;img src=&quot;/images/k8s/m-4.png&quot; alt=&quot;resource limit&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.shares &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_period_us &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_quota_us &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：这里 cpu.shares 的计算方法如下：200x1024/1000~=204&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而这个问题的解决方案就是将 CPU limits 提高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Zalando 公司有一个分享《&lt;a href=&quot;https://www.youtube.com/watch?v=eBChCFD9hfs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimizing Kubernetes Resource Requests/Limits for Cost-Efficiency and Latency / Henning Jacobs&lt;/a&gt;》很好的讲述了 CPU 资源管理的问题，可以参考，这个演讲的PPT在这里可以找到。&lt;/p&gt;
&lt;p&gt;更具体问题分析和讨论还可以参考如下文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-monitoring/kubernetes-mixin/issues/108&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CPUThrottlingHigh false positives #108&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/67577&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS quotas can lead to unnecessary throttling #67577&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS Bandwidth Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overly aggressive CFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中《&lt;a href=&quot;https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overly aggressive CFS&lt;/a&gt;》里面还有几个小实验可以帮助大家更好的认识到CFS 进行 CPU m资源管控的特点：&lt;br&gt;&lt;img src=&quot;/images/k8s/m-5.png&quot; alt=&quot;cfs demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文作者：cloudvtech&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用Kubernetes的过程中，我们看到过这样一个告警信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[K8S]告警主题: CPUThrottlingHigh&lt;br&gt;告警级别: warning&lt;br&gt;告警类型: CPUThrottlingHigh&lt;br&gt;故障实例: xxxx&lt;br&gt;告警详情: 27% throttling of CPU in namespace kube-system for container kube-proxy in pod kube-proxy-9pj9j.&lt;br&gt;触发时间: 2020-05-08 17:34:17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个告警信息说明 &lt;code&gt;kube-proxy&lt;/code&gt; 容器被 &lt;code&gt;throttling&lt;/code&gt; 了，然而查看该容器的资源使用历史信息，发现该容器以及容器所在的节点的 CPU 资源使用率都不高：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/m-1.png&quot; alt=&quot;告警期间容器所在节点CPU使用率&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/m-2.png&quot; alt=&quot;告警期间kube-proxy的资源使用率&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过我们的分析，发现该告警实际上是和 Kubernetes 对于 CPU 资源的限制和管控机制有关。Kubernetes 依赖于容器的 &lt;code&gt;runtime&lt;/code&gt; 进行 CPU 资源的调度，而容器 &lt;code&gt;runtime&lt;/code&gt; 以 Docker 为例，是借助于 &lt;code&gt;cgroup&lt;/code&gt; 和 &lt;code&gt;CFS&lt;/code&gt; 调度机制进行资源管控。本文基于这个告警案例，首先分析了 &lt;code&gt;CFS&lt;/code&gt; 的基本原理，然后对于 Kubernetes 借助 &lt;code&gt;CFS&lt;/code&gt; 进行 CPU 资源的调度和管控方法进行了介绍，最后使用一个例子来分析 &lt;code&gt;CFS&lt;/code&gt; 的一些调度特性来解释这个告警的 &lt;code&gt;root cause&lt;/code&gt; 和解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="告警" scheme="http://team.jiunile.com/categories/kubernetes/%E5%91%8A%E8%AD%A6/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="告警" scheme="http://team.jiunile.com/tags/%E5%91%8A%E8%AD%A6/"/>
    
      <category term="cpu throttling" scheme="http://team.jiunile.com/tags/cpu-throttling/"/>
    
      <category term="cfs" scheme="http://team.jiunile.com/tags/cfs/"/>
    
  </entry>
  
</feed>
