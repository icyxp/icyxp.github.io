<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devops</title>
  <subtitle>网站架构|系统架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icyxp.github.io/"/>
  <updated>2016-07-15T09:57:50.000Z</updated>
  <id>http://icyxp.github.io/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用lsyncd实时同步文件</title>
    <link href="http://icyxp.github.io//blog/2016/07/lsyncd.html"/>
    <id>http://icyxp.github.io//blog/2016/07/lsyncd.html</id>
    <published>2016-07-15T09:30:00.000Z</published>
    <updated>2016-07-15T09:57:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Lysncd 实际上是lua语言封装了 inotify 和 rsync 工具，采用了 Linux 内核（2.6.13 及以后）里的 inotify 触发机制，然后通过rsync去差异同步，达到实时的效果。我认为它最令人称道的特性是，完美解决了 inotify + rsync海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。另外，它的配置方式很简单，lua本身就是一种配置语言，可读性非常强。lsyncd也有多种工作模式可以选择，本地目录cp，本地目录rsync，远程目录rsyncssh。&lt;/p&gt;
&lt;p&gt;实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/axkibe/lsyncd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/axkibe/lsyncd&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;使用-lsyncd-本地目录实时备份&quot;&gt;&lt;a href=&quot;#使用-lsyncd-本地目录实时备份&quot; class=&quot;headerlink&quot; title=&quot;使用 lsyncd 本地目录实时备份&quot;&gt;&lt;/a&gt;使用 lsyncd 本地目录实时备份&lt;/h2&gt;&lt;p&gt;这一节实现的功能是，本地目录source实时同步到另一个目录target，而在source下有大量的文件，并且有部分目录和临时文件不需要同步。&lt;/p&gt;
&lt;h3 id=&quot;安装lsyncd&quot;&gt;&lt;a href=&quot;#安装lsyncd&quot; class=&quot;headerlink&quot; title=&quot;安装lsyncd&quot;&gt;&lt;/a&gt;安装lsyncd&lt;/h3&gt;&lt;p&gt;安装&lt;code&gt;lsyncd&lt;/code&gt;极为简单，已经收录在ubuntu的官方镜像源里，直接通过&lt;code&gt;apt-get install lsyncd&lt;/code&gt;就可以。&lt;br&gt;在Redhat系（我的环境是CentOS 6.2 x86_64 ），可以手动去下载 &lt;a href=&quot;ftp://195.220.108.108/linux/fedora/linux/updates/21/x86_64/l/lsyncd-2.1.5-6.fc21.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lsyncd-2.1.5-6.fc21.x86_64.rpm&lt;/a&gt;，但首先你得安装两个依赖&lt;code&gt;yum install lua lua-devel&lt;/code&gt;。也可以通过在线安装，需要&lt;code&gt;epel-release&lt;/code&gt;扩展包：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install lsyncd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码编译安装&lt;/strong&gt;&lt;br&gt;从源码编译安装可以使用最新版的lsyncd程序，但必须要相应的依赖库文件和编译工具：&lt;code&gt;yum install lua lua-devel asciidoc cmake&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从 &lt;a href=&quot;http://code.google.com/p/lsyncd/downloads/list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;googlecode lsyncd&lt;/a&gt; 上下载的&lt;code&gt;lsyncd-2.1.5.tar.gz&lt;/code&gt;，直接&lt;code&gt;./configure、make &amp;amp;&amp;amp; make install&lt;/code&gt;就可以了。&lt;/p&gt;
&lt;p&gt;从github上下载&lt;a href=&quot;https://github.com/axkibe/lsyncd/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lsyncd-master.zip&lt;/a&gt; 的2.1.5版本使用的是 cmake 编译工具，无法&lt;code&gt;./configure&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uzip lsyncd-master.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; lsyncd-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lsyncd-2.1.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我这个版本编译时有个小bug，如果按照&lt;code&gt;INSTALL&lt;/code&gt;在    &lt;code&gt;build&lt;/code&gt;目录中make，会提示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[100%] Generating doc/lsyncd.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Updating the manpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2x: failed: &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; file not found: doc/lsyncd.1.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make[2]: *** [doc/lsyncd.1] Error 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make[1]: *** [CMakeFiles/manpage.dir/all] Error 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make: *** [all] Error 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法是要么直接在解压目录下cmake，不要&lt;code&gt;mkdir build&lt;/code&gt;，要么在&lt;code&gt;CMakeList.txt&lt;/code&gt;中搜索doc字符串，在前面加上&lt;code&gt;${PROJECT_SOURCE_DIR}&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;lsyncd-conf&quot;&gt;&lt;a href=&quot;#lsyncd-conf&quot; class=&quot;headerlink&quot; title=&quot;lsyncd.conf&quot;&gt;&lt;/a&gt;lsyncd.conf&lt;/h3&gt;&lt;p&gt;下面都是在编译安装的情况下操作。&lt;/p&gt;
&lt;h4 id=&quot;lsyncd同步配置&quot;&gt;&lt;a href=&quot;#lsyncd同步配置&quot; class=&quot;headerlink&quot; title=&quot;lsyncd同步配置&quot;&gt;&lt;/a&gt;lsyncd同步配置&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# cd /usr/local/lsyncd-2.1.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# mkdir etc var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# vi etc/lsyncd.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;settings &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile      =&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.log&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusFile   =&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.status&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inotifyMode  = &lt;span class=&quot;string&quot;&gt;&quot;CloseWrite&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxProcesses = 7,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- nodaemon =&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.rsync,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/dest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- excludeFrom = &lt;span class=&quot;string&quot;&gt;&quot;/etc/rsyncd.d/rsync_exclude.lst&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rsync     = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binary    = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/rsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        archive   = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compress  = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verbose   = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这启动 lsycnd 就可以完成实时同步了，默认的许多参数可以满足绝大部分需求，非常简单。&lt;/p&gt;
&lt;h4 id=&quot;lsyncd-conf配置选项说明&quot;&gt;&lt;a href=&quot;#lsyncd-conf配置选项说明&quot; class=&quot;headerlink&quot; title=&quot;lsyncd.conf配置选项说明&quot;&gt;&lt;/a&gt;lsyncd.conf配置选项说明&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;settings&lt;/strong&gt;&lt;br&gt;里面是全局设置，&lt;code&gt;--&lt;/code&gt;开头表示注释，下面是几个常用选项说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logfile&lt;/code&gt; 定义日志文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stausFile&lt;/code&gt; 定义状态文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nodaemon=true&lt;/code&gt; 表示不启用守护模式，默认&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statusInterval&lt;/code&gt; 将lsyncd的状态写入上面的statusFile的间隔，默认10秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inotifyMode&lt;/code&gt; 指定inotify监控的事件，默认是&lt;code&gt;CloseWrite&lt;/code&gt;，还可以是&lt;code&gt;Modify&lt;/code&gt;或&lt;code&gt;CloseWrite or Modify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxProcesses&lt;/code&gt; 同步进程的最大个数。假如同时有20个文件需要同步，而&lt;code&gt;maxProcesses = 8&lt;/code&gt;，则最大能看到有8个rysnc进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxDelays&lt;/code&gt; 累计到多少所监控的事件激活一次同步，即使后面的&lt;code&gt;delay&lt;/code&gt;延迟时间还未到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;sync&lt;/strong&gt;&lt;br&gt;里面是定义同步参数，可以继续使用&lt;code&gt;maxDelays&lt;/code&gt;来重写settings的全局变量。一般第一个参数指定lsyncd以什么模式运行：&lt;code&gt;rsync&lt;/code&gt;、&lt;code&gt;rsyncssh&lt;/code&gt;、&lt;code&gt;direct&lt;/code&gt;三种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;default.rsync&lt;/code&gt;：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；&lt;br&gt;&lt;code&gt;default.direct&lt;/code&gt; ：本地目录间同步，使用&lt;code&gt;cp&lt;/code&gt;、&lt;code&gt;rm&lt;/code&gt;等命令完成差异文件备份；&lt;br&gt;&lt;code&gt;default.rsyncssh&lt;/code&gt; ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source&lt;/code&gt; 同步的源目录，使用绝对路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 定义目的地址.对应不同的模式有几种写法：&lt;br&gt;&lt;code&gt;/tmp/dest&lt;/code&gt; ：本地目录同步，可用于&lt;code&gt;direct&lt;/code&gt;和&lt;code&gt;rsync&lt;/code&gt;模式&lt;br&gt;&lt;code&gt;172.29.88.223:/tmp/dest&lt;/code&gt; ：同步到远程服务器目录，可用于&lt;code&gt;rsync&lt;/code&gt;和&lt;code&gt;rsyncssh&lt;/code&gt;模式，拼接的命令类似于&lt;code&gt;/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET&lt;/code&gt;，剩下的就是rsync的内容了，比如指定username，免密码同步&lt;br&gt;&lt;code&gt;172.29.88.223::module&lt;/code&gt; ：同步到远程服务器目录，用于&lt;code&gt;rsync&lt;/code&gt;模式&lt;br&gt;三种模式的示例会在后面给出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;init&lt;/code&gt; 这是一个优化选项，当&lt;code&gt;init = false&lt;/code&gt;，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt; 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;excludeFrom&lt;/code&gt; 排除选项，后面指定排除的列表文件，如&lt;code&gt;excludeFrom = &amp;quot;/etc/lsyncd.exclude&amp;quot;&lt;/code&gt;，如果是简单的排除，可以使用&lt;code&gt;exclude = LIST&lt;/code&gt;。&lt;br&gt;这里的排除规则写法与原生rsync有点不同，更为简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控路径里的任何部分匹配到一个文本，都会被排除，例如&lt;code&gt;/bin/foo/bar&lt;/code&gt;可以匹配规则&lt;code&gt;foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果规则以斜线&lt;code&gt;/&lt;/code&gt;开头，则从头开始要匹配全部&lt;/li&gt;
&lt;li&gt;如果规则以&lt;code&gt;/&lt;/code&gt;结尾，则要匹配监控路径的末尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;匹配任何字符，但不包括&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;匹配0或多个字符，但不包括&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;匹配0或多个字符，可以是&lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delete&lt;/code&gt; 为了保持target与souce完全同步，Lsyncd默认会&lt;code&gt;delete = true&lt;/code&gt;来允许同步删除。它除了&lt;code&gt;false&lt;/code&gt;，还有&lt;code&gt;startup&lt;/code&gt;、&lt;code&gt;running&lt;/code&gt;值，请参考 &lt;a href=&quot;https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%204%20Config%20%E2%80%96%20Default%20Behavior&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lsyncd 2.1.x ‖ Layer 4 Config ‖ Default Behavior&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;rsync&lt;/strong&gt;&lt;br&gt;（提示一下，&lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;exclude&lt;/code&gt;本来都是&lt;strong&gt;rsync&lt;/strong&gt;的选项，上面是配置在sync中的，我想这样做的原因是为了减少rsync的开销）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bwlimit&lt;/code&gt; 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compress&lt;/code&gt; 压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perms&lt;/code&gt; 默认保留文件权限。&lt;/li&gt;
&lt;li&gt;其它rsync的选项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它还有rsyncssh模式独有的配置项，如&lt;code&gt;host&lt;/code&gt;、&lt;code&gt;targetdir&lt;/code&gt;、&lt;code&gt;rsync_path&lt;/code&gt;、&lt;code&gt;password_file&lt;/code&gt;，见后文示例。&lt;code&gt;rsyncOps={&amp;quot;-avz&amp;quot;,&amp;quot;--delete&amp;quot;}&lt;/code&gt;这样的写法在2.1.*版本已经不支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lsyncd.conf&lt;/code&gt;可以有多个&lt;code&gt;sync&lt;/code&gt;，各自的source，各自的target，各自的模式，互不影响。&lt;/p&gt;
&lt;h3 id=&quot;启动lsyncd&quot;&gt;&lt;a href=&quot;#启动lsyncd&quot; class=&quot;headerlink&quot; title=&quot;启动lsyncd&quot;&gt;&lt;/a&gt;启动lsyncd&lt;/h3&gt;&lt;p&gt;使用命令加载配置文件，启动守护进程，自动同步目录操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lsyncd -log Exec /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lsyncd-2.1.5/etc/lsyncd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;lsyncd-conf其它模式示例&quot;&gt;&lt;a href=&quot;#lsyncd-conf其它模式示例&quot; class=&quot;headerlink&quot; title=&quot;lsyncd.conf其它模式示例&quot;&gt;&lt;/a&gt;lsyncd.conf其它模式示例&lt;/h3&gt;&lt;p&gt;以下配置本人都已经过验证可行，必须根据实际需要裁剪配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;settings &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile =&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.log&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statusFile =&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.status&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inotifyMode = &lt;span class=&quot;string&quot;&gt;&quot;CloseWrite&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxProcesses = 8,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- I. 本地目录同步，direct：cp/rm/mv。 适用：500+万文件，变动不大&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.direct,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/dest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delay = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxProcesses = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- II. 本地目录同步，rsync模式：rsync&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.rsync,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/dest1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    excludeFrom = &lt;span class=&quot;string&quot;&gt;&quot;/etc/rsyncd.d/rsync_exclude.lst&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rsync     = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binary = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/rsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        archive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compress = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bwlimit   = 2000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- III. 远程目录同步，rsync模式 + rsyncd daemon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.rsync,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target    = &lt;span class=&quot;string&quot;&gt;&quot;syncuser@172.29.88.223::module1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete=&lt;span class=&quot;string&quot;&gt;&quot;running&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude = &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;.*&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;.tmp&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delay = 30,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rsync     = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binary = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/rsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        archive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compress = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verbose   = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        password_file = &lt;span class=&quot;string&quot;&gt;&quot;/etc/rsyncd.d/rsync.pwd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _extra    = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;--bwlimit=200&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- IV. 远程目录同步，rsync模式 + ssh shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.rsync,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target    = &lt;span class=&quot;string&quot;&gt;&quot;172.29.88.223:/tmp/dest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- target    = &lt;span class=&quot;string&quot;&gt;&quot;root@172.29.88.223:/remote/dest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- 上面target，注意如果是普通用户，必须拥有写权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxDelays = 5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delay = 30,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- init = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rsync     = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binary = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/rsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        archive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compress = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bwlimit   = 2000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -- rsh = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/ssh -p 22 -o StrictHostKeyChecking=no&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -- 如果要指定其它端口，请用上面的rsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- V. 远程目录同步，rsync模式 + rsyncssh，效果与上面相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default.rsyncssh,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;    = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/src2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host      = &lt;span class=&quot;string&quot;&gt;&quot;172.29.88.223&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    targetdir = &lt;span class=&quot;string&quot;&gt;&quot;/remote/dir&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    excludeFrom = &lt;span class=&quot;string&quot;&gt;&quot;/etc/rsyncd.d/rsync_exclude.lst&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- maxDelays = 5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delay = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -- init = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rsync    = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binary = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/rsync&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        archive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compress = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verbose   = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _extra = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;--bwlimit=2000&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ssh      = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        port  =  1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的内容几乎涵盖了所有同步的模式，其中第III个要求像rsync一样配置rsyncd服务端，见本文开头。第IV、V配置ssh方式同步，达到的效果相同，但实际同步时你会发现每次同步都会提示输入ssh的密码，可以通过以下方法解决：&lt;/p&gt;
&lt;p&gt;在远端被同步的服务器上开启ssh无密码登录，请注意用户身份：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user$ ssh-keygen -t rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一路回车...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user$ cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;id_rsa&lt;/code&gt;私钥拷贝到执行lsyncd的机器上&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user$ chmod 600 ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;测试能否无密码登录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user$ ssh user@172.29.88.223&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;lsyncd的其它功能&quot;&gt;&lt;a href=&quot;#lsyncd的其它功能&quot; class=&quot;headerlink&quot; title=&quot;lsyncd的其它功能&quot;&gt;&lt;/a&gt;lsyncd的其它功能&lt;/h2&gt;&lt;p&gt;&lt;code&gt;lsyncd&lt;/code&gt;的功能不仅仅是同步，官方手册 &lt;a href=&quot;https://github.com/axkibe/lsyncd/wiki/Lsyncd%202.1.x%20%E2%80%96%20Layer%202%20Config%20%E2%80%96%20Advanced%20onAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lsyncd 2.1.x ‖ Layer 2 Config ‖ Advanced onAction&lt;/a&gt; 高级功能提到，还可以监控某个目录下的文件，根据触发的事件自己定义要执行的命令，example是监控某个某个目录，只要是有jpg、gif、png格式的文件参数，就把它们转成pdf，然后同步到另一个目录。正好在我运维的一个项目中有这个需求，现在都是在java代码里转换，还容易出现异常，通过lsyncd可以代替这样的功能。但，门槛在于要会一点点lua语言（根据官方example还是可以写出来）。&lt;/p&gt;
&lt;p&gt;另外偶然想到个问题，同时设置了&lt;code&gt;maxDelays&lt;/code&gt;和&lt;code&gt;delay&lt;/code&gt;，当监控目录一直没有文件变化了，也会发生同步操作，虽然没有可rsync的文件。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://seanlook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://seanlook.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Lysncd 实际上是lua语言封装了 inotify 和 rsync 工具，采用了 Linux 内核（2.6.13 及以后）里的 inotify 触发机制，然后通过rsync去差异同步，达到实时的效果。我认为它最令人称道的特性是，完美解决了 inotify + rsync海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。另外，它的配置方式很简单，lua本身就是一种配置语言，可读性非常强。lsyncd也有多种工作模式可以选择，本地目录cp，本地目录rsync，远程目录rsyncssh。&lt;/p&gt;
&lt;p&gt;实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/axkibe/lsyncd&quot;&gt;https://github.com/axkibe/lsyncd&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;使用-lsyncd-本地目录实时备份&quot;&gt;&lt;a href=&quot;#使用-lsyncd-本地目录实时备份&quot; class=&quot;headerlink&quot; title=&quot;使用 lsyncd 本地目录实时备份&quot;&gt;&lt;/a&gt;使用 lsyncd 本地目录实时备份&lt;/h2&gt;&lt;p&gt;这一节实现的功能是，本地目录source实时同步到另一个目录target，而在source下有大量的文件，并且有部分目录和临时文件不需要同步。&lt;/p&gt;
&lt;h3 id=&quot;安装lsyncd&quot;&gt;&lt;a href=&quot;#安装lsyncd&quot; class=&quot;headerlink&quot; title=&quot;安装lsyncd&quot;&gt;&lt;/a&gt;安装lsyncd&lt;/h3&gt;&lt;p&gt;安装&lt;code&gt;lsyncd&lt;/code&gt;极为简单，已经收录在ubuntu的官方镜像源里，直接通过&lt;code&gt;apt-get install lsyncd&lt;/code&gt;就可以。&lt;br&gt;在Redhat系（我的环境是CentOS 6.2 x86_64 ），可以手动去下载 &lt;a href=&quot;ftp://195.220.108.108/linux/fedora/linux/updates/21/x86_64/l/lsyncd-2.1.5-6.fc21.x86_64.rpm&quot;&gt;lsyncd-2.1.5-6.fc21.x86_64.rpm&lt;/a&gt;，但首先你得安装两个依赖&lt;code&gt;yum install lua lua-devel&lt;/code&gt;。也可以通过在线安装，需要&lt;code&gt;epel-release&lt;/code&gt;扩展包：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install lsyncd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码编译安装&lt;/strong&gt;&lt;br&gt;从源码编译安装可以使用最新版的lsyncd程序，但必须要相应的依赖库文件和编译工具：&lt;code&gt;yum install lua lua-devel asciidoc cmake&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从 &lt;a href=&quot;http://code.google.com/p/lsyncd/downloads/list&quot;&gt;googlecode lsyncd&lt;/a&gt; 上下载的&lt;code&gt;lsyncd-2.1.5.tar.gz&lt;/code&gt;，直接&lt;code&gt;./configure、make &amp;amp;&amp;amp; make install&lt;/code&gt;就可以了。&lt;/p&gt;
&lt;p&gt;从github上下载&lt;a href=&quot;https://github.com/axkibe/lsyncd/archive/master.zip&quot;&gt;lsyncd-master.zip&lt;/a&gt; 的2.1.5版本使用的是 cmake 编译工具，无法&lt;code&gt;./configure&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uzip lsyncd-master.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; lsyncd-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake -DCMAKE_INSTALL_PREFIX=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lsyncd-2.1.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我这个版本编译时有个小bug，如果按照&lt;code&gt;INSTALL&lt;/code&gt;在    &lt;code&gt;build&lt;/code&gt;目录中make，会提示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[100%] Generating doc/lsyncd.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Updating the manpage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2x: failed: &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; file not found: doc/lsyncd.1.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make[2]: *** [doc/lsyncd.1] Error 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make[1]: *** [CMakeFiles/manpage.dir/all] Error 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make: *** [all] Error 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决办法是要么直接在解压目录下cmake，不要&lt;code&gt;mkdir build&lt;/code&gt;，要么在&lt;code&gt;CMakeList.txt&lt;/code&gt;中搜索doc字符串，在前面加上&lt;code&gt;${PROJECT_SOURCE_DIR}&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="实时同步" scheme="http://icyxp.github.io/categories/%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
    
    
      <category term="lsyncd" scheme="http://icyxp.github.io/tags/lsyncd/"/>
    
      <category term="同步" scheme="http://icyxp.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库开发规范</title>
    <link href="http://icyxp.github.io//blog/2016/07/mysq-develop-standard.html"/>
    <id>http://icyxp.github.io//blog/2016/07/mysq-develop-standard.html</id>
    <published>2016-07-15T07:15:00.000Z</published>
    <updated>2016-07-15T07:55:32.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;h3 id=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;a href=&quot;#库名、表名、字段名必须使用小写字母，并采用下划线分割&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;/a&gt;库名、表名、字段名必须使用小写字母，并采用下划线分割&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL有配置参数lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较。&lt;/li&gt;
&lt;li&gt;如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。&lt;/li&gt;
&lt;li&gt;字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段。&lt;/li&gt;
&lt;li&gt;为了统一规范， 库名、表名、字段名使用小写字母。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot;&gt;&lt;a href=&quot;#库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot; class=&quot;headerlink&quot; title=&quot;库名以 d 开头，表名以 t 开头，字段名以 f_ 开头&quot;&gt;&lt;/a&gt;库名以 d 开头，表名以 t 开头，字段名以 f_ 开头&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比如表 &lt;code&gt;t_crm_relation&lt;/code&gt;，中间的 crm 代表业务模块名&lt;/li&gt;
&lt;li&gt;视图以&lt;code&gt;view_&lt;/code&gt;开头，事件以&lt;code&gt;event_&lt;/code&gt;开头，触发器以&lt;code&gt;trig_&lt;/code&gt;开头，存储过程以&lt;code&gt;proc_&lt;/code&gt;开头，函数以&lt;code&gt;func_&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;普通索引以&lt;code&gt;idx_col1_col2&lt;/code&gt;命名，唯一索引以&lt;code&gt;uk_col1_col2&lt;/code&gt;命名（可去掉f_公共部分）。如 &lt;code&gt;idx_companyid_corpid_contacttime&lt;/code&gt;(f_company_id, f_corp_id, f_contact_time)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;a href=&quot;#库名、表名、字段名禁止超过32个字符，需见名知意&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;/a&gt;库名、表名、字段名禁止超过32个字符，需见名知意&lt;/h3&gt;&lt;p&gt;库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过32个字符&lt;/p&gt;
&lt;h3 id=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;a href=&quot;#临时库、表名须以tmp加日期为后缀&quot; class=&quot;headerlink&quot; title=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;/a&gt;临时库、表名须以tmp加日期为后缀&lt;/h3&gt;&lt;p&gt;如 t_crm_relation_tmp0425。备份表也类似，形如 &lt;code&gt;_bak20160425&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;按日期时间分表须符合-YYYY-MM-DD-格式&quot;&gt;&lt;a href=&quot;#按日期时间分表须符合-YYYY-MM-DD-格式&quot; class=&quot;headerlink&quot; title=&quot;按日期时间分表须符合_YYYY[MM][DD]格式&quot;&gt;&lt;/a&gt;按日期时间分表须符合_YYYY[MM][DD]格式&lt;/h3&gt;&lt;p&gt;这也是为将来有可能分表做准备的，比如&lt;code&gt;t_crm_ec_record_201403&lt;/code&gt;，但像 t_crm_contact_at201506就打破了这种规范。&lt;br&gt;不具有时间特性的，直接以 &lt;code&gt;t_tbname_001&lt;/code&gt; 这样的方式命名。&lt;/p&gt;
&lt;h2 id=&quot;库表基础规范&quot;&gt;&lt;a href=&quot;#库表基础规范&quot; class=&quot;headerlink&quot; title=&quot;库表基础规范&quot;&gt;&lt;/a&gt;库表基础规范&lt;/h2&gt;&lt;h3 id=&quot;使用Innodb存储引擎&quot;&gt;&lt;a href=&quot;#使用Innodb存储引擎&quot; class=&quot;headerlink&quot; title=&quot;使用Innodb存储引擎&quot;&gt;&lt;/a&gt;使用Innodb存储引擎&lt;/h3&gt;&lt;p&gt;5.5版本开始mysql默认存储引擎就是InnoDB，5.7版本开始，系统表都放弃MyISAM了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;表字符集统一使用UTF8&quot;&gt;&lt;a href=&quot;#表字符集统一使用UTF8&quot; class=&quot;headerlink&quot; title=&quot;表字符集统一使用UTF8&quot;&gt;&lt;/a&gt;表字符集统一使用UTF8&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;UTF8字符集存储汉字占用3个字节，存储英文字符占用一个字节&lt;/li&gt;
&lt;li&gt;校对字符集使用默认的 utf8_general_ci&lt;/li&gt;
&lt;li&gt;连接的客户端也使用utf8，建立连接时指定charset或SET NAMES UTF8;。（对于已经在项目中长期使用latin1的，救不了了）&lt;/li&gt;
&lt;li&gt;如果遇到EMOJ等表情符号的存储需求，可申请使用UTF8MB4字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;所有表都要添加注释&quot;&gt;&lt;a href=&quot;#所有表都要添加注释&quot; class=&quot;headerlink&quot; title=&quot;所有表都要添加注释&quot;&gt;&lt;/a&gt;所有表都要添加注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;尽量给字段也添加注释&lt;/li&gt;
&lt;li&gt;类status型需指明主要值的含义，如”0-离线，1-在线”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;控制单表字段数量&quot;&gt;&lt;a href=&quot;#控制单表字段数量&quot; class=&quot;headerlink&quot; title=&quot;控制单表字段数量&quot;&gt;&lt;/a&gt;控制单表字段数量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单表字段数上限30左右，再多的话考虑垂直分表，一是冷热数据分离，二是大字段分离，三是常在一起做条件和返回列的不分离。&lt;/li&gt;
&lt;li&gt;表字段控制少而精，可以提高IO效率，内存缓存更多有效数据，从而提高响应速度和并发能力，后续 alter table 也更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;所有表都必须要显式指定主键&quot;&gt;&lt;a href=&quot;#所有表都必须要显式指定主键&quot; class=&quot;headerlink&quot; title=&quot;所有表都必须要显式指定主键&quot;&gt;&lt;/a&gt;所有表都必须要显式指定主键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主键尽量采用自增方式，InnoDB表实际是一棵索引组织表，顺序存储可以提高存取效率，充分利用磁盘空间。还有对一些复杂查询可能需要自连接来优化时需要用到。&lt;/li&gt;
&lt;li&gt;需要全局唯一主键时，使用外部发号器ticket server（建设中）&lt;/li&gt;
&lt;li&gt;如果没有主键或唯一索引，update/delete是通过所有字段来定位操作的行，相当于每行就是一次全表扫描&lt;/li&gt;
&lt;li&gt;少数情况可以使用联合唯一主键，需与DBA协商&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不强制使用外键参考&quot;&gt;&lt;a href=&quot;#不强制使用外键参考&quot; class=&quot;headerlink&quot; title=&quot;不强制使用外键参考&quot;&gt;&lt;/a&gt;不强制使用外键参考&lt;/h3&gt;&lt;p&gt;即使2个表的字段有明确的外键参考关系，也不使用 FOREIGN KEY ，因为新纪录会去主键表做校验，影响性能。&lt;/p&gt;
&lt;h3 id=&quot;适度使用存储过程、视图，禁止使用触发器、事件&quot;&gt;&lt;a href=&quot;#适度使用存储过程、视图，禁止使用触发器、事件&quot; class=&quot;headerlink&quot; title=&quot;适度使用存储过程、视图，禁止使用触发器、事件&quot;&gt;&lt;/a&gt;适度使用存储过程、视图，禁止使用触发器、事件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;存储过程（procedure）虽然可以简化业务端代码，在传统企业写复杂逻辑时可能会用到，而在互联网企业变更是很频繁的，在分库分表的情况下要升级一个存储过程相当麻烦。又因为它是不记录log的，所以也不方便debug性能问题。如果使用过程，一定考虑如果执行失败的情况。&lt;/li&gt;
&lt;li&gt;使用视图一定程度上也是为了降低代码里SQL的复杂度，但有时候为了视图的通用性会损失性能（比如返回不必要的字段）。&lt;/li&gt;
&lt;li&gt;触发器（trigger）也是同样，但也不应该通过它去约束数据的强一致性，mysql只支持“基于行的触发”，也就是说，触发器始终是针对一条记录的，而不是针对整个sql语句的，如果变更的数据集非常大的话，效率会很低。掩盖一条sql背后的工作，一旦出现问题将是灾难性的，但又很难快速分析和定位。再者需要ddl时无法使用pt-osc工具。放在transaction执行。&lt;/li&gt;
&lt;li&gt;事件（event）也是一种偷懒的表现，目前已经遇到数次由于定时任务执行失败影响业务的情况，而且mysql无法对它做失败预警。建立专门的 job scheduler 平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;单表数据量控制在5000w以内&quot;&gt;&lt;a href=&quot;#单表数据量控制在5000w以内&quot; class=&quot;headerlink&quot; title=&quot;单表数据量控制在5000w以内&quot;&gt;&lt;/a&gt;单表数据量控制在5000w以内&lt;/h3&gt;&lt;h3 id=&quot;数据库中不允许存储明文密码&quot;&gt;&lt;a href=&quot;#数据库中不允许存储明文密码&quot; class=&quot;headerlink&quot; title=&quot;数据库中不允许存储明文密码&quot;&gt;&lt;/a&gt;数据库中不允许存储明文密码&lt;/h3&gt;&lt;h2 id=&quot;字段规范&quot;&gt;&lt;a href=&quot;#字段规范&quot; class=&quot;headerlink&quot; title=&quot;字段规范&quot;&gt;&lt;/a&gt;字段规范&lt;/h2&gt;&lt;h3 id=&quot;char、varchar、text等字符串类型定义&quot;&gt;&lt;a href=&quot;#char、varchar、text等字符串类型定义&quot; class=&quot;headerlink&quot; title=&quot;char、varchar、text等字符串类型定义&quot;&gt;&lt;/a&gt;char、varchar、text等字符串类型定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于长度基本固定的列，如果该列恰好更新又特别频繁，适合char&lt;/li&gt;
&lt;li&gt;varchar虽然存储变长字符串，但不可太小也不可太大。UTF8最多能存21844个汉字，或65532个英文&lt;/li&gt;
&lt;li&gt;varbinary(M)保存的是二进制字符串，它保存的是字节而不是字符，所以没有字符集的概念，M长度0-255（字节）。只用于排序或比较时大小写敏感的类型，不包括密码存储&lt;/li&gt;
&lt;li&gt;TEXT类型与VARCHAR都类似，存储可变长度，最大限制也是2^16，但是它20bytes以后的内容是在数据页以外的空间存储（row_format=dynamic），对它的使用需要多一次寻址，没有默认值。&lt;br&gt;一般用于存放容量平均都很大、操作没有其它字段那样频繁的值。&lt;br&gt;网上部分文章说要避免使用text和blob，要知道如果纯用varchar可能会导致行溢出，效果差不多，但因为每行占用字节数过多，会导致buffer_pool能缓存的数据行、页下降。另外text和blob上面一般不会去建索引，而是利用sphinx之类的第三方全文搜索引擎，如果确实要创建（前缀）索引，那就会影响性能。凡事看具体场景。&lt;br&gt;另外尽可能把text/blob拆到另一个表中&lt;/li&gt;
&lt;li&gt;BLOB可以看出varbinary的扩展版本，内容以二进制字符串存储，无字符集，区分大小写，有一种经常提但不用的场景：不要在数据库里存储图片。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;int、tinyint、decimal等数字类型定义&quot;&gt;&lt;a href=&quot;#int、tinyint、decimal等数字类型定义&quot; class=&quot;headerlink&quot; title=&quot;int、tinyint、decimal等数字类型定义&quot;&gt;&lt;/a&gt;int、tinyint、decimal等数字类型定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用tinyint来代替 enum和boolean&lt;br&gt;ENUM类型在需要修改或增加枚举值时，需要在线DDL，成本较高；ENUM列值如果含有数字类型，可能会引起默认值混淆&lt;br&gt;tinyint使用1个字节，一般用于status,type,flag的列&lt;/li&gt;
&lt;li&gt;建议使用 UNSIGNED 存储非负数值&lt;br&gt;相比不使用 unsigned，可以扩大一倍使用数值范围&lt;/li&gt;
&lt;li&gt;int使用固定4个字节存储，int(11)与int(4)只是显示宽度的区别&lt;/li&gt;
&lt;li&gt;使用Decimal 代替float/double存储精确浮点数&lt;br&gt;对于货币、金额这样的类型，使用decimal，如 decimal(9,2)。float默认只能能精确到6位有效数字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;timestamp与datetime选择&quot;&gt;&lt;a href=&quot;#timestamp与datetime选择&quot; class=&quot;headerlink&quot; title=&quot;timestamp与datetime选择&quot;&gt;&lt;/a&gt;timestamp与datetime选择&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;datetime 和 timestamp类型所占的存储空间不同，前者8个字节，后者4个字节，这样造成的后果是两者能表示的时间范围不同。前者范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59，后者范围为 1970-01-01 08:00:01 到 2038-01-19 11:14:07 。所以 TIMESTAMP 支持的范围比 DATATIME 要小。&lt;/li&gt;
&lt;li&gt;timestamp可以在insert/update行时，自动更新时间字段（如 f_set_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP），但一个表只能有一个这样的定义。&lt;/li&gt;
&lt;li&gt;timestamp显示与时区有关，内部总是以 UTC 毫秒 来存的。还受到严格模式的限制&lt;/li&gt;
&lt;li&gt;优先使用timestamp，datetime也没问题&lt;/li&gt;
&lt;li&gt;where条件里不要对时间列上使用时间函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;建议字段都定义为NOT-NULL&quot;&gt;&lt;a href=&quot;#建议字段都定义为NOT-NULL&quot; class=&quot;headerlink&quot; title=&quot;建议字段都定义为NOT NULL&quot;&gt;&lt;/a&gt;建议字段都定义为NOT NULL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果是索引字段，一定要定义为not null 。因为null值会影响cordinate统计，影响优化器对索引的选择&lt;/li&gt;
&lt;li&gt;如果不能保证insert时一定有值过来，定义时使用default ‘’ ，或 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;同一意义的字段定义必须相同&quot;&gt;&lt;a href=&quot;#同一意义的字段定义必须相同&quot; class=&quot;headerlink&quot; title=&quot;同一意义的字段定义必须相同&quot;&gt;&lt;/a&gt;同一意义的字段定义必须相同&lt;/h3&gt;&lt;p&gt;比如不同表中都有 f_user_id 字段，那么它的类型、字段长度要设计成一样&lt;/p&gt;
&lt;h2 id=&quot;索引规范&quot;&gt;&lt;a href=&quot;#索引规范&quot; class=&quot;headerlink&quot; title=&quot;索引规范&quot;&gt;&lt;/a&gt;索引规范&lt;/h2&gt;&lt;h3 id=&quot;任何新的select-update-delete上线，都要先explain，看索引使用情况&quot;&gt;&lt;a href=&quot;#任何新的select-update-delete上线，都要先explain，看索引使用情况&quot; class=&quot;headerlink&quot; title=&quot;任何新的select,update,delete上线，都要先explain，看索引使用情况&quot;&gt;&lt;/a&gt;任何新的select,update,delete上线，都要先explain，看索引使用情况&lt;/h3&gt;&lt;p&gt;尽量避免extra列出现：Using File Sort，Using Temporary，rows超过1000的要谨慎上线。&lt;br&gt;&lt;strong&gt;&lt;code&gt;explain解读&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;：ALL, index, range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;possible_keys&lt;/code&gt;：指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;：表示MySQL实际决定使用的键（索引）&lt;br&gt;如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;：表示选择 key 列上的索引，哪些列或常量被用于查找索引列上的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt;：根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Extra&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Using temporary&lt;/code&gt;：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Using filesort&lt;/code&gt;：MySQL中无法利用索引完成的排序操作称为“文件排序”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;索引个数限制&quot;&gt;&lt;a href=&quot;#索引个数限制&quot; class=&quot;headerlink&quot; title=&quot;索引个数限制&quot;&gt;&lt;/a&gt;索引个数限制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;索引是双刃剑，会增加维护负担，增大IO压力，索引占用空间是成倍增加的&lt;/li&gt;
&lt;li&gt;单张表的索引数量控制在5个以内，或不超过表字段个数的20%。若单张表多个字段在查询需求上都要单独用到索引，需要经过DBA评估。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;避免冗余索引&quot;&gt;&lt;a href=&quot;#避免冗余索引&quot; class=&quot;headerlink&quot; title=&quot;避免冗余索引&quot;&gt;&lt;/a&gt;避免冗余索引&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;InnoDB表是一棵索引组织表，主键是和数据放在一起的聚集索引，普通索引最终指向的是主键地址，所以把主键做最后一列是多余的。如f_crm_id作为主键，联合索引(f_user_id,f_crm_id)上的f_crm_id就完全多余&lt;/li&gt;
&lt;li&gt;(a,b,c)、(a,b)，后者为冗余索引。可以利用前缀索引来达到加速目的，减轻维护负担&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;没有特殊要求，使用自增id作为主键&quot;&gt;&lt;a href=&quot;#没有特殊要求，使用自增id作为主键&quot; class=&quot;headerlink&quot; title=&quot;没有特殊要求，使用自增id作为主键&quot;&gt;&lt;/a&gt;没有特殊要求，使用自增id作为主键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主键是一种聚集索引，顺序写入。组合唯一索引作为主键的话，是随机写入，适合写少读多的表&lt;/li&gt;
&lt;li&gt;主键不允许更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;索引尽量建在选择性高的列上&quot;&gt;&lt;a href=&quot;#索引尽量建在选择性高的列上&quot; class=&quot;headerlink&quot; title=&quot;索引尽量建在选择性高的列上&quot;&gt;&lt;/a&gt;索引尽量建在选择性高的列上&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不在低基数列上建立索引，例如性别、类型。但有一种情况，idx_feedbackid_type (f_feedback_id,f_type)，如果经常用 f_type=1 比较，而且能过滤掉90%行，那这个组合索引就值得创建。有时候同样的查询语句，由于条件取值不同导致使用不同的索引，也是这个道理。&lt;/li&gt;
&lt;li&gt;索引选择性计算方法（基数 ÷ 数据行数）&lt;br&gt;Selectivity = Cardinality / Total Rows = select count(distinct col1)/count(*) from tbname，越接近1说明col1上使用索引的过滤效果越好&lt;/li&gt;
&lt;li&gt;走索引扫描行数超过30%时，改全表扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;最左前缀原则&quot;&gt;&lt;a href=&quot;#最左前缀原则&quot; class=&quot;headerlink&quot; title=&quot;最左前缀原则&quot;&gt;&lt;/a&gt;最左前缀原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;mysql使用联合索引时，从左向右匹配，遇到断开或者范围查询时，无法用到后续的索引列&lt;br&gt;比如索引idx_c1_c2_c3 (c1,c2,c3)，相当于创建了(c1)、(c1,c2)、(c1,c2,c3)三个索引，where条件包含上面三种情况的字段比较则可以用到索引，但像 where c1=a and c3=c 只能用到c1列的索引，像 c2=b and c3=c等情况就完全用不到这个索引&lt;/li&gt;
&lt;li&gt;遇到范围查询(&amp;gt;、&amp;lt;、between、like)也会停止索引匹配，比如 c1=a and c2 &amp;gt; 2 and c3=c，只有c1,c2列上的比较能用到索引，(c1,c2,c3)排列的索引才可能会都用上&lt;/li&gt;
&lt;li&gt;where条件里面字段的顺序与索引顺序无关，mysql优化器会自动调整顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;前缀索引&quot;&gt;&lt;a href=&quot;#前缀索引&quot; class=&quot;headerlink&quot; title=&quot;前缀索引&quot;&gt;&lt;/a&gt;前缀索引&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对超过30个字符长度的列创建索引时，考虑使用前缀索引，如 idx_cs_guid2 (f_cs_guid(26))表示截取前26个字符做索引，既可以提高查找效率，也可以节省空间&lt;/li&gt;
&lt;li&gt;前缀索引也有它的缺点是，如果在该列上 ORDER BY 或 GROUP BY 时无法使用索引，也不能把它们用作覆盖索引(Covering Index)&lt;/li&gt;
&lt;li&gt;如果在varbinary或blob这种以二进制存储的列上建立前缀索引，要考虑字符集，括号里表示的是字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;合理使用覆盖索引减少IO&quot;&gt;&lt;a href=&quot;#合理使用覆盖索引减少IO&quot; class=&quot;headerlink&quot; title=&quot;合理使用覆盖索引减少IO&quot;&gt;&lt;/a&gt;合理使用覆盖索引减少IO&lt;/h3&gt;&lt;p&gt;INNODB存储引擎中，secondary index(非主键索引，又称为辅助索引、二级索引)没有直接存储行地址，而是存储主键值。&lt;br&gt;如果用户需要查询secondary index中所不包含的数据列，则需要先通过secondary index查找到主键值，然后再通过主键查询到其他数据列，因此需要查询两次。覆盖索引则可以在一个索引中获取所有需要的数据列，从而避免回表进行二次查找，节省IO因此效率较高。&lt;br&gt;例如SELECT email，uid FROM user_email WHERE uid=xx，如果uid不是主键，适当时候可以将索引添加为index(uid，email)，以获得性能提升。&lt;/p&gt;
&lt;h3 id=&quot;尽量不要在频繁更新的列上创建索引&quot;&gt;&lt;a href=&quot;#尽量不要在频繁更新的列上创建索引&quot; class=&quot;headerlink&quot; title=&quot;尽量不要在频繁更新的列上创建索引&quot;&gt;&lt;/a&gt;尽量不要在频繁更新的列上创建索引&lt;/h3&gt;&lt;p&gt;如不在定义了 ON UPDATE CURRENT_STAMP 的列上创建索引，维护成本太高（好在mysql有insert buffer，会合并索引的插入）&lt;/p&gt;
&lt;h2 id=&quot;SQL设计&quot;&gt;&lt;a href=&quot;#SQL设计&quot; class=&quot;headerlink&quot; title=&quot;SQL设计&quot;&gt;&lt;/a&gt;SQL设计&lt;/h2&gt;&lt;h3 id=&quot;杜绝直接-SELECT-读取全部字段&quot;&gt;&lt;a href=&quot;#杜绝直接-SELECT-读取全部字段&quot; class=&quot;headerlink&quot; title=&quot;杜绝直接 SELECT * 读取全部字段&quot;&gt;&lt;/a&gt;杜绝直接 SELECT * 读取全部字段&lt;/h3&gt;&lt;p&gt;即使需要所有字段，减少网络带宽消耗，能有效利用覆盖索引，表结构变更对程序基本无影响&lt;/p&gt;
&lt;h3 id=&quot;能确定返回结果只有一条时，使用-limit-1&quot;&gt;&lt;a href=&quot;#能确定返回结果只有一条时，使用-limit-1&quot; class=&quot;headerlink&quot; title=&quot;能确定返回结果只有一条时，使用 limit 1&quot;&gt;&lt;/a&gt;能确定返回结果只有一条时，使用 limit 1&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在保证数据不会有误的前提下&lt;/strong&gt;，能确定结果集数量时，多使用limit，尽快的返回结果。&lt;/p&gt;
&lt;h3 id=&quot;小心隐式类型转换&quot;&gt;&lt;a href=&quot;#小心隐式类型转换&quot; class=&quot;headerlink&quot; title=&quot;小心隐式类型转换&quot;&gt;&lt;/a&gt;小心隐式类型转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;转换规则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a. 两个参数至少有一个是 NULL 时，比较的结果也是 NULL，例外是使用 &amp;lt;=&amp;gt; 对两个 NULL 做比较时会返回 1，这两种情况都不需要做类型转换&lt;br&gt;b. 两个参数都是字符串，会按照字符串来比较，不做类型转换&lt;br&gt;c. 两个参数都是整数，按照整数来比较，不做类型转换&lt;br&gt;d. 十六进制的值和非数字做比较时，会被当做二进制串&lt;br&gt;e. 有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为 timestamp&lt;br&gt;f. 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较&lt;br&gt;g. 所有其他情况下，两个参数都会被转换为浮点数再进行比较。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个索引建立在string类型上，如果这个字段和一个int类型的值比较，符合第 g 条。如f_phone定义的类型是varchar，但where使用f_phone in (098890)，两个参数都会被当成成浮点型。发生这个隐式转换并不是最糟的，最糟的是string转换后的float，mysql无法使用索引，这才导致了性能问题。如果是 f_user_id = ‘1234567’ 的情况，符合第 b 条,直接把数字当字符串比较。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;禁止在where条件列上使用函数&quot;&gt;&lt;a href=&quot;#禁止在where条件列上使用函数&quot; class=&quot;headerlink&quot; title=&quot;禁止在where条件列上使用函数&quot;&gt;&lt;/a&gt;禁止在where条件列上使用函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会导致索引失效，如lower(email)，f_qq % 4。可放到右边的常量上计算&lt;/li&gt;
&lt;li&gt;返回小结果集不是很大的情况下，可以对返回列使用函数，简化程序开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用like模糊匹配，-不要放首位&quot;&gt;&lt;a href=&quot;#使用like模糊匹配，-不要放首位&quot; class=&quot;headerlink&quot; title=&quot;使用like模糊匹配，%不要放首位&quot;&gt;&lt;/a&gt;使用like模糊匹配，%不要放首位&lt;/h3&gt;&lt;p&gt;会导致索引失效，有这种搜索需求是，考虑其它方案，如sphinx全文搜索&lt;/p&gt;
&lt;h3 id=&quot;涉及到复杂sql时，务必先参考已有索引设计，先explain&quot;&gt;&lt;a href=&quot;#涉及到复杂sql时，务必先参考已有索引设计，先explain&quot; class=&quot;headerlink&quot; title=&quot;涉及到复杂sql时，务必先参考已有索引设计，先explain&quot;&gt;&lt;/a&gt;涉及到复杂sql时，务必先参考已有索引设计，先explain&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单SQL拆分，不以代码处理复杂为由。&lt;/li&gt;
&lt;li&gt;比如 OR 条件： f_phone=’10000’ or f_mobile=’10000’，两个字段各自有索引，但只能用到其中一个。可以拆分成2个sql，或者union all。&lt;/li&gt;
&lt;li&gt;先explain的好处是可以为了利用索引，增加更多查询限制条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用join时，where条件尽量使用充分利用同一表上的索引&quot;&gt;&lt;a href=&quot;#使用join时，where条件尽量使用充分利用同一表上的索引&quot; class=&quot;headerlink&quot; title=&quot;使用join时，where条件尽量使用充分利用同一表上的索引&quot;&gt;&lt;/a&gt;使用join时，where条件尽量使用充分利用同一表上的索引&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如 select t1.a,t2.b * from t1,t2 and t1.a=t2.a and t1.b=123 and t2.c= 4 ，如果t1.c与t2.c字段相同，那么t1上的索引(b,c)就只用到b了。此时如果把where条件中的t2.c=4改成t1.c=4，那么可以用到完整的索引&lt;/li&gt;
&lt;li&gt;这种情况可能会在字段冗余设计（反范式）时出现&lt;/li&gt;
&lt;li&gt;正确选取inner join和left join&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;少用子查询，改用join&quot;&gt;&lt;a href=&quot;#少用子查询，改用join&quot; class=&quot;headerlink&quot; title=&quot;少用子查询，改用join&quot;&gt;&lt;/a&gt;少用子查询，改用join&lt;/h3&gt;&lt;p&gt;小于5.6版本时，子查询效率很低，不像Oracle那样先计算子查询后外层查询。5.6版本开始得到优化&lt;/p&gt;
&lt;h3 id=&quot;考虑使用union-all，少使用union，注意考虑去重&quot;&gt;&lt;a href=&quot;#考虑使用union-all，少使用union，注意考虑去重&quot; class=&quot;headerlink&quot; title=&quot;考虑使用union all，少使用union，注意考虑去重&quot;&gt;&lt;/a&gt;考虑使用union all，少使用union，注意考虑去重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;union all不去重，而少了排序操作，速度相对比union要快，如果没有去重的需求，优先使用union all&lt;/li&gt;
&lt;li&gt;如果UNION结果中有使用limit，在2个子SQL可能有许多返回值的情况下，各自加上limit。如果还有order by，请找DBA。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;IN的内容尽量不超过200个&quot;&gt;&lt;a href=&quot;#IN的内容尽量不超过200个&quot; class=&quot;headerlink&quot; title=&quot;IN的内容尽量不超过200个&quot;&gt;&lt;/a&gt;IN的内容尽量不超过200个&lt;/h3&gt;&lt;p&gt;超过500个值使用批量的方式，否则一次执行会影响数据库的并发能力，因为单SQL只能且一直占用单CPU，而且可能导致主从复制延迟&lt;/p&gt;
&lt;h3 id=&quot;拒绝大事务&quot;&gt;&lt;a href=&quot;#拒绝大事务&quot; class=&quot;headerlink&quot; title=&quot;拒绝大事务&quot;&gt;&lt;/a&gt;拒绝大事务&lt;/h3&gt;&lt;p&gt;比如在一个事务里进行多个select，多个update，如果是高频事务，会严重影响MySQL并发能力，因为事务持有的锁等资源只在事务rollback/commit时才能释放。但同时也要权衡数据写入的一致性。&lt;/p&gt;
&lt;h3 id=&quot;避免使用is-null-is-not-null这样的比较&quot;&gt;&lt;a href=&quot;#避免使用is-null-is-not-null这样的比较&quot; class=&quot;headerlink&quot; title=&quot;避免使用is null, is not null这样的比较&quot;&gt;&lt;/a&gt;避免使用is null, is not null这样的比较&lt;/h3&gt;&lt;h3 id=&quot;order-by-limit&quot;&gt;&lt;a href=&quot;#order-by-limit&quot; class=&quot;headerlink&quot; title=&quot;order by .. limit&quot;&gt;&lt;/a&gt;order by .. limit&lt;/h3&gt;&lt;p&gt;这种查询更多的是通过索引去优化，但order by的字段有讲究，比如主键id与f_time都是顺序递增，那就可以考虑order by id而非 f_time 。&lt;/p&gt;
&lt;h3 id=&quot;c1-lt-a-order-by-c2&quot;&gt;&lt;a href=&quot;#c1-lt-a-order-by-c2&quot; class=&quot;headerlink&quot; title=&quot;c1 &amp;lt; a order by c2&quot;&gt;&lt;/a&gt;c1 &amp;lt; a order by c2&lt;/h3&gt;&lt;p&gt;与上面不同的是，order by之前有个范围查询，由前面的内容可知，用不到类似(c1,c2)的索引，但是可以利用(c2,c1)索引。另外还可以改写成join的方式实现。&lt;/p&gt;
&lt;h3 id=&quot;分页优化&quot;&gt;&lt;a href=&quot;#分页优化&quot; class=&quot;headerlink&quot; title=&quot;分页优化&quot;&gt;&lt;/a&gt;分页优化&lt;/h3&gt;&lt;p&gt;建议使用合理的分页方式以提高分页效率，大页情况下不使用跳跃式分页&lt;br&gt;假如有类似下面分页语句:&lt;br&gt;SELECT FROM table1 ORDER BY ftime DESC LIMIT 10000,10;&lt;br&gt;这种分页方式会导致大量的io，因为MySQL使用的是提前读取策略。&lt;br&gt;推荐分页方式：&lt;br&gt;&lt;code&gt;SELECT FROM table1 WHERE ftime &amp;lt; last_time ORDER BY ftime DESC LIMIT 10&lt;/code&gt;&lt;br&gt;即传入上一次分页的界值&lt;/p&gt;
&lt;p&gt;SELECT * FROM table as t1 inner JOIN (SELECT id FROM table ORDER BY time LIMIT 10000，10) as t2 ON t1.id=t2.id&lt;/p&gt;
&lt;h3 id=&quot;count计数&quot;&gt;&lt;a href=&quot;#count计数&quot; class=&quot;headerlink&quot; title=&quot;count计数&quot;&gt;&lt;/a&gt;count计数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先count()、count(1)、count(col1)是有区别的，count()表示整个结果集有多少条记录，count(1)表示结果集里以primary key统计数量，绝大多数情况下count()与count(1)效果一样的，但count(col1)表示的是结果集里 col1 列 NOT null 的记录数。优先采用count()&lt;/li&gt;
&lt;li&gt;大数据量count是消耗资源的操作，甚至会拖慢整个库，查询性能问题无法解决的，应从产品设计上进行重构。例如当频繁需要count的查询，考虑使用汇总表&lt;/li&gt;
&lt;li&gt;遇到distinct的情况，group by方式可能效率更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;delete-update语句改成select再explain&quot;&gt;&lt;a href=&quot;#delete-update语句改成select再explain&quot; class=&quot;headerlink&quot; title=&quot;delete,update语句改成select再explain&quot;&gt;&lt;/a&gt;delete,update语句改成select再explain&lt;/h3&gt;&lt;p&gt;select最多导致数据库慢，写操作才是锁表的罪魁祸首&lt;/p&gt;
&lt;h3 id=&quot;减少与数据库交互的次数，尽量采用批量SQL语句&quot;&gt;&lt;a href=&quot;#减少与数据库交互的次数，尽量采用批量SQL语句&quot; class=&quot;headerlink&quot; title=&quot;减少与数据库交互的次数，尽量采用批量SQL语句&quot;&gt;&lt;/a&gt;减少与数据库交互的次数，尽量采用批量SQL语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSERT ... ON DUPLICATE KEY UPDATE ...&lt;/code&gt;，插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则执行旧行UPDATE，如果不重复则直接插入，影响1行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPLACE INTO&lt;/code&gt;类似，但它是冲突时删除旧行。&lt;code&gt;INSERT IGNORE&lt;/code&gt;相反，保留旧行，丢弃要插入的新行。&lt;/li&gt;
&lt;li&gt;INSERT INTO VALUES(),(),()，合并插入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;杜绝危险SQL&quot;&gt;&lt;a href=&quot;#杜绝危险SQL&quot; class=&quot;headerlink&quot; title=&quot;杜绝危险SQL&quot;&gt;&lt;/a&gt;杜绝危险SQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;去掉where 1=1 这样无意义或恒真的条件，如果遇到update/delete或遭到sql注入就恐怖了&lt;/li&gt;
&lt;li&gt;SQL中不允许出现DDL语句。一般也不给予create/alter这类权限，但阿里云RDS只区分读写用户&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;行为规范&quot;&gt;&lt;a href=&quot;#行为规范&quot; class=&quot;headerlink&quot; title=&quot;行为规范&quot;&gt;&lt;/a&gt;行为规范&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不允许在DBA不知情的情况下导现网数据&lt;/li&gt;
&lt;li&gt;大批量更新，如修复数据，避开高峰期，并通知DBA。直接执行sql的由运维或DBA同事操作&lt;/li&gt;
&lt;li&gt;及时处理已下线业务的SQL&lt;/li&gt;
&lt;li&gt;复杂sql上线审核&lt;/li&gt;
&lt;li&gt;重要项目的数据库方案选型和设计必须提前通知DBA参与&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://seanlook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://seanlook.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;h3 id=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;a href=&quot;#库名、表名、字段名必须使用小写字母，并采用下划线分割&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名必须使用小写字母，并采用下划线分割&quot;&gt;&lt;/a&gt;库名、表名、字段名必须使用小写字母，并采用下划线分割&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MySQL有配置参数lower_case_table_names=1，即库表名以小写存储，大小写不敏感。如果是0，则库表名以实际情况存储，大小写敏感；如果是2，以实际情况存储，但以小写比较。&lt;/li&gt;
&lt;li&gt;如果大小写混合使用，可能存在abc，Abc，ABC等多个表共存，容易导致混乱。&lt;/li&gt;
&lt;li&gt;字段名显示区分大小写，但实际使⽤时不区分，即不可以建立两个名字一样但大小写不一样的字段。&lt;/li&gt;
&lt;li&gt;为了统一规范， 库名、表名、字段名使用小写字母。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot;&gt;&lt;a href=&quot;#库名以-d-开头，表名以-t-开头，字段名以-f-开头&quot; class=&quot;headerlink&quot; title=&quot;库名以 d 开头，表名以 t 开头，字段名以 f_ 开头&quot;&gt;&lt;/a&gt;库名以 d 开头，表名以 t 开头，字段名以 f_ 开头&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比如表 &lt;code&gt;t_crm_relation&lt;/code&gt;，中间的 crm 代表业务模块名&lt;/li&gt;
&lt;li&gt;视图以&lt;code&gt;view_&lt;/code&gt;开头，事件以&lt;code&gt;event_&lt;/code&gt;开头，触发器以&lt;code&gt;trig_&lt;/code&gt;开头，存储过程以&lt;code&gt;proc_&lt;/code&gt;开头，函数以&lt;code&gt;func_&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;普通索引以&lt;code&gt;idx_col1_col2&lt;/code&gt;命名，唯一索引以&lt;code&gt;uk_col1_col2&lt;/code&gt;命名（可去掉f_公共部分）。如 &lt;code&gt;idx_companyid_corpid_contacttime&lt;/code&gt;(f_company_id, f_corp_id, f_contact_time)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;a href=&quot;#库名、表名、字段名禁止超过32个字符，需见名知意&quot; class=&quot;headerlink&quot; title=&quot;库名、表名、字段名禁止超过32个字符，需见名知意&quot;&gt;&lt;/a&gt;库名、表名、字段名禁止超过32个字符，需见名知意&lt;/h3&gt;&lt;p&gt;库名、表名、字段名支持最多64个字符，但为了统一规范、易于辨识以及减少传输量，禁止超过32个字符&lt;/p&gt;
&lt;h3 id=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;a href=&quot;#临时库、表名须以tmp加日期为后缀&quot; class=&quot;headerlink&quot; title=&quot;临时库、表名须以tmp加日期为后缀&quot;&gt;&lt;/a&gt;临时库、表名须以tmp加日期为后缀&lt;/h3&gt;&lt;p&gt;如 t_crm_relation_tmp0425。备份表也类似，形如 &lt;code&gt;_bak20160425&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;按日期时间分表须符合-YYYY-MM-DD-格式&quot;&gt;&lt;a href=&quot;#按日期时间分表须符合-YYYY-MM-DD-格式&quot; class=&quot;headerlink&quot; title=&quot;按日期时间分表须符合_YYYY[MM][DD]格式&quot;&gt;&lt;/a&gt;按日期时间分表须符合_YYYY[MM][DD]格式&lt;/h3&gt;&lt;p&gt;这也是为将来有可能分表做准备的，比如&lt;code&gt;t_crm_ec_record_201403&lt;/code&gt;，但像 t_crm_contact_at201506就打破了这种规范。&lt;br&gt;不具有时间特性的，直接以 &lt;code&gt;t_tbname_001&lt;/code&gt; 这样的方式命名。&lt;/p&gt;
&lt;h2 id=&quot;库表基础规范&quot;&gt;&lt;a href=&quot;#库表基础规范&quot; class=&quot;headerlink&quot; title=&quot;库表基础规范&quot;&gt;&lt;/a&gt;库表基础规范&lt;/h2&gt;&lt;h3 id=&quot;使用Innodb存储引擎&quot;&gt;&lt;a href=&quot;#使用Innodb存储引擎&quot; class=&quot;headerlink&quot; title=&quot;使用Innodb存储引擎&quot;&gt;&lt;/a&gt;使用Innodb存储引擎&lt;/h3&gt;&lt;p&gt;5.5版本开始mysql默认存储引擎就是InnoDB，5.7版本开始，系统表都放弃MyISAM了。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://icyxp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://icyxp.github.io/tags/mysql/"/>
    
      <category term="规范" scheme="http://icyxp.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Advanced MySQL Query Tuning</title>
    <link href="http://icyxp.github.io//blog/2016/07/mysql-query.html"/>
    <id>http://icyxp.github.io//blog/2016/07/mysql-query.html</id>
    <published>2016-07-15T03:30:00.000Z</published>
    <updated>2016-07-15T03:30:34.000Z</updated>
    
    <content type="html">&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT&quot; width=&quot;100%&quot; height=&quot;550&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;Youtube: &lt;a href=&quot;https://www.youtube.com/watch?v=TPFibi2G_oo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=TPFibi2G_oo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Percona webinars上有许多类似的分享，传送门： &lt;a href=&quot;https://www.percona.com/resources/webinars&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.percona.com/resources/webinars&lt;/a&gt; 。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3HLJJcJmM9KLGT&quot; width=&quot;100%&quot; height=&quot;550&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginh
    
    </summary>
    
      <category term="mysql" scheme="http://icyxp.github.io/categories/mysql/"/>
    
    
      <category term="mysql query" scheme="http://icyxp.github.io/tags/mysql-query/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置location与rewrite规则教程</title>
    <link href="http://icyxp.github.io//blog/2016/07/nginx-localtion-rewrite.html"/>
    <id>http://icyxp.github.io//blog/2016/07/nginx-localtion-rewrite.html</id>
    <published>2016-07-15T02:30:00.000Z</published>
    <updated>2016-07-15T03:14:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;location教程&quot;&gt;&lt;a href=&quot;#location教程&quot; class=&quot;headerlink&quot; title=&quot;location教程&quot;&gt;&lt;/a&gt;location教程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location  = / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 精确匹配 / ，主机名后面不能带任何字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration A ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location  / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 但是正则和最长字符串会优先匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration B ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /documents/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration C ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~ /documents/Abc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration CC ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ^~ /images/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration D ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* \.(gif|jpg|jpeg)$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配所有以 gif,jpg或jpeg 结尾的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration E ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /images/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 字符匹配到 /images/，继续往下，会发现 ^~ 存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration F ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /images/abc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # F与G的放置顺序是没有关系的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration G ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~ /images/abc/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration H ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* /js/.*/\.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已=开头表示精确匹配&lt;br&gt;如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。&lt;/li&gt;
&lt;li&gt;^~ 开头表示uri以某个常规字符串开头，不是正则匹配&lt;/li&gt;
&lt;li&gt;~ 开头表示区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;~* 开头表示不区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;顺序&amp;amp;&amp;amp;优先级&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(location =) &amp;gt; (location 完整路径) &amp;gt; (location ^~ 路径) &amp;gt; (location ~,~* 正则顺序) &amp;gt; (location 部分起始路径) &amp;gt; (/)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照上面的location写法，以下的匹配示例成立：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/ —&amp;gt; config A&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;精确完全匹配，即使/index.html也匹配不了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/downloads/download.html —&amp;gt; config B&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配B以后，往下没有任何匹配，采用B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/images/1.gif —&amp;gt; configuration D&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配到F，往下匹配到D，停止往下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/images/abc/def —&amp;gt; config D&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最长匹配到G，往下匹配D，停止往下&lt;br&gt;你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/documents/document.html —&amp;gt; config C&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配到C，往下没有任何匹配，采用C&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/documents/1.jpg —&amp;gt; configuration E&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配到C，往下正则匹配到E&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/documents/Abc.jpg —&amp;gt; config CC&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最长匹配到C，往下正则顺序匹配到CC，不会往下到E&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实际使用建议&quot;&gt;&lt;a href=&quot;#实际使用建议&quot; class=&quot;headerlink&quot; title=&quot;实际使用建议&quot;&gt;&lt;/a&gt;实际使用建议&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;所以实际使用中，个人觉得至少有三个匹配规则定义，如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#这里是直接转发给后端应用服务器了，也可以是一个静态首页&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 第一个必选规则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location = / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proxy_pass http://tomcat:8080/index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ^~ /static/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root /webroot/static/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root /webroot/res/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#第三个规则就是通用规则，用来转发动态请求到后端应用服务器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#非静态文件请求就默认是动态请求，自己根据实际把握&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proxy_pass http://tomcat:8080/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Rewrite教程&quot;&gt;&lt;a href=&quot;#Rewrite教程&quot; class=&quot;headerlink&quot; title=&quot;Rewrite教程&quot;&gt;&lt;/a&gt;Rewrite教程&lt;/h2&gt;&lt;p&gt;rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在&lt;code&gt;server{},location{},if{}&lt;/code&gt;中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 &lt;code&gt;http://seanlook.com/a/we/index.php?id=1&amp;amp;u=str&lt;/code&gt; 只对&lt;code&gt;/a/we/index.php&lt;/code&gt;重写。语法&lt;code&gt;rewrite regex replacement [flag];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。&lt;/p&gt;
&lt;p&gt;表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行server块的rewrite指令&lt;/li&gt;
&lt;li&gt;执行location匹配&lt;/li&gt;
&lt;li&gt;执行选定的location中的rewrite指令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。&lt;/p&gt;
&lt;h3 id=&quot;flag标志位&quot;&gt;&lt;a href=&quot;#flag标志位&quot; class=&quot;headerlink&quot; title=&quot;flag标志位&quot;&gt;&lt;/a&gt;flag标志位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt; : 相当于Apache的[L]标记，表示完成rewrite&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;: 停止执行当前虚拟主机的后续rewrite指令集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect&lt;/code&gt; : 返回302临时重定向，地址栏会显示跳转后的地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permanent&lt;/code&gt; : 返回301永久重定向，地址栏会显示跳转后的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;last一般写在server和if中，而break一般使用在location中&lt;/li&gt;
&lt;li&gt;last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配&lt;/li&gt;
&lt;li&gt;break和last都能组织继续执行后面的rewrite指令&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;if指令与全局变量&quot;&gt;&lt;a href=&quot;#if指令与全局变量&quot; class=&quot;headerlink&quot; title=&quot;if指令与全局变量&quot;&gt;&lt;/a&gt;if指令与全局变量&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;if判断指令&lt;/strong&gt;&lt;br&gt;语法为&lt;code&gt;if(condition){...}&lt;/code&gt;，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false&lt;/li&gt;
&lt;li&gt;直接比较变量和内容时，使用&lt;code&gt;=&lt;/code&gt;或&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~&lt;/code&gt;正则表达式匹配，&lt;code&gt;~*&lt;/code&gt;不区分大小写的匹配，&lt;code&gt;!~&lt;/code&gt;区分大小写的不匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;和&lt;code&gt;!-f&lt;/code&gt;用来判断是否存在文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;和&lt;code&gt;!-d&lt;/code&gt;用来判断是否存在目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;和&lt;code&gt;!-e&lt;/code&gt;用来判断是否存在文件或目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt;和&lt;code&gt;!-x&lt;/code&gt;用来判断文件是否可执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;例如：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if ($http_user_agent ~ MSIE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rewrite ^(.*)$ /msie/$1 break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; #如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set $id $1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; #如果cookie匹配正则，设置变量$id等于正则引用部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ($request_method = POST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 405;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; #如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ($slow) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limit_rate 10k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; #限速，$slow可以通过 set 指令设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!-f $request_filename)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proxy_pass  http://127.0.0.1; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; #如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ($args ~ post=140)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rewrite ^ http://example.com/ permanent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; #如果query string中包含&quot;post=140&quot;，永久重定向到example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* \.(gif|jpg|png|swf|flv)$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    valid_referers none blocked www.jefflei.com www.leizhenfang.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ($invalid_referer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 404;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; #防盗链&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局变量&lt;/strong&gt;&lt;br&gt;下面是可以用作if判断的全局变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$args&lt;/code&gt;： #这个变量等于请求行中的参数，同&lt;code&gt;$query_string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$content_length&lt;/code&gt; ： 请求头中的Content-length字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$content_type&lt;/code&gt; ： 请求头中的Content-Type字段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_root&lt;/code&gt; ： 当前请求在root指令中指定的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$host&lt;/code&gt; ： 请求主机头字段，否则为服务器名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$http_user_agent&lt;/code&gt; ： 客户端agent信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$http_cookie&lt;/code&gt; ： 客户端cookie信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$limit_rate&lt;/code&gt; ： 这个变量可以限制连接速率。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_method&lt;/code&gt; ： 客户端请求的动作，通常为GET或POST。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_addr&lt;/code&gt; ： 客户端的IP地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_port&lt;/code&gt; ： 客户端的端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$remote_user&lt;/code&gt; ： 已经经过Auth Basic Module验证的用户名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_filename&lt;/code&gt; ： 当前请求的文件路径，由root或alias指令与URI请求生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$scheme&lt;/code&gt; ： HTTP方法（如http，https）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_protocol&lt;/code&gt; ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_addr&lt;/code&gt; ： 服务器地址，在完成一次系统调用后可以确定这个值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_name&lt;/code&gt; ： 服务器名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt; ： 请求到达服务器的端口号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt; ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_uri&lt;/code&gt; ： 与$uri相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;code&gt;http://localhost:88/test1/test2/test.php&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$host&lt;/code&gt;：localhost&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$server_port&lt;/code&gt;：88&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_uri&lt;/code&gt;：&lt;a href=&quot;http://localhost:88/test1/test2/test.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:88/test1/test2/test.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_uri&lt;/code&gt;：/test1/test2/test.php&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$document_root&lt;/code&gt;：/var/www/html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$request_filename&lt;/code&gt;：/var/www/html/test1/test2/test.php&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;常用正则&quot;&gt;&lt;a href=&quot;#常用正则&quot; class=&quot;headerlink&quot; title=&quot;常用正则&quot;&gt;&lt;/a&gt;常用正则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; ： 匹配除换行符以外的任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; ： 重复0次或1次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; ： 重复1次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; ： 重复0次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt; ：匹配数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; ： 匹配字符串的开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; ： 匹配字符串的介绍&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt; ： 重复n次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt; ： 重复n次或更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[c]&lt;/code&gt; ： 匹配单个字符c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt; ： 匹配a-z小写字母的任意一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小括号&lt;code&gt;()&lt;/code&gt;之间匹配的内容，可以在后面通过&lt;code&gt;$1&lt;/code&gt;来引用，&lt;code&gt;$2&lt;/code&gt;表示的是前面第二个&lt;code&gt;()&lt;/code&gt;里的内容。正则里面容易让人困惑的是&lt;code&gt;\&lt;/code&gt;转义特殊字符。&lt;/p&gt;
&lt;h3 id=&quot;rewrite实例&quot;&gt;&lt;a href=&quot;#rewrite实例&quot; class=&quot;headerlink&quot; title=&quot;rewrite实例&quot;&gt;&lt;/a&gt;rewrite实例&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;例1：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;http&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 定义image日志格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;log_format&lt;/span&gt; imagelog &lt;span class=&quot;string&quot;&gt;&#39;[&lt;span class=&quot;variable&quot;&gt;$time_local&lt;/span&gt;] &#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$image_file&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$image_type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$status&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 开启重写日志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;rewrite_log&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;section&quot;&gt;server&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;root&lt;/span&gt; /home/www;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;location&lt;/span&gt; / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 重写规则信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;error_log&lt;/span&gt; logs/rewrite.log &lt;span class=&quot;literal&quot;&gt;notice&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 注意这里要用‘’单引号引起来，避免&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;rewrite&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;^/images/([a-z]&amp;#123;2&amp;#125;)/([a-z0-9]&amp;#123;5&amp;#125;)/(.*)\.(png|jpg|gif)$&#39;&lt;/span&gt; /data?file=&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$image_file&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$image_type&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;location&lt;/span&gt; /data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 指定针对图片的日志格式，来分析图片类型和大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;access_log&lt;/span&gt; logs/images.log mian;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;root&lt;/span&gt; /data/images;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;try_files&lt;/span&gt; /&lt;span class=&quot;variable&quot;&gt;$arg_file&lt;/span&gt; /image404.html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;location&lt;/span&gt; = /image404.html &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# 图片不存在返回特定的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;image not found\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对形如&lt;code&gt;/images/ef/uh7b3/test.png&lt;/code&gt;的请求，重写到&lt;code&gt;/data?file=test.png&lt;/code&gt;，于是匹配到&lt;code&gt;location /data&lt;/code&gt;，先看&lt;code&gt;/data/images/test.png&lt;/code&gt;文件存不存在，如果存在则正常响应，如果不存在则重写&lt;code&gt;tryfiles&lt;/code&gt;到新的&lt;code&gt;image404 location&lt;/code&gt;，直接返回404状态码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例2：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;rewrite&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt; ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$&lt;/span&gt; /resizer/&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$4&lt;/span&gt;?width=&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&amp;amp;height=&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;? &lt;span class=&quot;literal&quot;&gt;last&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对形如&lt;code&gt;/images/bla_500x400.jpg&lt;/code&gt;的文件请求，重写到&lt;code&gt;/resizer/bla.jpg?width=500&amp;amp;height=400&lt;/code&gt;地址，并会继续尝试匹配location。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://seanlook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://seanlook.com/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;location教程&quot;&gt;&lt;a href=&quot;#location教程&quot; class=&quot;headerlink&quot; title=&quot;location教程&quot;&gt;&lt;/a&gt;location教程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location  = / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 精确匹配 / ，主机名后面不能带任何字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration A ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location  / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 但是正则和最长字符串会优先匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration B ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /documents/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration C ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~ /documents/Abc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration CC ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ^~ /images/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration D ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* \.(gif|jpg|jpeg)$ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 匹配所有以 gif,jpg或jpeg 结尾的请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration E ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /images/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 字符匹配到 /images/，继续往下，会发现 ^~ 存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration F ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location /images/abc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # F与G的放置顺序是没有关系的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration G ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~ /images/abc/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ configuration H ] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location ~* /js/.*/\.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已=开头表示精确匹配&lt;br&gt;如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。&lt;/li&gt;
&lt;li&gt;^~ 开头表示uri以某个常规字符串开头，不是正则匹配&lt;/li&gt;
&lt;li&gt;~ 开头表示区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;~* 开头表示不区分大小写的正则匹配&lt;/li&gt;
&lt;li&gt;/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://icyxp.github.io/categories/nginx/"/>
    
    
      <category term="nginx-localtion" scheme="http://icyxp.github.io/tags/nginx-localtion/"/>
    
      <category term="nginx-rewrite" scheme="http://icyxp.github.io/tags/nginx-rewrite/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务隔离级别</title>
    <link href="http://icyxp.github.io//blog/2016/07/mysql-transaction-level.html"/>
    <id>http://icyxp.github.io//blog/2016/07/mysql-transaction-level.html</id>
    <published>2016-07-11T09:21:00.000Z</published>
    <updated>2016-07-11T09:23:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;四类隔离级别&quot;&gt;&lt;a href=&quot;#四类隔离级别&quot; class=&quot;headerlink&quot; title=&quot;四类隔离级别&quot;&gt;&lt;/a&gt;四类隔离级别&lt;/h2&gt;&lt;p&gt;SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Uncommitted（读取未提交内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Committed（读取提交内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeatable Read（可重读）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializable（可串行化）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;隔离级别与一致性&quot;&gt;&lt;a href=&quot;#隔离级别与一致性&quot; class=&quot;headerlink&quot; title=&quot;隔离级别与一致性&quot;&gt;&lt;/a&gt;隔离级别与一致性&lt;/h2&gt;&lt;p&gt;这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。&lt;/li&gt;
&lt;li&gt;不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。&lt;/li&gt;
&lt;li&gt;幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;隔离级别&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;脏读&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;不可重复读&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;读未提交(Read Uncommitted)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;读已提交(Read Committed)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可重复读(Repeatable Read)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;可串行化(Serializable)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;设置当前隔离级别&quot;&gt;&lt;a href=&quot;#设置当前隔离级别&quot; class=&quot;headerlink&quot; title=&quot;设置当前隔离级别&quot;&gt;&lt;/a&gt;设置当前隔离级别&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 取消autocommit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; autocommit=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%autocommit%&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 查看隔离级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; @@global.tx_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; @@session.tx_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; @@tx_isolation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%iso%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name | Value           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| tx_isolation  | REPEATABLE-READ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%iso%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name | Value           |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| tx_isolation  | REPEATABLE-READ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;---------------+-----------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 设置隔离级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SESSION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ISOLATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; uncommitted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SESSION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ISOLATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; committed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SESSION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ISOLATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEVEL&lt;/span&gt; repeatable &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SESSION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ISOLATION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LEVEL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;serializable&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 事务操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;transaction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; text.tx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;transaction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; text.tx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; text.tx &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;num&lt;/span&gt; =&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;into&lt;/span&gt; text.tx(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;num&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rollback&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;my-cnf设置&quot;&gt;&lt;a href=&quot;#my-cnf设置&quot; class=&quot;headerlink&quot; title=&quot;my.cnf设置&quot;&gt;&lt;/a&gt;my.cnf设置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MySQL支持4种事务隔离级别，他们分别是：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transaction_isolation = REPEATABLE-READ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四类隔离级别&quot;&gt;&lt;a href=&quot;#四类隔离级别&quot; class=&quot;headerlink&quot; title=&quot;四类隔离级别&quot;&gt;&lt;/a&gt;四类隔离级别&lt;/h2&gt;&lt;p&gt;SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Uncommitted（读取未提交内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read Committed（读取提交内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeatable Read（可重读）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializable（可串行化）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://icyxp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://icyxp.github.io/tags/mysql/"/>
    
      <category term="事务" scheme="http://icyxp.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>MySQL为什么需要一个自增主键</title>
    <link href="http://icyxp.github.io//blog/2016/07/mysql-auto-increment-primary-key.html"/>
    <id>http://icyxp.github.io//blog/2016/07/mysql-auto-increment-primary-key.html</id>
    <published>2016-07-04T09:38:00.000Z</published>
    <updated>2016-07-04T12:52:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;主键&quot;&gt;&lt;a href=&quot;#主键&quot; class=&quot;headerlink&quot; title=&quot;主键&quot;&gt;&lt;/a&gt;主键&lt;/h2&gt;&lt;p&gt;表中每一行都应该有可以唯一标识自己的一列（或一组列）。&lt;/p&gt;
&lt;p&gt;一个顾客可以使用顾客编号列，而订单可以使用订单ID，雇员可以使用雇员ID 或 雇员社会保险号。&lt;/p&gt;
&lt;p&gt;主键（primary key） 一列（或一组列），其值能够唯一区分表中的每个行。&lt;br&gt;唯一标识表中每行的这个列（或这组列）称为主键。&lt;strong&gt;&lt;code&gt;没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只设计相关的行。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然并不总是都需要主键，但大多数数据库设计人员都应保证他们创建的每个表有一个主键，以便于以后数据操纵和管理&lt;/p&gt;
&lt;p&gt;表中的任何列都可以作为主键，只要它满足一下条件:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;任何两行都不具有相同的主键值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每个行都必须具有一个主键值（主键列不允许NULL值）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主键值规范：这里列出的规则是MySQL本身强制实施的。&lt;/p&gt;
&lt;p&gt;主键的最好习惯：&lt;br&gt;除MySQL强制实施的规则外，应该坚持的几个普遍认为的最好习惯为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;1、不更新主键列的值
2、不重用主键列的值
3、不在主键列中使用可能会更改的值（例如，如果使用一个名字作为主键以标识某个供应商，应该供应商合并和更改其名字时，必须更改这个主键）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总之：不应该使用一个具有意义的column（id 本身并不保存表 有意义信息） 作为主键，并且一个表必须要有一个主键，为方便扩展、松耦合，高可用的系统做铺垫。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;无特殊需求下Innodb建议使用与业务无关的自增ID作为主键&quot;&gt;&lt;a href=&quot;#无特殊需求下Innodb建议使用与业务无关的自增ID作为主键&quot; class=&quot;headerlink&quot; title=&quot;无特殊需求下Innodb建议使用与业务无关的自增ID作为主键&quot;&gt;&lt;/a&gt;无特殊需求下Innodb建议使用与业务无关的自增ID作为主键&lt;/h3&gt;&lt;p&gt;InnoDB引擎使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）&lt;/p&gt;
&lt;p&gt;1、如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。如下图所示：&lt;br&gt;&lt;img src=&quot;/images/mysql_aipk_1.jpg&quot; alt=&quot;mysql_primary_key&quot;&gt;&lt;br&gt;这样就会形成一个紧凑的索引结构，近似顺序填满。&lt;strong&gt;&lt;code&gt;由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、 如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置：&lt;br&gt;&lt;img src=&quot;/images/mysql_aipk_2.jpg&quot; alt=&quot;mysql_primary_key&quot;&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片。&lt;/code&gt;&lt;/strong&gt;得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。&lt;/p&gt;
&lt;p&gt;在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;mysql 在频繁的更新、删除操作，会产生碎片。而含碎片比较大的表，查询效率会降低。此时需对表进行优化，这样才会使查询变得更有效率。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主键&quot;&gt;&lt;a href=&quot;#主键&quot; class=&quot;headerlink&quot; title=&quot;主键&quot;&gt;&lt;/a&gt;主键&lt;/h2&gt;&lt;p&gt;表中每一行都应该有可以唯一标识自己的一列（或一组列）。&lt;/p&gt;
&lt;p&gt;一个顾客可以使用顾客编号列，而订单可以使用订单ID，雇员可以使用雇员ID 或 雇员社会保险号。&lt;/p&gt;
&lt;p&gt;主键（primary key） 一列（或一组列），其值能够唯一区分表中的每个行。&lt;br&gt;唯一标识表中每行的这个列（或这组列）称为主键。&lt;strong&gt;&lt;code&gt;没有主键，更新或删除表中特定行很困难，因为没有安全的方法保证只设计相关的行。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然并不总是都需要主键，但大多数数据库设计人员都应保证他们创建的每个表有一个主键，以便于以后数据操纵和管理&lt;/p&gt;
&lt;p&gt;表中的任何列都可以作为主键，只要它满足一下条件:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;任何两行都不具有相同的主键值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每个行都必须具有一个主键值（主键列不允许NULL值）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主键值规范：这里列出的规则是MySQL本身强制实施的。&lt;/p&gt;
&lt;p&gt;主键的最好习惯：&lt;br&gt;除MySQL强制实施的规则外，应该坚持的几个普遍认为的最好习惯为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plain&quot;&gt;1、不更新主键列的值
2、不重用主键列的值
3、不在主键列中使用可能会更改的值（例如，如果使用一个名字作为主键以标识某个供应商，应该供应商合并和更改其名字时，必须更改这个主键）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总之：不应该使用一个具有意义的column（id 本身并不保存表 有意义信息） 作为主键，并且一个表必须要有一个主键，为方便扩展、松耦合，高可用的系统做铺垫。&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://icyxp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://icyxp.github.io/tags/mysql/"/>
    
      <category term="主键" scheme="http://icyxp.github.io/tags/%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Zephir安装和初体验</title>
    <link href="http://icyxp.github.io//blog/2016/06/zephir-zephir-02.html"/>
    <id>http://icyxp.github.io//blog/2016/06/zephir-zephir-02.html</id>
    <published>2016-06-30T14:23:00.000Z</published>
    <updated>2016-07-04T12:51:08.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Zephir安装&quot;&gt;&lt;a href=&quot;#Zephir安装&quot; class=&quot;headerlink&quot; title=&quot;Zephir安装&quot;&gt;&lt;/a&gt;Zephir安装&lt;/h2&gt;&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#环境依赖&quot; class=&quot;headerlink&quot; title=&quot;环境依赖&quot;&gt;&lt;/a&gt;环境依赖&lt;/h3&gt;&lt;p&gt;Zephir主要依赖于下面环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc &amp;gt;= 4.x/clang &amp;gt;= 3.x&lt;/li&gt;
&lt;li&gt;re2c 0.13或更高版本&lt;/li&gt;
&lt;li&gt;gnu 3.81或更高版本&lt;/li&gt;
&lt;li&gt;autoconf 2.31或更高版本&lt;/li&gt;
&lt;li&gt;automake 1.14或更高版本&lt;/li&gt;
&lt;li&gt;libpcre3&lt;/li&gt;
&lt;li&gt;php开发工具-phpize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你使用Ubuntu，你可以安装所需要的包&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install git gcc make re2c php5 php5-json php5-dev libpcre3-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于Zephir是用PHP编写的，所以你需要安装php&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ php -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP 5.6.5 (cli) (built: Jan 24 2015 20:04:31)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copyright (c) 1997-2014 The PHP Group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时也必须确保安装了PHP开发库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ phpize -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Configuring &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP Api Version:         20131106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Module Api No:      20131226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Extension Api No:   220131226&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;安装Zephir&quot;&gt;&lt;a href=&quot;#安装Zephir&quot; class=&quot;headerlink&quot; title=&quot;安装Zephir&quot;&gt;&lt;/a&gt;安装Zephir&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载最新稳定版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行Zephir安装程序(编译/创建解析器)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; zephir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./install-json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./install -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zephir &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;会得到如下返回&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; _____              __    _&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/__  /  ___  ____  / /_  (_)____&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  / /  / _ \/ __ \/ __ \/ / ___/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / /__/  __/ /_/ / / / / / /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/____/\___/ .___/_/ /_/_/_/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         /_/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zephir version 0.9.2a-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Usage: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; [options]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Available commands:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    install             Installs the extension (requires root password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    builddev            Generate/Compile/Install a Zephir extension &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; development mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;                Displays this &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    build               Generate/Compile/Install a Zephir extension&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile             Compile a Zephir extension&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stubs               Generates extension PHP stubs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    version             Shows the Zephir version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init [namespace]    Initializes a Zephir extension&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fullclean           Cleans the generated object files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; compilation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    api [--theme-path=/path][--output-directory=/path][--theme-options=&amp;#123;json&amp;#125;|/path]Generates a HTML API&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    generate            Generates C code from the Zephir code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clean               Cleans the generated object files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; compilation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;([a-z0-9\-]+)     Enables compiler optimizations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -fno-([a-z0-9\-]+)  Disables compiler optimizations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -w([a-z0-9\-]+)     Turns a warning on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -W([a-z0-9\-]+)     Turns a warning off&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Zephir初体验&quot;&gt;&lt;a href=&quot;#Zephir初体验&quot; class=&quot;headerlink&quot; title=&quot;Zephir初体验&quot;&gt;&lt;/a&gt;Zephir初体验&lt;/h2&gt;&lt;p&gt;还记得在开篇那个Helloword例子吗？我们先来简单介绍一下Zephir编译机制，在用例子介绍一下Zephir的语法。&lt;/p&gt;
&lt;h3 id=&quot;编译-解释&quot;&gt;&lt;a href=&quot;#编译-解释&quot; class=&quot;headerlink&quot; title=&quot;编译/解释&quot;&gt;&lt;/a&gt;编译/解释&lt;/h3&gt;&lt;p&gt;每一种语言都会有它们的”Hello World!”例子，对于Zehpir来说也不例外，下面的这个引导例子列举了许多它重要的特性。&lt;/p&gt;
&lt;p&gt;Zephir的代码必须放置在类中。Zephir是基于面向对象类/框架打造的。所以代码放置在类的外面是不允许的。另外，一个命名空间也是必须的。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一但这个类被编译完成，它会产生下面的一段C代码（gcc/clang/vc++编译）&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EPHIR_INIT_CLASS(Test_Hello) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ZEPHIR_REGISTER_CLASS(Test, Hello, hello, test_hello_method_entry, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP_METHOD(Test_Hello, say) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    php_printf(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;事实上，使用Zephir的开发者无需懂得C语言，如果你有使用编译器，或者php内部的构造，或者C语言本身的经验， 在使用Zephir的时候你将会感到更加的清晰。&lt;/p&gt;
&lt;h3 id=&quot;Zephir初试&quot;&gt;&lt;a href=&quot;#Zephir初试&quot; class=&quot;headerlink&quot; title=&quot;Zephir初试&quot;&gt;&lt;/a&gt;Zephir初试&lt;/h3&gt;&lt;p&gt;在接下来的例子中，我们将会尽详细的描述，以便你知道是怎么回事。 我们的目标是让你感觉一下到底Zephir是怎么样的一个东西。 随便我们将会详细的探索Zephir的新特性。    &lt;/p&gt;
&lt;p&gt;下面的例子很简单，它提供一个类和一个函数，检测一个数组的类型&lt;/p&gt;
&lt;p&gt;让我们认真的检查下面的代码，开始认真的的学习Zephir. 这几行代码包括了很多详细的东西，我们将会慢慢的解释。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * MyTest (test/mytest.zep)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyTest&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* 变量必须声明 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;comment&quot;&gt;/*创建一个数组 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 let myArray = [&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100.25&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;comment&quot;&gt;/* 数组有多少个元素*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 let length = count(myArray);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;comment&quot;&gt;/* 打印值类型 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; length &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; typeof myArray[i], &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     let i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; myArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在函数中，第一行使用了’var’ 和 ‘int’ 关键词来声明一个函数内的私有变量。 在函数中的每一个变量必须事先声明它们自己的类型。这些声明并不是随意的，它帮助编译器来报告给你关于 错误的变量，或者变量的使用是否超出的它的范围，通常它会在最后抛出错误。&lt;/p&gt;
&lt;p&gt;动态的变量必须以关键词’var’来声明。这些变量可以被指定或再指定成不同的变量类型。另一方面，’i’ and ‘length’使用了整数的静态变量，在执行程序的过程中，它只能改变值，而不能改变变量的类型。&lt;/p&gt;
&lt;p&gt;与PHP不同的是，你不用在变量的前面加上($)符号。&lt;/p&gt;
&lt;p&gt;Zephir的注释和Java, C#, C++等等一些语言的一样。&lt;/p&gt;
&lt;p&gt;默认的，变量是不变的，意思是说Zephir期望大部分的变量保持不变。变量保持它们原始的值不变可以优化成静态常量。 如果需要改变变量的值，请使用关键词’let’&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 创建一个数组 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let myArray = [&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100.25&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认的，数组是一种象PHP一样的动态变量，它包含了许多不同类型的值。令人吃惊的是，PHP内部的函数可以在Zephir中使用，在下面的例子中，’count’ 函数被使用了，编辑器可以以最佳的状态来执行，因为它已经知道了数组的长度了。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*数组有多少个元素 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let length = count(myArray);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的，我们可以使用花括号来控制程序的流程.&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; i &amp;lt; length &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; typeof myArray[i], &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PHP的变量总是动态的，函数总是返回的是可变的动态变量，这就意味着如果一个静态变量在Zphir中被返回了，在PHP的调用中 你得到的却是一个动态变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请注意！内存是在编译器中自动管理的，所以你没有必要像C语言一样去分配和释放内存。&lt;/strong&gt; 这和PHP是很相似的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zephir安装&quot;&gt;&lt;a href=&quot;#Zephir安装&quot; class=&quot;headerlink&quot; title=&quot;Zephir安装&quot;&gt;&lt;/a&gt;Zephir安装&lt;/h2&gt;&lt;h3 id=&quot;环境依赖&quot;&gt;&lt;a href=&quot;#环境依赖&quot; class=&quot;headerlink&quot; title=&quot;环境依赖&quot;&gt;&lt;/a&gt;环境依赖&lt;/h3&gt;&lt;p&gt;Zephir主要依赖于下面环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc &amp;gt;= 4.x/clang &amp;gt;= 3.x&lt;/li&gt;
&lt;li&gt;re2c 0.13或更高版本&lt;/li&gt;
&lt;li&gt;gnu 3.81或更高版本&lt;/li&gt;
&lt;li&gt;autoconf 2.31或更高版本&lt;/li&gt;
&lt;li&gt;automake 1.14或更高版本&lt;/li&gt;
&lt;li&gt;libpcre3&lt;/li&gt;
&lt;li&gt;php开发工具-phpize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你使用Ubuntu，你可以安装所需要的包&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install git gcc make re2c php5 php5-json php5-dev libpcre3-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于Zephir是用PHP编写的，所以你需要安装php&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ php -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP 5.6.5 (cli) (built: Jan 24 2015 20:04:31)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copyright (c) 1997-2014 The PHP Group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Engine v2.6.0, Copyright (c) 1998-2014 Zend Technologies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2014, by Zend Technologies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同时也必须确保安装了PHP开发库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ phpize -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Configuring &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP Api Version:         20131106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Module Api No:      20131226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Extension Api No:   220131226&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zephir" scheme="http://icyxp.github.io/categories/zephir/"/>
    
    
      <category term="zephir" scheme="http://icyxp.github.io/tags/zephir/"/>
    
      <category term="php扩展" scheme="http://icyxp.github.io/tags/php%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Zephir介绍</title>
    <link href="http://icyxp.github.io//blog/2016/06/zephir-zephir-01.html"/>
    <id>http://icyxp.github.io//blog/2016/06/zephir-zephir-01.html</id>
    <published>2016-06-30T13:18:00.000Z</published>
    <updated>2016-07-04T12:50:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;zephir介绍&quot;&gt;&lt;a href=&quot;#zephir介绍&quot; class=&quot;headerlink&quot; title=&quot;zephir介绍&quot;&gt;&lt;/a&gt;zephir介绍&lt;/h2&gt;&lt;p&gt;Zephir是一种可以让PHP开发者尝试编写和编译可以被PHP执行代码的一种语言。它是动态/静态类型，它的一些特性对于PHP 开发者来说是非常的相似的。&lt;/p&gt;
&lt;p&gt;Zephir的名字是取自Zend Engine/PHP/Intermediate的缩写。建议发音为zephyr相同。事实上Zephir的创造者发音为zaefire_.&lt;/p&gt;
&lt;h3 id=&quot;简单易于开发&quot;&gt;&lt;a href=&quot;#简单易于开发&quot; class=&quot;headerlink&quot; title=&quot;简单易于开发&quot;&gt;&lt;/a&gt;简单易于开发&lt;/h3&gt;&lt;p&gt;相信大家和我有一样的经历，看到了yaf和phalcon在想为什么C语言的拓展框架可以这么的快，我自己能不能写一个出来呢？然后屁颠屁颠的跑去找资料找大神了解，大神说你去看一下 “PHP扩展开发及内核应用”，结果大家都知道醉了。&lt;/p&gt;
&lt;p&gt;主要原因是需要对C相对的熟悉并且对PHP内核API也要很熟悉，我觉得这已经不是门槛的问题了是太平洋的距离，就草草结束了研究。&lt;/p&gt;
&lt;p&gt;当遇到zephir首先了解的就是复杂程度，结果花了10分钟就跟着流程做了一个小DEMO，就这点看来就开发效率这点看来无可厚非的的高效快速，大家感受一下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Icyboy&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译之后引入到php.ini里面，使用方式如下&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Icyboy&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Hello&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; Hello::hi() . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;zephir是一个解释器语言和PHP非常近似，通过zephir的机制编译成C语言，然后通过C编译出PHP拓展提供使用，把中间过程高度封装，很大程度让PHP拓展开发简单了很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP扩展开发及内核应用&lt;/strong&gt; &lt;a href=&quot;http://www.walu.cc/phpbook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.walu.cc/phpbook&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;zephir特性&quot;&gt;&lt;a href=&quot;#zephir特性&quot; class=&quot;headerlink&quot; title=&quot;zephir特性&quot;&gt;&lt;/a&gt;zephir特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;zephir是静态动态结合语言，在zephir内可以使用传统静态变量，也可以使用动态变量，灵活度高。&lt;/li&gt;
&lt;li&gt;内存安全，熟悉C程序的童鞋都知道C可以控制内存指针，其实用的不好是一件很危险的事情，zephir它不允许你使用指针，它提供了一个&lt;strong&gt;task-local垃圾收集器&lt;/strong&gt;，以避免内存泄漏。&lt;/li&gt;
&lt;li&gt;编译模式，zephir能够编译主流系统Liunx/OSX/Windows能够识别的拓展程序。&lt;/li&gt;
&lt;li&gt;开发源代码的高级语言，以面向对象为基础，编写拓展都需要基于面向对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;感受一下&quot;&gt;&lt;a href=&quot;#感受一下&quot; class=&quot;headerlink&quot; title=&quot;感受一下&quot;&gt;&lt;/a&gt;感受一下&lt;/h3&gt;&lt;p&gt;下面是官方提供的一个让大家感受一下的小例子作用是过滤变量返回字母字符&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLibrary&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string str)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        char ch; string filtered = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ch in str &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;) || (ch &amp;gt;= &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt; &amp;amp;&amp;amp; ch &amp;lt;= &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              let filtered .= ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; filtered;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从PHP类可以使用如下&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$filter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyLibrary\Filter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $filter-&amp;gt;alpha(&lt;span class=&quot;string&quot;&gt;&quot;01he#l.lo?/1&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 结果输出 hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么是Zephir&quot;&gt;&lt;a href=&quot;#为什么是Zephir&quot; class=&quot;headerlink&quot; title=&quot;为什么是Zephir&quot;&gt;&lt;/a&gt;为什么是Zephir&lt;/h2&gt;&lt;p&gt;今天的PHP应用程序必须平衡一系列问题包括稳定性、性能和功能。&lt;/p&gt;
&lt;p&gt;每一个PHP应用程序是基于一组常见的组件或者说框架，这些公共组件是库/框架或它们的组合。一旦安装后很少改变，作为应用程序的基础，他们必须是有非常快的,&lt;/p&gt;
&lt;p&gt;快速和强大的库会很复杂，由于高水平的抽象，一般的做法是约定基础库或框架很少改变，才有机会来改善性能和资源消耗。&lt;/p&gt;
&lt;p&gt;Zephir，您可以实现面向对象库/框架/应用程序，使您的应用程序速度提高，改善用户体验。&lt;/p&gt;
&lt;h3 id=&quot;如果你是一个PHP程序员……&quot;&gt;&lt;a href=&quot;#如果你是一个PHP程序员……&quot; class=&quot;headerlink&quot; title=&quot;如果你是一个PHP程序员……&quot;&gt;&lt;/a&gt;如果你是一个PHP程序员……&lt;/h3&gt;&lt;p&gt;PHP是在使用的Web应用程序开发中最流行的语言之一。像PHP动态类型和解释语言，由于其灵活性，提供非常高的效率。&lt;/p&gt;
&lt;p&gt;PHP是基于Zend引擎的实现。这是执行从字节码表示的PHP代码的虚拟机。Zend引擎是世界上每一个PHP的安装几乎目前，随着Zephir，您可以创建在Zend引擎运行PHP扩展。&lt;/p&gt;
&lt;p&gt;PHP托管Zephir，所以他们显然有很多相似的地方，但是，他们有给Zephir自己的个性的重要差异。例如，Zephir更加严格，它可以让你减少编译步骤。&lt;/p&gt;
&lt;h3 id=&quot;如果你是一个C程序员……&quot;&gt;&lt;a href=&quot;#如果你是一个C程序员……&quot; class=&quot;headerlink&quot; title=&quot;如果你是一个C程序员……&quot;&gt;&lt;/a&gt;如果你是一个C程序员……&lt;/h3&gt;&lt;p&gt;C是有史以来最强大的和流行的语言之一。 事实上，PHP是用C编写的。&lt;/p&gt;
&lt;p&gt;然而，用C开发大型应用程序可以把PHP或Zephir相比比预期的要长很多，一些错误是很难找到。如果你不是一个有经验的开发人员。&lt;/p&gt;
&lt;p&gt;Zephir设计是安全的，所以它没有实现指针或手动内存管理，如果你是一个C程序员，你会觉得Zephir强大，比C更加的友好。&lt;/p&gt;
&lt;h3 id=&quot;编译VS解读&quot;&gt;&lt;a href=&quot;#编译VS解读&quot; class=&quot;headerlink&quot; title=&quot;编译VS解读&quot;&gt;&lt;/a&gt;编译VS解读&lt;/h3&gt;&lt;p&gt;编译通常会减慢下来的发展；你需要多一点耐心，使你的代码编译运行它之前。此外，该解释趋于降低有利于生产率的性能。&lt;/p&gt;
&lt;p&gt;为了更高的效率，Zephir需要编译你的代码，但是他不会影响高生产效率，开发人员可以决定哪些应用程序部分应当在Zephir，哪些不是。&lt;/p&gt;
&lt;h3 id=&quot;静态类型和动态类型语言&quot;&gt;&lt;a href=&quot;#静态类型和动态类型语言&quot; class=&quot;headerlink&quot; title=&quot;静态类型和动态类型语言&quot;&gt;&lt;/a&gt;静态类型和动态类型语言&lt;/h3&gt;&lt;p&gt;一般来说，在静态类型语言中，变量是绑定到一个特定类型的一生。 其类型不能改变，只能参考实例和兼容操作。 像C / c++语言实现的方案&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// not allowed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在动态类型，绑定到类型的值，而不是变量。 所以，一个变量可能引用值的类型，然后重新分配后的值类型无关。 Javascript / PHP的例子 动态类型语言&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// allowed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;尽管动态类型有着生产力的优势，但是动态语言并不能成为所有应用的选择，特别是对于非常大型代码库和高性能的应用程序。&lt;/p&gt;
&lt;p&gt;优化性能的动态语言像PHP比静态语言(如C)是更具挑战性的。 在静态语言中，优化器可以利用类型信息做出决策。 在动态语言中，只有很有限的信息是可用的，这使得优化器的选择更加困难。&lt;/p&gt;
&lt;p&gt;如果你需要非常高的性能,，静态语言可能是一个更安全的选择。&lt;/p&gt;
&lt;p&gt;静态语言的另一个好处是编译器执行额外的检查。 编译器无法发现逻辑错误，这更重要但是编译器可以提前发现错误，动态语言只能在运行提示报错信息。&lt;/p&gt;
&lt;p&gt;Zephir是静态和动态类型都允许使用的。&lt;/p&gt;
&lt;h3 id=&quot;代码保护&quot;&gt;&lt;a href=&quot;#代码保护&quot; class=&quot;headerlink&quot; title=&quot;代码保护&quot;&gt;&lt;/a&gt;代码保护&lt;/h3&gt;&lt;p&gt;在某些情况下，编译不显著提高性能，这可能是因为瓶颈所在。 在应用程序的I / O(很有可能)，而不是计算/内存限制。 然而，编译代码也可能带来某种程度的intelectual保护您的应用程序。 Zephir产生本地二进制文件，你也有能力“隐藏”用户或客户的原始代码。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Zephir不是用来取代PHP或C，相反我们认为这是一个补充，允许开发者进入代码编译和静态类型。Zephir正是试图加入从C和PHP的世界，美好的事物寻找机会使他们的应用程序更快！如果你喜欢PHP，如果你渴望执行效率，那就别犹豫赶快尝试一下Zephir吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zephir介绍&quot;&gt;&lt;a href=&quot;#zephir介绍&quot; class=&quot;headerlink&quot; title=&quot;zephir介绍&quot;&gt;&lt;/a&gt;zephir介绍&lt;/h2&gt;&lt;p&gt;Zephir是一种可以让PHP开发者尝试编写和编译可以被PHP执行代码的一种语言。它是动态/静态类型，它的一些特性对于PHP 开发者来说是非常的相似的。&lt;/p&gt;
&lt;p&gt;Zephir的名字是取自Zend Engine/PHP/Intermediate的缩写。建议发音为zephyr相同。事实上Zephir的创造者发音为zaefire_.&lt;/p&gt;
&lt;h3 id=&quot;简单易于开发&quot;&gt;&lt;a href=&quot;#简单易于开发&quot; class=&quot;headerlink&quot; title=&quot;简单易于开发&quot;&gt;&lt;/a&gt;简单易于开发&lt;/h3&gt;&lt;p&gt;相信大家和我有一样的经历，看到了yaf和phalcon在想为什么C语言的拓展框架可以这么的快，我自己能不能写一个出来呢？然后屁颠屁颠的跑去找资料找大神了解，大神说你去看一下 “PHP扩展开发及内核应用”，结果大家都知道醉了。&lt;/p&gt;
&lt;p&gt;主要原因是需要对C相对的熟悉并且对PHP内核API也要很熟悉，我觉得这已经不是门槛的问题了是太平洋的距离，就草草结束了研究。&lt;/p&gt;
&lt;p&gt;当遇到zephir首先了解的就是复杂程度，结果花了10分钟就跟着流程做了一个小DEMO，就这点看来就开发效率这点看来无可厚非的的高效快速，大家感受一下。&lt;br&gt;
    
    </summary>
    
      <category term="zephir" scheme="http://icyxp.github.io/categories/zephir/"/>
    
    
      <category term="zephir" scheme="http://icyxp.github.io/tags/zephir/"/>
    
      <category term="php扩展" scheme="http://icyxp.github.io/tags/php%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Cache 应用中的服务过载案例研究</title>
    <link href="http://icyxp.github.io//blog/2016/06/cache-server.html"/>
    <id>http://icyxp.github.io//blog/2016/06/cache-server.html</id>
    <published>2016-06-28T16:00:00.000Z</published>
    <updated>2016-07-04T12:50:21.000Z</updated>
    
    <content type="html">&lt;p&gt;简单地说，过载是外部请求对系统的访问量突然激增，造成请求堆积，服务不可用，最终导致系统崩溃。本文主要分析引入Cache可能造成的服务过载，并讨论相关的预防、恢复策略。&lt;/p&gt;
&lt;p&gt;Cache在现代系统中使用广泛，由此引入的服务过载隐患无处不在，但却非常隐蔽，容易被忽视。本文希望能为开发者在设计和编写相关类型应用，以及服务过载发生处理时能够有章可循。&lt;/p&gt;
&lt;h2 id=&quot;一个服务过载案例&quot;&gt;&lt;a href=&quot;#一个服务过载案例&quot; class=&quot;headerlink&quot; title=&quot;一个服务过载案例&quot;&gt;&lt;/a&gt;一个服务过载案例&lt;/h2&gt;&lt;p&gt;本文讨论的案例是指存在正常调用关系的两个系统（假设调用方为A系统，服务方为B系统），A系统对B系统的访问突然超出B系统的承受能力，造成B系统崩溃。造成服务过载的原因很多，这里分析的是严重依赖Cache的系统服务过载。首先来看一种包含Cache的体系结构（如下图所示）。&lt;br&gt;&lt;img src=&quot;/images/2_cache.png&quot; alt=&quot;Cache应用体系结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;A系统依赖B系统的读服务，A系统是60台机器组成的集群，B系统是6台机器组成的集群，之所以6台机器能够扛住60台机器的访问，是因为A系统并不是每次都访问B，而是首先请求Cache，只有Cache的相应数据失效时才会请求B。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这正是Cache存在的意义，它让B系统节省了大量机器；如果没有Cache，B系统不得不组成60台机器的集群，如果A也同时依赖除B系统外的另一个系统（假设为C系统）呢？那么C系统也要60台机器，放大的流量将很快耗尽公司的资源。&lt;/p&gt;
&lt;p&gt;然而Cache的引入也不是十全十美的，这个结构中如果Cache发生问题，全部的流量将流向依赖方，造成流量激增，从而引发依赖系统的过载。&lt;/p&gt;
&lt;p&gt;回到A和B的架构，造成服务过载的原因至少有下面三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B系统的前置代理发生故障或者其他原因造成B系统暂时不可用，等B系统系统服务恢复时，其流量将远远超过正常值。&lt;/li&gt;
&lt;li&gt;Cache系统故障，A系统的流量将全部流到B系统，造成B系统过载。&lt;/li&gt;
&lt;li&gt;Cache故障恢复，但这时Cache为空，Cache瞬间命中率为0，相当于Cache被击穿，造成B系统过载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个原因不太好理解，为什么B系统恢复后流量会猛增呢？主要原因就是缓存的超时时间。当有数据超时的时候，A系统会访问B系统，但是这时候B系统偏偏故障不可用，那么这个数据只好超时，等发现B系统恢复时，发现缓存里的B系统数据已经都超时了，都成了旧数据，这时当然所有的请求就打到了B。&lt;/p&gt;
&lt;p&gt;下文主要介绍服务过载的预防和发生后的一些补救方法，以预防为主，从调用方和服务方的视角阐述一些可行方案。&lt;/p&gt;
&lt;h2 id=&quot;服务过载的预防&quot;&gt;&lt;a href=&quot;#服务过载的预防&quot; class=&quot;headerlink&quot; title=&quot;服务过载的预防&quot;&gt;&lt;/a&gt;服务过载的预防&lt;/h2&gt;&lt;p&gt;所谓Client端指的就是上文结构中的A系统，相对于B系统，A系统就是B系统的Client，B系统相当于Server。&lt;/p&gt;
&lt;h3 id=&quot;Client端的方案&quot;&gt;&lt;a href=&quot;#Client端的方案&quot; class=&quot;headerlink&quot; title=&quot;Client端的方案&quot;&gt;&lt;/a&gt;Client端的方案&lt;/h3&gt;&lt;p&gt;针对上文阐述的造成服务过载的三个原因：B系统故障恢复、Cache故障、Cache故障恢复，我们看看A系统有哪些方案可以应对。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;合理使用Cache应对B系统宕机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，Cache的每个Key除了对应Value，还对应一个过期时间T，在T内，get操作直接在Cache中拿到Key对应Value并返回。但是在T到达时，get操作主要有五种模式：&lt;/p&gt;
&lt;h4 id=&quot;基于超时的简单（stupid）模式&quot;&gt;&lt;a href=&quot;#基于超时的简单（stupid）模式&quot; class=&quot;headerlink&quot; title=&quot;基于超时的简单（stupid）模式&quot;&gt;&lt;/a&gt;基于超时的简单（stupid）模式&lt;/h4&gt;&lt;p&gt;在T到达后，任何线程get操作发现Cache中的Key和对应Value将被清除或标记为不可用，get操作将发起调用远程服务获取Key对应的Value，并更新写回Cache，然后get操作返回新值；如果远程获取Key-Value失败，则get抛出异常。&lt;/p&gt;
&lt;p&gt;为了便于理解，举一个码头工人取货的例子：5个工人（线程）去港口取同样Key的货（get），发现货已经过期被扔掉了，这时5个工人各自分别去对岸取新货，然后返回。&lt;/p&gt;
&lt;h4 id=&quot;基于超时的常规模式&quot;&gt;&lt;a href=&quot;#基于超时的常规模式&quot; class=&quot;headerlink&quot; title=&quot;基于超时的常规模式&quot;&gt;&lt;/a&gt;基于超时的常规模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和对应Value将被清除或标记为不可用，get操作将调用远程服务获取Key对应的Value，并更新写回Cache；此时，如果另一个线程发现Key和Value已经不可用，get操作还需要判断有没有其他线程发起了远程调用，如果有，那么自己就等待，直到那个线程远程获取操作成功，Cache中得Key变得可用，get操作返回新的Value。如果远程获取操作失败，则get操作抛出异常，不会返回任何Value。&lt;/p&gt;
&lt;p&gt;还是码头工人的例子：5个工人（线程）去港口取同样Key的货（get），发现货已经过期被扔掉了，那么只需派出一个人去对岸取货，其他四个人在港口等待即可，而不用5个人全去。&lt;/p&gt;
&lt;p&gt;基于超时的简单模式和常规模式区别在于对于同一个超时的Key，前者每个get线程一旦发现Key不存在，则发起远程调用获取值；而后者每个get线程发现Key不存在，则还要判断当前是否有其他线程已经发起了远程调用操作获取新值，如果有，自己就简单的等待即可。&lt;/p&gt;
&lt;p&gt;显然基于超时的常规模式比基于超时的简单模式更加优化，减少了超时时并发访问后端的调用量。&lt;/p&gt;
&lt;p&gt;实现基于超时的常规模式就需要用到经典的Double-checked locking惯用法了。&lt;/p&gt;
&lt;h4 id=&quot;基于刷新的简单（stupid）模式&quot;&gt;&lt;a href=&quot;#基于刷新的简单（stupid）模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的简单（stupid）模式&quot;&gt;&lt;/a&gt;基于刷新的简单（stupid）模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和相应Value不动，但是如果有线程调用get操作，将触发refresh操作，根据get和refresh的同步关系，又分为两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步模式：任何线程发现Key过期，都触发一次refresh操作，get操作等待refresh操作结束，refresh结束后，get操作返回当前Cache中Key对应的Value。注意refresh操作结束并不意味着refresh成功，还可能抛了异常，没有更新Cache，但是get操作不管，get操作返回的值可能是旧值。&lt;/li&gt;
&lt;li&gt;异步模式：任何线程发现Key过期，都触发一次refresh操作，get操作触发refresh操作，不等refresh完成，直接返回Cache中的旧值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举上面码头工人的例子说明基于刷新的常规模式：这次还是5工人去港口取货，这时货都在，但是已经旧了，这时5个工人有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5个人各自去远程取新货，如果取货失败，则拿着旧货返回（同步模式）&lt;/li&gt;
&lt;li&gt;5个人各自通知5个雇佣工去取新货，5个工人拿着旧货先回（异步模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;基于刷新的常规模式&quot;&gt;&lt;a href=&quot;#基于刷新的常规模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的常规模式&quot;&gt;&lt;/a&gt;基于刷新的常规模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和相应Value都不会被清除，而是被标记为旧数据，如果有线程调用get操作，将触发refresh更新操作，根据get和refresh的同步关系，又分为两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步模式：get操作等待refresh操作结束，refresh结束后，get操作返回当前Cache中Key对应的Value，注意：refresh操作结束并不意味着refresh成功，还可能抛了异常，没有更新Cache，但是get操作不管，get操作返回的值可能是旧值。如果其他线程进行get操作，Key已经过期，并且发现有线程触发了refresh操作，则自己不等refresh完成直接返回旧值。&lt;/li&gt;
&lt;li&gt;异步模式：get操作触发refresh操作，不等refresh完成，直接返回Cache中的旧值。如果其他线程进行get操作，发现Key已经过期，并且发现有线程触发了refresh操作，则自己不等refresh完成直接返回旧值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再举上面码头工人的例子说明基于刷新的常规模式：这次还是5工人去港口取货，这时货都在，但是已经旧了，这时5个工人有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派一个人去远方港口取新货，其余4个人拿着旧货先回（同步模式）。&lt;/li&gt;
&lt;li&gt;5个人通知一个雇佣工去远方取新货，5个人都拿着旧货先回（异步模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于刷新的简单模式和基于刷新的常规模式区别就在于取数线程之间能否感知当前数据是否正处在刷新状态，因为基于刷新的简单模式中取数线程无法感知当前过期数据是否正处在刷新状态，所以每个取数线程都会触发一个刷新操作，造成一定的线程资源浪费。&lt;/p&gt;
&lt;p&gt;而基于超时的常规模式和基于刷新的常规模式区别在于前者过期数据将不能对外访问，所以一旦数据过期，各线程要么拿到数据，要么抛出异常；后者过期数据可以对外访问，所以一旦数据过期，各线程要么拿到新数据，要么拿到旧数据。&lt;/p&gt;
&lt;h4 id=&quot;基于刷新的续费模式&quot;&gt;&lt;a href=&quot;#基于刷新的续费模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的续费模式&quot;&gt;&lt;/a&gt;基于刷新的续费模式&lt;/h4&gt;&lt;p&gt;该模式和基于刷新的常规模式唯一的区别在于refresh操作超时或失败的处理上。在基于刷新的常规模式中，refresh操作超时或失败时抛出异常，Cache中的相应Key-Value还是旧值，这样下一个get操作到来时又会触发一次refresh操作。&lt;/p&gt;
&lt;p&gt;在基于刷新的续费模式中，如果refresh操作失败，那么refresh将把旧值当成新值返回，这样就相当于旧值又被续费了T时间，后续T时间内get操作将取到这个续费的旧值而不会触发refresh操作。&lt;/p&gt;
&lt;p&gt;基于刷新的续费模式也像常规模式那样分为同步模式和异步模式，不再赘述。&lt;/p&gt;
&lt;p&gt;下面讨论这5种Cache get模式在服务过载发生时的表现，首先假设如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设A系统的访问量为每分钟M次。&lt;/li&gt;
&lt;li&gt;假设Cache能存Key为C个，并且Key空间有N个。&lt;/li&gt;
&lt;li&gt;假设正常状态下，B系统访问量为每分钟W次，显然W&amp;lt;N&amp;lt;M。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时因为某种原因，比如B长时间故障，造成Cache中得Key全部过期，B系统这时从故障中恢复，五种get模式分析表现分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在基于超时和刷新的简单模式中，B系统的瞬间流量将达到和A的瞬时流量M大体等同，相当于Cache被击穿。这就发生了服务过载，这时刚刚恢复的B系统将肯定会被大流量压垮。&lt;/li&gt;
&lt;li&gt;在基于超时和刷新的常规模式中，B系统的瞬间流量将和Cache中Key空间N大体等同。这时是否发生服务过载，就要看Key空间N是否超过B系统的流量上限了。&lt;/li&gt;
&lt;li&gt;在基于刷新的续费模式中，B系统的瞬间流量为W，和正常情况相同而不会发生服务过载。实际上，在基于刷新的续费模式中，不存在Cache Key全部过期的情况，就算把B系统永久性地干掉，A系统的Cache也会基于旧值长久的平稳运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3点，B系统不会发生服务过载的主要原因是基于刷新的续费模式下不会出现chache中的Key全部长时间过期的情况，即使B系统长时间不可用，基于刷新的续费模式也会在一个过期周期内把旧值当成新值继续使用。所以当B系统恢复时，A系统的Cache都处在正常工作状态。&lt;/p&gt;
&lt;p&gt;从B系统的角度看，能够抵抗服务过载的基于刷新的续费模式最优。&lt;/p&gt;
&lt;p&gt;从A系统的角度看，由于一般情况下A系统是一个高访问量的在线web应用，这种应用最讨厌的一个词就是“线程等待”，因此基于刷新的各种异步模式较优。&lt;/p&gt;
&lt;p&gt;综合考虑，基于刷新的异步续费模式是首选。然而凡事有利就有弊，有两点需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于刷新模式最大的缺点是Key-Value一旦放入Cache就不会被清除，每次更新也是新值覆盖旧值，JVM GC永远无法对其进行垃圾收集，而基于超时的模式中，Key-Value超时后如果新的访问没有到来，内存是可以被GC垃圾回收的。所以如果你使用的是寸土寸金的本地内存做Cache就要小心了。&lt;/li&gt;
&lt;li&gt;基于刷新的续费模式需要做好监控，不然有可能Cache中的值已经和真实的值相差很远了，应用还以为是新值而使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于具体的Cache，来自Google的Guava本地缓存库支持上文的第二种、第四种和第五种get操作模式。&lt;/p&gt;
&lt;p&gt;但是对于Redis等分布式缓存，只提供原始的get、set方法，而提供的get仅仅是获取，与上文提到的五种get操作模式不是一个概念。开发者想用这五种get操作模式的话不得不自己封装和实现。&lt;/p&gt;
&lt;p&gt;五种get操作模式中，基于超时和刷新的简单模式是实现起来最简单的模式，但遗憾的是这两种模式对服务过载完全无免疫力，这可能也是服务过载在大量依赖缓存的系统中频繁发生的一个重要原因吧。&lt;/p&gt;
&lt;p&gt;本文之所以把第1、3种模式称为stupid模式，是想强调这种模式应该尽量避免，Guava里面根本没有这种模式，而Redis只提供简单的读写操作，很容易就把系统实现成了这种方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应对分布式Cache宕机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是Cache直接挂了，那么就算是基于刷新的异步续费模式也无能为力了。这时A系统铁定无法对Cache进行存取操作，只能将流量完全打到B系统，B系统面对服务过载在劫难逃……&lt;/p&gt;
&lt;p&gt;本节讨论的预防Cache宕机仅限于分布式Cache，因为本地Cache一般和A系统应用共享内存和进程，本地Cache挂了A系统也挂了，不会出现本地Cache挂了而A系统应用正常的情况。&lt;/p&gt;
&lt;p&gt;首先，A系统请求线程检查分布式Cache状态，如果无应答则说明分布式Cache挂了，则转向请求B系统，这样一来大流量将压垮B系统。这时可选的方案如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A系统的当前线程不请求B系统，而是打个日志并设置一个默认值。&lt;/li&gt;
&lt;li&gt;A系统的当前线程按照一定概率决定是否请求B系统。&lt;/li&gt;
&lt;li&gt;A系统的当前线程检查B系统运行情况，如果良好则请求B系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方案1&lt;/strong&gt; 最简单，A系统知道如果没有Cache，B系统可能扛不住自己的全部流量，索性不请求B系统，等待Cache恢复。但这时B系统利用率为0，显然不是最优方案，而且当请求的Value不容易设置默认值时，这个方案就不行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案2&lt;/strong&gt; 可以让一部分线程请求B系统，这部分请求肯定能被B系统hold住。可以保守的设置这个概率 u =（B系统的平均流量）/（A系统的峰值流量）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案3&lt;/strong&gt; 是一种更为智能的方案，如果B系统运行良好，当前线程请求；如果B系统过载，则不请求，这样A系统将让B系统处于一种宕机与不宕机的临界状态，最大限度挖掘B系统性能。这种方案要求B系统提供一个性能评估接口返回Yes和No，Yes表示B系统良好，可以请求；No表示B系统情况不妙，不要请求。这个接口将被频繁调用，必须高效。&lt;/p&gt;
&lt;p&gt;方案3的关键在于如何评估一个系统的运行状况。一个系统中当前主机的性能参数有CPU负载、内存使用率、Swap使用率、GC频率和GC时间、各个接口平均响应时间等，性能评估接口需要根据这些参数返回Yes或者No，是不是机器学习里的二分类问题？??关于这个问题已经可以单独写篇文章讨论了，在这里就不展开了，你可以想一个比较简单傻瓜的保守策略，缺点是A系统的请求无法很好的逼近B系统的性能极限。&lt;/p&gt;
&lt;p&gt;综合以上分析，方案2比较靠谱。如果选择方案3，建议由专门团队负责研究并提供统一的系统性能实时评估方案和工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应对分布式Cache宕机后的恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要以为成功hold住分布式Cache宕机就万事大吉了，真正的考验是分布式Cache从宕机过程恢复之后，这时分布式Cache中什么都没有。&lt;/p&gt;
&lt;p&gt;即使是上文中提到了基于刷新的异步续费策略这时也没用，因为分布式Cache为空，无论如何都要请求B系统。这时B系统的最大流量是Key的空间取值数量。&lt;/p&gt;
&lt;p&gt;如果Key的取值空间数量很少，则相安无事；如果Key的取值空间数量大于B系统的流量上限，服务过载依然在所难免。&lt;/p&gt;
&lt;p&gt;这种情况A系统很难处理，关键原因是A系统请求Cache返回Key对应Value为空，A系统无法知道是因为当前Cache是刚刚初始化，所有内容都为空；还是因为仅仅是自己请求的那个Key没在Cache里。&lt;/p&gt;
&lt;p&gt;如果是前者，那么当前线程就要像处理Cache宕机那样进行某种策略的回避；如果是后者，直接请求B系统即可，因为这是正常的Cache使用流程。&lt;/p&gt;
&lt;p&gt;对于Cache宕机的恢复，A系统真的无能为力，只能寄希望于B系统的方案了。&lt;/p&gt;
&lt;h3 id=&quot;Server端的方案&quot;&gt;&lt;a href=&quot;#Server端的方案&quot; class=&quot;headerlink&quot; title=&quot;Server端的方案&quot;&gt;&lt;/a&gt;Server端的方案&lt;/h3&gt;&lt;p&gt;相对于Client端需要应对各种复杂问题，Server端需要应对的问题非常简单，就是如何从容应对过载的问题。无论是缓存击穿也好，还是拒绝服务攻击也罢，对于Server端来说都是过载保护的问题。对于过载保护，主要给出两种可行方案，以及一种比较复杂的方案思路。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流量控制就是B系统实时监控当前流量，如果超过预设的值或者系统承受能力，则直接拒绝掉一部分请求，以实现对系统的保护。&lt;/p&gt;
&lt;p&gt;流量控制根据基于的数据不同，可分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于流量阈值的流控：流量阈值是每个主机的流量上限，流量超过该阈值主机将进入不稳定状态。阈值提前进行设定，如果主机当前流量超过阈值，则拒绝掉一部分流量，使得实际被处理流量始终低于阈值。&lt;/li&gt;
&lt;li&gt;基于主机状态的流控：每个接受每个请求之前先判断当前主机状态，如果主机状况不佳，则拒绝当前请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于阈值的流控实现简单，但是最大的问题是需要提前设置阈值，而且随着业务逻辑越来越复杂，接口越来越多，主机的服务能力实际应该是下降的，这样就需要不断下调阈值，增加了维护成本，而且万一忘记调整的话，呵呵……&lt;/p&gt;
&lt;p&gt;主机的阈值可以通过压力测试确定，选择的时候可以保守些。&lt;/p&gt;
&lt;p&gt;基于主机状态的流控免去了人为控制，但是其最大的确定上文已经提到：如何根据当前主机各个参数判断主机状态呢？想要完美的回答这个问题目测并不容易，因此在没有太好答案之前，我推荐基于阈值的流控。&lt;/p&gt;
&lt;p&gt;流量控制基于实现位置的不同，又可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反向代理实现流控：在反向代理如Nginx上基于各种策略进行流量控制。这种一般针对HTTP服务。&lt;/li&gt;
&lt;li&gt;借助服务治理系统：如果Server端是RMI、RPC等服务，可以构建专门的服务治理系统进行负载均衡、流控等服务。&lt;/li&gt;
&lt;li&gt;服务容器实现流控：在应用代码里，业务逻辑之前实现流量控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3种在服务器的容器（如Java容器）中实现流控并不推荐，因为流控和业务代码混在一起容易混乱；其次实际上流量已经全量进入到了业务代码里，这时的流控只是阻止其进入真正的业务逻辑，所以流控效果将打折；还有，如果流量策略经常变动，系统将不得不为此经常更改。&lt;/p&gt;
&lt;p&gt;因此，推荐前两种方式。&lt;/p&gt;
&lt;p&gt;最后提一个注意点：当因为流控而拒绝请求时，务必在返回的数据中带上相关信息（比如“当前请求因为超出流量而被禁止访问”），如果返回值什么都没有将是一个大坑。因为造成调用方请求没有被响应的原因很多，可能是调用方Bug，也可能是服务方Bug，还可能是网络不稳定，这样一来很可能在排查一整天后发现是流控搞的鬼……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务降级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;服务降级一般由人为触发，属于服务过载造成崩溃恢复时的策略，但为了和流控对比，将其放到这里。&lt;/p&gt;
&lt;p&gt;流量控制本质上是减小访问量，而服务处理能力不变；而服务降级本质上是降低了部分服务的处理能力，增强另一部分服务处理能力，而访问量不变。&lt;/p&gt;
&lt;p&gt;服务降级是指在服务过载时关闭不重要的接口（直接拒绝处理请求），而保留重要的接口。比如服务由10个接口，服务降级时关闭了其中五个，保留五个，这时这个主机的服务处理能力将增强到二倍左右。&lt;/p&gt;
&lt;p&gt;然而，服务过载发生时动辄就超出系统处理能力10倍，而服务降级能使主机服务处理能力提高10倍么？显然很困难，因此服务过载的应对不能只依靠服务降级策略。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态扩展指的是在流量超过系统服务能力时，自动触发集群扩容，自动部署并上线运行；当流量过去后又自动回收多余机器，完全弹性。&lt;/p&gt;
&lt;p&gt;这个方案是不是感觉很不错。但是目前互联网公司的在线应用跑在云上的本身就不多，要完全实现在线应用的自动化弹性运维，要走的路就更多了。&lt;/p&gt;
&lt;h2 id=&quot;崩溃恢复&quot;&gt;&lt;a href=&quot;#崩溃恢复&quot; class=&quot;headerlink&quot; title=&quot;崩溃恢复&quot;&gt;&lt;/a&gt;崩溃恢复&lt;/h2&gt;&lt;p&gt;如果服务过载造成系统崩溃还是不幸发生了，这时需要运维控制流量，等后台系统启动完毕后循序渐进的放开流量，主要目的是让Cache慢慢预热。流量控制刚开始可以为10%，然后20%，然后50%，然后80%，最后全量，当然具体的比例，尤其是初始比例，还要看后端承受能力和前端流量的比例，各个系统并不相同。&lt;/p&gt;
&lt;p&gt;如果后端系统有专门的工具进行Cache预热，则省去了运维的工作，等Cache热起来再发布后台系统即可。但是如果Cache中的Key空间很大，开发预热工具将比较困难。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;“防患于未然”放在服务过载的应对上也是适合的，预防为主，补救为辅。综合上文分析，具体的预防要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用方（A系统）采用基于刷新的异步续费模式使用Cache，或者至少不能使用基于超时或刷新的简单（stupid）模式。&lt;/li&gt;
&lt;li&gt;调用方（A系统）每次请求Cache时检查Cache是否可用（available），如果不可用则按照一个保守的概率访问后端，而不是无所顾忌的直接访问后端。&lt;/li&gt;
&lt;li&gt;服务方（B系统）在反向代理处设置流量控制进行过载保护，阈值需要通过压测获得。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;崩溃的补救主要还是靠运维和研发在发生时的通力合作：观察流量变化准确定位崩溃原因，运维控流量研发持续关注性能变化。&lt;/p&gt;
&lt;p&gt;未来如果有条件的话可以研究下主机应用健康判断问题和动态弹性运维问题，毕竟自动化比人为操作要靠谱。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来源：美团点评技术团队-张杨&lt;br&gt;链接：&lt;a href=&quot;http://tech.meituan.com/avalanche-study.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.meituan.com/avalanche-study.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单地说，过载是外部请求对系统的访问量突然激增，造成请求堆积，服务不可用，最终导致系统崩溃。本文主要分析引入Cache可能造成的服务过载，并讨论相关的预防、恢复策略。&lt;/p&gt;
&lt;p&gt;Cache在现代系统中使用广泛，由此引入的服务过载隐患无处不在，但却非常隐蔽，容易被忽视。本文希望能为开发者在设计和编写相关类型应用，以及服务过载发生处理时能够有章可循。&lt;/p&gt;
&lt;h2 id=&quot;一个服务过载案例&quot;&gt;&lt;a href=&quot;#一个服务过载案例&quot; class=&quot;headerlink&quot; title=&quot;一个服务过载案例&quot;&gt;&lt;/a&gt;一个服务过载案例&lt;/h2&gt;&lt;p&gt;本文讨论的案例是指存在正常调用关系的两个系统（假设调用方为A系统，服务方为B系统），A系统对B系统的访问突然超出B系统的承受能力，造成B系统崩溃。造成服务过载的原因很多，这里分析的是严重依赖Cache的系统服务过载。首先来看一种包含Cache的体系结构（如下图所示）。&lt;br&gt;&lt;img src=&quot;/images/2_cache.png&quot; alt=&quot;Cache应用体系结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;A系统依赖B系统的读服务，A系统是60台机器组成的集群，B系统是6台机器组成的集群，之所以6台机器能够扛住60台机器的访问，是因为A系统并不是每次都访问B，而是首先请求Cache，只有Cache的相应数据失效时才会请求B。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="http://icyxp.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="cache" scheme="http://icyxp.github.io/tags/cache/"/>
    
      <category term="架构" scheme="http://icyxp.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>通过iptables实现端口转发与内网共享上网</title>
    <link href="http://icyxp.github.io//blog/2016/06/iptables-forward-internet-share.html"/>
    <id>http://icyxp.github.io//blog/2016/06/iptables-forward-internet-share.html</id>
    <published>2016-06-20T16:00:00.000Z</published>
    <updated>2016-07-04T12:50:30.000Z</updated>
    
    <content type="html">&lt;p&gt;iptables是一个Linux下优秀的nat+防火墙工具，我使用该工具以较低配置的传统pc配置了一个灵活强劲的防火墙+nat系统,小有心得，看了网上也有很多这方面的文章，但是似乎要么说的比较少，要么就是比较偏，内容不全，容易误导，我研究了一段时间的iptables同时也用了很久，有点滴经验，写来供大家参考，同时也备日后自己翻阅。&lt;/p&gt;
&lt;p&gt;首先要说明的是，iptables操作的是2.4以上内核的netfilter。所以需要linux的内核在2.4以上。其功能与安全性远远比其前辈ipfwadm,ipchains强大，iptables大致是工作在OSI七层的二、三、四层，其前辈ipchains不能单独实现对tcp/udp port以及对mac地址的的定义与操作，所以我想ipchains应该是仅仅工作在三层上的。&lt;/p&gt;
&lt;h2 id=&quot;netfilter工作流程&quot;&gt;&lt;a href=&quot;#netfilter工作流程&quot; class=&quot;headerlink&quot; title=&quot;netfilter工作流程&quot;&gt;&lt;/a&gt;netfilter工作流程&lt;/h2&gt;&lt;p&gt;我们先简单介绍一下netfilter的大致工作流程，也就是一个数据包（或者叫分组、packet,我个人习惯叫包）在到达linux的网络接口的时候 （网卡）如何处理这个包，然后再介绍一下如何用iptables改变或者说控制对这个数据包进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;netfilter内部分为三个表，分别是 filter,nat,mangle，每个表又有不同的操作链（Chains）。&lt;/li&gt;
&lt;li&gt;在filter（过滤）表中，也就是他的 防火墙功能 的这个表，定义了三个 Chain。分别是INPUT,FORWARD,OUTPUT。也就是对包的入、转发、出进行定义的三个过滤链。对于这个filter表的操作和控制也是我们实现防火墙功能的一个重要手段&lt;/li&gt;
&lt;li&gt;在nat(Network Address Translation、网络地址翻译)表中，也就是我们用以实现地址转换和端口转发功能的这个表，定义了PREROUTING, POSTROUTING,OUTPUT三个链,下面我们会对这三个链作详细的说明&lt;/li&gt;
&lt;li&gt;而netfilter的mangle表则是一个自定义表，里面包括上面 的filter以及nat表中的各种chains，它可以让我们进行一些自定义的操作，同时这个mangle表中的chains在netfilter对包 的处理流程中处在一个比较优先的位置。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
下面有一张图清晰的描绘了netfilter对包的处理流程（该图摘自网上，不知作者是谁，在此深表敬意！），一般情况下，我们用不到这个mangle表，在这里我们就不做介绍了。&lt;br&gt;&lt;img src=&quot;/images/iptables_netfilter_chains.png&quot; alt=&quot;iptables包处理流程&quot;&gt;&lt;/li&gt;
&lt;li&gt;ebtables基本使用: &lt;a href=&quot;http://www.cnblogs.com/peteryj/archive/2011/07/24/2115602.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/peteryj/archive/2011/07/24/2115602.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/images/iptables_entables.png&quot; alt=&quot;iptables_entables处理流程图&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;PREROUTING-DNAT&quot;&gt;&lt;a href=&quot;#PREROUTING-DNAT&quot; class=&quot;headerlink&quot; title=&quot;PREROUTING(DNAT)&quot;&gt;&lt;/a&gt;PREROUTING(DNAT)&lt;/h3&gt;&lt;p&gt;PREROUTING这个chain在最前面，当一个包来到linux的网络接口的时候先过mangle的PREROUTING；然后是nat的PREROUTING,从这个chain的名字我们可以看出，这个chain是在路由之前(pre-routing)要过的。&lt;/p&gt;
&lt;p&gt;为什么要在路由之前过呢？大家可以看到这个图上，上面有一个菱形的部分叫ROUTING,这个ROUTING部分就是Linux的route box,也就是路由系统，它同样有很高深的功能，可以实现策略路由等等一些高级特性，此处我们不做详细解释。单说这个PREROUTING链，因为在这个链里面我们对包的操作是DNAT,也就是改变目的地址和（或端口），通常用在端口转发，或者nat到内网的DMZ区，也就是说当一个包过来的时候我们要改变它的目的地址，大家可以想想,如果一个包在改变目的地址之前就被扔进了route box,让系统选好路之后再改变目的地址，那么选路就可能是错的，或者说毫无意义了，所以，PREROUTING这个Chain一定要在进Routing 之前做。&lt;/p&gt;
&lt;p&gt;比如说，我们的公网ip是60.1.1.1/24，位于linux中的eth0内网ip是10.1.1.1/24，位于linux中的eth1, 我们的内网有一台web服务器，地址是10.1.1.2/24,我们怎么样能让internet用户通过这个公网ip访问我们内部的这个web服务器呢？ 我们就可以在这个PREROUTING链上面定义一个规则，把访问60.1.1.1:80的用户的目的地址改变一下，改变为10.1.1.2:80,这样 就实现了internet用户对内网服务器的访问了，当然了，这个端口是比较灵活的，我们可以定义任何一个端口的转发，不一定是80–&amp;gt;80，具体的命令我们在下面的例子中介绍，这里我们只谈流程与概念上的实现方法。&lt;/p&gt;
&lt;h3 id=&quot;FORWARD&quot;&gt;&lt;a href=&quot;#FORWARD&quot; class=&quot;headerlink&quot; title=&quot;FORWARD&quot;&gt;&lt;/a&gt;FORWARD&lt;/h3&gt;&lt;p&gt;好了，我们接着往下走，这个包已经过了两个PREROUTING链了，这个时候，出现了一个分支转折的地方，也就是图中下方的那个菱形（FORWARD）,转发！这里有一个对目的地址的判断（这里同样说明了PREROUTING一定要在最先，不仅要在route box之前，甚至是这个对目的地址的判断之前，因为我们可能做一个去某某某ip的地方转到自己的ip的规则，所以PREROUTING是最先处理这个包的Chain）！&lt;/p&gt;
&lt;p&gt;如果包的目的地是本机ip,那么包向上走，走入INPUT链处理，然后进入LOCAL PROCESS,如果非本地，那么就进入FORWARD链进行过滤，我们在这里就不介绍INPUT,OUTPUT的处理了，因为那主要是对于本机安全的一种处理，我们这里主要说对转发的过滤和nat的实现。&lt;/p&gt;
&lt;p&gt;这里的FORWARD我简单说一下，当linux收到了一个 目的ip地址不是本地的包 ，Linux会把这个包丢弃，因为默认情况下，Linux的三层包转发功能是关闭的，如果要让我们的linux实现转发，则需要打开这个转发功能，可以 改变它的一个系统参数，使用sysctl net.ipv4.ip_forward=1或者echo “1” &amp;gt; /proc/sys/net/ipv4/ip_forward命令打开转发功能。&lt;/p&gt;
&lt;p&gt;好了，在这里我们让linux允许转发，这个包的目的地址也不是本机，那么它将接着走入FORWARD链，在FORWARD链里面，我们就可以定义详细的规则，也就是是否允许他通过，或者对这个包的方向流程进行一些改变，这也是我们实现访问控制的地方，这里同样也是Mangle_FORWARD然后filter_FORWARD,我们操作任何一个链都会影响到这个包的命运，在下面的介绍中，我们就忽略掉mangle表，我们基本用不到操作它，所以我们假设它是透明的。&lt;/p&gt;
&lt;h3 id=&quot;POSTROUTING-SNAT&quot;&gt;&lt;a href=&quot;#POSTROUTING-SNAT&quot; class=&quot;headerlink&quot; title=&quot;POSTROUTING(SNAT)&quot;&gt;&lt;/a&gt;POSTROUTING(SNAT)&lt;/h3&gt;&lt;p&gt;假设这个包被我们的规则放过去了，也就是ACCEPT了，它将进入POSTROUTING部分， 注意！这里我注意到一个细节问题，也就是上面的图中数据包过了FORWARD链之后直接进入了POSTROUITNG链，我觉得这中间缺少一个环节，也就是route box,对于转发的包来说，linux同样需要在选路（路由）之后才能将它送出，这个图却没有标明这一点，我认为它是在过了route box之后才进入的POSTROUITNG，当然了，这对于我们讨论iptables的过滤转发来说不是很重要，只是我觉得流程上有这个问题，还是要说明 一下。&lt;/p&gt;
&lt;p&gt;同样的，我们在这里从名字就可以看出，这个POSTROUTING链应该是路由之后的一个链，也就是这个包要送出这台Linux的 最后一个环节了，这也是极其重要的一个环节！！这个时候linux已经完成(has done.._)了对这个包的路由（选路工作），已经找到了合适的接口送出这个包了，在这个链里面我们要进行重要的操作，就是被Linux称为 SNAT 的一个动作，修改源ip地址！为什么修改源ip地址？很多情况需要修改源地址阿，最常见的就是我们内网多台机器需要共享一个或几个公网ip访问internet,因为我们的内网地址是私有的，假如就让linux给路由出去，源地址也不变，这个包应该能访问到目的地，但是却回不来，因为 internet上的N多个路由节点不会转发私有地址的数据包，也就是说，不用合法ip,我们的数据包有去无回。有人会说：“既然是这样，我就不用私有 ip了，我自己分配自己合法的地址不行吗？那样包就会回来了吧？”答案是否定的，ip地址是ICANN来分配的，你的数据包或许能发到目的地，但是回来的 时候人家可不会转到你那里，internet上的路由器中的路由信息会把这个返回包送到那个合法的获得ip的地方去，你同样收不到,而你这种行为有可能被定义为一种ip欺骗，很多设备会把这样的包在接入端就给滤掉了，可能都到不了你要访问的那个服务器，呵呵。&lt;/p&gt;
&lt;p&gt;那么Linux如何做SNAT呢？比如一个内网的10.1.1.11的pc访问202.2.2.2的一个web服务器，linux的内网接口10.1.1.1在收到这个包之后把原来的 PC的 ip10.1.1.11改变为60.1.1.1的合法地址然后送出，同时在自己的ip_conntrack表里面做一个记录,记住是内网的哪一个ip的哪 个端口访问的这个web服务器，自己把它的源地址改成多少了，端口改成多少了，以便这个web服务器返回数据包的时候linux将它准确的送回给发送请求 的这个pc.&lt;/p&gt;
&lt;p&gt;大体的数据转发流程我们说完了,我们看看iptables使用什么样的参数来完成这些操作。&lt;/p&gt;
&lt;h2 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;概念理解&lt;/h2&gt;&lt;p&gt;在描述这些具体的操作之前，我还要说几个我对iptables的概念的理解（未必完全正确），这将有助于大家理解这些规则，以实现更精确的控制。&lt;/p&gt;
&lt;p&gt;上文中我们提到过，对包的控制是由我们在不同的Chain(链)上面添加不同的规则来实现的，比如我们对过滤表（filter table）添加规则来执行对包的操控。那么既然叫链，一定就是一条或者多条规则组成的了，这时就有一个问题了，如果多个规则对同一种包进行了定义，会发生什么事情呢？ 在Chain中，所有的规则都是从上向下来执行的 ，也就是说，如果匹配了第一行，那么就按照第一行的规则执行，一行一行的往下找，直到找到 符合这个类型的包的规则为止。如果找了一遍没有找到符合这个包的规则怎么办呢？itpables里面有一个概念，就是 Policy ，也就是策略。一说这个东西大家可能就会觉得比较麻烦，什么策略阿，我对于它的理解就是所谓这个策略就是chain中的最后一条规则，也就是说如果找了一遍找不到符合处理这个包的规则，就按照policy来办。这样理解起来就容易多了。iptables 使用-P来设置Chain的策略。&lt;/p&gt;
&lt;p&gt;好了，我们言归正传，来说说iptables到底怎样实现对包的控制。&lt;/p&gt;
&lt;h4 id=&quot;链操作&quot;&gt;&lt;a href=&quot;#链操作&quot; class=&quot;headerlink&quot; title=&quot;链操作&quot;&gt;&lt;/a&gt;链操作&lt;/h4&gt;&lt;p&gt;先介绍一下iptables如何操作链&lt;/p&gt;
&lt;p&gt;对链的操作就那么几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-I(插入)&lt;/li&gt;
&lt;li&gt;-A(追加)&lt;/li&gt;
&lt;li&gt;-R(替换)&lt;/li&gt;
&lt;li&gt;-D（删除）&lt;/li&gt;
&lt;li&gt;-L（列表显示）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里要说明的就是-I将会把规则放在第一行，-A将会放在最后一行。&lt;/p&gt;
&lt;p&gt;比如我们要添加一个规则到filter表的FORWARD链：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#意思为：追加一个规则至filter表中的FORWARD链尾，允许（-j ACCEPT）源地址为10.1.1.11目的地址为202.1.1.1的数据包通过。其中-t后面跟的是表名，在-A后面跟Chain名，后面的小写的 -s为源地址，-d为目的地址，-j为处理方向。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t filter -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.11 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 202.1.1.1 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在iptables中，默认的表名就是filter，所以这里可以省略-t filter直接写成: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.11 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 202.1.1.1 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;匹配参数&quot;&gt;&lt;a href=&quot;#匹配参数&quot; class=&quot;headerlink&quot; title=&quot;匹配参数&quot;&gt;&lt;/a&gt;匹配参数&lt;/h4&gt;&lt;p&gt;iptables中的匹配参数： 我们在这里就介绍几种常用的参数，详细地用法可以man iptables看它的联机文档，你会有意外的收获。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配源地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-p&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;协议匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-i&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;入接口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-o&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;出接口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;–sport，–dport&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;源和目的端口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-j&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳转,也就是包的方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;!&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;取反&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中还有一个!参数，使用!就是取反的意思。下面我们简单举几个例子介绍一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-s 这个参数呢就是指定源地址的，如果使用这个参数也就是告诉netfilter，对于符合这样一个源地址的包怎么去处理，可以指定某一个单播ip地址，也可以指定一个网络，如果单个的ip地址其实隐含了一个32位的子网掩码，比如-s 10.1.1.11 其实就是-s 10.1.1.11/32，同样我们可以指定不同的掩码用以实现源网络地址的规则，比如一个C类地址我们可以用-s 10.1.1.0/24来指定。&lt;/li&gt;
&lt;li&gt;-d参数与-s格式一样。&lt;/li&gt;
&lt;li&gt;-i参数是指定入接口的网络接口，比如我仅仅允许从eth3接口过来的包通过FORWARD链，就可以这样指定iptables -A FORWARD -i eth3 -j ACCEPT&lt;/li&gt;
&lt;li&gt;-o是出接口,与上同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们下面用一些简单的实例来step by step看看iptables的具体配置方法。&lt;/p&gt;
&lt;h4 id=&quot;实例一：简单的nat路由器&quot;&gt;&lt;a href=&quot;#实例一：简单的nat路由器&quot; class=&quot;headerlink&quot; title=&quot;实例一：简单的nat路由器&quot;&gt;&lt;/a&gt;实例一：简单的nat路由器&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux 2.4 +&lt;/li&gt;
&lt;li&gt;2个网络接口&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;目的：实现内网中的节点（10.1.1.0/24）可控的访问internet。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#首先将Lan的节点pc的网关指向10.1.1.254。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#确定你的linux的ip配置无误，可以正确的ping通内外的地址。同时用route命令查看linux的本地路由表，确认指定了可用的ISP提供的默认网关。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打开linux的转发功能：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.ip_forward=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将FORWARD链的策略设置为DROP，这样做的目的是做到对内网ip的控制，你允许哪一个访问internet就可以增加一个规则，不在规则中的ip将无法访问internet.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -P FORWARD DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这条规则规定允许任何地址到任何地址的确认包和关联包通过。一定要加这一条，否则你只允许lan IP访问没有用，至于为什么，下面我们再详细说。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这条规则做了一个SNAT，也就是源地址转换，将来自10.1.1.0/24的地址转换为60.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#(Deven：因为是让内网上网，因此对于代理服务器而言POSTROUTING（经过路由之后的包应该要把源地址改变为60.1.1.1，否则包无法返回）)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.0/24 -j SNAT --to 60.1.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#有这几条规则，一个简单的nat路由器就实现了。这时你可以将允许访问的ip添加至FORWARD链，他们就能访问internet了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#比如我想让10.1.1.9这个地址访问internet,那么你就加如下的命令就可以了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.9 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#也可以精确控制他的访问地址,比如我就允许10.1.1.99访问3.3.3.3这个ip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.99 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#或者只允许他们访问80端口。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.0/24 -p tcp --dport http -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#更多的控制可以自己灵活去做,或者查阅iptables的联机文档。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实例二：端口转发&quot;&gt;&lt;a href=&quot;#实例二：端口转发&quot; class=&quot;headerlink&quot; title=&quot;实例二：端口转发&quot;&gt;&lt;/a&gt;实例二：端口转发&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux 2.4 +&lt;/li&gt;
&lt;li&gt;2个网络接口&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;Lan内web server: 10.1.1.1:80&lt;/li&gt;
&lt;li&gt;Lan内ftp server: 10.1.1.2:21&lt;/li&gt;
&lt;li&gt;Wan口:60.1.1.1/24 eth1&lt;/li&gt;
&lt;li&gt;目的：对内部server进行端口转发实现internet用户访问内网服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#同样确认你的linux的各项配置正常，能够访问内外网。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -P FORWARD DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#也需要加入确认包和关联包的允许通过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如果你要把访问60.1.1.1:80的数据包转发到Lan内web server,用下面的命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 60.1.1.1 -p tcp --dport 80 -j DNAT --to 10.1.1.1:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#ftp服务也同样，命令如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 60.1.1.1 -p tcp --dport 21 -j DNAT --to 10.1.1.2:21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，命令完成了，端口转发也做完了，本例能不能转发呢？不能，为什么呢？我下面详细分析一下。&lt;/p&gt;
&lt;p&gt;对于iptables好像往外访问的配置比较容易，而对内的转发似乎就有一些问题了，在一开始的时候我就先说了一些关于netfilter的流程问题，那么我就简单说说做了这些配置之后为什么有可能还不行呢？&lt;/p&gt;
&lt;p&gt;能引起这个配置失败的原因有很多，我们一个个的来说：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一&lt;/strong&gt; 本例中，我们的FORWARD策略是DROP,那么也就是说，没有符合规则的包将被丢弃，不管内到外还是外到内，我们在这里依然不讨论那个确认包和关联包的问题，我们不用考虑他的问题，下面我会详细说一下这个东西，那么如何让本例可以成功呢？加入下面的规则。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.1 -p tcp --dport 80 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.2 -p tcp --dport 21 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有没有觉得有一些晕？为什么目的地址是10.xxx而不是60.xxx人家internet用户不是访问的60.xxx吗？呵呵，回到上面看看那个图吧，FORWARD链在什么位置上，它是在PREROUTING之后，也就是说当这个包到达FORWARD链的时候，目的地址已经变成10.xxx了，假如internet用户的请求是这样202.1.1.1:1333–&amp;gt;60.1.1.1:80，在经过了我们的PREROUTING链之后将变成 202.1.1.1:1333–&amp;gt;10.1.1.1:80,这个时候如果你设置一个目的地址为60.xxx的规则有用吗？呵呵，这是问题一。这个时候应该可以完成端口转发的访问了，但是有一些时候还是不行？为什么？看问题二。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二&lt;/strong&gt; 内网server的ip配置问题，这里我们以web server为例说明一下（ftp情况有一些特殊，下面我们再详细讨论，说确认包和关联包的时候讨论这个问题），上面说到，有的时候可以访问了，有的时候却不行，就是这个web server的ip设置问题了，如果web server没有指定默认的网关，那么在作了上面的配置之后，web server会收到internet的请求，但是，他不知道往哪里回啊，人家的本地路由表不知道你那个internet的ip,202.1.1.1该怎么走。如果你使用截包工具在web server上面察看，你会发现server收到了来自202.1.1.1:1333–&amp;gt;10.1.1.1:80的请求，由于你没有给web server配置默认网关，它不知道怎么回去，所以就出现了不通的情况。怎么办呢？两个解决方法：&lt;/p&gt;
&lt;p&gt;一就是给这个server配置一个默认网关，当然要指向这个配置端口转发的linux,本例是10.1.1.254,配置好了，就一定能访问了。有一个疑问？难道不需要在FORWARD链上面设置一个允许web server的ip地址访问外网的规则吗？它的包能出去？答案是肯定的，能出去。因为我们那一条允许确认包与关联包的规则，否则它是出不去的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二种方法&lt;/strong&gt;，比较麻烦一些，但是对服务器来说这样似乎更安全一些。方法就是对这个包再作一次SNAT，也就是在POSTROUTING链上添加规则。命令如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.1 -p tcp --dport 80 -j SNAT --to 10.1.1.254&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ftp 的方法相同。这条命令不太好懂？？其实很简单，如果使用这条命令，那么你的web server不需要再设置默认网关，就能收到这个请求，只要他和linux的lan ip地址是能互访的（也就是说web server和Linux的Lan ip在一个广播域），我们在根据上面的netfilter流程图来分析这个包到底被我们怎么样了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先一个请求202.1.1.1:1333–&amp;gt; 60.1.1.1:80被linux收到了，进入PREROUTING；&lt;/li&gt;
&lt;li&gt;发现一个规则iptables -t nat -A PREROUTING -d 60.1.1.1 -p tcp –dport 80 -j DNAT –to 10.1.1.1:80符合，好了，改你的目的地址，于是这个包变成了202.1.1.1:1333–&amp;gt;10.1.1.1:80，继续往前走；&lt;/li&gt;
&lt;li&gt;进入FORWARD链，okay,也有一条规则允许通过iptables -A FORWARD -d 10.1.1.1 -p tcp –dport 80 -j ACCEPT；&lt;/li&gt;
&lt;li&gt;进入route box选路，找到合适的路径了，继续进入POSTROUTING链；&lt;/li&gt;
&lt;li&gt;耶？又发现一个符合的规则iptables -t nat -A POSTROUTING -d 10.1.1.1 -p tcp –dport 80 -j SNAT –to 10.1.1.254,原来是一个SNAT,改你的源地址，于是这个包变成了10.1.1.254:xxxx–&amp;gt;10.1.1.1:80。为什么用xxxx了，这里的端口是随机的，我也不知道会是什么。&lt;/li&gt;
&lt;li&gt;而整个的两次变化的过程都会记录在linux的ip_conntrack中；&lt;/li&gt;
&lt;li&gt;当web server收到这个包的时候，发现，原来是一个内网自己兄弟来的请求阿，又在一个广播域，不用找网关，把返回包直接扔给交换机了；&lt;/li&gt;
&lt;li&gt;linux在收到返回包之后，会根据他的ip_conntrack中的条目进行两次变换，返回真正的internet用户，于是完成这一次的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了上面的两个例子，不知道大家是否清楚了iptables的转发流程，希望对大家有所帮助。&lt;/p&gt;
&lt;h4 id=&quot;状态机制&quot;&gt;&lt;a href=&quot;#状态机制&quot; class=&quot;headerlink&quot; title=&quot;状态机制&quot;&gt;&lt;/a&gt;状态机制&lt;/h4&gt;&lt;p&gt;下面我们就说说我一直在上面提到的关于那个ESTABLISHED,RELATED的规则是怎么回事，到底有什么用处。&lt;/p&gt;
&lt;p&gt;说这个东西就要简单说一下网络的数据通讯的方式，我们知道，网络的访问是双向的，也就是说一个Client与Server之间完成数据交换需要双方的发包与收包。在netfilter中，有几种状态，也就是new, established,related,invalid。&lt;/p&gt;
&lt;p&gt;当一个客户端，在本文例一中，内网的一台机器访问外网，我们设置了规则允许他出去，但是没有设置允许回来的规则阿，怎么完成访问呢？这就是netfilter的 状态机制 ，当一个lan用户通过这个linux访问外网的时候，它发送了一个请求包，这个包的状态是new,当外网回包的时候他的状态就是established,所以，linux知道，哦，这个包是我的内网的一台机器发出去的应答包，他就放行了。&lt;/p&gt;
&lt;p&gt;而外网试图对内发起一个新的连接的时候，他的状态是new,所以linux压根不去理会它。这就是我们为什么要加这一句的原因。&lt;/p&gt;
&lt;p&gt;还有那个related,他是一个关联状态，什么会用到呢？tftp,ftp都会用到，因为他们的传输机制决定了，它不像http访问那样，Client_IP: port–&amp;gt;server:80然后server:80–&amp;gt;Client_IP:port，ftp使用tcp21建立连接，使用20端口发送数据，其中又有两种方式，一种主动active mode，一种被动passive mode。主动模式下，client使用port命令告诉server我用哪一个端口接受数据，然后server主动发起对这个端口的请求。被动模式下，server使用port命令告诉客户端，它用那个端口监听，然后客户端发起对他的数据传输，所以这对于一个防火墙来说就是比较麻烦的事情，因为有可能会有new状态的数据包，但是它又是合理的请求，这个时候就用到这个related状态了，他就是一种关联，在linux中，有个叫 ftp_conntrack的模块，它能识别port命令，然后对相应的端口进行放行。&lt;/p&gt;
&lt;p&gt;一口气写了这么多东西，不知道质量如何，大家凑和着看吧，希望多多交流共同进步，我还是一个linux的初学者，难免很多谬误，希望高手赐教指正，以期不断进步。&lt;/p&gt;
&lt;h4 id=&quot;实用命令&quot;&gt;&lt;a href=&quot;#实用命令&quot; class=&quot;headerlink&quot; title=&quot;实用命令&quot;&gt;&lt;/a&gt;实用命令&lt;/h4&gt;&lt;p&gt;对了，还有几个在实际中比较实用（也比较受用:-)）的命令参数，写出来供大家参考&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这样的列表会跳过linux的domain lookup,有的时候使用iptables -L会比较慢，因为linux会尝试解析ip的域名，真是罗嗦，如果你的dns server比较不爽的话，iptables -L就会让你很不爽，加一个-n参数就好了。列表刷的就出来。当然了，如果你的linux就是做防火墙，建议把nameserver去掉，在 /etc/resolve.conf里面，因为有时候使用route命令也会比较慢列出来，很是不爽。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -L -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这个命令会显示链中规则的包和流量计数，嘿嘿，看看哪些小子用的流量那么多，用tc限了他。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -L -vn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看nat表中的规则。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/net/ip_conntrack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看目前的conntrack，可能会比较多哦，最好加一个|grep &quot;关键字&quot;，看看你感兴趣的链接跟踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wc &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /proc/net/ip_conntrack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#看看总链接有多少条。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables-save &amp;gt;/etc/iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#把当前的所有链备份一下，之所以放到/etc下面叫iptables，因为这样重起机器的时候会自动加载所有的链，经常地备份一下吧，否则如果链多，万一掉电重启，你还是会比较痛苦。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转发&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#之前因为一个网段被封了，因此通过iptables做转发：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#代理服务器WAN IP：111.**.**.219，LAN IP：192.168.0.219&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#内网服务器IP：192.168.0.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1.在代理服务器打开转发功能（sysctl.conf）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#2.添加以下规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 111.**.**.219 -p tcp --dport 9999 -j DNAT --to-destination 192.168.0.41:9999&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 192.168.0.41 -p tcp --dport 9999 -j SNAT --to-source 192.168.0.219&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 原文：&lt;a href=&quot;http://wwdhks.blog.51cto.com/839773/1154032&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wwdhks.blog.51cto.com/839773/1154032&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iptables是一个Linux下优秀的nat+防火墙工具，我使用该工具以较低配置的传统pc配置了一个灵活强劲的防火墙+nat系统,小有心得，看了网上也有很多这方面的文章，但是似乎要么说的比较少，要么就是比较偏，内容不全，容易误导，我研究了一段时间的iptables同时也用了很久，有点滴经验，写来供大家参考，同时也备日后自己翻阅。&lt;/p&gt;
&lt;p&gt;首先要说明的是，iptables操作的是2.4以上内核的netfilter。所以需要linux的内核在2.4以上。其功能与安全性远远比其前辈ipfwadm,ipchains强大，iptables大致是工作在OSI七层的二、三、四层，其前辈ipchains不能单独实现对tcp/udp port以及对mac地址的的定义与操作，所以我想ipchains应该是仅仅工作在三层上的。&lt;/p&gt;
&lt;h2 id=&quot;netfilter工作流程&quot;&gt;&lt;a href=&quot;#netfilter工作流程&quot; class=&quot;headerlink&quot; title=&quot;netfilter工作流程&quot;&gt;&lt;/a&gt;netfilter工作流程&lt;/h2&gt;&lt;p&gt;我们先简单介绍一下netfilter的大致工作流程，也就是一个数据包（或者叫分组、packet,我个人习惯叫包）在到达linux的网络接口的时候 （网卡）如何处理这个包，然后再介绍一下如何用iptables改变或者说控制对这个数据包进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;netfilter内部分为三个表，分别是 filter,nat,mangle，每个表又有不同的操作链（Chains）。&lt;/li&gt;
&lt;li&gt;在filter（过滤）表中，也就是他的 防火墙功能 的这个表，定义了三个 Chain。分别是INPUT,FORWARD,OUTPUT。也就是对包的入、转发、出进行定义的三个过滤链。对于这个filter表的操作和控制也是我们实现防火墙功能的一个重要手段&lt;/li&gt;
&lt;li&gt;在nat(Network Address Translation、网络地址翻译)表中，也就是我们用以实现地址转换和端口转发功能的这个表，定义了PREROUTING, POSTROUTING,OUTPUT三个链,下面我们会对这三个链作详细的说明&lt;/li&gt;
&lt;li&gt;而netfilter的mangle表则是一个自定义表，里面包括上面 的filter以及nat表中的各种chains，它可以让我们进行一些自定义的操作，同时这个mangle表中的chains在netfilter对包 的处理流程中处在一个比较优先的位置。
    
    </summary>
    
      <category term="Linux" scheme="http://icyxp.github.io/categories/Linux/"/>
    
    
      <category term="iptables" scheme="http://icyxp.github.io/tags/iptables/"/>
    
  </entry>
  
</feed>
