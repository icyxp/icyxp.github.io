<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devops</title>
  <subtitle>网站架构|系统架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icyxp.github.io/"/>
  <updated>2016-06-20T08:58:00.000Z</updated>
  <id>http://icyxp.github.io/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过iptables实现端口转发与内网共享上网</title>
    <link href="http://icyxp.github.io//blog/2016/06/iptables-forward-internet-share.html"/>
    <id>http://icyxp.github.io//blog/2016/06/iptables-forward-internet-share.html</id>
    <published>2016-06-29T07:48:29.866Z</published>
    <updated>2016-06-20T08:58:00.000Z</updated>
    
    <content type="html">&lt;p&gt;iptables是一个Linux下优秀的nat+防火墙工具，我使用该工具以较低配置的传统pc配置了一个灵活强劲的防火墙+nat系统,小有心得，看了网上也有很多这方面的文章，但是似乎要么说的比较少，要么就是比较偏，内容不全，容易误导，我研究了一段时间的iptables同时也用了很久，有点滴经验，写来供大家参考，同时也备日后自己翻阅。&lt;/p&gt;
&lt;p&gt;首先要说明的是，iptables操作的是2.4以上内核的netfilter。所以需要linux的内核在2.4以上。其功能与安全性远远比其前辈ipfwadm,ipchains强大，iptables大致是工作在OSI七层的二、三、四层，其前辈ipchains不能单独实现对tcp/udp port以及对mac地址的的定义与操作，所以我想ipchains应该是仅仅工作在三层上的。&lt;/p&gt;
&lt;h2 id=&quot;netfilter工作流程&quot;&gt;&lt;a href=&quot;#netfilter工作流程&quot; class=&quot;headerlink&quot; title=&quot;netfilter工作流程&quot;&gt;&lt;/a&gt;netfilter工作流程&lt;/h2&gt;&lt;p&gt;我们先简单介绍一下netfilter的大致工作流程，也就是一个数据包（或者叫分组、packet,我个人习惯叫包）在到达linux的网络接口的时候 （网卡）如何处理这个包，然后再介绍一下如何用iptables改变或者说控制对这个数据包进行操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;netfilter内部分为三个表，分别是 filter,nat,mangle，每个表又有不同的操作链（Chains）。&lt;/li&gt;
&lt;li&gt;在filter（过滤）表中，也就是他的 防火墙功能 的这个表，定义了三个 Chain。分别是INPUT,FORWARD,OUTPUT。也就是对包的入、转发、出进行定义的三个过滤链。对于这个filter表的操作和控制也是我们实现防火墙功能的一个重要手段&lt;/li&gt;
&lt;li&gt;在nat(Network Address Translation、网络地址翻译)表中，也就是我们用以实现地址转换和端口转发功能的这个表，定义了PREROUTING, POSTROUTING,OUTPUT三个链,下面我们会对这三个链作详细的说明&lt;/li&gt;
&lt;li&gt;而netfilter的mangle表则是一个自定义表，里面包括上面 的filter以及nat表中的各种chains，它可以让我们进行一些自定义的操作，同时这个mangle表中的chains在netfilter对包 的处理流程中处在一个比较优先的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面有一张图清晰的描绘了netfilter对包的处理流程（该图摘自网上，不知作者是谁，在此深表敬意！），一般情况下，我们用不到这个mangle表，在这里我们就不做介绍了。&lt;br&gt;&lt;img src=&quot;/images/iptables_netfilter_chains.png&quot; alt=&quot;iptables包处理流程&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ebtables基本使用: &lt;a href=&quot;http://www.cnblogs.com/peteryj/archive/2011/07/24/2115602.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/peteryj/archive/2011/07/24/2115602.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/images/iptables_entables.png&quot; alt=&quot;iptables_entables处理流程图&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;PREROUTING-DNAT&quot;&gt;&lt;a href=&quot;#PREROUTING-DNAT&quot; class=&quot;headerlink&quot; title=&quot;PREROUTING(DNAT)&quot;&gt;&lt;/a&gt;PREROUTING(DNAT)&lt;/h3&gt;&lt;p&gt;PREROUTING这个chain在最前面，当一个包来到linux的网络接口的时候先过mangle的PREROUTING；然后是nat的PREROUTING,从这个chain的名字我们可以看出，这个chain是在路由之前(pre-routing)要过的。&lt;/p&gt;
&lt;p&gt;为什么要在路由之前过呢？大家可以看到这个图上，上面有一个菱形的部分叫ROUTING,这个ROUTING部分就是Linux的route box,也就是路由系统，它同样有很高深的功能，可以实现策略路由等等一些高级特性，此处我们不做详细解释。单说这个PREROUTING链，因为在这个链里面我们对包的操作是DNAT,也就是改变目的地址和（或端口），通常用在端口转发，或者nat到内网的DMZ区，也就是说当一个包过来的时候我们要改变它的目的地址，大家可以想想,如果一个包在改变目的地址之前就被扔进了route box,让系统选好路之后再改变目的地址，那么选路就可能是错的，或者说毫无意义了，所以，PREROUTING这个Chain一定要在进Routing 之前做。&lt;/p&gt;
&lt;p&gt;比如说，我们的公网ip是60.1.1.1/24，位于linux中的eth0内网ip是10.1.1.1/24，位于linux中的eth1, 我们的内网有一台web服务器，地址是10.1.1.2/24,我们怎么样能让internet用户通过这个公网ip访问我们内部的这个web服务器呢？ 我们就可以在这个PREROUTING链上面定义一个规则，把访问60.1.1.1:80的用户的目的地址改变一下，改变为10.1.1.2:80,这样 就实现了internet用户对内网服务器的访问了，当然了，这个端口是比较灵活的，我们可以定义任何一个端口的转发，不一定是80–&amp;gt;80，具体的命令我们在下面的例子中介绍，这里我们只谈流程与概念上的实现方法。&lt;/p&gt;
&lt;h3 id=&quot;FORWARD&quot;&gt;&lt;a href=&quot;#FORWARD&quot; class=&quot;headerlink&quot; title=&quot;FORWARD&quot;&gt;&lt;/a&gt;FORWARD&lt;/h3&gt;&lt;p&gt;好了，我们接着往下走，这个包已经过了两个PREROUTING链了，这个时候，出现了一个分支转折的地方，也就是图中下方的那个菱形（FORWARD）,转发！这里有一个对目的地址的判断（这里同样说明了PREROUTING一定要在最先，不仅要在route box之前，甚至是这个对目的地址的判断之前，因为我们可能做一个去某某某ip的地方转到自己的ip的规则，所以PREROUTING是最先处理这个包的Chain）！&lt;/p&gt;
&lt;p&gt;如果包的目的地是本机ip,那么包向上走，走入INPUT链处理，然后进入LOCAL PROCESS,如果非本地，那么就进入FORWARD链进行过滤，我们在这里就不介绍INPUT,OUTPUT的处理了，因为那主要是对于本机安全的一种处理，我们这里主要说对转发的过滤和nat的实现。&lt;/p&gt;
&lt;p&gt;这里的FORWARD我简单说一下，当linux收到了一个 目的ip地址不是本地的包 ，Linux会把这个包丢弃，因为默认情况下，Linux的三层包转发功能是关闭的，如果要让我们的linux实现转发，则需要打开这个转发功能，可以 改变它的一个系统参数，使用sysctl net.ipv4.ip_forward=1或者echo “1” &amp;gt; /proc/sys/net/ipv4/ip_forward命令打开转发功能。&lt;/p&gt;
&lt;p&gt;好了，在这里我们让linux允许转发，这个包的目的地址也不是本机，那么它将接着走入FORWARD链，在FORWARD链里面，我们就可以定义详细的规则，也就是是否允许他通过，或者对这个包的方向流程进行一些改变，这也是我们实现访问控制的地方，这里同样也是Mangle_FORWARD然后filter_FORWARD,我们操作任何一个链都会影响到这个包的命运，在下面的介绍中，我们就忽略掉mangle表，我们基本用不到操作它，所以我们假设它是透明的。&lt;/p&gt;
&lt;h3 id=&quot;POSTROUTING-SNAT&quot;&gt;&lt;a href=&quot;#POSTROUTING-SNAT&quot; class=&quot;headerlink&quot; title=&quot;POSTROUTING(SNAT)&quot;&gt;&lt;/a&gt;POSTROUTING(SNAT)&lt;/h3&gt;&lt;p&gt;假设这个包被我们的规则放过去了，也就是ACCEPT了，它将进入POSTROUTING部分， 注意！这里我注意到一个细节问题，也就是上面的图中数据包过了FORWARD链之后直接进入了POSTROUITNG链，我觉得这中间缺少一个环节，也就是route box,对于转发的包来说，linux同样需要在选路（路由）之后才能将它送出，这个图却没有标明这一点，我认为它是在过了route box之后才进入的POSTROUITNG，当然了，这对于我们讨论iptables的过滤转发来说不是很重要，只是我觉得流程上有这个问题，还是要说明 一下。&lt;/p&gt;
&lt;p&gt;同样的，我们在这里从名字就可以看出，这个POSTROUTING链应该是路由之后的一个链，也就是这个包要送出这台Linux的 最后一个环节了，这也是极其重要的一个环节！！这个时候linux已经完成(has done.._)了对这个包的路由（选路工作），已经找到了合适的接口送出这个包了，在这个链里面我们要进行重要的操作，就是被Linux称为 SNAT 的一个动作，修改源ip地址！为什么修改源ip地址？很多情况需要修改源地址阿，最常见的就是我们内网多台机器需要共享一个或几个公网ip访问internet,因为我们的内网地址是私有的，假如就让linux给路由出去，源地址也不变，这个包应该能访问到目的地，但是却回不来，因为 internet上的N多个路由节点不会转发私有地址的数据包，也就是说，不用合法ip,我们的数据包有去无回。有人会说：“既然是这样，我就不用私有 ip了，我自己分配自己合法的地址不行吗？那样包就会回来了吧？”答案是否定的，ip地址是ICANN来分配的，你的数据包或许能发到目的地，但是回来的 时候人家可不会转到你那里，internet上的路由器中的路由信息会把这个返回包送到那个合法的获得ip的地方去，你同样收不到,而你这种行为有可能被定义为一种ip欺骗，很多设备会把这样的包在接入端就给滤掉了，可能都到不了你要访问的那个服务器，呵呵。&lt;/p&gt;
&lt;p&gt;那么Linux如何做SNAT呢？比如一个内网的10.1.1.11的pc访问202.2.2.2的一个web服务器，linux的内网接口10.1.1.1在收到这个包之后把原来的 PC的 ip10.1.1.11改变为60.1.1.1的合法地址然后送出，同时在自己的ip_conntrack表里面做一个记录,记住是内网的哪一个ip的哪 个端口访问的这个web服务器，自己把它的源地址改成多少了，端口改成多少了，以便这个web服务器返回数据包的时候linux将它准确的送回给发送请求 的这个pc.&lt;/p&gt;
&lt;p&gt;大体的数据转发流程我们说完了,我们看看iptables使用什么样的参数来完成这些操作。&lt;/p&gt;
&lt;h2 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;概念理解&lt;/h2&gt;&lt;p&gt;在描述这些具体的操作之前，我还要说几个我对iptables的概念的理解（未必完全正确），这将有助于大家理解这些规则，以实现更精确的控制。&lt;/p&gt;
&lt;p&gt;上文中我们提到过，对包的控制是由我们在不同的Chain(链)上面添加不同的规则来实现的，比如我们对过滤表（filter table）添加规则来执行对包的操控。那么既然叫链，一定就是一条或者多条规则组成的了，这时就有一个问题了，如果多个规则对同一种包进行了定义，会发生什么事情呢？ 在Chain中，所有的规则都是从上向下来执行的 ，也就是说，如果匹配了第一行，那么就按照第一行的规则执行，一行一行的往下找，直到找到 符合这个类型的包的规则为止。如果找了一遍没有找到符合这个包的规则怎么办呢？itpables里面有一个概念，就是 Policy ，也就是策略。一说这个东西大家可能就会觉得比较麻烦，什么策略阿，我对于它的理解就是所谓这个策略就是chain中的最后一条规则，也就是说如果找了一遍找不到符合处理这个包的规则，就按照policy来办。这样理解起来就容易多了。iptables 使用-P来设置Chain的策略。&lt;/p&gt;
&lt;p&gt;好了，我们言归正传，来说说iptables到底怎样实现对包的控制。&lt;/p&gt;
&lt;h4 id=&quot;链操作&quot;&gt;&lt;a href=&quot;#链操作&quot; class=&quot;headerlink&quot; title=&quot;链操作&quot;&gt;&lt;/a&gt;链操作&lt;/h4&gt;&lt;p&gt;先介绍一下iptables如何操作链&lt;/p&gt;
&lt;p&gt;对链的操作就那么几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-I(插入)&lt;/li&gt;
&lt;li&gt;-A(追加)&lt;/li&gt;
&lt;li&gt;-R(替换)&lt;/li&gt;
&lt;li&gt;-D（删除）&lt;/li&gt;
&lt;li&gt;-L（列表显示）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里要说明的就是-I将会把规则放在第一行，-A将会放在最后一行。&lt;/p&gt;
&lt;p&gt;比如我们要添加一个规则到filter表的FORWARD链：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#意思为：追加一个规则至filter表中的FORWARD链尾，允许（-j ACCEPT）源地址为10.1.1.11目的地址为202.1.1.1的数据包通过。其中-t后面跟的是表名，在-A后面跟Chain名，后面的小写的 -s为源地址，-d为目的地址，-j为处理方向。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t filter -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.11 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 202.1.1.1 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在iptables中，默认的表名就是filter，所以这里可以省略-t filter直接写成: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.11 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 202.1.1.1 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;匹配参数&quot;&gt;&lt;a href=&quot;#匹配参数&quot; class=&quot;headerlink&quot; title=&quot;匹配参数&quot;&gt;&lt;/a&gt;匹配参数&lt;/h4&gt;&lt;p&gt;iptables中的匹配参数： 我们在这里就介绍几种常用的参数，详细地用法可以man iptables看它的联机文档，你会有意外的收获。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;参数&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-s&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配源地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-d&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配目的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-p&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;协议匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-i&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;入接口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-o&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;出接口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;–sport，–dport&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;源和目的端口匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;-j&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳转,也就是包的方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;!&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;取反&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中还有一个!参数，使用!就是取反的意思。下面我们简单举几个例子介绍一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-s 这个参数呢就是指定源地址的，如果使用这个参数也就是告诉netfilter，对于符合这样一个源地址的包怎么去处理，可以指定某一个单播ip地址，也可以指定一个网络，如果单个的ip地址其实隐含了一个32位的子网掩码，比如-s 10.1.1.11 其实就是-s 10.1.1.11/32，同样我们可以指定不同的掩码用以实现源网络地址的规则，比如一个C类地址我们可以用-s 10.1.1.0/24来指定。&lt;/li&gt;
&lt;li&gt;-d参数与-s格式一样。&lt;/li&gt;
&lt;li&gt;-i参数是指定入接口的网络接口，比如我仅仅允许从eth3接口过来的包通过FORWARD链，就可以这样指定iptables -A FORWARD -i eth3 -j ACCEPT&lt;/li&gt;
&lt;li&gt;-o是出接口,与上同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们下面用一些简单的实例来step by step看看iptables的具体配置方法。&lt;/p&gt;
&lt;h4 id=&quot;实例一：简单的nat路由器&quot;&gt;&lt;a href=&quot;#实例一：简单的nat路由器&quot; class=&quot;headerlink&quot; title=&quot;实例一：简单的nat路由器&quot;&gt;&lt;/a&gt;实例一：简单的nat路由器&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux 2.4 +&lt;/li&gt;
&lt;li&gt;2个网络接口&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;目的：实现内网中的节点（10.1.1.0/24）可控的访问internet。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#首先将Lan的节点pc的网关指向10.1.1.254。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#确定你的linux的ip配置无误，可以正确的ping通内外的地址。同时用route命令查看linux的本地路由表，确认指定了可用的ISP提供的默认网关。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打开linux的转发功能：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.ip_forward=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将FORWARD链的策略设置为DROP，这样做的目的是做到对内网ip的控制，你允许哪一个访问internet就可以增加一个规则，不在规则中的ip将无法访问internet.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -P FORWARD DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这条规则规定允许任何地址到任何地址的确认包和关联包通过。一定要加这一条，否则你只允许lan IP访问没有用，至于为什么，下面我们再详细说。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这条规则做了一个SNAT，也就是源地址转换，将来自10.1.1.0/24的地址转换为60.1.1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#(Deven：因为是让内网上网，因此对于代理服务器而言POSTROUTING（经过路由之后的包应该要把源地址改变为60.1.1.1，否则包无法返回）)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.0/24 -j SNAT --to 60.1.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#有这几条规则，一个简单的nat路由器就实现了。这时你可以将允许访问的ip添加至FORWARD链，他们就能访问internet了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#比如我想让10.1.1.9这个地址访问internet,那么你就加如下的命令就可以了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.9 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#也可以精确控制他的访问地址,比如我就允许10.1.1.99访问3.3.3.3这个ip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.99 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#或者只允许他们访问80端口。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.1.1.0/24 -p tcp --dport http -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#更多的控制可以自己灵活去做,或者查阅iptables的联机文档。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实例二：端口转发&quot;&gt;&lt;a href=&quot;#实例二：端口转发&quot; class=&quot;headerlink&quot; title=&quot;实例二：端口转发&quot;&gt;&lt;/a&gt;实例二：端口转发&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux 2.4 +&lt;/li&gt;
&lt;li&gt;2个网络接口&lt;/li&gt;
&lt;li&gt;Lan口:10.1.1.254/24 eth0&lt;/li&gt;
&lt;li&gt;Lan内web server: 10.1.1.1:80&lt;/li&gt;
&lt;li&gt;Lan内ftp server: 10.1.1.2:21&lt;/li&gt;
&lt;li&gt;Wan口:60.1.1.1/24 eth1&lt;/li&gt;
&lt;li&gt;目的：对内部server进行端口转发实现internet用户访问内网服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#同样确认你的linux的各项配置正常，能够访问内外网。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -P FORWARD DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#也需要加入确认包和关联包的允许通过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如果你要把访问60.1.1.1:80的数据包转发到Lan内web server,用下面的命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 60.1.1.1 -p tcp --dport 80 -j DNAT --to 10.1.1.1:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#ftp服务也同样，命令如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 60.1.1.1 -p tcp --dport 21 -j DNAT --to 10.1.1.2:21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，命令完成了，端口转发也做完了，本例能不能转发呢？不能，为什么呢？我下面详细分析一下。&lt;/p&gt;
&lt;p&gt;对于iptables好像往外访问的配置比较容易，而对内的转发似乎就有一些问题了，在一开始的时候我就先说了一些关于netfilter的流程问题，那么我就简单说说做了这些配置之后为什么有可能还不行呢？&lt;/p&gt;
&lt;p&gt;能引起这个配置失败的原因有很多，我们一个个的来说：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一&lt;/strong&gt; 本例中，我们的FORWARD策略是DROP,那么也就是说，没有符合规则的包将被丢弃，不管内到外还是外到内，我们在这里依然不讨论那个确认包和关联包的问题，我们不用考虑他的问题，下面我会详细说一下这个东西，那么如何让本例可以成功呢？加入下面的规则。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.1 -p tcp --dport 80 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A FORWARD &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.2 -p tcp --dport 21 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有没有觉得有一些晕？为什么目的地址是10.xxx而不是60.xxx人家internet用户不是访问的60.xxx吗？呵呵，回到上面看看那个图吧，FORWARD链在什么位置上，它是在PREROUTING之后，也就是说当这个包到达FORWARD链的时候，目的地址已经变成10.xxx了，假如internet用户的请求是这样202.1.1.1:1333–&amp;gt;60.1.1.1:80，在经过了我们的PREROUTING链之后将变成 202.1.1.1:1333–&amp;gt;10.1.1.1:80,这个时候如果你设置一个目的地址为60.xxx的规则有用吗？呵呵，这是问题一。这个时候应该可以完成端口转发的访问了，但是有一些时候还是不行？为什么？看问题二。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二&lt;/strong&gt; 内网server的ip配置问题，这里我们以web server为例说明一下（ftp情况有一些特殊，下面我们再详细讨论，说确认包和关联包的时候讨论这个问题），上面说到，有的时候可以访问了，有的时候却不行，就是这个web server的ip设置问题了，如果web server没有指定默认的网关，那么在作了上面的配置之后，web server会收到internet的请求，但是，他不知道往哪里回啊，人家的本地路由表不知道你那个internet的ip,202.1.1.1该怎么走。如果你使用截包工具在web server上面察看，你会发现server收到了来自202.1.1.1:1333–&amp;gt;10.1.1.1:80的请求，由于你没有给web server配置默认网关，它不知道怎么回去，所以就出现了不通的情况。怎么办呢？两个解决方法：&lt;/p&gt;
&lt;p&gt;一就是给这个server配置一个默认网关，当然要指向这个配置端口转发的linux,本例是10.1.1.254,配置好了，就一定能访问了。有一个疑问？难道不需要在FORWARD链上面设置一个允许web server的ip地址访问外网的规则吗？它的包能出去？答案是肯定的，能出去。因为我们那一条允许确认包与关联包的规则，否则它是出不去的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二种方法&lt;/strong&gt;，比较麻烦一些，但是对服务器来说这样似乎更安全一些。方法就是对这个包再作一次SNAT，也就是在POSTROUTING链上添加规则。命令如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.1.1.1 -p tcp --dport 80 -j SNAT --to 10.1.1.254&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ftp 的方法相同。这条命令不太好懂？？其实很简单，如果使用这条命令，那么你的web server不需要再设置默认网关，就能收到这个请求，只要他和linux的lan ip地址是能互访的（也就是说web server和Linux的Lan ip在一个广播域），我们在根据上面的netfilter流程图来分析这个包到底被我们怎么样了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先一个请求202.1.1.1:1333–&amp;gt; 60.1.1.1:80被linux收到了，进入PREROUTING；&lt;/li&gt;
&lt;li&gt;发现一个规则iptables -t nat -A PREROUTING -d 60.1.1.1 -p tcp –dport 80 -j DNAT –to 10.1.1.1:80符合，好了，改你的目的地址，于是这个包变成了202.1.1.1:1333–&amp;gt;10.1.1.1:80，继续往前走；&lt;/li&gt;
&lt;li&gt;进入FORWARD链，okay,也有一条规则允许通过iptables -A FORWARD -d 10.1.1.1 -p tcp –dport 80 -j ACCEPT；&lt;/li&gt;
&lt;li&gt;进入route box选路，找到合适的路径了，继续进入POSTROUTING链；&lt;/li&gt;
&lt;li&gt;耶？又发现一个符合的规则iptables -t nat -A POSTROUTING -d 10.1.1.1 -p tcp –dport 80 -j SNAT –to 10.1.1.254,原来是一个SNAT,改你的源地址，于是这个包变成了10.1.1.254:xxxx–&amp;gt;10.1.1.1:80。为什么用xxxx了，这里的端口是随机的，我也不知道会是什么。&lt;/li&gt;
&lt;li&gt;而整个的两次变化的过程都会记录在linux的ip_conntrack中；&lt;/li&gt;
&lt;li&gt;当web server收到这个包的时候，发现，原来是一个内网自己兄弟来的请求阿，又在一个广播域，不用找网关，把返回包直接扔给交换机了；&lt;/li&gt;
&lt;li&gt;linux在收到返回包之后，会根据他的ip_conntrack中的条目进行两次变换，返回真正的internet用户，于是完成这一次的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了上面的两个例子，不知道大家是否清楚了iptables的转发流程，希望对大家有所帮助。&lt;/p&gt;
&lt;h4 id=&quot;状态机制&quot;&gt;&lt;a href=&quot;#状态机制&quot; class=&quot;headerlink&quot; title=&quot;状态机制&quot;&gt;&lt;/a&gt;状态机制&lt;/h4&gt;&lt;p&gt;下面我们就说说我一直在上面提到的关于那个ESTABLISHED,RELATED的规则是怎么回事，到底有什么用处。&lt;/p&gt;
&lt;p&gt;说这个东西就要简单说一下网络的数据通讯的方式，我们知道，网络的访问是双向的，也就是说一个Client与Server之间完成数据交换需要双方的发包与收包。在netfilter中，有几种状态，也就是new, established,related,invalid。&lt;/p&gt;
&lt;p&gt;当一个客户端，在本文例一中，内网的一台机器访问外网，我们设置了规则允许他出去，但是没有设置允许回来的规则阿，怎么完成访问呢？这就是netfilter的 状态机制 ，当一个lan用户通过这个linux访问外网的时候，它发送了一个请求包，这个包的状态是new,当外网回包的时候他的状态就是established,所以，linux知道，哦，这个包是我的内网的一台机器发出去的应答包，他就放行了。&lt;/p&gt;
&lt;p&gt;而外网试图对内发起一个新的连接的时候，他的状态是new,所以linux压根不去理会它。这就是我们为什么要加这一句的原因。&lt;/p&gt;
&lt;p&gt;还有那个related,他是一个关联状态，什么会用到呢？tftp,ftp都会用到，因为他们的传输机制决定了，它不像http访问那样，Client_IP: port–&amp;gt;server:80然后server:80–&amp;gt;Client_IP:port，ftp使用tcp21建立连接，使用20端口发送数据，其中又有两种方式，一种主动active mode，一种被动passive mode。主动模式下，client使用port命令告诉server我用哪一个端口接受数据，然后server主动发起对这个端口的请求。被动模式下，server使用port命令告诉客户端，它用那个端口监听，然后客户端发起对他的数据传输，所以这对于一个防火墙来说就是比较麻烦的事情，因为有可能会有new状态的数据包，但是它又是合理的请求，这个时候就用到这个related状态了，他就是一种关联，在linux中，有个叫 ftp_conntrack的模块，它能识别port命令，然后对相应的端口进行放行。&lt;/p&gt;
&lt;p&gt;一口气写了这么多东西，不知道质量如何，大家凑和着看吧，希望多多交流共同进步，我还是一个linux的初学者，难免很多谬误，希望高手赐教指正，以期不断进步。&lt;/p&gt;
&lt;h4 id=&quot;实用命令&quot;&gt;&lt;a href=&quot;#实用命令&quot; class=&quot;headerlink&quot; title=&quot;实用命令&quot;&gt;&lt;/a&gt;实用命令&lt;/h4&gt;&lt;p&gt;对了，还有几个在实际中比较实用（也比较受用:-)）的命令参数，写出来供大家参考&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这样的列表会跳过linux的domain lookup,有的时候使用iptables -L会比较慢，因为linux会尝试解析ip的域名，真是罗嗦，如果你的dns server比较不爽的话，iptables -L就会让你很不爽，加一个-n参数就好了。列表刷的就出来。当然了，如果你的linux就是做防火墙，建议把nameserver去掉，在 /etc/resolve.conf里面，因为有时候使用route命令也会比较慢列出来，很是不爽。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -L -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这个命令会显示链中规则的包和流量计数，嘿嘿，看看哪些小子用的流量那么多，用tc限了他。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -L -vn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看nat表中的规则。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/net/ip_conntrack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看目前的conntrack，可能会比较多哦，最好加一个|grep &quot;关键字&quot;，看看你感兴趣的链接跟踪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wc &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /proc/net/ip_conntrack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#看看总链接有多少条。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables-save &amp;gt;/etc/iptables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#把当前的所有链备份一下，之所以放到/etc下面叫iptables，因为这样重起机器的时候会自动加载所有的链，经常地备份一下吧，否则如果链多，万一掉电重启，你还是会比较痛苦。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转发&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#之前因为一个网段被封了，因此通过iptables做转发：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#代理服务器WAN IP：111.**.**.219，LAN IP：192.168.0.219&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#内网服务器IP：192.168.0.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1.在代理服务器打开转发功能（sysctl.conf）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#2.添加以下规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A PREROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 111.**.**.219 -p tcp --dport 9999 -j DNAT --to-destination 192.168.0.41:9999&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 192.168.0.41 -p tcp --dport 9999 -j SNAT --to-source 192.168.0.219&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 原文：&lt;a href=&quot;http://wwdhks.blog.51cto.com/839773/1154032&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wwdhks.blog.51cto.com/839773/1154032&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iptables是一个Linux下优秀的nat+防火墙工具，我使用该工具以较低配置的传统pc配置了一个灵活强劲的防火墙+nat系统,小有心得，看了网上也有很多这方面的文章，但是似乎要么说的比较少，要么就是比较偏，内容不全，容易误导，我研究了一段时间的iptables同时也用
    
    </summary>
    
      <category term="Linux" scheme="http://icyxp.github.io/categories/Linux/"/>
    
    
      <category term="iptables" scheme="http://icyxp.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Cache 应用中的服务过载案例研究</title>
    <link href="http://icyxp.github.io//blog/2016/06/cache-server.html"/>
    <id>http://icyxp.github.io//blog/2016/06/cache-server.html</id>
    <published>2016-06-29T07:48:29.851Z</published>
    <updated>2016-06-29T07:48:16.000Z</updated>
    
    <content type="html">&lt;p&gt;简单地说，过载是外部请求对系统的访问量突然激增，造成请求堆积，服务不可用，最终导致系统崩溃。本文主要分析引入Cache可能造成的服务过载，并讨论相关的预防、恢复策略。&lt;/p&gt;
&lt;p&gt;Cache在现代系统中使用广泛，由此引入的服务过载隐患无处不在，但却非常隐蔽，容易被忽视。本文希望能为开发者在设计和编写相关类型应用，以及服务过载发生处理时能够有章可循。&lt;/p&gt;
&lt;h2 id=&quot;一个服务过载案例&quot;&gt;&lt;a href=&quot;#一个服务过载案例&quot; class=&quot;headerlink&quot; title=&quot;一个服务过载案例&quot;&gt;&lt;/a&gt;一个服务过载案例&lt;/h2&gt;&lt;p&gt;本文讨论的案例是指存在正常调用关系的两个系统（假设调用方为A系统，服务方为B系统），A系统对B系统的访问突然超出B系统的承受能力，造成B系统崩溃。造成服务过载的原因很多，这里分析的是严重依赖Cache的系统服务过载。首先来看一种包含Cache的体系结构（如下图所示）。&lt;br&gt;&lt;img src=&quot;/images/2_cache.png&quot; alt=&quot;Cache应用体系结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;A系统依赖B系统的读服务，A系统是60台机器组成的集群，B系统是6台机器组成的集群，之所以6台机器能够扛住60台机器的访问，是因为A系统并不是每次都访问B，而是首先请求Cache，只有Cache的相应数据失效时才会请求B。&lt;/p&gt;
&lt;p&gt;这正是Cache存在的意义，它让B系统节省了大量机器；如果没有Cache，B系统不得不组成60台机器的集群，如果A也同时依赖除B系统外的另一个系统（假设为C系统）呢？那么C系统也要60台机器，放大的流量将很快耗尽公司的资源。&lt;/p&gt;
&lt;p&gt;然而Cache的引入也不是十全十美的，这个结构中如果Cache发生问题，全部的流量将流向依赖方，造成流量激增，从而引发依赖系统的过载。&lt;/p&gt;
&lt;p&gt;回到A和B的架构，造成服务过载的原因至少有下面三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B系统的前置代理发生故障或者其他原因造成B系统暂时不可用，等B系统系统服务恢复时，其流量将远远超过正常值。&lt;/li&gt;
&lt;li&gt;Cache系统故障，A系统的流量将全部流到B系统，造成B系统过载。&lt;/li&gt;
&lt;li&gt;Cache故障恢复，但这时Cache为空，Cache瞬间命中率为0，相当于Cache被击穿，造成B系统过载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个原因不太好理解，为什么B系统恢复后流量会猛增呢？主要原因就是缓存的超时时间。当有数据超时的时候，A系统会访问B系统，但是这时候B系统偏偏故障不可用，那么这个数据只好超时，等发现B系统恢复时，发现缓存里的B系统数据已经都超时了，都成了旧数据，这时当然所有的请求就打到了B。&lt;/p&gt;
&lt;p&gt;下文主要介绍服务过载的预防和发生后的一些补救方法，以预防为主，从调用方和服务方的视角阐述一些可行方案。&lt;/p&gt;
&lt;h2 id=&quot;服务过载的预防&quot;&gt;&lt;a href=&quot;#服务过载的预防&quot; class=&quot;headerlink&quot; title=&quot;服务过载的预防&quot;&gt;&lt;/a&gt;服务过载的预防&lt;/h2&gt;&lt;p&gt;所谓Client端指的就是上文结构中的A系统，相对于B系统，A系统就是B系统的Client，B系统相当于Server。&lt;/p&gt;
&lt;h3 id=&quot;Client端的方案&quot;&gt;&lt;a href=&quot;#Client端的方案&quot; class=&quot;headerlink&quot; title=&quot;Client端的方案&quot;&gt;&lt;/a&gt;Client端的方案&lt;/h3&gt;&lt;p&gt;针对上文阐述的造成服务过载的三个原因：B系统故障恢复、Cache故障、Cache故障恢复，我们看看A系统有哪些方案可以应对。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;合理使用Cache应对B系统宕机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，Cache的每个Key除了对应Value，还对应一个过期时间T，在T内，get操作直接在Cache中拿到Key对应Value并返回。但是在T到达时，get操作主要有五种模式：&lt;/p&gt;
&lt;h4 id=&quot;基于超时的简单（stupid）模式&quot;&gt;&lt;a href=&quot;#基于超时的简单（stupid）模式&quot; class=&quot;headerlink&quot; title=&quot;基于超时的简单（stupid）模式&quot;&gt;&lt;/a&gt;基于超时的简单（stupid）模式&lt;/h4&gt;&lt;p&gt;在T到达后，任何线程get操作发现Cache中的Key和对应Value将被清除或标记为不可用，get操作将发起调用远程服务获取Key对应的Value，并更新写回Cache，然后get操作返回新值；如果远程获取Key-Value失败，则get抛出异常。&lt;/p&gt;
&lt;p&gt;为了便于理解，举一个码头工人取货的例子：5个工人（线程）去港口取同样Key的货（get），发现货已经过期被扔掉了，这时5个工人各自分别去对岸取新货，然后返回。&lt;/p&gt;
&lt;h4 id=&quot;基于超时的常规模式&quot;&gt;&lt;a href=&quot;#基于超时的常规模式&quot; class=&quot;headerlink&quot; title=&quot;基于超时的常规模式&quot;&gt;&lt;/a&gt;基于超时的常规模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和对应Value将被清除或标记为不可用，get操作将调用远程服务获取Key对应的Value，并更新写回Cache；此时，如果另一个线程发现Key和Value已经不可用，get操作还需要判断有没有其他线程发起了远程调用，如果有，那么自己就等待，直到那个线程远程获取操作成功，Cache中得Key变得可用，get操作返回新的Value。如果远程获取操作失败，则get操作抛出异常，不会返回任何Value。&lt;/p&gt;
&lt;p&gt;还是码头工人的例子：5个工人（线程）去港口取同样Key的货（get），发现货已经过期被扔掉了，那么只需派出一个人去对岸取货，其他四个人在港口等待即可，而不用5个人全去。&lt;/p&gt;
&lt;p&gt;基于超时的简单模式和常规模式区别在于对于同一个超时的Key，前者每个get线程一旦发现Key不存在，则发起远程调用获取值；而后者每个get线程发现Key不存在，则还要判断当前是否有其他线程已经发起了远程调用操作获取新值，如果有，自己就简单的等待即可。&lt;/p&gt;
&lt;p&gt;显然基于超时的常规模式比基于超时的简单模式更加优化，减少了超时时并发访问后端的调用量。&lt;/p&gt;
&lt;p&gt;实现基于超时的常规模式就需要用到经典的Double-checked locking惯用法了。&lt;/p&gt;
&lt;h4 id=&quot;基于刷新的简单（stupid）模式&quot;&gt;&lt;a href=&quot;#基于刷新的简单（stupid）模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的简单（stupid）模式&quot;&gt;&lt;/a&gt;基于刷新的简单（stupid）模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和相应Value不动，但是如果有线程调用get操作，将触发refresh操作，根据get和refresh的同步关系，又分为两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步模式：任何线程发现Key过期，都触发一次refresh操作，get操作等待refresh操作结束，refresh结束后，get操作返回当前Cache中Key对应的Value。注意refresh操作结束并不意味着refresh成功，还可能抛了异常，没有更新Cache，但是get操作不管，get操作返回的值可能是旧值。&lt;/li&gt;
&lt;li&gt;异步模式：任何线程发现Key过期，都触发一次refresh操作，get操作触发refresh操作，不等refresh完成，直接返回Cache中的旧值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举上面码头工人的例子说明基于刷新的常规模式：这次还是5工人去港口取货，这时货都在，但是已经旧了，这时5个工人有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5个人各自去远程取新货，如果取货失败，则拿着旧货返回（同步模式）&lt;/li&gt;
&lt;li&gt;5个人各自通知5个雇佣工去取新货，5个工人拿着旧货先回（异步模式）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;基于刷新的常规模式&quot;&gt;&lt;a href=&quot;#基于刷新的常规模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的常规模式&quot;&gt;&lt;/a&gt;基于刷新的常规模式&lt;/h4&gt;&lt;p&gt;在T到达后，Cache中的Key和相应Value都不会被清除，而是被标记为旧数据，如果有线程调用get操作，将触发refresh更新操作，根据get和refresh的同步关系，又分为两种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步模式：get操作等待refresh操作结束，refresh结束后，get操作返回当前Cache中Key对应的Value，注意：refresh操作结束并不意味着refresh成功，还可能抛了异常，没有更新Cache，但是get操作不管，get操作返回的值可能是旧值。如果其他线程进行get操作，Key已经过期，并且发现有线程触发了refresh操作，则自己不等refresh完成直接返回旧值。&lt;/li&gt;
&lt;li&gt;异步模式：get操作触发refresh操作，不等refresh完成，直接返回Cache中的旧值。如果其他线程进行get操作，发现Key已经过期，并且发现有线程触发了refresh操作，则自己不等refresh完成直接返回旧值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再举上面码头工人的例子说明基于刷新的常规模式：这次还是5工人去港口取货，这时货都在，但是已经旧了，这时5个工人有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派一个人去远方港口取新货，其余4个人拿着旧货先回（同步模式）。&lt;/li&gt;
&lt;li&gt;5个人通知一个雇佣工去远方取新货，5个人都拿着旧货先回（异步模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于刷新的简单模式和基于刷新的常规模式区别就在于取数线程之间能否感知当前数据是否正处在刷新状态，因为基于刷新的简单模式中取数线程无法感知当前过期数据是否正处在刷新状态，所以每个取数线程都会触发一个刷新操作，造成一定的线程资源浪费。&lt;/p&gt;
&lt;p&gt;而基于超时的常规模式和基于刷新的常规模式区别在于前者过期数据将不能对外访问，所以一旦数据过期，各线程要么拿到数据，要么抛出异常；后者过期数据可以对外访问，所以一旦数据过期，各线程要么拿到新数据，要么拿到旧数据。&lt;/p&gt;
&lt;h4 id=&quot;基于刷新的续费模式&quot;&gt;&lt;a href=&quot;#基于刷新的续费模式&quot; class=&quot;headerlink&quot; title=&quot;基于刷新的续费模式&quot;&gt;&lt;/a&gt;基于刷新的续费模式&lt;/h4&gt;&lt;p&gt;该模式和基于刷新的常规模式唯一的区别在于refresh操作超时或失败的处理上。在基于刷新的常规模式中，refresh操作超时或失败时抛出异常，Cache中的相应Key-Value还是旧值，这样下一个get操作到来时又会触发一次refresh操作。&lt;/p&gt;
&lt;p&gt;在基于刷新的续费模式中，如果refresh操作失败，那么refresh将把旧值当成新值返回，这样就相当于旧值又被续费了T时间，后续T时间内get操作将取到这个续费的旧值而不会触发refresh操作。&lt;/p&gt;
&lt;p&gt;基于刷新的续费模式也像常规模式那样分为同步模式和异步模式，不再赘述。&lt;/p&gt;
&lt;p&gt;下面讨论这5种Cache get模式在服务过载发生时的表现，首先假设如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设A系统的访问量为每分钟M次。&lt;/li&gt;
&lt;li&gt;假设Cache能存Key为C个，并且Key空间有N个。&lt;/li&gt;
&lt;li&gt;假设正常状态下，B系统访问量为每分钟W次，显然W&amp;lt;N&amp;lt;M。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时因为某种原因，比如B长时间故障，造成Cache中得Key全部过期，B系统这时从故障中恢复，五种get模式分析表现分析如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在基于超时和刷新的简单模式中，B系统的瞬间流量将达到和A的瞬时流量M大体等同，相当于Cache被击穿。这就发生了服务过载，这时刚刚恢复的B系统将肯定会被大流量压垮。&lt;/li&gt;
&lt;li&gt;在基于超时和刷新的常规模式中，B系统的瞬间流量将和Cache中Key空间N大体等同。这时是否发生服务过载，就要看Key空间N是否超过B系统的流量上限了。&lt;/li&gt;
&lt;li&gt;在基于刷新的续费模式中，B系统的瞬间流量为W，和正常情况相同而不会发生服务过载。实际上，在基于刷新的续费模式中，不存在Cache Key全部过期的情况，就算把B系统永久性地干掉，A系统的Cache也会基于旧值长久的平稳运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3点，B系统不会发生服务过载的主要原因是基于刷新的续费模式下不会出现chache中的Key全部长时间过期的情况，即使B系统长时间不可用，基于刷新的续费模式也会在一个过期周期内把旧值当成新值继续使用。所以当B系统恢复时，A系统的Cache都处在正常工作状态。&lt;/p&gt;
&lt;p&gt;从B系统的角度看，能够抵抗服务过载的基于刷新的续费模式最优。&lt;/p&gt;
&lt;p&gt;从A系统的角度看，由于一般情况下A系统是一个高访问量的在线web应用，这种应用最讨厌的一个词就是“线程等待”，因此基于刷新的各种异步模式较优。&lt;/p&gt;
&lt;p&gt;综合考虑，基于刷新的异步续费模式是首选。然而凡事有利就有弊，有两点需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于刷新模式最大的缺点是Key-Value一旦放入Cache就不会被清除，每次更新也是新值覆盖旧值，JVM GC永远无法对其进行垃圾收集，而基于超时的模式中，Key-Value超时后如果新的访问没有到来，内存是可以被GC垃圾回收的。所以如果你使用的是寸土寸金的本地内存做Cache就要小心了。&lt;/li&gt;
&lt;li&gt;基于刷新的续费模式需要做好监控，不然有可能Cache中的值已经和真实的值相差很远了，应用还以为是新值而使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于具体的Cache，来自Google的Guava本地缓存库支持上文的第二种、第四种和第五种get操作模式。&lt;/p&gt;
&lt;p&gt;但是对于Redis等分布式缓存，只提供原始的get、set方法，而提供的get仅仅是获取，与上文提到的五种get操作模式不是一个概念。开发者想用这五种get操作模式的话不得不自己封装和实现。&lt;/p&gt;
&lt;p&gt;五种get操作模式中，基于超时和刷新的简单模式是实现起来最简单的模式，但遗憾的是这两种模式对服务过载完全无免疫力，这可能也是服务过载在大量依赖缓存的系统中频繁发生的一个重要原因吧。&lt;/p&gt;
&lt;p&gt;本文之所以把第1、3种模式称为stupid模式，是想强调这种模式应该尽量避免，Guava里面根本没有这种模式，而Redis只提供简单的读写操作，很容易就把系统实现成了这种方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应对分布式Cache宕机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是Cache直接挂了，那么就算是基于刷新的异步续费模式也无能为力了。这时A系统铁定无法对Cache进行存取操作，只能将流量完全打到B系统，B系统面对服务过载在劫难逃……&lt;/p&gt;
&lt;p&gt;本节讨论的预防Cache宕机仅限于分布式Cache，因为本地Cache一般和A系统应用共享内存和进程，本地Cache挂了A系统也挂了，不会出现本地Cache挂了而A系统应用正常的情况。&lt;/p&gt;
&lt;p&gt;首先，A系统请求线程检查分布式Cache状态，如果无应答则说明分布式Cache挂了，则转向请求B系统，这样一来大流量将压垮B系统。这时可选的方案如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A系统的当前线程不请求B系统，而是打个日志并设置一个默认值。&lt;/li&gt;
&lt;li&gt;A系统的当前线程按照一定概率决定是否请求B系统。&lt;/li&gt;
&lt;li&gt;A系统的当前线程检查B系统运行情况，如果良好则请求B系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;方案1&lt;/strong&gt; 最简单，A系统知道如果没有Cache，B系统可能扛不住自己的全部流量，索性不请求B系统，等待Cache恢复。但这时B系统利用率为0，显然不是最优方案，而且当请求的Value不容易设置默认值时，这个方案就不行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案2&lt;/strong&gt; 可以让一部分线程请求B系统，这部分请求肯定能被B系统hold住。可以保守的设置这个概率 u =（B系统的平均流量）/（A系统的峰值流量）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案3&lt;/strong&gt; 是一种更为智能的方案，如果B系统运行良好，当前线程请求；如果B系统过载，则不请求，这样A系统将让B系统处于一种宕机与不宕机的临界状态，最大限度挖掘B系统性能。这种方案要求B系统提供一个性能评估接口返回Yes和No，Yes表示B系统良好，可以请求；No表示B系统情况不妙，不要请求。这个接口将被频繁调用，必须高效。&lt;/p&gt;
&lt;p&gt;方案3的关键在于如何评估一个系统的运行状况。一个系统中当前主机的性能参数有CPU负载、内存使用率、Swap使用率、GC频率和GC时间、各个接口平均响应时间等，性能评估接口需要根据这些参数返回Yes或者No，是不是机器学习里的二分类问题？??关于这个问题已经可以单独写篇文章讨论了，在这里就不展开了，你可以想一个比较简单傻瓜的保守策略，缺点是A系统的请求无法很好的逼近B系统的性能极限。&lt;/p&gt;
&lt;p&gt;综合以上分析，方案2比较靠谱。如果选择方案3，建议由专门团队负责研究并提供统一的系统性能实时评估方案和工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应对分布式Cache宕机后的恢复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不要以为成功hold住分布式Cache宕机就万事大吉了，真正的考验是分布式Cache从宕机过程恢复之后，这时分布式Cache中什么都没有。&lt;/p&gt;
&lt;p&gt;即使是上文中提到了基于刷新的异步续费策略这时也没用，因为分布式Cache为空，无论如何都要请求B系统。这时B系统的最大流量是Key的空间取值数量。&lt;/p&gt;
&lt;p&gt;如果Key的取值空间数量很少，则相安无事；如果Key的取值空间数量大于B系统的流量上限，服务过载依然在所难免。&lt;/p&gt;
&lt;p&gt;这种情况A系统很难处理，关键原因是A系统请求Cache返回Key对应Value为空，A系统无法知道是因为当前Cache是刚刚初始化，所有内容都为空；还是因为仅仅是自己请求的那个Key没在Cache里。&lt;/p&gt;
&lt;p&gt;如果是前者，那么当前线程就要像处理Cache宕机那样进行某种策略的回避；如果是后者，直接请求B系统即可，因为这是正常的Cache使用流程。&lt;/p&gt;
&lt;p&gt;对于Cache宕机的恢复，A系统真的无能为力，只能寄希望于B系统的方案了。&lt;/p&gt;
&lt;h3 id=&quot;Server端的方案&quot;&gt;&lt;a href=&quot;#Server端的方案&quot; class=&quot;headerlink&quot; title=&quot;Server端的方案&quot;&gt;&lt;/a&gt;Server端的方案&lt;/h3&gt;&lt;p&gt;相对于Client端需要应对各种复杂问题，Server端需要应对的问题非常简单，就是如何从容应对过载的问题。无论是缓存击穿也好，还是拒绝服务攻击也罢，对于Server端来说都是过载保护的问题。对于过载保护，主要给出两种可行方案，以及一种比较复杂的方案思路。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流量控制就是B系统实时监控当前流量，如果超过预设的值或者系统承受能力，则直接拒绝掉一部分请求，以实现对系统的保护。&lt;/p&gt;
&lt;p&gt;流量控制根据基于的数据不同，可分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于流量阈值的流控：流量阈值是每个主机的流量上限，流量超过该阈值主机将进入不稳定状态。阈值提前进行设定，如果主机当前流量超过阈值，则拒绝掉一部分流量，使得实际被处理流量始终低于阈值。&lt;/li&gt;
&lt;li&gt;基于主机状态的流控：每个接受每个请求之前先判断当前主机状态，如果主机状况不佳，则拒绝当前请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于阈值的流控实现简单，但是最大的问题是需要提前设置阈值，而且随着业务逻辑越来越复杂，接口越来越多，主机的服务能力实际应该是下降的，这样就需要不断下调阈值，增加了维护成本，而且万一忘记调整的话，呵呵……&lt;/p&gt;
&lt;p&gt;主机的阈值可以通过压力测试确定，选择的时候可以保守些。&lt;/p&gt;
&lt;p&gt;基于主机状态的流控免去了人为控制，但是其最大的确定上文已经提到：如何根据当前主机各个参数判断主机状态呢？想要完美的回答这个问题目测并不容易，因此在没有太好答案之前，我推荐基于阈值的流控。&lt;/p&gt;
&lt;p&gt;流量控制基于实现位置的不同，又可以分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反向代理实现流控：在反向代理如Nginx上基于各种策略进行流量控制。这种一般针对HTTP服务。&lt;/li&gt;
&lt;li&gt;借助服务治理系统：如果Server端是RMI、RPC等服务，可以构建专门的服务治理系统进行负载均衡、流控等服务。&lt;/li&gt;
&lt;li&gt;服务容器实现流控：在应用代码里，业务逻辑之前实现流量控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第3种在服务器的容器（如Java容器）中实现流控并不推荐，因为流控和业务代码混在一起容易混乱；其次实际上流量已经全量进入到了业务代码里，这时的流控只是阻止其进入真正的业务逻辑，所以流控效果将打折；还有，如果流量策略经常变动，系统将不得不为此经常更改。&lt;/p&gt;
&lt;p&gt;因此，推荐前两种方式。&lt;/p&gt;
&lt;p&gt;最后提一个注意点：当因为流控而拒绝请求时，务必在返回的数据中带上相关信息（比如“当前请求因为超出流量而被禁止访问”），如果返回值什么都没有将是一个大坑。因为造成调用方请求没有被响应的原因很多，可能是调用方Bug，也可能是服务方Bug，还可能是网络不稳定，这样一来很可能在排查一整天后发现是流控搞的鬼……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务降级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;服务降级一般由人为触发，属于服务过载造成崩溃恢复时的策略，但为了和流控对比，将其放到这里。&lt;/p&gt;
&lt;p&gt;流量控制本质上是减小访问量，而服务处理能力不变；而服务降级本质上是降低了部分服务的处理能力，增强另一部分服务处理能力，而访问量不变。&lt;/p&gt;
&lt;p&gt;服务降级是指在服务过载时关闭不重要的接口（直接拒绝处理请求），而保留重要的接口。比如服务由10个接口，服务降级时关闭了其中五个，保留五个，这时这个主机的服务处理能力将增强到二倍左右。&lt;/p&gt;
&lt;p&gt;然而，服务过载发生时动辄就超出系统处理能力10倍，而服务降级能使主机服务处理能力提高10倍么？显然很困难，因此服务过载的应对不能只依靠服务降级策略。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态扩展指的是在流量超过系统服务能力时，自动触发集群扩容，自动部署并上线运行；当流量过去后又自动回收多余机器，完全弹性。&lt;/p&gt;
&lt;p&gt;这个方案是不是感觉很不错。但是目前互联网公司的在线应用跑在云上的本身就不多，要完全实现在线应用的自动化弹性运维，要走的路就更多了。&lt;/p&gt;
&lt;h2 id=&quot;崩溃恢复&quot;&gt;&lt;a href=&quot;#崩溃恢复&quot; class=&quot;headerlink&quot; title=&quot;崩溃恢复&quot;&gt;&lt;/a&gt;崩溃恢复&lt;/h2&gt;&lt;p&gt;如果服务过载造成系统崩溃还是不幸发生了，这时需要运维控制流量，等后台系统启动完毕后循序渐进的放开流量，主要目的是让Cache慢慢预热。流量控制刚开始可以为10%，然后20%，然后50%，然后80%，最后全量，当然具体的比例，尤其是初始比例，还要看后端承受能力和前端流量的比例，各个系统并不相同。&lt;/p&gt;
&lt;p&gt;如果后端系统有专门的工具进行Cache预热，则省去了运维的工作，等Cache热起来再发布后台系统即可。但是如果Cache中的Key空间很大，开发预热工具将比较困难。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;“防患于未然”放在服务过载的应对上也是适合的，预防为主，补救为辅。综合上文分析，具体的预防要点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用方（A系统）采用基于刷新的异步续费模式使用Cache，或者至少不能使用基于超时或刷新的简单（stupid）模式。&lt;/li&gt;
&lt;li&gt;调用方（A系统）每次请求Cache时检查Cache是否可用（available），如果不可用则按照一个保守的概率访问后端，而不是无所顾忌的直接访问后端。&lt;/li&gt;
&lt;li&gt;服务方（B系统）在反向代理处设置流量控制进行过载保护，阈值需要通过压测获得。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;崩溃的补救主要还是靠运维和研发在发生时的通力合作：观察流量变化准确定位崩溃原因，运维控流量研发持续关注性能变化。&lt;/p&gt;
&lt;p&gt;未来如果有条件的话可以研究下主机应用健康判断问题和动态弹性运维问题，毕竟自动化比人为操作要靠谱。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;来源：美团点评技术团队-张杨&lt;br&gt;链接：&lt;a href=&quot;http://tech.meituan.com/avalanche-study.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.meituan.com/avalanche-study.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单地说，过载是外部请求对系统的访问量突然激增，造成请求堆积，服务不可用，最终导致系统崩溃。本文主要分析引入Cache可能造成的服务过载，并讨论相关的预防、恢复策略。&lt;/p&gt;
&lt;p&gt;Cache在现代系统中使用广泛，由此引入的服务过载隐患无处不在，但却非常隐蔽，容易被忽视。本
    
    </summary>
    
      <category term="架构" scheme="http://icyxp.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="cache" scheme="http://icyxp.github.io/tags/cache/"/>
    
      <category term="架构" scheme="http://icyxp.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>
