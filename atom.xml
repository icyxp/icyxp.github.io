<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CloudNative 架构</title>
  <subtitle>CloudNative|云原生应用架构|云原生架构|容器化架构|微服务架构|平台架构|基础架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://team.jiunile.com/"/>
  <updated>2021-06-01T02:12:17.000Z</updated>
  <id>http://team.jiunile.com/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 代码安全指南</title>
    <link href="http://team.jiunile.com//blog/2021/06/go-security.html"/>
    <id>http://team.jiunile.com//blog/2021/06/go-security.html</id>
    <published>2021-06-01T14:00:00.000Z</published>
    <updated>2021-06-01T02:12:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;通用类&quot;&gt;&lt;a href=&quot;#通用类&quot; class=&quot;headerlink&quot; title=&quot;通用类&quot;&gt;&lt;/a&gt;通用类&lt;/h1&gt;&lt;h2 id=&quot;1-代码实现类&quot;&gt;&lt;a href=&quot;#1-代码实现类&quot; class=&quot;headerlink&quot; title=&quot;1. 代码实现类&quot;&gt;&lt;/a&gt;1. 代码实现类&lt;/h2&gt;&lt;h3 id=&quot;1-1-内存管理&quot;&gt;&lt;a href=&quot;#1-1-内存管理&quot; class=&quot;headerlink&quot; title=&quot;1.1 内存管理&quot;&gt;&lt;/a&gt;1.1 内存管理&lt;/h3&gt;&lt;h4 id=&quot;1-1-1【必须】切片长度校验&quot;&gt;&lt;a href=&quot;#1-1-1【必须】切片长度校验&quot; class=&quot;headerlink&quot; title=&quot;1.1.1【必须】切片长度校验&quot;&gt;&lt;/a&gt;1.1.1【必须】切片长度校验&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在对slice进行操作时，必须判断长度是否合法，防止程序panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 未判断data的长度，可导致 index out of range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Bad&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: slice bounds out of range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice = []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice[:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good: 使用data前应判断长度是否合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(data) == &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;1-1-2【必须】nil指针判断&quot;&gt;&lt;a href=&quot;#1-1-2【必须】nil指针判断&quot; class=&quot;headerlink&quot; title=&quot;1.1.2【必须】nil指针判断&quot;&gt;&lt;/a&gt;1.1.2【必须】nil指针判断&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进行指针操作时，必须判断该指针是否为nil，防止程序panic，尤其在进行结构体Unmarshal时&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Packet &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PackeyType    &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PackeyVersion &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Data          *Data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Data &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Stat &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Len  &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Buf  [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Packet)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UnmarshalBinary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(b) &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; io.EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p.PackeyType = b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p.PackeyVersion = b[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 若长度等于2，那么不会new Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(b) &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p.Data = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 未判断指针是否为nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	packet := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Packet)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := packet.UnmarshalBinary(data); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Failed to unmarshal packet&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Stat: %v\n&quot;&lt;/span&gt;, packet.Data.Stat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good: 判断Data指针是否为nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	packet := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Packet)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := packet.UnmarshalBinary(data); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Failed to unmarshal packet&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; packet.Data == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Stat: %v\n&quot;&lt;/span&gt;, packet.Data.Stat)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-3【必须】整数安全&quot;&gt;&lt;a href=&quot;#1-1-3【必须】整数安全&quot; class=&quot;headerlink&quot; title=&quot;1.1.3【必须】整数安全&quot;&gt;&lt;/a&gt;1.1.3【必须】整数安全&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在进行数字运算操作时，需要做好长度限制，防止外部输入运算导致异常：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保无符号整数运算时不会反转&lt;/li&gt;
&lt;li&gt;确保有符号整数运算时不会出现溢出&lt;/li&gt;
&lt;li&gt;确保整型转换时不会出现截断错误&lt;/li&gt;
&lt;li&gt;确保整型转换时不会出现符号错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下场景必须严格进行长度限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为数组索引&lt;/li&gt;
&lt;li&gt;作为对象的长度或者大小&lt;/li&gt;
&lt;li&gt;作为数组的边界（如作为循环计数器）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 未限制长度，导致整数溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numControlByUser &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numInt &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numInt = numControlByUser + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对长度限制不当，导致整数溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, numInt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 使用numInt，可能导致其他错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	overflow(&lt;span class=&quot;number&quot;&gt;2147483647&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(numControlByUser &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numInt &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numInt = numControlByUser + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; numInt &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;integer overflow&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;integer ok&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	overflow(&lt;span class=&quot;number&quot;&gt;2147483647&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-4【必须】make分配长度验证&quot;&gt;&lt;a href=&quot;#1-1-4【必须】make分配长度验证&quot; class=&quot;headerlink&quot; title=&quot;1.1.4【必须】make分配长度验证&quot;&gt;&lt;/a&gt;1.1.4【必须】make分配长度验证&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在进行make分配内存时，需要对外部可控的长度进行校验，防止程序panic。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lenControlByUser &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size := lenControlByUser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对外部传入的size，进行长度判断以免导致panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buffer := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(buffer, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lenControlByUser &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	size := lenControlByUser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 限制外部可控的长度大小范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; size &amp;gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.New(&lt;span class=&quot;string&quot;&gt;&quot;value too large&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buffer := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(buffer, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buffer, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-5【必须】禁止SetFinalizer和指针循环引用同时使用&quot;&gt;&lt;a href=&quot;#1-1-5【必须】禁止SetFinalizer和指针循环引用同时使用&quot; class=&quot;headerlink&quot; title=&quot;1.1.5【必须】禁止SetFinalizer和指针循环引用同时使用&quot;&gt;&lt;/a&gt;1.1.5【必须】禁止SetFinalizer和指针循环引用同时使用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当一个对象从被GC选中到移除内存之前，runtime.SetFinalizer()都不会执行，即使程序正常结束或者发生错误。由指针构成的“循环引用”虽然能被GC正确处理，但由于无法确定Finalizer依赖顺序，从而无法调用runtime.SetFinalizer()，导致目标对象无法变成可达状态，从而造成内存无法被回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a, b Data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a.o = &amp;amp;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.o = &amp;amp;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 指针循环引用，SetFinalizer()无法正常调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.SetFinalizer(&amp;amp;a, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(d *Data)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;a %p final.\n&quot;&lt;/span&gt;, d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.SetFinalizer(&amp;amp;b, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(d *Data)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;b %p final.\n&quot;&lt;/span&gt;, d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time.Sleep(time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-6【必须】禁止重复释放channel&quot;&gt;&lt;a href=&quot;#1-1-6【必须】禁止重复释放channel&quot; class=&quot;headerlink&quot; title=&quot;1.1.6【必须】禁止重复释放channel&quot;&gt;&lt;/a&gt;1.1.6【必须】禁止重复释放channel&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;重复释放一般存在于异常流程判断中，如果恶意攻击者构造出异常条件使程序重复释放channel，则会触发运行时恐慌，从而造成DoS攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err := processBusiness()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		c &amp;lt;- &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c) &lt;span class=&quot;comment&quot;&gt;// 重复释放channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c) &lt;span class=&quot;comment&quot;&gt;// 使用defer延迟关闭channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err := processBusiness()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		c &amp;lt;- &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-7【必须】确保每个协程都能退出&quot;&gt;&lt;a href=&quot;#1-1-7【必须】确保每个协程都能退出&quot; class=&quot;headerlink&quot; title=&quot;1.1.7【必须】确保每个协程都能退出&quot;&gt;&lt;/a&gt;1.1.7【必须】确保每个协程都能退出&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;启动一个协程就会做一个入栈操作，在系统不退出的情况下，协程也没有设置退出条件，则相当于协程失去了控制，它占用的资源无法回收，可能会导致内存泄露。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 协程没有设置退出条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doWaiter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, second &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time.Sleep(time.Duration(second) * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(name, &lt;span class=&quot;string&quot;&gt;&quot; is ready!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-8【推荐】不使用unsafe包&quot;&gt;&lt;a href=&quot;#1-1-8【推荐】不使用unsafe包&quot; class=&quot;headerlink&quot; title=&quot;1.1.8【推荐】不使用unsafe包&quot;&gt;&lt;/a&gt;1.1.8【推荐】不使用unsafe包&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于unsafe包绕过了 Golang 的内存安全原则，一般来说使用该库是不安全的，可导致内存破坏，尽量避免使用该包。若必须要使用unsafe操作指针，必须做好安全校验。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 通过unsafe操作原始指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsafePointer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	foo := (*&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)(unsafe.Pointer(&lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;(unsafe.Pointer(&amp;amp;b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])) + &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0xfffffff&lt;/span&gt;e)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Print(*foo + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [signal SIGSEGV: segmentation violation code=0x1 addr=0xc100068f55 pc=0x49142b]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-1-9【推荐】不使用slice作为函数入参&quot;&gt;&lt;a href=&quot;#1-1-9【推荐】不使用slice作为函数入参&quot; class=&quot;headerlink&quot; title=&quot;1.1.9【推荐】不使用slice作为函数入参&quot;&gt;&lt;/a&gt;1.1.9【推荐】不使用slice作为函数入参&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;slice是引用类型，在作为函数入参时采用的是地址传递，对slice的修改也会影响原始数据&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: slice作为函数入参时是地址传递&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(array []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	array[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 对入参slice的元素修改会影响原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	array := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	modify(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(array) &lt;span class=&quot;comment&quot;&gt;// output：[10 2 3 4 5]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good: 函数使用数组作为入参，而不是slice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(array [5]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	array[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 传入数组，注意数组与slice的区别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	array := [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	modify(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-2-文件操作&quot;&gt;&lt;a href=&quot;#1-2-文件操作&quot; class=&quot;headerlink&quot; title=&quot;1.2 文件操作&quot;&gt;&lt;/a&gt;1.2 文件操作&lt;/h3&gt;&lt;h4 id=&quot;1-2-1【必须】-路径穿越检查&quot;&gt;&lt;a href=&quot;#1-2-1【必须】-路径穿越检查&quot; class=&quot;headerlink&quot; title=&quot;1.2.1【必须】 路径穿越检查&quot;&gt;&lt;/a&gt;1.2.1【必须】 路径穿越检查&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在进行文件操作时，如果对外部传入的文件名未做限制，可能导致任意文件读取或者任意文件写入，严重可能导致代码执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 任意文件读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	path := r.URL.Query()[&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 未过滤文件路径，可能导致任意文件读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data, _ := ioutil.ReadFile(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	w.Write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 对外部传入的文件名变量，还需要验证是否存在../等路径穿越的文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data, _ = ioutil.ReadFile(filepath.Join(&lt;span class=&quot;string&quot;&gt;&quot;/home/user/&quot;&lt;/span&gt;, path))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	w.Write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 任意文件写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unzip&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r, _ := zip.OpenReader(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, f := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; r.File &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p, _ := filepath.Abs(f.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 未验证压缩文件名，可能导致../等路径穿越，任意文件路径写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ioutil.WriteFile(p, []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;present&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0640&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good: 检查压缩的文件名是否包含..路径穿越特征字符，防止任意写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unzipGood&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r, err := zip.OpenReader(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;read zip file fail&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, f := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; r.File &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !strings.Contains(f.Name, &lt;span class=&quot;string&quot;&gt;&quot;..&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p, _ := filepath.Abs(f.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ioutil.WriteFile(p, []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;present&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0640&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-2【必须】-文件访问权限&quot;&gt;&lt;a href=&quot;#1-2-2【必须】-文件访问权限&quot; class=&quot;headerlink&quot; title=&quot;1.2.2【必须】 文件访问权限&quot;&gt;&lt;/a&gt;1.2.2【必须】 文件访问权限&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;根据创建文件的敏感性设置不同级别的访问权限，以防止敏感数据被任意权限用户读取。例如，设置文件权限为：&lt;code&gt;-rw-r-----&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ioutil.WriteFile(p, []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;present&quot;&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0640&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-3-系统接口&quot;&gt;&lt;a href=&quot;#1-3-系统接口&quot; class=&quot;headerlink&quot; title=&quot;1.3 系统接口&quot;&gt;&lt;/a&gt;1.3 系统接口&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.3.1【必须】命令执行检查&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;exec.Command&lt;/code&gt;、&lt;code&gt;exec.CommandContext&lt;/code&gt;、&lt;code&gt;syscall.StartProcess&lt;/code&gt;、&lt;code&gt;os.StartProcess&lt;/code&gt;等函数时，第一个参数（path）直接取外部输入值时，应使用白名单限定可执行的命令范围，不允许传入&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;cmd&lt;/code&gt;、&lt;code&gt;sh&lt;/code&gt;等命令；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;exec.Command&lt;/code&gt;、&lt;code&gt;exec.CommandContext&lt;/code&gt;等函数时，通过&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;cmd&lt;/code&gt;、&lt;code&gt;sh&lt;/code&gt;等创建shell，-c后的参数（arg）拼接外部输入，应过滤\n  $  &amp;amp;  ;  |  ‘  “  ( )  `等潜在恶意字符；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	userInputedVal := &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&amp;amp; echo &#39;hello&#39;&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 假设外部传入该变量值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmdName := &lt;span class=&quot;string&quot;&gt;&quot;ping &quot;&lt;/span&gt; + userInputedVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 未判断外部输入是否存在命令注入字符，结合sh可造成命令注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, cmdName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	output, _ := cmd.CombinedOutput()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(output))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmdName := &lt;span class=&quot;string&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 未判断外部输入是否是预期命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd := exec.Command(cmdName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	output, _ := cmd.CombinedOutput()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(output))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkIllegal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cmdName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;|&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;;&quot;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;$&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;`&quot;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;) || strings.Contains(cmdName, &lt;span class=&quot;string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	userInputedVal := &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&amp;amp; echo &#39;hello&#39;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmdName := &lt;span class=&quot;string&quot;&gt;&quot;ping &quot;&lt;/span&gt; + userInputedVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; checkIllegal(cmdName) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 检查传给sh的命令是否有特殊字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 存在特殊字符直接return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, cmdName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	output, _ := cmd.CombinedOutput()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(output))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-4-通信安全&quot;&gt;&lt;a href=&quot;#1-4-通信安全&quot; class=&quot;headerlink&quot; title=&quot;1.4 通信安全&quot;&gt;&lt;/a&gt;1.4 通信安全&lt;/h3&gt;&lt;h4 id=&quot;1-4-1【必须】网络通信采用TLS方式&quot;&gt;&lt;a href=&quot;#1-4-1【必须】网络通信采用TLS方式&quot; class=&quot;headerlink&quot; title=&quot;1.4.1【必须】网络通信采用TLS方式&quot;&gt;&lt;/a&gt;1.4.1【必须】网络通信采用TLS方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;明文传输的通信协议目前已被验证存在较大安全风险，被中间人劫持后可能导致许多安全风险，因此必须采用至少TLS的安全通信方式保证通信安全，例如gRPC/Websocket都使用TLS1.3。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		w.Header().Add(&lt;span class=&quot;string&quot;&gt;&quot;Strict-Transport-Security&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;max-age=63072000; includeSubDomains&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;This is an example server.\n&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 服务器配置证书与私钥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log.Fatal(http.ListenAndServeTLS(&lt;span class=&quot;string&quot;&gt;&quot;:443&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yourCert.pem&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yourKey.pem&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-4-2【推荐】TLS启用证书验证&quot;&gt;&lt;a href=&quot;#1-4-2【推荐】TLS启用证书验证&quot; class=&quot;headerlink&quot; title=&quot;1.4.2【推荐】TLS启用证书验证&quot;&gt;&lt;/a&gt;1.4.2【推荐】TLS启用证书验证&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TLS证书应当是有效的、未过期的，且配置正确的域名，生产环境的服务端应启用证书验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;crypto/tls&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doAuthReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(authReq *http.Request)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Response&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tr := &amp;amp;http.Transport&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TLSClientConfig: &amp;amp;tls.Config&amp;#123;InsecureSkipVerify: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	client := &amp;amp;http.Client&amp;#123;Transport: tr&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res, _ := client.Do(authReq)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;crypto/tls&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doAuthReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(authReq *http.Request)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;http&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Response&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tr := &amp;amp;http.Transport&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TLSClientConfig: &amp;amp;tls.Config&amp;#123;InsecureSkipVerify: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	client := &amp;amp;http.Client&amp;#123;Transport: tr&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	res, _ := client.Do(authReq)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-5-敏感数据保护&quot;&gt;&lt;a href=&quot;#1-5-敏感数据保护&quot; class=&quot;headerlink&quot; title=&quot;1.5 敏感数据保护&quot;&gt;&lt;/a&gt;1.5 敏感数据保护&lt;/h3&gt;&lt;h4 id=&quot;1-5-1【必须】敏感信息访问&quot;&gt;&lt;a href=&quot;#1-5-1【必须】敏感信息访问&quot; class=&quot;headerlink&quot; title=&quot;1.5.1【必须】敏感信息访问&quot;&gt;&lt;/a&gt;1.5.1【必须】敏感信息访问&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;禁止将敏感信息硬编码在程序中，既可能会将敏感信息暴露给攻击者，也会增加代码管理和维护的难度&lt;/li&gt;
&lt;li&gt;使用配置中心系统统一托管密钥等敏感信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-5-2【必须】敏感数据输出&quot;&gt;&lt;a href=&quot;#1-5-2【必须】敏感数据输出&quot; class=&quot;headerlink&quot; title=&quot;1.5.2【必须】敏感数据输出&quot;&gt;&lt;/a&gt;1.5.2【必须】敏感数据输出&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;只输出必要的最小数据集，避免多余字段暴露引起敏感信息泄露&lt;/li&gt;
&lt;li&gt;不能在日志保存密码（包括明文密码和密文密码）、密钥和其它敏感信息&lt;/li&gt;
&lt;li&gt;对于必须输出的敏感信息，必须进行合理脱敏展示&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/register&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r.ParseForm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		user := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pw := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Registering new user %s with password %s.\n&quot;&lt;/span&gt;, user, pw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:80&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;serve1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/register&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r.ParseForm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		user := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pw := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Registering new user %s.\n&quot;&lt;/span&gt;, user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		use(pw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:80&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;避免通过GET方法、代码注释、自动填充、缓存等方式泄露敏感信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-5-3【必须】敏感数据存储&quot;&gt;&lt;a href=&quot;#1-5-3【必须】敏感数据存储&quot; class=&quot;headerlink&quot; title=&quot;1.5.3【必须】敏感数据存储&quot;&gt;&lt;/a&gt;1.5.3【必须】敏感数据存储&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;敏感数据应使用SHA2、RSA等算法进行加密存储&lt;/li&gt;
&lt;li&gt;敏感数据应使用独立的存储层，并在访问层开启访问控制&lt;/li&gt;
&lt;li&gt;包含敏感信息的临时文件或缓存一旦不再需要应立刻删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-5-4【必须】异常处理和日志记录&quot;&gt;&lt;a href=&quot;#1-5-4【必须】异常处理和日志记录&quot; class=&quot;headerlink&quot; title=&quot;1.5.4【必须】异常处理和日志记录&quot;&gt;&lt;/a&gt;1.5.4【必须】异常处理和日志记录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应合理使用panic、recover、defer处理系统异常，避免出错信息输出到前端&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); r != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Recovered in start()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对外环境禁止开启debug模式，或将程序运行日志输出到前端&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// bad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dlv --listen=:2345 --headless=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; --api-version=2 debug test.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dlv debug test.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-6-加密解密&quot;&gt;&lt;a href=&quot;#1-6-加密解密&quot; class=&quot;headerlink&quot; title=&quot;1.6 加密解密&quot;&gt;&lt;/a&gt;1.6 加密解密&lt;/h3&gt;&lt;h4 id=&quot;1-6-1【必须】不得硬编码密码-密钥&quot;&gt;&lt;a href=&quot;#1-6-1【必须】不得硬编码密码-密钥&quot; class=&quot;headerlink&quot; title=&quot;1.6.1【必须】不得硬编码密码/密钥&quot;&gt;&lt;/a&gt;1.6.1【必须】不得硬编码密码/密钥&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在进行用户登陆，加解密算法等操作时，不得在代码里硬编码密钥或密码，可通过变换算法或者配置等方式设置密码或者密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	user     = &lt;span class=&quot;string&quot;&gt;&quot;dbuser&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	password = &lt;span class=&quot;string&quot;&gt;&quot;s3cretp4ssword&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;sql&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;DB&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	connStr := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;postgres://%s:%s@localhost/pqgotest&quot;&lt;/span&gt;, user, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db, err := sql.Open(&lt;span class=&quot;string&quot;&gt;&quot;postgres&quot;&lt;/span&gt;, connStr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	commonkey = []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdef&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AesEncrypt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(plaintext &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	block, err := aes.NewCipher(commonkey)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-6-2【必须】密钥存储安全&quot;&gt;&lt;a href=&quot;#1-6-2【必须】密钥存储安全&quot; class=&quot;headerlink&quot; title=&quot;1.6.2【必须】密钥存储安全&quot;&gt;&lt;/a&gt;1.6.2【必须】密钥存储安全&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在使用对称密码算法时，需要保护好加密密钥。当算法涉及敏感、业务数据时，可通过非对称算法协商加密密钥。其他较为不敏感的数据加密，可以通过变换算法等方式保护密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-6-3【推荐】不使用弱密码算法&quot;&gt;&lt;a href=&quot;#1-6-3【推荐】不使用弱密码算法&quot; class=&quot;headerlink&quot; title=&quot;1.6.3【推荐】不使用弱密码算法&quot;&gt;&lt;/a&gt;1.6.3【推荐】不使用弱密码算法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在使用加密算法时，不建议使用加密强度较弱的算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// bad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crypto/des，crypto/md5，crypto/sha1，crypto/rc4等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// good&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crypto/rsa，crypto/aes等。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-7-正则表达式&quot;&gt;&lt;a href=&quot;#1-7-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1.7 正则表达式&quot;&gt;&lt;/a&gt;1.7 正则表达式&lt;/h3&gt;&lt;h4 id=&quot;1-7-1【推荐】使用regexp进行正则表达式匹配&quot;&gt;&lt;a href=&quot;#1-7-1【推荐】使用regexp进行正则表达式匹配&quot; class=&quot;headerlink&quot; title=&quot;1.7.1【推荐】使用regexp进行正则表达式匹配&quot;&gt;&lt;/a&gt;1.7.1【推荐】使用regexp进行正则表达式匹配&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;正则表达式编写不恰当可被用于DoS攻击，造成服务不可用，推荐使用regexp包进行正则表达式匹配。regexp保证了线性时间性能和优雅的失败：对解析器、编译器和执行引擎都进行了内存限制。但regexp不支持以下正则表达式特性，如业务依赖这些特性，则regexp不适合使用。&lt;ul&gt;
&lt;li&gt;回溯引用&lt;a href=&quot;https://www.regular-expressions.info/backref.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Backreferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;查看&lt;a href=&quot;https://www.regular-expressions.info/lookaround.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lookaround&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matched, err := regexp.MatchString(&lt;span class=&quot;string&quot;&gt;`a.b`&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;aaxbb&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(matched) &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(err)     &lt;span class=&quot;comment&quot;&gt;// nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;后台类&quot;&gt;&lt;a href=&quot;#后台类&quot; class=&quot;headerlink&quot; title=&quot;后台类&quot;&gt;&lt;/a&gt;后台类&lt;/h1&gt;&lt;h2 id=&quot;1-代码实现类-1&quot;&gt;&lt;a href=&quot;#1-代码实现类-1&quot; class=&quot;headerlink&quot; title=&quot;1 代码实现类&quot;&gt;&lt;/a&gt;1 代码实现类&lt;/h2&gt;&lt;h3 id=&quot;1-1-输入校验&quot;&gt;&lt;a href=&quot;#1-1-输入校验&quot; class=&quot;headerlink&quot; title=&quot;1.1 输入校验&quot;&gt;&lt;/a&gt;1.1 输入校验&lt;/h3&gt;&lt;h4 id=&quot;1-1-1【必须】按类型进行数据校验&quot;&gt;&lt;a href=&quot;#1-1-1【必须】按类型进行数据校验&quot; class=&quot;headerlink&quot; title=&quot;1.1.1【必须】按类型进行数据校验&quot;&gt;&lt;/a&gt;1.1.1【必须】按类型进行数据校验&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;所有外部输入的参数，应使用&lt;code&gt;validator&lt;/code&gt;进行白名单校验，校验内容包括但不限于数据长度、数据范围、数据类型与格式，校验不通过的应当拒绝&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/go-playground/validator/v10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; validate *validator.Validate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validateVariable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	myEmail := &lt;span class=&quot;string&quot;&gt;&quot;abc@tencent.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	errs := validate.Var(myEmail, &lt;span class=&quot;string&quot;&gt;&quot;required,email&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; errs != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(errs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//停止执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 验证通过，继续执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	validate = validator.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	validateVariable()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;无法通过白名单校验的应使用&lt;code&gt;html.EscapeString&lt;/code&gt;、&lt;code&gt;text/template&lt;/code&gt;或&lt;code&gt;bluemonday&lt;/code&gt;对&lt;code&gt;&amp;lt;, &amp;gt;, &amp;amp;, &amp;#39;,&amp;quot;&lt;/code&gt;等字符进行过滤或编码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;text/template&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TestHTMLEscapeString HTML特殊字符转义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(inputValue &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	escapedResult := template.HTMLEscapeString(inputValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; escapedResult&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-2-SQL操作&quot;&gt;&lt;a href=&quot;#1-2-SQL操作&quot; class=&quot;headerlink&quot; title=&quot;1.2 SQL操作&quot;&gt;&lt;/a&gt;1.2 SQL操作&lt;/h3&gt;&lt;h4 id=&quot;1-2-1【必须】SQL语句默认使用预编译并绑定变量&quot;&gt;&lt;a href=&quot;#1-2-1【必须】SQL语句默认使用预编译并绑定变量&quot; class=&quot;headerlink&quot; title=&quot;1.2.1【必须】SQL语句默认使用预编译并绑定变量&quot;&gt;&lt;/a&gt;1.2.1【必须】SQL语句默认使用预编译并绑定变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;database/sql&lt;/code&gt;的prepare、Query或使用GORM等ORM执行SQL操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/jinzhu/gorm&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_ &lt;span class=&quot;string&quot;&gt;&quot;github.com/jinzhu/gorm/dialects/sqlite&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Product &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gorm.Model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Code  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Price &lt;span class=&quot;keyword&quot;&gt;uint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; product Product&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db.First(&amp;amp;product, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用参数化查询，禁止拼接SQL语句，另外对于传入参数用于order by或表名的需要通过校验&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;database/sql&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(db *sql.DB, req *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	q := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=&#39;%s&#39; ORDER BY PRICE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		req.URL.Query()[&lt;span class=&quot;string&quot;&gt;&quot;category&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.Query(q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handlerGood&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(db *sql.DB, req *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 使用?占位符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	q := &lt;span class=&quot;string&quot;&gt;&quot;SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=&#39;?&#39; ORDER BY PRICE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.Query(q, req.URL.Query()[&lt;span class=&quot;string&quot;&gt;&quot;category&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-3-网络请求&quot;&gt;&lt;a href=&quot;#1-3-网络请求&quot; class=&quot;headerlink&quot; title=&quot;1.3 网络请求&quot;&gt;&lt;/a&gt;1.3 网络请求&lt;/h3&gt;&lt;h4 id=&quot;1-3-1【必须】资源请求过滤验证&quot;&gt;&lt;a href=&quot;#1-3-1【必须】资源请求过滤验证&quot; class=&quot;headerlink&quot; title=&quot;1.3.1【必须】资源请求过滤验证&quot;&gt;&lt;/a&gt;1.3.1【必须】资源请求过滤验证&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;&amp;quot;net/http&amp;quot;&lt;/code&gt;下的方法&lt;code&gt;http.Get(url)&lt;/code&gt;、&lt;code&gt;http.Post(url, contentType, body)&lt;/code&gt;、&lt;code&gt;http.Head(url)&lt;/code&gt;、&lt;code&gt;http.PostForm(url, data)&lt;/code&gt;、&lt;code&gt;http.Do(req)&lt;/code&gt;时，如变量值外部可控（指从参数中动态获取），应对请求目标进行严格的安全校验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如请求资源域名归属固定的范围，如只允许&lt;code&gt;a.qq.com&lt;/code&gt;和&lt;code&gt;b.qq.com&lt;/code&gt;，应做白名单限制。如不适用白名单，则推荐的校验逻辑步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第 1 步、只允许HTTP或HTTPS协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第 2 步、解析目标URL，获取其HOST&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第 3 步、解析HOST，获取HOST指向的IP地址转换成Long型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第 4 步、检查IP地址是否为内网IP，网段有：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 以RFC定义的专有网络为例，如有自定义私有网段亦应加入禁止访问列表。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.0/8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.16.0.0/12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.0.0/16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.0/8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第 5 步、请求URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第 6 步、如有跳转，跳转后执行1，否则绑定经校验的ip和域名，对URL发起请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官方库&lt;code&gt;encoding/xml&lt;/code&gt;不支持外部实体引用，使用该库可避免xxe漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;encoding/xml&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		XMLName  xml.Name &lt;span class=&quot;string&quot;&gt;`xml:&quot;person&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Id       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;      &lt;span class=&quot;string&quot;&gt;`xml:&quot;id,attr&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		UserName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;`xml:&quot;name&amp;gt;first&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Comment  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;`xml:&quot;,comment&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := &amp;amp;Person&amp;#123;Id: &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, UserName: &lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v.Comment = &lt;span class=&quot;string&quot;&gt;&quot; Need more details. &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enc := xml.NewEncoder(os.Stdout)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enc.Indent(&lt;span class=&quot;string&quot;&gt;&quot;  &quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;    &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := enc.Encode(v); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;error: %v\n&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-4-服务器端渲染&quot;&gt;&lt;a href=&quot;#1-4-服务器端渲染&quot; class=&quot;headerlink&quot; title=&quot;1.4 服务器端渲染&quot;&gt;&lt;/a&gt;1.4 服务器端渲染&lt;/h3&gt;&lt;h4 id=&quot;1-4-1【必须】模板渲染过滤验证&quot;&gt;&lt;a href=&quot;#1-4-1【必须】模板渲染过滤验证&quot; class=&quot;headerlink&quot; title=&quot;1.4.1【必须】模板渲染过滤验证&quot;&gt;&lt;/a&gt;1.4.1【必须】模板渲染过滤验证&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;text/template&lt;/code&gt;或者&lt;code&gt;html/template&lt;/code&gt;渲染模板时禁止将外部输入参数引入模板，或仅允许引入白名单内字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r.ParseForm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmpl = &lt;span class=&quot;string&quot;&gt;`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;form action=&quot;/&quot; method=&quot;post&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        First name:&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/form&amp;gt;&amp;lt;p&amp;gt;`&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;` &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t := template.New(&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t, _ = t.Parse(tmpl)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	t.Execute(w, &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/go-playground/validator/v10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; validate *validator.Validate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;validate = validator.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validateVariable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(val)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	errs := validate.Var(val, &lt;span class=&quot;string&quot;&gt;&quot;gte=1,lte=100&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 限制必须是1-100的正整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; errs != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(errs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r.ParseForm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x := r.Form.Get(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; validateVariable(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmpl = &lt;span class=&quot;string&quot;&gt;`&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;form action=&quot;/&quot; method=&quot;post&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            First name:&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/form&amp;gt;&amp;lt;p&amp;gt;`&lt;/span&gt; + x + &lt;span class=&quot;string&quot;&gt;` &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t := template.New(&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t, _ = t.Parse(tmpl)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Execute(w, &lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-5-Web跨域&quot;&gt;&lt;a href=&quot;#1-5-Web跨域&quot; class=&quot;headerlink&quot; title=&quot;1.5 Web跨域&quot;&gt;&lt;/a&gt;1.5 Web跨域&lt;/h3&gt;&lt;h4 id=&quot;1-5-1【必须】跨域资源共享CORS限制请求来源&quot;&gt;&lt;a href=&quot;#1-5-1【必须】跨域资源共享CORS限制请求来源&quot; class=&quot;headerlink&quot; title=&quot;1.5.1【必须】跨域资源共享CORS限制请求来源&quot;&gt;&lt;/a&gt;1.5.1【必须】跨域资源共享CORS限制请求来源&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;CORS请求保护不当可导致敏感信息泄漏，因此应当严格设置Access-Control-Allow-Origin使用同源策略进行保护。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c := cors.New(cors.Options&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AllowedOrigins:   []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;http://qq.com&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;https://qq.com&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AllowCredentials: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Debug:            &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 引入中间件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handler = c.Handler(handler)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-6-响应输出&quot;&gt;&lt;a href=&quot;#1-6-响应输出&quot; class=&quot;headerlink&quot; title=&quot;1.6 响应输出&quot;&gt;&lt;/a&gt;1.6 响应输出&lt;/h3&gt;&lt;h4 id=&quot;1-6-1-【必须】设置正确的HTTP响应包类型&quot;&gt;&lt;a href=&quot;#1-6-1-【必须】设置正确的HTTP响应包类型&quot; class=&quot;headerlink&quot; title=&quot;1.6.1 【必须】设置正确的HTTP响应包类型&quot;&gt;&lt;/a&gt;1.6.1 【必须】设置正确的HTTP响应包类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;响应头Content-Type与实际响应内容，应保持一致。如：API响应数据类型是json，则响应头使用&lt;code&gt;application/json&lt;/code&gt;；若为xml，则设置为&lt;code&gt;text/xml&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-6-2-【必须】添加安全响应头&quot;&gt;&lt;a href=&quot;#1-6-2-【必须】添加安全响应头&quot; class=&quot;headerlink&quot; title=&quot;1.6.2 【必须】添加安全响应头&quot;&gt;&lt;/a&gt;1.6.2 【必须】添加安全响应头&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;所有接口、页面，添加响应头 &lt;code&gt;X-Content-Type-Options: nosniff&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;所有接口、页面，添加响应头&lt;code&gt;X-Frame-Options&lt;/code&gt;。按需合理设置其允许范围，包括：&lt;code&gt;DENY&lt;/code&gt;、&lt;code&gt;SAMEORIGIN&lt;/code&gt;、&lt;code&gt;ALLOW-FROM origin&lt;/code&gt;。用法参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-6-3【必须】外部输入拼接到HTTP响应头中需进行过滤&quot;&gt;&lt;a href=&quot;#1-6-3【必须】外部输入拼接到HTTP响应头中需进行过滤&quot; class=&quot;headerlink&quot; title=&quot;1.6.3【必须】外部输入拼接到HTTP响应头中需进行过滤&quot;&gt;&lt;/a&gt;1.6.3【必须】外部输入拼接到HTTP响应头中需进行过滤&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;应尽量避免外部可控参数拼接到HTTP响应头中，如业务需要则需要过滤掉&lt;code&gt;\r&lt;/code&gt;、&lt;code&gt;\n&lt;/code&gt;等换行符，或者拒绝携带换行符号的外部输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-6-4【必须】外部输入拼接到response页面前进行编码处理&quot;&gt;&lt;a href=&quot;#1-6-4【必须】外部输入拼接到response页面前进行编码处理&quot; class=&quot;headerlink&quot; title=&quot;1.6.4【必须】外部输入拼接到response页面前进行编码处理&quot;&gt;&lt;/a&gt;1.6.4【必须】外部输入拼接到response页面前进行编码处理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直出html页面或使用模板生成html页面的，推荐使用&lt;code&gt;text/template&lt;/code&gt;自动编码，或者使用&lt;code&gt;html.EscapeString&lt;/code&gt;或&lt;code&gt;text/template&lt;/code&gt;对&lt;code&gt;&amp;lt;, &amp;gt;, &amp;amp;, &amp;#39;,&amp;quot;&lt;/code&gt;等字符进行编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;html/template&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outtemplate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	param1 := r.URL.Query().Get(&lt;span class=&quot;string&quot;&gt;&quot;param1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tmpl := template.New(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tmpl, _ = tmpl.Parse(&lt;span class=&quot;string&quot;&gt;`&amp;#123;&amp;#123;define &quot;T&quot;&amp;#125;&amp;#125;&amp;#123;&amp;#123;.&amp;#125;&amp;#125;&amp;#123;&amp;#123;end&amp;#125;&amp;#125;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tmpl.ExecuteTemplate(w, &lt;span class=&quot;string&quot;&gt;&quot;T&quot;&lt;/span&gt;, param1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-7-会话管理&quot;&gt;&lt;a href=&quot;#1-7-会话管理&quot; class=&quot;headerlink&quot; title=&quot;1.7 会话管理&quot;&gt;&lt;/a&gt;1.7 会话管理&lt;/h3&gt;&lt;h4 id=&quot;1-7-1【必须】安全维护session信息&quot;&gt;&lt;a href=&quot;#1-7-1【必须】安全维护session信息&quot; class=&quot;headerlink&quot; title=&quot;1.7.1【必须】安全维护session信息&quot;&gt;&lt;/a&gt;1.7.1【必须】安全维护session信息&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户登录时应重新生成session，退出登录后应清理session。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/gorilla/handlers&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/gorilla/mux&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setToken&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(res http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	expireToken := time.Now().Add(time.Minute * &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;).Unix()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	expireCookie := time.Now().Add(time.Minute * &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cookie := http.Cookie&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Name:     &lt;span class=&quot;string&quot;&gt;&quot;Auth&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Value:    signedToken,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Expires:  expireCookie, &lt;span class=&quot;comment&quot;&gt;// 过期失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		HttpOnly: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Path:     &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Domain:   &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Secure:   &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.SetCookie(res, &amp;amp;cookie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.Redirect(res, req, &lt;span class=&quot;string&quot;&gt;&quot;/profile&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;307&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 删除cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(res http.ResponseWriter, req *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	deleteCookie := http.Cookie&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Name:    &lt;span class=&quot;string&quot;&gt;&quot;Auth&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Value:   &lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Expires: time.Now(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.SetCookie(res, &amp;amp;deleteCookie)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-7-2【必须】CSRF防护&quot;&gt;&lt;a href=&quot;#1-7-2【必须】CSRF防护&quot; class=&quot;headerlink&quot; title=&quot;1.7.2【必须】CSRF防护&quot;&gt;&lt;/a&gt;1.7.2【必须】CSRF防护&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;涉及系统敏感操作或可读取敏感信息的接口应校验&lt;code&gt;Referer&lt;/code&gt;或添加&lt;code&gt;csrf_token&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/gorilla/csrf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;github.com/gorilla/mux&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r := mux.NewRouter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/signup&quot;&lt;/span&gt;, ShowSignupForm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/signup/post&quot;&lt;/span&gt;, SubmitSignupForm)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 使用csrf_token验证&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8000&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		csrf.Protect([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;32-byte-long-auth-key&quot;&lt;/span&gt;))(r))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-8-访问控制&quot;&gt;&lt;a href=&quot;#1-8-访问控制&quot; class=&quot;headerlink&quot; title=&quot;1.8 访问控制&quot;&gt;&lt;/a&gt;1.8 访问控制&lt;/h3&gt;&lt;h4 id=&quot;1-8-1【必须】默认鉴权&quot;&gt;&lt;a href=&quot;#1-8-1【必须】默认鉴权&quot; class=&quot;headerlink&quot; title=&quot;1.8.1【必须】默认鉴权&quot;&gt;&lt;/a&gt;1.8.1【必须】默认鉴权&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;除非资源完全可对外开放，否则系统默认进行身份认证，使用白名单的方式放开不需要认证的接口或页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据资源的机密程度和用户角色，以最小权限原则，设置不同级别的权限，如完全公开、登录可读、登录可写、特定用户可读、特定用户可写等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;涉及用户自身相关的数据的读写必须验证登录态用户身份及其权限，避免越权操作&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 伪代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;=:&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; userid=session.userid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有独立账号体系的外网服务使用&lt;code&gt;QQ&lt;/code&gt;或&lt;code&gt;微信&lt;/code&gt;登录，内网服务使用&lt;code&gt;统一登录服务&lt;/code&gt;登录，其他使用账号密码登录的服务需要增加验证码等二次验证&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-9-并发保护&quot;&gt;&lt;a href=&quot;#1-9-并发保护&quot; class=&quot;headerlink&quot; title=&quot;1.9 并发保护&quot;&gt;&lt;/a&gt;1.9 并发保护&lt;/h3&gt;&lt;h4 id=&quot;1-9-1【必须】禁止在闭包中直接调用循环变量&quot;&gt;&lt;a href=&quot;#1-9-1【必须】禁止在闭包中直接调用循环变量&quot; class=&quot;headerlink&quot; title=&quot;1.9.1【必须】禁止在闭包中直接调用循环变量&quot;&gt;&lt;/a&gt;1.9.1【必须】禁止在闭包中直接调用循环变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在循环中启动协程，当协程中使用到了循环的索引值，由于多个协程同时使用同一个变量会产生数据竞争，造成执行结果异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.GOMAXPROCS(runtime.NumCPU())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; group sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		group.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; group.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;%-2d&quot;&lt;/span&gt;, i) &lt;span class=&quot;comment&quot;&gt;// 这里打印的i不是所期望的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	group.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	runtime.GOMAXPROCS(runtime.NumCPU())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; group sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		group.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(j &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); r != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Recovered in start()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				group.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;%-2d&quot;&lt;/span&gt;, j) &lt;span class=&quot;comment&quot;&gt;// 闭包内部使用局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;(i) &lt;span class=&quot;comment&quot;&gt;// 把循环变量显式地传给协程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	group.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-9-2【必须】禁止并发写map&quot;&gt;&lt;a href=&quot;#1-9-2【必须】禁止并发写map&quot; class=&quot;headerlink&quot; title=&quot;1.9.2【必须】禁止并发写map&quot;&gt;&lt;/a&gt;1.9.2【必须】禁止并发写map&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;并发写map容易造成程序崩溃并异常退出，建议加锁保护&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 并发读写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_ = m[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-9-3【必须】确保并发安全&quot;&gt;&lt;a href=&quot;#1-9-3【必须】确保并发安全&quot; class=&quot;headerlink&quot; title=&quot;1.9.3【必须】确保并发安全&quot;&gt;&lt;/a&gt;1.9.3【必须】确保并发安全&lt;/h4&gt;&lt;p&gt;敏感操作如果未作并发安全限制，可导致数据读写异常，造成业务逻辑限制被绕过。可通过同步锁或者原子操作进行防护。&lt;/p&gt;
&lt;p&gt;通过同步锁共享内存&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lock *sync.Mutex)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lock.Lock() &lt;span class=&quot;comment&quot;&gt;// 加写锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lock.Unlock() &lt;span class=&quot;comment&quot;&gt;// 解写锁，任何一个Lock()或RLock()均需要保证对应有Unlock()或RUnlock()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	lock := &amp;amp;sync.Mutex&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; Count(lock) &lt;span class=&quot;comment&quot;&gt;// 传递指针是为了防止函数内的锁和调用锁不一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lock.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		c := count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lock.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runtime.Gosched() &lt;span class=&quot;comment&quot;&gt;// 交出时间片给协程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c &amp;gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;sync/atomic&lt;/code&gt;执行原子操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Map &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; m atomic.Value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m.Store(&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(Map))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mu sync.Mutex &lt;span class=&quot;comment&quot;&gt;// used only by writers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	read := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(val &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m1 := m.Load().(Map)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m1[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	insert := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key, val &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mu.Lock() &lt;span class=&quot;comment&quot;&gt;// 与潜在写入同步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m1 := m.Load().(Map) &lt;span class=&quot;comment&quot;&gt;// 导入struct当前数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m2 := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(Map)      &lt;span class=&quot;comment&quot;&gt;// 创建新值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; m1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			m2[k] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m2[key] = val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m.Store(m2) &lt;span class=&quot;comment&quot;&gt;// 用新的替代当前对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, _ = read, insert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://github.com/Tencent/secguide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Tencent/secguide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通用类&quot;&gt;&lt;a href=&quot;#通用类&quot; class=&quot;headerlink&quot; title=&quot;通用类&quot;&gt;&lt;/a&gt;通用类&lt;/h1&gt;&lt;h2 id=&quot;1-代码实现类&quot;&gt;&lt;a href=&quot;#1-代码实现类&quot; class=&quot;headerlink&quot; title=&quot;1. 代码实现类&quot;&gt;&lt;/a&gt;1. 代码实现类&lt;/h2&gt;&lt;h3 id=&quot;1-1-内存管理&quot;&gt;&lt;a href=&quot;#1-1-内存管理&quot; class=&quot;headerlink&quot; title=&quot;1.1 内存管理&quot;&gt;&lt;/a&gt;1.1 内存管理&lt;/h3&gt;&lt;h4 id=&quot;1-1-1【必须】切片长度校验&quot;&gt;&lt;a href=&quot;#1-1-1【必须】切片长度校验&quot; class=&quot;headerlink&quot; title=&quot;1.1.1【必须】切片长度校验&quot;&gt;&lt;/a&gt;1.1.1【必须】切片长度校验&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在对slice进行操作时，必须判断长度是否合法，防止程序panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: 未判断data的长度，可导致 index out of range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Bad&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// bad: slice bounds out of range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice = []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(slice[:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// good: 使用data前应判断长度是否合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(data) == &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt; &amp;amp;&amp;amp; data[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://team.jiunile.com/categories/Golang/"/>
    
      <category term="代码安全" scheme="http://team.jiunile.com/categories/Golang/%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="代码安全" scheme="http://team.jiunile.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="security" scheme="http://team.jiunile.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>50 张图，掌握 Kubernetes 中优雅且零停机部署的实现</title>
    <link href="http://team.jiunile.com//blog/2021/02/k8s-graceful-shutdown.html"/>
    <id>http://team.jiunile.com//blog/2021/02/k8s-graceful-shutdown.html</id>
    <published>2021-02-02T14:00:00.000Z</published>
    <updated>2021-02-02T06:24:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在本文中，您将了解如何在Pod启动或关闭时防止连接异常，并将学习如何以优雅的方式关闭长时间运行的任务。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_shutdown_1.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在 Kubernetes 中，创建和删除 Pod 是最常见的任务之一。&lt;/p&gt;
&lt;p&gt;当您执行滚动更新，扩展部署，每个新发行版，每个作业和 cron 作业等时，都会创建 Pod。&lt;/p&gt;
&lt;p&gt;但是在节点被驱逐之后，Pods 也会被删除并重新创建—例如，当您将节点标记为不可调度时。&lt;/p&gt;
&lt;p&gt;这些 Pod 的生命是如此短暂，那么当 Pod 在响应请求的过程中却被告知关闭时会发生什么？&lt;/p&gt;
&lt;p&gt;请求在关闭之前是否已完成？&lt;/p&gt;
&lt;p&gt;接下来的请求又如何呢？&lt;/p&gt;
&lt;p&gt;在讨论删除 Pod 时会发生什么之前，有必要讨论一下创建 Pod 时会发生什么。&lt;/p&gt;
&lt;p&gt;假设您要在集群中创建以下 Pod：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; my-pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;您可以使用以下方式将 YAML 定义提交给集群：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; pod.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入命令后，kubectl 便将 Pod 定义提交给 Kubernetes API。&lt;/p&gt;
&lt;h2 id=&quot;在数据库中保存集群的状态&quot;&gt;&lt;a href=&quot;#在数据库中保存集群的状态&quot; class=&quot;headerlink&quot; title=&quot;在数据库中保存集群的状态&quot;&gt;&lt;/a&gt;在数据库中保存集群的状态&lt;/h2&gt;&lt;p&gt;API 接收和检查 Pod 定义，然后将其存储在数据库 etcd 中。&lt;/p&gt;
&lt;p&gt;Pod 也将添加到&lt;a href=&quot;https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/#scheduling-cycle-binding-cycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调度程序的队列&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;调度程序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查定义&lt;/li&gt;
&lt;li&gt;收集有关工作负载的详细信息，例如 CPU 和内存请求，然后&lt;/li&gt;
&lt;li&gt;确定哪个节点最适合运行它。(&lt;a href=&quot;https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/#extension-points&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过Filters 和 Predicates&lt;/a&gt;)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在过程结束时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 etcd 中将 Pod 标记为 Scheduled。&lt;/li&gt;
&lt;li&gt;为 Pod 分配了一个节点。&lt;/li&gt;
&lt;li&gt;Pod 的状态存储在 etcd 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;但是Pod仍然不存在。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当您使用 &lt;code&gt;kubectl apply -f&lt;/code&gt; 提交一个 Pod 时，YAML 被发送到 kubernetes api。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_2.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;API 将 Pod 保存在数据库 etcd g中。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_3.png&quot; alt=&quot;graceful shutdown&quot;&gt; &lt;/li&gt;
&lt;li&gt;调度程序为这个 Pod 分配最佳节点，并且 Pod 的状态更改为 Pending。pod 只存在于etcd中。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_4.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先前的任务发生在控制平面中，并且状态存储在数据库中。&lt;/p&gt;
&lt;p&gt;那么谁在您的节点中创建 Pod？&lt;/p&gt;
&lt;h2 id=&quot;Kubelet-—-Kubernetes-代理&quot;&gt;&lt;a href=&quot;#Kubelet-—-Kubernetes-代理&quot; class=&quot;headerlink&quot; title=&quot;Kubelet — Kubernetes 代理&quot;&gt;&lt;/a&gt;Kubelet — Kubernetes 代理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;kubelet 的工作是轮询控制平面以获取更新。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;您可以想象 kubelet 不断地向主节点询问：“我管理工作节点1，是否对我有任何新的 Pod？”。&lt;/p&gt;
&lt;p&gt;当有 Pod 时，kubelet 会创建它。&lt;/p&gt;
&lt;p&gt;有一点需要注意。&lt;/p&gt;
&lt;p&gt;kubelet 不会自行创建 Pod。而是将工作委托给其他三个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;容器运行时接口（CRI）&lt;/strong&gt; — 为 Pod 创建容器的组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器网络接口（CNI）&lt;/strong&gt; — 将容器连接到群集网络并分配IP地址的组件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器存储接口（CSI）&lt;/strong&gt; — 在容器中装载卷的组件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在大多数情况下，容器运行时接口（CRI）的工作类似于：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt;my-container-image&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;容器网络接口（CNI）有点有趣，因为它负责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为 Pod 生成有效的 IP 地址。&lt;/li&gt;
&lt;li&gt;将容器连接到网络的其余部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以想象，有几种方法可以将容器连接到网络并分配有效的 IP 地址（您可以在 IPv4 或 IPv6 之间进行选择，也可以分配多个 I P地址）。&lt;/p&gt;
&lt;p&gt;例如，&lt;a href=&quot;https://archive.shivam.dev/docker-networking-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 创建虚拟以太网对并将其连接到网桥&lt;/a&gt;，而 &lt;a href=&quot;https://itnext.io/kubernetes-is-hard-why-eks-makes-it-easier-for-network-and-security-architects-ea6d8b2ca965&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AWS—CNI 将 Pods 直接连接到虚拟私有云（VPC）&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当容器网络接口完成其工作时，Pod已连接到网络，并分配了有效的IP地址。&lt;/p&gt;
&lt;p&gt;还有一个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubelet 知道 IP 地址（因为它调用了容器网络接口），但是控制平面却不知道。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有人告诉主节点，该Pod已分配了IP地址，并准备接收流量。&lt;/p&gt;
&lt;p&gt;就控制平面而言，仍在创建 Pod。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubelet 的工作是收集 Pod 的所有详细信息（例如 I P地址）并将其报告回控制平面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;您可以想象检查 etcd 不仅可以显示 Pod 的运行位置，还可以显示其 IP 地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubelet 轮询控制平面以获取更新。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_5.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当一个新的 Pod 分配给它的节点时，kubelet 会检索详细信息&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_6.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kubernetns 不会自己创建 pod。它依赖于三个组件：容器运行时接口、容器网络接口和容器存储接口。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_7.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;一旦所有三个组件都成功完成，Pod 就在您的节点中运行并分配了一个 IP 地址。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_8.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;kubelet 向控制平面报告 IP 地址。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_9.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果 Pod 不是任何服务的一部分，那么任务将结束。&lt;/p&gt;
&lt;p&gt;Pod 已创建并可以使用。&lt;/p&gt;
&lt;p&gt;如果 Pod 是服务的一部分，则还需要执行几个步骤。&lt;/p&gt;
&lt;h2 id=&quot;Pods-和-Services&quot;&gt;&lt;a href=&quot;#Pods-和-Services&quot; class=&quot;headerlink&quot; title=&quot;Pods 和 Services&quot;&gt;&lt;/a&gt;Pods 和 Services&lt;/h2&gt;&lt;p&gt;创建服务时，通常需要注意以下两条信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;selector&lt;/code&gt; — 用于指定将接收流量的 Pod。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;targetPort&lt;/code&gt; — 通过 pod 使用的端口接收的流量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务的典型 YAML 定义如下所示：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; my-service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将 Service 提交给集群时 &lt;code&gt;kubectl apply&lt;/code&gt;，Kubernetes 会找到所有具有与selector（&lt;code&gt;name: app&lt;/code&gt;）相同标签的 Pod，并收集其 IP 地址 — 但前提是它们已通过&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-tcp-liveness-probe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Readiness 探针&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然后，对于每个 IP 地址，它将 IP 地址和端口连接在一起。&lt;/p&gt;
&lt;p&gt;如果 IP 地址是 &lt;code&gt;10.0.0.3&lt;/code&gt; 和，&lt;code&gt;targetPort&lt;/code&gt; 是 &lt;code&gt;3000&lt;/code&gt;，Kubernetes 将两个结果连接起来并称为 endpoint。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IP address + port = endpoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.0.0.3   + 3000 = 10.0.0.3:3000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;endpoint 存储在 etcd 的另一个名为 Endpoint 的对象中。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;是否有点疑惑？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 中定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;endpoint 是 IP 地址 + 端口对（&lt;code&gt;10.0.0.3:3000&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;Endpoint 是 endpoint 的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Endpoint 对象是 Kubernetes 中的真实对象，对于每个服务 Kubernetes 都会自动创建一个 endpoint 对象。&lt;/p&gt;
&lt;p&gt;您可以使用以下方法进行验证：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get services,endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service/my-service-1   ClusterIP   10.105.17.65   &amp;lt;none&amp;gt;        80/TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service/my-service-2   ClusterIP   10.96.0.1      &amp;lt;none&amp;gt;        443/TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     ENDPOINTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints/my-service-1   172.17.0.6:80,172.17.0.7:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints/my-service-2   192.168.99.100:8443&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Endpoint 从 Pod 收集所有 IP 地址和端口。&lt;/p&gt;
&lt;p&gt;但并不是一次性的。&lt;/p&gt;
&lt;p&gt;在以下情况下，将使用新的 endpoint 列表刷新 Endpoint 对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 Pod。&lt;/li&gt;
&lt;li&gt;Pod 已删除。&lt;/li&gt;
&lt;li&gt;在 Pod 上修改了标签。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，您可以想象，每次创建 Pod 并在 kubelet 将其 IP 地址发布到主节点后，Kubernetes 都会更新所有 endpoint 以反映更改：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get services,endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service/my-service-1   ClusterIP   10.105.17.65   &amp;lt;none&amp;gt;        80/TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service/my-service-2   ClusterIP   10.96.0.1      &amp;lt;none&amp;gt;        443/TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     ENDPOINTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints/my-service-1   172.17.0.6:80,172.17.0.7:80,172.17.0.8:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoints/my-service-2   192.168.99.100:8443&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很好，endpoint 存储在控制平面中，并且 endpoint 对象已更新。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在此图中，集群中部署了一个 Pod。Pod 属于服务。如果您要检查 etcd，则可以找到 Pod 的详细信息以及服务。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_10.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当部署新 pod 后会发生什么？&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_11.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes 必须跟踪 Pod 及其 IP 地址。服务应该将流量路由到新的 endpoint，因此应该传播 IP 地址和端口。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_12.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当部署另一个 Pod 时会发生什么？&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_13.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;完全相同的过程。在数据库中为 Pod 创建一个新的“记录”，并传递给 endpoint。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_14.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;但是，当一个 Pod 被删除时会发生什么呢？&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_15.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;服务会立即删除 endpoint，最后，Pod 也会从数据库中删除。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_16.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes 会对集群中的每一个小变化做出反应。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_17.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;您准备好开始使用 Pod 了吗？&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;在-Kubernetes-中使用-Endpoint&quot;&gt;&lt;a href=&quot;#在-Kubernetes-中使用-Endpoint&quot; class=&quot;headerlink&quot; title=&quot;在 Kubernetes 中使用 Endpoint&quot;&gt;&lt;/a&gt;在 Kubernetes 中使用 Endpoint&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;endpoint 由 Kubernetes 中的多个组件使用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kube-proxy 使用 endpoint 在节点上设置 iptables 规则。&lt;/p&gt;
&lt;p&gt;因此，每当 endpoint（对象）发生变化时，kube-proxy 就会检索新的 IP 地址和端口列表，并编写新的 iptables 规则。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让我们考虑具有两个 Pod 且不包含 Service 的三节点群集。Pod 的状态存储在 etcd 中。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_18.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;创建服务时会发生什么？&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_19.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes 创建了一个 endpoint 对象，并从 pod 收集所有 endpoint（IP 地址和端口对）。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_20.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kube-proxy 守护进程监听 endpoint 的更改。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_21.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当添加、删除或更新 endpoint 时，kube-proxy 检索 endpoint 的新列表。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_22.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Kube-proxy 使用 endpoint 在集群的每个节点上创建 iptables 规则。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_23.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ingress controller 使用相同的 endpoint 列表。&lt;/p&gt;
&lt;p&gt;Ingress controller 是群集中将外部流量路由到群集中的那个组件。&lt;/p&gt;
&lt;p&gt;设置 Ingress 清单时，通常将 Service 指定为目标：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; networking.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; my-ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - http:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      paths:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - backend:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          serviceName:&lt;/span&gt; my-service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          servicePort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        path:&lt;/span&gt; /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实际上，流量不会路由到服务。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;取而代之的是，Ingress controller 设置了一个订阅，每次该服务的 endpoint 更改时都将收到通知。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ingress 会将流量直接路由到 Pod，从而跳过服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以想象，每次更改 endpoint（对象）时，Ingress 都会检索 IP 地址和端口的新列表，并将控制器重新配置为包括新的 Pod。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在这张图片中，有一个 Ingress 控制器，它带有两个副本和一个 Service 的 Deployment。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_24.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;如果您想通过入口将外部流量路由到 Pods，您应该创建一个入口清单（一个 YAML 文件）。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_25.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;一旦你运行了 &lt;code&gt;kubectl apply -f ingress.yaml&lt;/code&gt;，入口控制器从控制平面检索文件。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_26.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Ingress YAML 有一个 &lt;code&gt;serviceName&lt;/code&gt; 属性，该属性描述它应该使用哪个服务。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_27.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;入口控制器从服务检索 Endpoint 列表并跳过它。流量直接流向 endpoint（pod）。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_28.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当一个新的 Pod 被创建时会发生什么？&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_29.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;您已经知道 Kubernetes 如何创建 Pod 并通告 endpoint。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_30.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;入口控制器正在订阅对 endpoint 的更改。因为有一个变更的通知，它检索新的 Endpoint 列表。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_31.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;入口控制器将流量路由到新的 Pod。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_32.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有更多的 Kubernetes 组件示例订阅了对 endpoint 的更改。&lt;/p&gt;
&lt;p&gt;集群中的 DNS 组件 CoreDNS 是另一个示例。&lt;/p&gt;
&lt;p&gt;如果您使用 &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#headless-services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Headless 类型的服务&lt;/a&gt;，则每次添加或删除 endpoint 时，CoreDNS 都必须订阅对e ndpoint 的更改并重新配置自身。&lt;/p&gt;
&lt;p&gt;相同的 endpoint 被 istio 或 Linkerd 之类的服务网格所使用，&lt;a href=&quot;https://thebsdbox.co.uk/2020/03/18/Creating-a-Kubernetes-cloud-doesn-t-required-boiling-the-ocean/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云提供商也创建了&lt;/a&gt; &lt;code&gt;type:LoadBalancer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您必须记住，有几个组件订阅了对endpoint的更改，它们可能会在不同时间收到有关 endpoint 更新的通知。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;够了吗，还是在创建 Pod 之后有什么事发生？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这次您完成了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速回顾一下创建Pod时发生的情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pod 存储在 etcd 中。&lt;/li&gt;
&lt;li&gt;调度程序分配一个节点。它将节点写入 etcd。&lt;/li&gt;
&lt;li&gt;向 kubelet 通知新的和预定的 Pod。&lt;/li&gt;
&lt;li&gt;kubelet 将创建容器的委托委派给容器运行时接口（CRI）。&lt;/li&gt;
&lt;li&gt;kubelet 代表将容器附加到容器网络接口（CNI）。&lt;/li&gt;
&lt;li&gt;kubelet 将容器中的安装卷委托给容器存储接口（CSI）。&lt;/li&gt;
&lt;li&gt;容器网络接口分配 IP 地址。&lt;/li&gt;
&lt;li&gt;Kubelet 将 IP 地址报告给控制平面。&lt;/li&gt;
&lt;li&gt;IP 地址存储在 etcd 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果您的 Pod 属于服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubelet 等待成功的 Readiness 探针。&lt;/li&gt;
&lt;li&gt;通知所有相关的 endpoint（对象）更改。&lt;/li&gt;
&lt;li&gt;Endpoint 将新 endpoint（IP 地址 + 端口对）添加到其列表中。&lt;/li&gt;
&lt;li&gt;Endpoint 更改将通知 Kube-proxy。Kube-proxy 更新每个节点上的 iptables 规则。&lt;/li&gt;
&lt;li&gt;通知 Endpoint 变化的入口控制器。控制器将流量路由到新的 IP 地址。&lt;/li&gt;
&lt;li&gt;CoreDNS 通知 Endpoint 更改。如果服务的类型为 Headless，则更新 DNS 条目。&lt;/li&gt;
&lt;li&gt;向云提供商通知 Endpoint 更改。如果服务为 &lt;code&gt;type: LoadBalancer&lt;/code&gt;，则将新 Endpoint 配置为负载均衡器池的一部分。&lt;/li&gt;
&lt;li&gt;Endpoint 更改将通知群集中安装的所有服务网格。&lt;/li&gt;
&lt;li&gt;订阅 Endpoint 更改的其他运营商也会收到通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如此长的列表令人惊讶地只是一项常见任务 — 创建 Pod。&lt;/p&gt;
&lt;p&gt;Pod 正在运行。现在是时候讨论删除它时会发生什么。&lt;/p&gt;
&lt;h2 id=&quot;删除-pod&quot;&gt;&lt;a href=&quot;#删除-pod&quot; class=&quot;headerlink&quot; title=&quot;删除 pod&quot;&gt;&lt;/a&gt;删除 pod&lt;/h2&gt;&lt;p&gt;您可能已经猜到了，但是删除 Pod 时，必须遵循相同的步骤，但要相反。&lt;/p&gt;
&lt;p&gt;首先，应从 endpoint（对象）中删除 endpoint。&lt;/p&gt;
&lt;p&gt;这次将忽略 “Readiness” 探针，并立即从控制平面移除 endpoint。&lt;/p&gt;
&lt;p&gt;依次触发所有事件到 kube-proxy，Ingress 控制器，DNS，服务网格等。&lt;/p&gt;
&lt;p&gt;这些组件将更新其内部状态，并停止将流量路由到IP地址。&lt;/p&gt;
&lt;p&gt;由于组件可能正在忙于做其他事情，&lt;strong&gt;因此无法保证从其内部状态中删除IP地址将花费多长时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于某些人来说，可能不到一秒钟。对于其他人，可能需要更多时间。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果您要使用删除 Pod &lt;code&gt;kubectl delete pod&lt;/code&gt;，则该命令将首先到达 Kubernetes API&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_33.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;消息被控制平面中的特定控制器截获：Endpoint 控制器。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_34.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;Endpoint 控制器向 API 发出命令，从端点对象中删除 IP 地址和端口。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_35.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;谁侦听 Endpoint 更改？ Kube-proxy、入口控制器、CoreDNS 等会收到更改通知。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_36.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;一些组件（如 kube-proxy ）可能需要一些额外的时间来进一步传播更改。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_37.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时，etcd 中 Pod 的状态更改为 Termination。&lt;/p&gt;
&lt;p&gt;将通知 kubelet 更改并委托：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将全部容器卸载到容器存储接口（CSI）。&lt;/li&gt;
&lt;li&gt;从网络上分离容器并将IP地址释放到容器网络接口（CNI）。&lt;/li&gt;
&lt;li&gt;将容器销毁到容器运行时接口（CRI）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;换句话说，Kubernetes遵循与创建Pod完全相同的步骤，但相反。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果您要使用删除 Pod &lt;code&gt;kubectl delete pod&lt;/code&gt;，则该命令将首先到达 Kubernetes API。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_38.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当 kubelet 轮询控制平面以获取更新时，它注意到 Pod 被删除了。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_39.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;kubelet 将销毁 Pod 委托给容器运行时接口、容器网络接口和容器存储接口。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_40.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，存在细微但必不可少的差异。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当您终止 Pod 时，将同时删除 endpoint 和发送到 kubelet 的信号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首次创建 Pod 时，Kubernetes 等待 kubelet 报告 IP 地址，然后开始 endpoint 通告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，当您删除 Pod 时，事件将并行开始。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这可能会导致很多竞争情况。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果在通告 endpoint 之前删除 Pod 怎么办？&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除 endpoint 和删除 Pod 会同时发生。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_41.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;因此，您可以在 kube-proxy 更新 iptables 规则之前删除 endpoint。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_42.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;或者更幸运的是，只有在 endpoint 完全通告之后，Pod 才会被删除。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_43.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;正常关机（Graceful）&quot;&gt;&lt;a href=&quot;#正常关机（Graceful）&quot; class=&quot;headerlink&quot; title=&quot;正常关机（Graceful）&quot;&gt;&lt;/a&gt;正常关机（Graceful）&lt;/h2&gt;&lt;p&gt;当 Pod 从 kube-proxy 或 Ingress 控制器中删除之前终止时，您可能会遇到停机时间。&lt;/p&gt;
&lt;p&gt;而且，如果您考虑一下，这是有道理的。&lt;/p&gt;
&lt;p&gt;Kubernetes 仍将流量路由到 IP 地址，但 Pod 不再存在。&lt;/p&gt;
&lt;p&gt;Ingress 控制器，kube-proxy，CoreDNS 等没有足够的时间从其内部状态中删除 IP 地址。&lt;/p&gt;
&lt;p&gt;理想情况下，在删除 Pod 之前，Kubernetes 应该等待集群中的所有组件具有更新的 endpoint 列表。&lt;/p&gt;
&lt;p&gt;但是 Kubernetes 不能那样工作。&lt;/p&gt;
&lt;p&gt;Kubernetes 提供了健壮的机制来分布 endpoint（即 Endpoint 对象和更高级的抽象功能，例如 &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Endpoint Slices&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;但是，Kubernetes 不会验证订阅 endpoint 更改的组件是否是集群状态的最新信息。&lt;/p&gt;
&lt;p&gt;那么，如何避免这种竞争情况并确保在通告 endpoint 之后删除 Pod？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你应该等一下！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当 Pod 即将被删除时，它会收到 SIGTERM 信号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;您的应用程序可以捕获该信号并开始关闭。&lt;/p&gt;
&lt;p&gt;由于 endpoint 不太可能立即从 Kubernetes 中的所有组件中删除，因此您可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请稍等片刻，然后退出。&lt;/li&gt;
&lt;li&gt;尽管有 SIGTERM，仍然可以处理传入流量。&lt;/li&gt;
&lt;li&gt;最后，关闭现有的长期连接（也许是数据库连接或 WebSocket）。&lt;/li&gt;
&lt;li&gt;关闭该过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你应该等多久？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认情况下，Kubernetes 将发送 SIGTERM 信号并等待 30 秒，然后强制终止该进程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此，您可以在最初的15秒内继续操作，以防万一。&lt;/p&gt;
&lt;p&gt;希望该间隔应足以将 endpoint 删除通知到 kube-proxy，Ingress 控制器，CoreDNS 等。&lt;/p&gt;
&lt;p&gt;因此，越来越少的流量将到达您的 Pod，直到停止为止。&lt;/p&gt;
&lt;p&gt;15 秒后，可以安全地关闭与数据库的连接（或任何持久连接）并终止该过程。&lt;/p&gt;
&lt;p&gt;如果您认为需要更多时间，则可以在 20 或 25 秒时停止该过程。&lt;/p&gt;
&lt;p&gt;但是，您应该记住，Kubernetes 将在 30 秒后强行终止进程（&lt;a href=&quot;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;除非您更改 &lt;code&gt;terminationGracePeriodSecondsPod&lt;/code&gt; 定义中的&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;如果您无法更改代码以等待更长的时间怎么办？&lt;/p&gt;
&lt;p&gt;您可以调用脚本以等待固定的时间，然后退出应用程序。&lt;/p&gt;
&lt;p&gt;在调用 SIGTERM 之前，Kubernetes &lt;code&gt;preStop&lt;/code&gt; 在 Pod 中公开一个钩子。&lt;/p&gt;
&lt;p&gt;您可以将 &lt;code&gt;preStop&lt;/code&gt; 钩子设置为等待 15 秒。&lt;/p&gt;
&lt;p&gt;让我们看一个例子：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; my-pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      lifecycle:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        preStop:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          exec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;sleep&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;15&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该 &lt;code&gt;preStop&lt;/code&gt; 钩子是 &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pod LifeCycle 钩子之一&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;建议延迟 15 秒吗？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这要视情况而定，但这可能是开始测试的明智方法。&lt;/p&gt;
&lt;p&gt;以下是您可以选择的选项的概述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;您已经知道，当删除 Pod 时，会通知 kubelet 更改。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_44.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;如果 Pod 有一个 &lt;code&gt;preStop&lt;/code&gt; 钩子，则首先调用它。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_45.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;preStop&lt;/code&gt; 完成时，kubelet 向容器发送 SIGTERM 信号。从那时起，容器应该关闭所有长期存在的连接并准备终止。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_46.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;默认情况下，进程有 30 秒的时间退出，这包括 &lt;code&gt;preStop&lt;/code&gt; 钩子。如果进程还没有退出，kubelet 发送 SIGKILL 信号并强制终止进程。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_47.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;li&gt;kubelet 通知控制平面 pod 已成功删除。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_48.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;宽限时间（Grace-periods）和滚动更新&quot;&gt;&lt;a href=&quot;#宽限时间（Grace-periods）和滚动更新&quot; class=&quot;headerlink&quot; title=&quot;宽限时间（Grace periods）和滚动更新&quot;&gt;&lt;/a&gt;宽限时间（Grace periods）和滚动更新&lt;/h2&gt;&lt;p&gt;正常关机适用于要删除的 Pod。&lt;/p&gt;
&lt;p&gt;但是，如果不删除 Pod，该怎么办？&lt;/p&gt;
&lt;p&gt;即使您不这样做，Kubernetes 也会始终删除 Pod。&lt;/p&gt;
&lt;p&gt;尤其是，每次部署较新版本的应用程序时，Kubernetes 都会创建和删除 Pod。&lt;/p&gt;
&lt;p&gt;在部署中更改镜像时，Kubernetes 会逐步推出更改。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# image: nginx:1.18 OLD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; nginx:&lt;span class=&quot;number&quot;&gt;1.19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果您有三个副本，并且一旦提交新的 YAML 资源 Kubernetes，则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用新的容器镜像创建一个 Pod。&lt;/li&gt;
&lt;li&gt;销毁现有的 Pod。&lt;/li&gt;
&lt;li&gt;等待 Pod 准备就绪。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并重复上述步骤，直到所有 Pod 都迁移到较新的版本。&lt;/p&gt;
&lt;p&gt;Kubernetes 仅在新的 Pod 准备好接收流量（换句话说，它通过 Readiness 检查）之后才重复每个周期。&lt;/p&gt;
&lt;p&gt;Kubernetes 是否在等待 Pod 被删除之后再移到下一个 Pod？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并不会！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果您有 10 个 Pod，并且 Pod 需要 2 秒钟的准备时间和 20 个关闭的时间，则会发生以下情况：&lt;/p&gt;
&lt;p&gt;创建第一个 Pod，并终止前一个 Pod。&lt;/p&gt;
&lt;p&gt;Kubernetes 创建一个新的 Pod 之后，需要 2 秒钟的准备时间。&lt;/p&gt;
&lt;p&gt;同时，被终止的 Pod 会终止 20 秒&lt;/p&gt;
&lt;p&gt;20 秒后，所有新的 Pod 均已启用（10 个 Pod ，在 2 秒后就绪），并且所有之前的 10 个Pod 都将终止（第一个 Terminated Pod 将要退出）。&lt;/p&gt;
&lt;p&gt;总共，您在短时间内将 Pod 的数量增加了一倍（运行 10 次，终止 10 次）。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_49.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/p&gt;
&lt;p&gt;与 “Readiness” 探针相比，宽限时间（graceful period）越长，您同时具有 “Running”（和 Terminating ）的 Pod 越多。&lt;/p&gt;
&lt;p&gt;不好吗？&lt;/p&gt;
&lt;p&gt;不一定，因为您要小心不要断开连接。&lt;/p&gt;
&lt;h2 id=&quot;终止长时间运行的任务&quot;&gt;&lt;a href=&quot;#终止长时间运行的任务&quot; class=&quot;headerlink&quot; title=&quot;终止长时间运行的任务&quot;&gt;&lt;/a&gt;终止长时间运行的任务&lt;/h2&gt;&lt;p&gt;&lt;em&gt;那长期工作呢？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果您要对大型视频进行转码，是否有其他方法可以延迟停止 Pod？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假设您有一个包含三个副本的 Deployment。&lt;/p&gt;
&lt;p&gt;每个副本都分配了一个视频进行转码，该任务可能需要几个小时才能完成。&lt;/p&gt;
&lt;p&gt;当您触发滚动更新时，Pod 会在 30 秒内完成任务，然后将其杀死。&lt;/p&gt;
&lt;p&gt;如何避免延迟关闭 Pod？&lt;/p&gt;
&lt;p&gt;您可以将其增加 &lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt; 几个小时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，此时 Pod 的 endpoint不可达。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/g_sd_50.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果公开指标以监视 Pod，则检测工具将无法访问 Pod。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;诸如 Prometheus 之类的工具依赖于 Endpoints 来在群集中探测 Pod&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是，一旦删除 Pod，endpoint 删除就会在群集中通告，甚至传播到 Prometheus！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;您应该考虑为每个新版本创建一个新的 Deployment，而不是增加宽限时间（grace period）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当您创建全新的 deployment 时，现有的 deployment 将保持不变。&lt;/p&gt;
&lt;p&gt;长时间运行的作业可以照常继续处理视频。&lt;/p&gt;
&lt;p&gt;完成后，您可以手动删除它们。&lt;/p&gt;
&lt;p&gt;如果希望自动删除它们，则可能需要设置一个弹性伸缩，当它们用尽任务时，可以将部署扩展到零个副本。&lt;/p&gt;
&lt;p&gt;这种 Pod 自动伸缩的一个示例是 Osiris，&lt;a href=&quot;https://github.com/deislabs/osiris&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;它是 Kubernetes 的通用，从零缩放的组件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;该技术有时被称为 &lt;strong&gt;Rainbow 部署&lt;/strong&gt;，并且在每次您必须使以前的 Pod 运行超过宽限期的时间时很有用。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;另一个很好的例子是 WebSockets。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果您正在向用户流式传输实时更新，则可能不希望在每次发布时都终止 WebSocket。&lt;/p&gt;
&lt;p&gt;如果您每天频繁发布，则可能会导致实时 Feed 多次中断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为每个版本创建一个新的 Deployment 是一个不太明显但却是更好的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现有用户可以继续流更新，而最新的 Deployment 服务于新用户。&lt;/p&gt;
&lt;p&gt;当用户断开与旧 Pod 的连接时，您可以逐渐减少副本并退出旧的 Deployment。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;您应该注意 Pod 从集群中删除，因为它们的IP地址可能仍用于路由流量。&lt;/p&gt;
&lt;p&gt;与其立即关闭 Pods，不如考虑在应用程序中等待更长的时间或设置一个 &lt;code&gt;preStop&lt;/code&gt; 钩子。&lt;/p&gt;
&lt;p&gt;仅在通告集群中的所有 endpoint 并将其从 kube-proxy，Ingress 控制器，CoreDNS 等中删除后，才应删除 Pod。&lt;/p&gt;
&lt;p&gt;如果您的 Pod 运行诸如视频转码或使用 WebSocket 进行实时更新之类的长期任务，则应考虑使用 Rainbow 部署。&lt;/p&gt;
&lt;p&gt;在 Rainbow 部署中，您为每个版本创建一个新的 Deployment，并在耗尽连接（或任务）后删除上一个版本。&lt;/p&gt;
&lt;p&gt;您可以在长时间运行的任务完成后立即手动删除较旧的 Deployment。&lt;/p&gt;
&lt;p&gt;或者，您可以自动将 Deployment 扩展到零副本，从而可以自动化该过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://learnk8s.io/graceful-shutdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://learnk8s.io/graceful-shutdown&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在本文中，您将了解如何在Pod启动或关闭时防止连接异常，并将学习如何以优雅的方式关闭长时间运行的任务。&lt;br&gt;&lt;img src=&quot;/images/k8s/g_shutdown_1.png&quot; alt=&quot;graceful shutdown&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="容器" scheme="http://team.jiunile.com/categories/kubernetes/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="容器" scheme="http://team.jiunile.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="部署" scheme="http://team.jiunile.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>图文带你了解 Go 中的分配</title>
    <link href="http://team.jiunile.com//blog/2020/12/go-allocations.html"/>
    <id>http://team.jiunile.com//blog/2020/12/go-allocations.html</id>
    <published>2020-12-21T14:00:00.000Z</published>
    <updated>2020-12-22T03:35:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;得益于了 Go 运行时高效的内置内存管理，我们通常能够在程序中优先考虑正确性和可维护性，而不需要过多考虑如何进行分配的细节。不过，有时我们可能会发现代码中的性能瓶颈，并希望进行更深入的研究。&lt;/p&gt;
&lt;p&gt;任何使用 &lt;code&gt;-benchmem&lt;/code&gt; 标志运行基准测试的人都会在输出中看到 &lt;code&gt;allocs/op&lt;/code&gt; 的统计。在这篇文章中，我们将看看什么算作一个 alloc，以及我们可以做什么来影响这个数字。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkFunc-8  67836464  16.0 ns/op  8 B/op  1 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;我们熟悉和喜爱的栈和堆&quot;&gt;&lt;a href=&quot;#我们熟悉和喜爱的栈和堆&quot; class=&quot;headerlink&quot; title=&quot;我们熟悉和喜爱的栈和堆&quot;&gt;&lt;/a&gt;我们熟悉和喜爱的栈和堆&lt;/h2&gt;&lt;p&gt;要讨论 Go 中的 &lt;code&gt;allocs/op&lt;/code&gt; 统计，我们将对 Go 程序中的两个内存区域感兴趣：栈和堆。&lt;/p&gt;
&lt;p&gt;在许多流行的编程环境中，栈通常指的是线程的调用栈。调用栈是一个先进先出（LIFO）栈数据结构，它存储了线程执行函数时跟踪的参数、局部变量和其他数据。每一次函数调用都向栈增加（推）一个新的帧，每一次返回函数都会从栈中删除（弹出）。&lt;/p&gt;
&lt;p&gt;我们必须能够在最近的栈帧被弹出时安全地释放它的内存。因此，我们不能在栈上存储任何以后需要在其他地方引用的东西。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/allocs_1.png&quot; alt=&quot;调用 println 后的调用栈视图&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于线程是由操作系统管理的，所以线程栈的可用内存量通常是固定的，例如在许多 Linux 环境中默认为 8MB。这意味着我们还需要注意栈上最终有多少数据，特别是在嵌套较深的递归函数的情况下。如果上图中的栈指针通过了栈保护，程序就会因栈溢出错误而崩溃。&lt;/p&gt;
&lt;p&gt;堆是内存中更复杂的区域，与同名的数据结构没有关系。我们可以按需使用堆来存储程序中需要的数据。在这里分配的内存不能在函数返回时简单地释放，需要仔细管理，以避免泄漏和碎片化。堆通常会比任何线程栈大许多倍，任何优化工作的大部分时间都将花费在研究堆的使用上。&lt;/p&gt;
&lt;h2 id=&quot;Go-栈和堆&quot;&gt;&lt;a href=&quot;#Go-栈和堆&quot; class=&quot;headerlink&quot; title=&quot;Go 栈和堆&quot;&gt;&lt;/a&gt;Go 栈和堆&lt;/h2&gt;&lt;p&gt;由操作系统管理的线程被 Go 运行时完全抽象出来，我们使用的是一个新的抽象：goroutines。goroutine 在概念上与线程非常相似，但它们存在于用户空间中。这意味着是运行时而不是操作系统来设置栈的行为规则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/allocs_2.png&quot; alt=&quot;线程被抽离出来&quot;&gt;&lt;/p&gt;
&lt;p&gt;goroutine 栈并不是由操作系统设置的硬性限制，而是以少量的内存（目前为 2KB）开始。在执行每个函数调用之前，在函数序言中会执行检查，以验证不会发生栈溢出。在下面的图中，&lt;code&gt;convert()&lt;/code&gt; 函数可以在当前栈大小的限制下执行（在 SP 不超额处理 &lt;code&gt;stackguard0&lt;/code&gt; 的情况下）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/allocs_3.png&quot; alt=&quot;goroutine 调用栈特写&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果不是这样，运行时将在执行 &lt;code&gt;convert()&lt;/code&gt; 之前将当前栈复制到一个更大的连续内存空间中。这意味着 Go 中的栈是动态大小的，只要有足够的内存可用，通常就可以保持增长。&lt;/p&gt;
&lt;p&gt;Go 堆在概念上同样类似于上面描述的线程模型。所有的 goroutines 共享一个公共堆，任何不能存储在栈上的东西都将在那里结束。当对函数进行基准测试时发生堆分配时，我们将看到&lt;code&gt;allocs/ops&lt;/code&gt; 属性增加 1。垃圾回收器的工作是稍后释放不再引用的堆变量。&lt;/p&gt;
&lt;p&gt;关于Go中如何处理内存管理的详细解释，请参阅 &lt;a href=&quot;https://medium.com/@ankur_anand/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从头开始的 Go 内存分配器的可视化指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;我们如何知道一个变量何时被分配给堆？&quot;&gt;&lt;a href=&quot;#我们如何知道一个变量何时被分配给堆？&quot; class=&quot;headerlink&quot; title=&quot;我们如何知道一个变量何时被分配给堆？&quot;&gt;&lt;/a&gt;我们如何知道一个变量何时被分配给堆？&lt;/h2&gt;&lt;p&gt;这个问题答案在官方 FAQ 中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go 编译器将为函数的栈帧中分配该函数的局部变量。但如果编译器不能证明该变量在函数返回后没有被引用，那么编译器必须在垃圾回收的堆上分配变量，以避免指针悬空错误。而且，如果局部变量非常大，那么将它存储在堆上而不是栈上可能更有意义。&lt;/p&gt;
&lt;p&gt;如果某个变量的地址已被占用，那么该变量将成为堆上分配的候选变量。然而，一个基本的转义分析可以识别出一些情况，即这样的变量不会活过函数的返回，可以驻留在栈中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于编译器的实现会随着时间的推移而改变，&lt;strong&gt;所以仅仅通过阅读 Go 代码，是无法知道哪些变量会被分配到堆中的&lt;/strong&gt;。不过，可以在编译器的输出中查看上面提到的 escape 分析结果。这可以通过传递给 &lt;code&gt;go build&lt;/code&gt; 的 &lt;code&gt;gcflags&lt;/code&gt; 参数来实现。完整的选项列表可以通过 &lt;code&gt;go tool compile -help&lt;/code&gt; 来查看。&lt;/p&gt;
&lt;p&gt;对于转义分析结果，可以使用 &lt;code&gt;-m&lt;/code&gt; 选项（&lt;code&gt;打印优化决策&lt;/code&gt;）。让我们用一个简单的程序来测试一下，为函数 &lt;code&gt;main1&lt;/code&gt; 和 &lt;code&gt;stackIt&lt;/code&gt; 创建两个栈帧。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _ = stackIt()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:noinline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stackIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   y := &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; y * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为如果编译器删除了函数调用，我们就无法讨论栈行为，所以在编译代码时使用 &lt;code&gt;noinline&lt;/code&gt; &lt;a href=&quot;https://dave.cheney.net/2018/01/08/gos-hidden-pragmas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pragma&lt;/a&gt; 来防止内联。让我们看一下编译器对其优化决策说些什么。&lt;code&gt;-l&lt;/code&gt; 选项用于省略内联决策。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build -gcflags &lt;span class=&quot;string&quot;&gt;&#39;-m -l&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# github.com/Jimeux/go-samples/allocations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这里，我们看到，没有做出任何关于逃跑分析的决定。换句话说，变量 &lt;code&gt;y&lt;/code&gt; 保留在栈中，并没有触发任何堆分配。我们可以用基准测试来验证这一点。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -bench . -benchmem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt-8  680439016  1.52 ns/op  0 B/op  0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如预期的那样，&lt;code&gt;allocs/op&lt;/code&gt; 统计值为 &lt;code&gt;0&lt;/code&gt;。从这个结果中我们可以得到的一个重要观察是，&lt;strong&gt;复制变量可以让我们将它们保留在栈中&lt;/strong&gt;，避免分配到堆中。让我们通过修改程序来验证这一点，以避免使用指针进行复制。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _ = stackIt2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:noinline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stackIt2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   y := &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res := y * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们看以下编译器的输出。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go build -gcflags &lt;span class=&quot;string&quot;&gt;&#39;-m -l&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# github.com/Jimeux/go-samples/allocations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./main.go:10:2: moved to heap: res&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译器告诉我们，它把指针 &lt;code&gt;res&lt;/code&gt; 移到了堆上，从而触发了堆分配，这在下面的基准中得到了验证。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -bench . -benchmem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt2-8  70922517  16.0 ns/op  8 B/op  1 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么这是否意味着指针一定会创建分配？让我们再次修改程序，这次将指针传到栈下。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   y := &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _ = stackIt3(&amp;amp;y) &lt;span class=&quot;comment&quot;&gt;// pass y down the stack as a pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:noinline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stackIt3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y *&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   res := *y * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而运行基准测试显示没有任何东西被分配到堆中。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -bench . -benchmem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt3-8  705347884  1.62 ns/op  0 B/op  0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译器的输出明确地告诉我们这一点。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build -gcflags &lt;span class=&quot;string&quot;&gt;&#39;-m -l&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# github.com/Jimeux/go-samples/allocations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./main.go:10:14: y does not escape&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为什么会出现这种看似不一致的情况呢？&lt;code&gt;stackIt2&lt;/code&gt; 将 &lt;code&gt;y&lt;/code&gt; 的地址从栈上传递到 &lt;code&gt;main&lt;/code&gt;，在 &lt;code&gt;main&lt;/code&gt; 中，&lt;code&gt;y&lt;/code&gt; 将在 &lt;code&gt;stackIt2&lt;/code&gt; 的栈帧被释放后被引用。因此，编译器能够判断 &lt;code&gt;y&lt;/code&gt; 必须被移到堆上才能保持活力。如果它不这样做，当我们试图引用 &lt;code&gt;y&lt;/code&gt; 时，就会在 &lt;code&gt;main&lt;/code&gt; 中得到一个 &lt;code&gt;nil&lt;/code&gt; 指针。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;stackIt3&lt;/code&gt; 则是将 &lt;code&gt;y&lt;/code&gt; 传到栈下，而且 &lt;code&gt;y&lt;/code&gt; 在 &lt;code&gt;main3&lt;/code&gt; 之外的任何地方都不会被引用。因此，编译器能够判断 &lt;code&gt;y&lt;/code&gt; 可以单独存在于栈中，而不需要分配到堆中。在任何情况下，我们都无法通过引用 &lt;code&gt;y&lt;/code&gt; 来产生一个 &lt;code&gt;nil&lt;/code&gt; 指针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从这里我们可以推断出一个通用规则，即在栈上共享指针会导致分配，而共享栈下的指针则不会&lt;/strong&gt;。但是，这并不能保证，所以您仍然需要使用 &lt;code&gt;gcflags&lt;/code&gt; 或基准来验证。我们可以肯定的是，任何试图减少 &lt;code&gt;allocs/op&lt;/code&gt; 的尝试都将涉及到寻找任性的指针。&lt;/p&gt;
&lt;h2 id=&quot;我们为什么要关心堆分配？&quot;&gt;&lt;a href=&quot;#我们为什么要关心堆分配？&quot; class=&quot;headerlink&quot; title=&quot;我们为什么要关心堆分配？&quot;&gt;&lt;/a&gt;我们为什么要关心堆分配？&lt;/h2&gt;&lt;p&gt;我们已经了解了一些关于 &lt;code&gt;allocs/op&lt;/code&gt; 中的 &lt;code&gt;alloc&lt;/code&gt; 的含义，以及如何验证是否触发了对堆的分配，但是为什么我们要关心这个统计是否是非零呢？我们已经做的基准测试可以回答这个问题。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt-8   680439016  1.52 ns/op  0 B/op  0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt2-8  70922517   16.0 ns/op  8 B/op  1 allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkStackIt3-8  705347884  1.62 ns/op  0 B/op  0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;尽管所涉及的变量对内存的需求几乎相等，但相对而言，&lt;code&gt;BenchmarkStackIt2&lt;/code&gt; 对 CPU 的开销还是很明显的。我们可以通过生成 &lt;code&gt;stackIt&lt;/code&gt; 和 &lt;code&gt;stackIt2&lt;/code&gt; 生成的 CPU 曲线的火焰图来了解更多的情况。&lt;br&gt;&lt;img src=&quot;/images/go/allocs_4.png&quot; alt=&quot;stackIt CPU profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/allocs_5.png&quot; alt=&quot;stackIt2 CPU profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stackIt&lt;/code&gt; 有一个不起眼的配置文件，它可以预见地从调用栈运行到 &lt;code&gt;stackIt&lt;/code&gt; 函数本身。另一方面，&lt;code&gt;stackIt2&lt;/code&gt; 大量使用了大量的运行时函数，这些函数消耗了许多额外的 CPU 周期。这说明了分配到堆所涉及的复杂性，并初步了解了每个操作额外的 10 纳秒左右的去向。&lt;/p&gt;
&lt;h2 id=&quot;那在现实世界中呢？&quot;&gt;&lt;a href=&quot;#那在现实世界中呢？&quot; class=&quot;headerlink&quot; title=&quot;那在现实世界中呢？&quot;&gt;&lt;/a&gt;那在现实世界中呢？&lt;/h2&gt;&lt;p&gt;如果没有生产条件，性能的许多方面不会变得明显。你的单个功能可能在微基准测试中高效运行，但当它为成千上万的并发用户服务时，它会对你的应用程序有什么影响呢?&lt;/p&gt;
&lt;p&gt;我们不会在这篇文章中重新创建一个完整的应用程序，但我们将使用&lt;a href=&quot;https://golang.org/cmd/trace/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;跟踪工具&lt;/a&gt;来看看一些更详细的性能诊断。让我们首先定义一个（有点）大的结构体，它有 9 个字段。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BigStruct &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   A, B, C &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   D, E, F &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   G, H, I &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在我们来定义两个函数：&lt;code&gt;CreateCopy&lt;/code&gt;，它在栈帧之间复制 &lt;code&gt;BigStruct&lt;/code&gt; 实例；&lt;code&gt;CreatePointer&lt;/code&gt;，它在栈上共享 &lt;code&gt;BigStruct&lt;/code&gt; 指针，避免复制，但会产生堆分配。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:noinline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateCopy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BigStruct&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; BigStruct&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      A: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, B: &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;, C: &lt;span class=&quot;number&quot;&gt;789&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      D: &lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;, E: &lt;span class=&quot;string&quot;&gt;&quot;DEF&quot;&lt;/span&gt;, F: &lt;span class=&quot;string&quot;&gt;&quot;HIJ&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      G: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, H: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, I: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:noinline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreatePointer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;BigStruct&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;BigStruct&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      A: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, B: &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;, C: &lt;span class=&quot;number&quot;&gt;789&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      D: &lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;, E: &lt;span class=&quot;string&quot;&gt;&quot;DEF&quot;&lt;/span&gt;, F: &lt;span class=&quot;string&quot;&gt;&quot;HIJ&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      G: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, H: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, I: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以用目前使用的技术来验证上面的解释。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build -gcflags &lt;span class=&quot;string&quot;&gt;&#39;-m -l&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./main.go:67:9: &amp;amp;BigStruct literal escapes to heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -bench . -benchmem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkCopyIt-8     211907048  5.20 ns/op  0 B/op   0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkPointerIt-8  20393278   52.6 ns/op  80 B/op  1 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是我们将用于跟踪工具的测试。它们分别用各自的 &lt;code&gt;Create&lt;/code&gt; 函数创建 20,000,000 个 &lt;code&gt;BigStruct&lt;/code&gt; 实例。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; creations = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;_000_000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestCopyIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; creations; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _ = CreateCopy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestPointerIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; creations; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _ = CreatePointer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们将把 &lt;code&gt;CreateCopy&lt;/code&gt; 的跟踪输出保存到文件 &lt;code&gt;copy_trace.out&lt;/code&gt; 中。并在浏览器中用跟踪工具打开它。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -run TestCopyIt -trace=copy_trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok   github.com/Jimeux/go-samples/allocations 0.281s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go tool trace copy_trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parsing trace...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Splitting trace...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Opening browser. Trace viewer is listening on http://127.0.0.1:57530&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从菜单中选择 &lt;code&gt;View trace&lt;/code&gt;，我们看到了下面的画面，它几乎和我们的 &lt;code&gt;stackIt&lt;/code&gt; 功能的火焰图一样不引人注目。8 个潜在的逻辑核（Procs）中只有 2 个被使用，&lt;code&gt;goroutine G19&lt;/code&gt; 几乎花费整个时间运行我们的测试循环–这正是我们想要的。&lt;br&gt;&lt;img src=&quot;/images/go/allocs_6.png&quot; alt=&quot;Trace for 20,000,000 CreateCopy calls&quot;&gt;&lt;/p&gt;
&lt;p&gt;让我们为 &lt;code&gt;CreatePointer&lt;/code&gt; 代码生成跟踪数据。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -run TestPointerIt -trace=pointer_trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok   github.com/Jimeux/go-samples/allocations 2.224s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool trace pointer_trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parsing trace...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Splitting trace...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Opening browser. Trace viewer is listening on http://127.0.0.1:57784&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;您可能已经注意到，与 &lt;code&gt;CreateCopy&lt;/code&gt; 的 0.281 秒相比，测试花费了 2.224 秒，选择 &lt;code&gt;View trace&lt;/code&gt; 这次显示的内容更加丰富多彩，更加繁忙。所有的逻辑内核都被利用了，堆操作、线程和 goroutines 似乎比上次多了很多。&lt;br&gt;&lt;img src=&quot;/images/go/allocs_7.png&quot; alt=&quot;Trace for 20,000,000 CreatePointer calls&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们把跟踪的时间放大到一毫秒左右的跨度，我们会看到很多 goroutine 在执行与垃圾回收相关的操作。前面引用的 FAQ 中使用了“垃圾回收堆”这个词，因为垃圾回收器的工作就是清理堆上任何不再被引用的东西。&lt;br&gt;&lt;img src=&quot;/images/go/allocs_8.png&quot; alt=&quot;在CreatePointer跟踪中的GC活动特写&quot;&gt;&lt;/p&gt;
&lt;p&gt;尽管 Go 的垃圾回收器效率越来越高，但这个过程并不是免费的。我们可以从上面的跟踪输出中直观地验证，测试代码有时完全停止了。对于 &lt;code&gt;CreateCopy&lt;/code&gt; 来说，情况并非如此，因为我们所有的 &lt;code&gt;BigStruct&lt;/code&gt; 实例仍然在栈上，GC 几乎没有什么事情可做。&lt;/p&gt;
&lt;p&gt;比较两组跟踪数据中的 goroutine 分析可以更深入地了解这一点。&lt;code&gt;CreatePointer&lt;/code&gt;（底部）花费了超过 15% 的执行时间来清扫或暂停（GC）和调度 goroutines。&lt;br&gt;&lt;img src=&quot;/images/go/allocs_9.png&quot; alt=&quot;CreateCopy 的顶层 goroutine 分析&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/allocs_10.png&quot; alt=&quot;CreatePointer 的顶层 goroutine 分析&quot;&gt;&lt;/p&gt;
&lt;p&gt;看看跟踪数据中其他地方的一些统计数据，可以进一步说明堆分配的成本，生成的 goroutine数量有明显的差异，&lt;code&gt;CreatePointer&lt;/code&gt; 测试有近 400 个 STW（停止世界）事件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+------------+------+---------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|            | Copy | Pointer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------+------+---------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Goroutines |   41 |  406965 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Heap       |   10 |  197549 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Threads    |   15 |   12943 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| bgsweep    |    0 |  193094 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| STW        |    0 |     397 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------+------+---------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但请记住，尽管本节的标题是这样的，但 CreateCopy 测试的条件在一个典型的程序中是非常不现实的。GC 使用一致数量的 CPU 是很正常的，指针是任何真实程序的一个特征。然而，这和前面的火焰图一起给了我们一些启示，为什么我们可能要跟踪 allocs/op 统计，并尽可能避免不必要的堆分配。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;希望这篇文章能让大家了解到 Go 程序中栈和堆之间的区别、&lt;code&gt;allocs/op&lt;/code&gt; 统计的意义，以及我们可以调研内存使用情况的一些方法。&lt;/p&gt;
&lt;p&gt;代码的正确性和可维护性通常比减少指针使用和规避 GC 活动的技巧更重要。到目前为止，每个人都知道关于过早优化的那条线，在 Go 中编写代码也不例外。&lt;/p&gt;
&lt;p&gt;然而，如果我们确实有严格的性能要求或在其他方面确定了程序中的瓶颈，这里介绍的概念和工具有望成为进行必要优化的有用起点。&lt;/p&gt;
&lt;p&gt;如果你想玩玩这篇文章中的简单代码示例，请查看 &lt;a href=&quot;https://github.com/Jimeux/go-samples/tree/master/allocations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上的源代码和 README。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;得益于了 Go 运行时高效的内置内存管理，我们通常能够在程序中优先考虑正确性和可维护性，而不需要过多考虑如何进行分配的细节。不过，有时我们可能会发现代码中的性能瓶颈，并希望进行更深入的研究。&lt;/p&gt;
&lt;p&gt;任何使用 &lt;code&gt;-benchmem&lt;/code&gt; 标志运行基准测试的人都会在输出中看到 &lt;code&gt;allocs/op&lt;/code&gt; 的统计。在这篇文章中，我们将看看什么算作一个 alloc，以及我们可以做什么来影响这个数字。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkFunc-8  67836464  16.0 ns/op  8 B/op  1 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://team.jiunile.com/categories/Golang/"/>
    
      <category term="Allocations" scheme="http://team.jiunile.com/categories/Golang/Allocations/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="allocations" scheme="http://team.jiunile.com/tags/allocations/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Go 中编写无 Bug 的 Goroutines？</title>
    <link href="http://team.jiunile.com//blog/2020/12/go-nobug-gorotuine.html"/>
    <id>http://team.jiunile.com//blog/2020/12/go-nobug-gorotuine.html</id>
    <published>2020-12-15T14:00:00.000Z</published>
    <updated>2020-12-15T13:27:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;GO-并发&quot;&gt;&lt;a href=&quot;#GO-并发&quot; class=&quot;headerlink&quot; title=&quot;GO 并发&quot;&gt;&lt;/a&gt;GO 并发&lt;/h2&gt;&lt;p&gt;Go 以其并发性著称，深受人们喜爱。go 运行时管理轻量级线程，称为 goroutines。goroutine 的编写非常快速简单。&lt;/p&gt;
&lt;p&gt;你只需在你想异步执行的函数前输入 &lt;code&gt;go&lt;/code&gt;，程序就会在另一个线程中执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听起来很简单？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goroutines 是 Go 编写异步代码的方式。&lt;/p&gt;
&lt;p&gt;重要的是要了解 goroutine 和并发的工作原理。Go 提供了管理 goroutine 的方法，使它们在复杂的程序中更容易管理和预测。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 goroutine 非常容易使用，所以它们很容易被滥用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-在异步例程中不要对执行顺序进行假设。&quot;&gt;&lt;a href=&quot;#1-在异步例程中不要对执行顺序进行假设。&quot; class=&quot;headerlink&quot; title=&quot;1 在异步例程中不要对执行顺序进行假设。&quot;&gt;&lt;/a&gt;1 在异步例程中不要对执行顺序进行假设。&lt;/h2&gt;&lt;p&gt;在 Go 中调度并发任务时，要记住异步任务的不可预知性。&lt;/p&gt;
&lt;p&gt;可以将异步与同步计算融合在一起，但只要同步任务不对异步任务做任何假设即可。&lt;/p&gt;
&lt;p&gt;对于初学者来说，一个常见的错误是创建一个 goroutine，然后根据该 goroutine 的结果继续执行同步任务。例如，如果该 goroutine 要向其作用域外的变量写入，然后在同步任务中使用该变量。&lt;/p&gt;
&lt;h3 id=&quot;假设执行顺序&quot;&gt;&lt;a href=&quot;#假设执行顺序&quot; class=&quot;headerlink&quot; title=&quot;假设执行顺序&quot;&gt;&lt;/a&gt;假设执行顺序&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// start a goroutine to initialise array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		numbers = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something synchronous&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; numbers == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  numbers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// will sometimes panic here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(numbers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;这种模式会导致不可预知的行为&lt;/strong&gt;。它引入的代码导致了我们无法控制的因素；这些因素与 go 运行时有关，更具体地说，就是它如何管理 goroutines。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写这样的代码意味着假定 goroutine 将在需要结果之前完成它的任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，在没有某种管理技术（我们将讨论）的情况下，交叉异步和同步代码的成功将取决于 CPU 的可用性。&lt;/p&gt;
&lt;p&gt;这意味着如果有 CPU 密集型的进程与 goroutines 同时运行，那么执行的时间将会有所不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其次&lt;/strong&gt;，不同的编译器将以不同的方式调度 goroutines。因此，安全的做法是不要认为 goroutine 会在同步任务期间完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何确保 goroutine 已经完成？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 channel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;在异步任务完成时使用 channel 来通知&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;channel 应该用于接收来自异步任务（如 goroutines）的值。&lt;/p&gt;
&lt;p&gt;如果你想阻止进一步的执行，直到最终从 channel 读取一个值来释放它，可以使用缓冲通道。&lt;/p&gt;
&lt;p&gt;如果你想要 1 进 1 出的行为，那么使用非缓冲通道。&lt;/p&gt;
&lt;p&gt;在本例中，使用 channel，我们可以确保主任务等待直到异步任务完成。当 goroutine 完成它的工作时，它将通过 &lt;code&gt;done channel&lt;/code&gt; 发送一个值，该值将在对 &lt;code&gt;numbers&lt;/code&gt; 数组进行操作之前被读取。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	done := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// start a goroutine to initialise array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		numbers = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		done &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something synchronous&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;-done &lt;span class=&quot;comment&quot;&gt;// read done from channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  numbers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// will not panic anymore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(numbers[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;尽管这是一个人为的示例，但你可以看到它在什么地方会很有用：当主线程与 goroutine 并行处理复杂工作时。这两个任务可以同时完成，而不可能出现 &lt;code&gt;panic&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;2-避免跨并发线程访问可变数据&quot;&gt;&lt;a href=&quot;#2-避免跨并发线程访问可变数据&quot; class=&quot;headerlink&quot; title=&quot;2 避免跨并发线程访问可变数据&quot;&gt;&lt;/a&gt;2 避免跨并发线程访问可变数据&lt;/h2&gt;&lt;p&gt;跨多个 goroutine 访问可变数据是将数据竞争引入程序的“好方法”。&lt;/p&gt;
&lt;p&gt;数据竞争是指两个或多个线程（或这里的goroutine）&lt;strong&gt;并发访问同一内存位置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这意味着跨线程访问相同的变量可能会产生不可预测的值。如果两个进程同时访问同一个变量，有两种可能性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个线程的值是相同的（&lt;strong&gt;不正确&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;对于较慢/较晚的线程，该值是不同的。（&lt;strong&gt;正确&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果较慢/较晚的线程读取了一个已被较快/较早的线程修改过的更新值，那么它将对更新后的值进行操作。&lt;strong&gt;这是预期的行为&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;否则，就像在数据竞争中看到的那样，两个线程将产生相同的值，因为它们都将对未更改的值进行操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1000 种可能的数据竞争&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，我们使用 &lt;code&gt;sync.WaitGroup&lt;/code&gt; 来保持程序运行，直到所有的 goroutine 完成，但我们并没有控制对每个 goroutine 内变量的访问。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// data race&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Add(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			a += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// could theoretical be any number 0-1000 (most likely above 900)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码可以打印 0-1000 之间的任何数字，具体取决于发生的数据竞争数量。&lt;/p&gt;
&lt;p&gt;这段代码的工作原理是，两个线程将对同一个变量各执行 2 次操作，总共有 2 次读 + 2 次写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在两个线程都会产生相同的值的情况下，在对变量进行任何写入之前，两个（2）读都必须发生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用互斥锁在 goroutines 之间共享内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了防止 goroutines 中的数据竞争，我们需要同步对共享内存的访问。我们可以使用互斥来实现这一点。互斥锁将确保我们不会在同一时间读取或写入相同的值。&lt;/p&gt;
&lt;p&gt;它本质上是&lt;strong&gt;暂时锁定对一个变量的访问&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mu sync.Mutex &lt;span class=&quot;comment&quot;&gt;// guards access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Add(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			a += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(a) &lt;span class=&quot;comment&quot;&gt;// will always be 1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就这么简单。&lt;/p&gt;
&lt;p&gt;这段代码总是打印 1000，因为对同一个变量的每个后续操作都会对更新后的值进行操作。&lt;/p&gt;
&lt;h2 id=&quot;3-不要写应该同步的异步任务&quot;&gt;&lt;a href=&quot;#3-不要写应该同步的异步任务&quot; class=&quot;headerlink&quot; title=&quot;3 不要写应该同步的异步任务&quot;&gt;&lt;/a&gt;3 不要写应该同步的异步任务&lt;/h2&gt;&lt;p&gt;Goroutines 通常被认为是后台任务。它们被视为可以与主程序同时运行的小任务，通过 goroutine 将其委托给另一个线程。&lt;/p&gt;
&lt;p&gt;当学习 Go 时，你往往会想到使用 goroutine 来尽量减少阻塞操作，或者让我们的程序性能更强。&lt;/p&gt;
&lt;p&gt;但由于对 goroutine 的看法如此简单，很容易养成 “以防万一” 的习惯，把所有东西都做成 goroutine。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果某些任务本质上是同步的，但你却异步地使用了它们，这就会造成问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并非所有的任务都应该是一个 goroutine&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有些任务需要秩序。在许多进程中，下一个任务取决于前一个任务的结果。这些顺序性的任务会让你的程序出错，势必需要让这些区域更加同步。&lt;/p&gt;
&lt;p&gt;所以有些情况下，你还不如直接忘掉goroutine，一开始就保持同步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用无限循环浪费 CPU&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个精心设计的示例中，我们有一个程序，它将所有内容委托给 goroutines，并使用 for 循环来保持程序运行。&lt;/p&gt;
&lt;p&gt;这是一个如何不控制 Go 程序流程的例子。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; doSomething()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; doSomethingElse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// execute everything as a goroutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// this keeps the program running&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最好保持简单。你可以通过把你的程序看作是主线程加上附加线程的方式来防止这种类型的不良做法。你可以让主线程以同步的方式运行，但如果需要，可以通过 goroutines 将任务委托给另一个线程。&lt;/p&gt;
&lt;p&gt;有更好的方法可以控制程序的流程，&lt;strong&gt;比如通过 &lt;a href=&quot;https://gobyexample.com/waitgroups&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WaitGroups&lt;/a&gt; 或 &lt;a href=&quot;https://gobyexample.com/channels&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Channels&lt;/a&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 WaitGroup 的控制流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与其浪费宝贵的 CPU 资源，不如使用 WaitGroup 向运行时表明，在程序退出之前，你正在等待 n 个任务的完成。这样就不会让 CPU 一直在无限循环中旋转。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// do something here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; doSomething(&amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; doSomethingElseSync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// program will wait until doSomething &amp;amp; doSomethingElseSync is complete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先，您需要将等待完成的任务数量作为参数提供给 &lt;code&gt;wg.Add()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;放置 &lt;code&gt;wg.Wait()&lt;/code&gt; 很重要。这是程序中执行将暂停的地方，等待所有任务完成。&lt;/p&gt;
&lt;p&gt;一旦任务完成，您可以使用 &lt;code&gt;wg.Done()&lt;/code&gt; 让程序知道。&lt;/p&gt;
&lt;h2 id=&quot;4-不要让-goroutines-挂起&quot;&gt;&lt;a href=&quot;#4-不要让-goroutines-挂起&quot; class=&quot;headerlink&quot; title=&quot;4 不要让 goroutines 挂起&quot;&gt;&lt;/a&gt;4 不要让 goroutines 挂起&lt;/h2&gt;&lt;p&gt;确保处理不再使用的 goroutines。持续运行的 Goroutines 将会阻塞并浪费宝贵的 CPU 资源。&lt;/p&gt;
&lt;p&gt;如果 goroutine 试图将值发送到没有任何读取并等待接收值的 channel，就会发生这种情况。这就意味着这条 channel 将永远卡在那里。&lt;/p&gt;
&lt;p&gt;9 个挂起的 goroutine&lt;/p&gt;
&lt;p&gt;在这个例子中，channel 只被读取一次。这意味着 9 个 goroutines 在等待通过 channel 发送一个值。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendToChan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i := i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			channel &amp;lt;- i &lt;span class=&quot;comment&quot;&gt;// 9 hanging goroutines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;-channel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了避免这种情况，请处理不再需要的 goroutines 来释放 CPU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使通道缓冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用缓冲通道意味着您正在为通道提供空间来存储附加值。&lt;/p&gt;
&lt;p&gt;对于当前的示例，这意味着所有的 goroutines 都将成功执行，不会阻塞。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendToChan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i := i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			channel &amp;lt;- i &lt;span class=&quot;comment&quot;&gt;// all goroutines executed successfully&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;-channel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要在不知道什么时候停止的情况下开始一个 goroutine。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在不知道何时停止的情况下启动一个 goroutine 会导致以下行为，即 goroutine 被阻塞或浪费 CPU 资源。&lt;/p&gt;
&lt;p&gt;您应该总是知道什么时候 goroutine 将停止，什么时候不再需要它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;您可以通过 &lt;code&gt;select&lt;/code&gt; 语句和 &lt;code&gt;channel&lt;/code&gt; 来实现这一点&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;done := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-done:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这本质上是一个带有退出条件的异步 for-loop。&lt;/p&gt;
&lt;p&gt;重要的逻辑将在默认条件下编写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当值被发送到 &lt;code&gt;done&lt;/code&gt; 通道时，循环将停止，正如 &lt;code&gt;done &amp;lt;- true&lt;/code&gt; 所示。这意味着 channel 读取 &lt;code&gt;&amp;lt;-done&lt;/code&gt; 成功并返回。&lt;/p&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://itnext.io/how-to-write-bug-free-goroutines-in-go-golang-59042b1b63fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itnext.io/how-to-write-bug-free-goroutines-in-go-golang-59042b1b63fb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GO-并发&quot;&gt;&lt;a href=&quot;#GO-并发&quot; class=&quot;headerlink&quot; title=&quot;GO 并发&quot;&gt;&lt;/a&gt;GO 并发&lt;/h2&gt;&lt;p&gt;Go 以其并发性著称，深受人们喜爱。go 运行时管理轻量级线程，称为 goroutines。goroutine 的编写非常快速简单。&lt;/p&gt;
&lt;p&gt;你只需在你想异步执行的函数前输入 &lt;code&gt;go&lt;/code&gt;，程序就会在另一个线程中执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;听起来很简单？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goroutines 是 Go 编写异步代码的方式。&lt;/p&gt;
&lt;p&gt;重要的是要了解 goroutine 和并发的工作原理。Go 提供了管理 goroutine 的方法，使它们在复杂的程序中更容易管理和预测。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 goroutine 非常容易使用，所以它们很容易被滥用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="goroutines" scheme="http://team.jiunile.com/categories/golang/goroutines/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="goroutines" scheme="http://team.jiunile.com/tags/goroutines/"/>
    
  </entry>
  
  <entry>
    <title>利用 eBPF 支撑大规模 K8s Service</title>
    <link href="http://team.jiunile.com//blog/2020/12/k8s-cilium-service-2019.html"/>
    <id>http://team.jiunile.com//blog/2020/12/k8s-cilium-service-2019.html</id>
    <published>2020-12-02T14:00:00.000Z</published>
    <updated>2020-12-03T02:31:35.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文翻译自 2019 年 Daniel Borkmann 和 Martynas Pumputis 在 Linux Plumbers Conference 的一篇分享: &lt;a href=&quot;https://linuxplumbersconf.org/event/4/contributions/458/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making the Kubernetes Service Abstraction Scale using eBPF&lt;/a&gt; 。 翻译时对大家耳熟能详或已显陈旧的内容（K8s 介绍、Cilium 1.6 之前的版本对 Service 实现等）略有删减，如有需要请查阅原 PDF。&lt;/p&gt;
&lt;p&gt;实际上，一年之后 Daniel 和 Martynas 又在 LPC 做了一次分享，内容是本文的延续：&lt;a href=&quot;http://team.jiunile.com/blog/2020/11/k8s-cilium-service.html&quot;&gt;Cilium：基于 BPF/XDP 实现 K8s Service 负载均衡&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;K8s 当前重度依赖 iptables 来实现 Service 的抽象&lt;/strong&gt;。对于每个 Service 及其 backend pods，在 K8s 里会生成很多 iptables 规则。&lt;strong&gt;例如 5K 个 Service 时，iptables 规则将达到 25K 条&lt;/strong&gt;，导致的后果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;较高、并且不可预测的转发延迟&lt;/strong&gt;（packet latency），因为每个包都要遍历这些规则 ，直到匹配到某条规则；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新规则的操作非常慢&lt;/strong&gt;：无法单独更新某条 iptables 规则，只能将全部规则读出来 ，更新整个集合，再将新的规则集合下发到宿主机。在动态环境中这一问题尤其明显，因为每 小时可能都有几千次的 backend pods 创建和销毁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠性问题&lt;/strong&gt;：iptables 依赖 Netfilter 和系统的连接跟踪模块（conntrack），在 大流量场景下会出现一些竞争问题（race conditions）；&lt;strong&gt;UDP 场景尤其明显&lt;/strong&gt;，会导 致丢包、应用的负载升高等问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将介绍如何基于 Cilium/BPF 来解决这些问题，实现 K8s Service 的大规模扩展。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-K8s-Service-类型及默认基于-kube-proxy-的实现&quot;&gt;&lt;a href=&quot;#1-K8s-Service-类型及默认基于-kube-proxy-的实现&quot; class=&quot;headerlink&quot; title=&quot;1 K8s Service 类型及默认基于 kube-proxy 的实现&quot;&gt;&lt;/a&gt;1 K8s Service 类型及默认基于 kube-proxy 的实现&lt;/h2&gt;&lt;p&gt;K8s 提供了 Service 抽象，可以将多个 backend pods 组织为一个&lt;strong&gt;逻辑单元&lt;/strong&gt;（logical unit）。K8s 会为这个逻辑单元分配 &lt;strong&gt;虚拟 IP 地址&lt;/strong&gt;（VIP），客户端通过该 VIP 就 能访问到这些 pods 提供的服务。&lt;/p&gt;
&lt;p&gt;下图是一个具体的例子，&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_k8s-service.png&quot; alt=&quot;k8s-service&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右边的 yaml 定义了一个名为 &lt;code&gt;nginx&lt;/code&gt; 的 Service，它在 TCP 80 端口提供服务；&lt;ul&gt;
&lt;li&gt;创建：&lt;code&gt;kubectl -f nginx-svc.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;K8s 会给每个 Service 分配一个虚拟 IP，这里给 &lt;code&gt;nginx&lt;/code&gt; 分的是 &lt;code&gt;3.3.3.3&lt;/code&gt;；&lt;ul&gt;
&lt;li&gt;查看：&lt;code&gt;kubectl get service nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;左边是 &lt;code&gt;nginx&lt;/code&gt; Service 的两个 backend pods（在 K8s 对应两个 endpoint），这里 位于同一台节点，每个 Pod 有独立的 IP 地址；&lt;ul&gt;
&lt;li&gt;查看：&lt;code&gt;kubectl get endpoints nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面看到的是所谓的 &lt;code&gt;ClusterIP&lt;/code&gt; 类型的 Service。实际上，&lt;strong&gt;在 K8s 里有几种不同类型 的 Service&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClusterIP&lt;/li&gt;
&lt;li&gt;NodePort&lt;/li&gt;
&lt;li&gt;LoadBalancer&lt;/li&gt;
&lt;li&gt;ExternalName&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将主要关注前两种类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;K8s 里实现 Service 的组件是 kube-proxy&lt;/strong&gt;，实现的主要功能就是&lt;strong&gt;将访问 VIP 的请 求转发（及负载均衡）到相应的后端 pods&lt;/strong&gt;。前面提到的那些 iptables 规则就是它创建 和管理的。&lt;/p&gt;
&lt;p&gt;另外，kube-proxy 是 K8s 的可选组件，如果不需要 Service 功能，可以不启用它。&lt;/p&gt;
&lt;h3 id=&quot;ClusterIP-Service&quot;&gt;&lt;a href=&quot;#ClusterIP-Service&quot; class=&quot;headerlink&quot; title=&quot;ClusterIP Service&quot;&gt;&lt;/a&gt;ClusterIP Service&lt;/h3&gt;&lt;p&gt;这是 &lt;strong&gt;K8s 的默认 Service 类型，使得宿主机或 pod 可以通过 VIP 访问一个 Service&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual IP to any endpoint (pod)&lt;/li&gt;
&lt;li&gt;Only in-cluster access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kube-proxy 是通过如下的 iptables 规则来实现这个功能的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-t nat -A &amp;#123;PREROUTING, OUTPUT&amp;#125; -m conntrack --ctstate NEW -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 宿主机访问 nginx Service 的流量，同时满足 4 个条件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1. src_ip 不是 Pod 网段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2. dst_ip=3.3.3.3/32 (ClusterIP)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3. proto=TCP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4. dport=80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果匹配成功，直接跳转到 KUBE-MARK-MASQ；否则，继续匹配下面一条（iptables 是链式规则，高优先级在前）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 跳转到 KUBE-MARK-MASQ 是为了保证这些包出宿主机时，src_ip 用的是宿主机 IP。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 1.1.0.0/16 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3/32 -p tcp -m tcp --dport 80 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Pod 访问 nginx Service 的流量：同时满足 4 个条件：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1. 没有匹配到前一条的，（说明 src_ip 是 Pod 网段）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2. dst_ip=3.3.3.3/32 (ClusterIP)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 3. proto=TCP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 4. dport=80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3/32 -p tcp -m tcp --dport 80 -j KUBE-SVC-NGINX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 以 50% 的概率跳转到 KUBE-SEP-NGINX1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-NGINX -m statistic --mode random --probability 0.50 -j KUBE-SEP-NGINX1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果没有命中上面一条，则以 100% 的概率跳转到 KUBE-SEP-NGINX2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-NGINX -j KUBE-SEP-NGINX2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果 src_ip=1.1.1.1/32，说明是 Service-&amp;gt;client 流量，则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 需要做 SNAT（MASQ 是动态版的 SNAT），替换 src_ip -&amp;gt; svc_ip，这样客户端收到包时，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 看到就是从 svc_ip 回的包，跟它期望的是一致的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-NGINX1 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 1.1.1.1/32 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果没有命令上面一条，说明 src_ip != 1.1.1.1/32，则说明是 client-&amp;gt; Service 流量，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 需要做 DNAT，将 svc_ip -&amp;gt; pod1_ip，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-NGINX1 -p tcp -m tcp -j DNAT --to-destination 1.1.1.1:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 同理，见上面两条的注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-NGINX2 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 1.1.1.2/32 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-NGINX2 -p tcp -m tcp -j DNAT --to-destination 1.1.1.2:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Service 既要能被宿主机访问，又要能被 pod 访问（&lt;strong&gt;二者位于不同的 netns&lt;/strong&gt;）， 因此需要在 &lt;code&gt;PREROUTING&lt;/code&gt; 和 &lt;code&gt;OUTPUT&lt;/code&gt; 两个 hook 点拦截请求，然后跳转到自定义的 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; chain；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KUBE-SERVICES&lt;/code&gt; chain &lt;strong&gt;执行真正的 Service 匹配&lt;/strong&gt;，依据协议类型、目的 IP 和目的端口号。当匹配到某个 Service 后，就会跳转到专门针对这个 Service 创 建的 chain，命名格式为 &lt;code&gt;KUBE-SVC-&amp;lt;Service&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KUBE-SVC-&amp;lt;Service&amp;gt;&lt;/code&gt; chain &lt;strong&gt;根据概率选择某个后端 pod&lt;/strong&gt; 然后将请求转发过去。这其实是一种&lt;strong&gt;穷人的负载均衡器&lt;/strong&gt; —— 基于 iptables。选中某个 pod 后，会跳转到这个 pod 相关的一条 iptables chain &lt;code&gt;KUBE-SEP-&amp;lt;POD&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KUBE-SEP-&amp;lt;POD&amp;gt;&lt;/code&gt; chain 会&lt;strong&gt;执行 DNAT&lt;/strong&gt;，将 VIP 换成 PodIP。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;译注：以上解释并不是非常详细和直观，因为这不是本文重点。想更深入地理解基于 iptables 的实现，可参考网上其他一些文章，例如下面这张图所出自的博客 &lt;a href=&quot;https://www.stackrox.com/post/2020/01/kubernetes-networking-demystified/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes Networking Demystified: A Brief Guide&lt;/a&gt;，&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_k8s-net-demystified-svc-lb.png&quot; alt=&quot;k8s-net-demystified-svc-lb&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-2-NodePort-Service&quot;&gt;&lt;a href=&quot;#1-2-NodePort-Service&quot; class=&quot;headerlink&quot; title=&quot;1.2 NodePort Service&quot;&gt;&lt;/a&gt;1.2 NodePort Service&lt;/h3&gt;&lt;p&gt;这种类型的 Service 也能被宿主机和 pod 访问，但与 ClusterIP 不同的是，&lt;strong&gt;它还能被集群外的服务访问&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;External node IP + port in NodePort range to any endpoint (pod), e.g. 10.0.0.1:31000&lt;/li&gt;
&lt;li&gt;Enables access from outside&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上，kube-apiserver 会&lt;strong&gt;从预留的端口范围内分配一个端口给 Service&lt;/strong&gt;，然后&lt;strong&gt;每个宿主机上的 kube-proxy 都会创建以下规则&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-t nat -A &amp;#123;PREROUTING, OUTPUT&amp;#125; -m conntrack --ctstate NEW -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 1.1.0.0/16 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3/32 -p tcp -m tcp --dport 80 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 3.3.3.3/32 -p tcp -m tcp --dport 80 -j KUBE-SVC-NGINX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果前面两条都没匹配到（说明不是 ClusterIP service 流量），并且 dst 是 LOCAL，跳转到 KUBE-NODEPORTS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m tcp --dport 31000 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m tcp --dport 31000 -j KUBE-SVC-NGINX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-NGINX -m statistic --mode random --probability 0.50 -j KUBE-SEP-NGINX1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-NGINX -j KUBE-SEP-NGINX2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前面几步和 ClusterIP Service 一样；如果没匹配到 ClusterIP 规则，则跳转到 &lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; chain。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; chain 里做 Service 匹配，但&lt;strong&gt;这次只匹配协议类型和目的端口号&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;匹配成功后，转到对应的 &lt;code&gt;KUBE-SVC-&amp;lt;Service&amp;gt;&lt;/code&gt; chain，后面的过程跟 ClusterIP 是一样的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-3-小结&quot;&gt;&lt;a href=&quot;#1-3-小结&quot; class=&quot;headerlink&quot; title=&quot;1.3 小结&quot;&gt;&lt;/a&gt;1.3 小结&lt;/h3&gt;&lt;p&gt;以上可以看到，每个 Service 会对应多条 iptables 规则。&lt;/p&gt;
&lt;p&gt;Service 数量不断增长时，&lt;strong&gt;iptables 规则的数量增长会更快&lt;/strong&gt;。而且，&lt;strong&gt;每个包都需要遍历这些规则&lt;/strong&gt;，直到最终匹配到一条相应的规则。如果不幸匹配到最后一条规则才命中， 那相比其他流量，这些包就会有&lt;strong&gt;很高的延迟&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有了这些背景知识，我们来看如何用 BPF/Cilium 来替换掉 kube-proxy，也可以说是 重新实现 kube-proxy 的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;2-用-Cilium-BPF-替换-kube-proxy&quot;&gt;&lt;a href=&quot;#2-用-Cilium-BPF-替换-kube-proxy&quot; class=&quot;headerlink&quot; title=&quot;2 用 Cilium/BPF 替换 kube-proxy&quot;&gt;&lt;/a&gt;2 用 Cilium/BPF 替换 kube-proxy&lt;/h2&gt;&lt;p&gt;我们从 Cilium 早起版本开始，已经逐步用 BPF 实现 Service 功能，但其中仍然有些 地方需要用到 iptables。在这一时期，每台 node 上会同时运行 cilium-agent 和 kube-proxy。&lt;/p&gt;
&lt;p&gt;到了 Cilium 1.6，我们已经能&lt;strong&gt;完全基于 BPF 实现，不再依赖 iptables，也不再需要 kube-proxy&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_cilium-cluster-ip.png&quot; alt=&quot;cim_cilium-cluster-ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里有一些实现上的考虑：相比于在 TC ingress 层做 Service 转换，我们优先利用 cgroupv2 hooks，&lt;strong&gt;在 socket BPF 层直接做这种转换&lt;/strong&gt;（需要高版本内核支持，如果不支 持则 fallback 回 TC ingress 方式）。&lt;/p&gt;
&lt;h3 id=&quot;2-1-ClusterIP-Service&quot;&gt;&lt;a href=&quot;#2-1-ClusterIP-Service&quot; class=&quot;headerlink&quot; title=&quot;2.1 ClusterIP Service&quot;&gt;&lt;/a&gt;2.1 ClusterIP Service&lt;/h3&gt;&lt;p&gt;对于 ClusterIP，我们在 BPF 里&lt;strong&gt;拦截 socket 的 &lt;code&gt;connect&lt;/code&gt; 和 &lt;code&gt;send&lt;/code&gt; 系统调用&lt;/strong&gt;； 这些 BPF 执行时，&lt;strong&gt;协议层还没开始执行&lt;/strong&gt;（这些系统调用 handlers）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attach on the cgroupv2 root mount &lt;code&gt;BPF_PROG_TYPE_CGROUP_SOCK_ADDR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BPF_CGROUP_INET{4,6}_CONNECT&lt;/code&gt; - TCP, connected UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;TCP-amp-connected-UDP&quot;&gt;&lt;a href=&quot;#TCP-amp-connected-UDP&quot; class=&quot;headerlink&quot; title=&quot;TCP &amp;amp; connected UDP&quot;&gt;&lt;/a&gt;TCP &amp;amp; connected UDP&lt;/h4&gt;&lt;p&gt;对于 TCP 和 connected UDP 场景，执行的是下面一段逻辑，&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sock4_xlate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; bpf_sock_addr *ctx)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; lb4_svc_key key = &amp;#123; .dip = ctx-&amp;gt;user_ip4, .dport = ctx-&amp;gt;user_port &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	svc = lb4_lookup_svc(&amp;amp;key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (svc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ctx-&amp;gt;user_ip4 = svc-&amp;gt;endpoint_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ctx-&amp;gt;user_port = svc-&amp;gt;endpoint_port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所做的事情：在 BPF map 中查找 Service，然后做地址转换。但这里的重点是（相比于 TC ingress BPF 实现）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不经过连接跟踪（conntrack）模块，也不需要修改包头&lt;/strong&gt;（实际上这时候还没有包 ），也不再 mangle 包。这也意味着，&lt;strong&gt;不需要重新计算包的 checksum&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于 TCP 和 connected UDP，&lt;strong&gt;负载均衡的开销是一次性的&lt;/strong&gt;，只需要在 socket 建立时做一次转换，后面都不需要了，&lt;strong&gt;不存在包级别的转换&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;这种方式是对宿主机 netns 上的 socket 和 pod netns 内的 socket 都是适用的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;某些-UDP-应用：存在的问题及解决方式&quot;&gt;&lt;a href=&quot;#某些-UDP-应用：存在的问题及解决方式&quot; class=&quot;headerlink&quot; title=&quot;某些 UDP 应用：存在的问题及解决方式&quot;&gt;&lt;/a&gt;某些 UDP 应用：存在的问题及解决方式&lt;/h4&gt;&lt;p&gt;但这种方式&lt;strong&gt;对某些 UDP 应用是不适用的&lt;/strong&gt;，因为这些 UDP 应用会检查包的源地址，以及 会调用 &lt;code&gt;recvmsg&lt;/code&gt; 系统调用。&lt;/p&gt;
&lt;p&gt;针对这个问题，我们引入了新的 BPF attach 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BPF_CGROUP_UDP4_RECVMSG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BPF_CGROUP_UDP6_RECVMSG&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还引入了用于 NAT 的 UDP map、rev-NAT map：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;              BPF rev NAT map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cookie   EndpointIP  Port =&amp;gt; ServiceID  IP       Port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42       1.1.1.1     80   =&amp;gt; 1          3.3.3.30 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;bpf_get_socket_cookie()&lt;/code&gt; 创建 socket cookie。&lt;/li&gt;
&lt;li&gt;除了 Service 访问方式，还会有一些&lt;strong&gt;客户端通过 PodIP 直连的方式建立 UDP 连接， cookie 就是为了防止对这些类型的流量做 rev-NAT&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;connect(2)&lt;/code&gt; 和 &lt;code&gt;sendmsg(2)&lt;/code&gt; 时更新 map。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;recvmsg(2)&lt;/code&gt; 时做 rev-NAT。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-NodePort-Service&quot;&gt;&lt;a href=&quot;#2-2-NodePort-Service&quot; class=&quot;headerlink&quot; title=&quot;2.2 NodePort Service&quot;&gt;&lt;/a&gt;2.2 NodePort Service&lt;/h3&gt;&lt;p&gt;NodePort 会更复杂一些，我们先从最简单的场景看起。&lt;/p&gt;
&lt;h4 id=&quot;2-2-1-后端-pod-在本节点&quot;&gt;&lt;a href=&quot;#2-2-1-后端-pod-在本节点&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 后端 pod 在本节点&quot;&gt;&lt;/a&gt;2.2.1 后端 pod 在本节点&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/cim_cilium-node-port.png&quot; alt=&quot;cilium-node-port&quot;&gt;&lt;/p&gt;
&lt;p&gt;后端 pod 在本节点时，只需要&lt;strong&gt;在宿主机的网络设备上 attach 一段 tc ingress bpf 程序&lt;/strong&gt;，这段程序做的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Service 查找&lt;/li&gt;
&lt;li&gt;DNAT&lt;/li&gt;
&lt;li&gt;redirect 到容器的 lxc0。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于应答包，lxc0 负责 rev-NAT，FIB 查找（因为我们需要设置 L2 地址，否则会被 drop）， 然后将其 redirect 回客户端。&lt;/p&gt;
&lt;h3 id=&quot;2-2-2-后端-pod-在其他节点&quot;&gt;&lt;a href=&quot;#2-2-2-后端-pod-在其他节点&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 后端 pod 在其他节点&quot;&gt;&lt;/a&gt;2.2.2 后端 pod 在其他节点&lt;/h3&gt;&lt;p&gt;后端 pod 在其他节点时，会复杂一些，因为要转发到其他节点。这种情况下，&lt;strong&gt;需要在 BPF 做 SNAT&lt;/strong&gt;，否则 pod 会直接回包给客户端，而由于不同 node 之间没有做连接跟踪（ conntrack）同步，因此直接回给客户端的包出 pod 后就会被 drop 掉。&lt;/p&gt;
&lt;p&gt;所以需要&lt;strong&gt;在当前节点做一次 SNAT&lt;/strong&gt;（&lt;code&gt;src_ip&lt;/code&gt; 从原来的 ClientIP 替换为 NodeIP），让回包也经过 当前节点，然后在这里再做 rev-SNAT（&lt;code&gt;dst_ip&lt;/code&gt; 从原来的 NodeIP 替换为 ClientIP）。&lt;/p&gt;
&lt;p&gt;具体来说，在 &lt;strong&gt;TC ingress&lt;/strong&gt; 插入一段 BPF 代码，然后依次执行：Service 查找、DNAT、 选择合适的 egress interface、SNAT、FIB lookup，最后发送给相应的 node，&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_cilium-node-port-2.png&quot; alt=&quot;cilium-node-port-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;反向路径是类似的，也是回到这个 node，TC ingress BPF 先执行 rev-SNAT，然后 rev-DNAT，FIB lookup，最后再发送回客户端，&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_cilium-node-port-3.png&quot; alt=&quot;cilium-node-port-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在跨宿主机转发是 SNAT 模式，但将来我们打算支持 &lt;strong&gt;DSR 模式&lt;/strong&gt;（译注，Cilium 1.8+ 已经支持了）。DSR 的好处是 &lt;strong&gt;backend pods 直接将包回给客户端&lt;/strong&gt;，回包不再经过当前 节点转发。&lt;/p&gt;
&lt;p&gt;另外，现在 Service 的处理是在 TC ingress 做的，&lt;strong&gt;这些逻辑其实也能够在 XDP 层实现&lt;/strong&gt;， 那将会是另一件激动人心的事情（译注，Cilium 1.8+ 已经支持了，性能大幅提升）。&lt;/p&gt;
&lt;h4 id=&quot;SNAT&quot;&gt;&lt;a href=&quot;#SNAT&quot; class=&quot;headerlink&quot; title=&quot;SNAT&quot;&gt;&lt;/a&gt;SNAT&lt;/h4&gt;&lt;p&gt;当前基于 BPF 的 SNAT 实现中，用一个 LRU BPF map 存放 Service 和 backend pods 的映 射信息。&lt;/p&gt;
&lt;p&gt;需要说明的是，&lt;strong&gt;SNAT 除了替换 &lt;code&gt;src_ip&lt;/code&gt;，还可能会替换 &lt;code&gt;src_port&lt;/code&gt;&lt;/strong&gt;：不同客户端的 &lt;code&gt;src_port&lt;/code&gt; 可能是相同的，如果只替换 &lt;code&gt;src_ip&lt;/code&gt;，不同客户端的应答包在反向转换时就会失 败。因此这种情况下需要做 &lt;code&gt;src_port&lt;/code&gt; 转换。现在的做法是，先进行哈希，如果哈希失败， 就调用 &lt;code&gt;prandom()&lt;/code&gt; 随机选择一个端口。&lt;/p&gt;
&lt;p&gt;此外，我们还需要跟踪宿主机上的流（local flows）信息，因此在 Cilium 里&lt;strong&gt;基于 BPF 实现了一个连接跟踪器&lt;/strong&gt;（connection tracker），它会监听宿主机的主物理网络设备（ main physical device）；我们也会对宿主机上的应用执行 NAT，pod 流量 NAT 之后使用的 是宿主机的 src_port，而宿主机上的应用使用的也是同一个 src_port 空间，它们可能会 有冲突，因此需要在这里处理。&lt;/p&gt;
&lt;p&gt;这就是 NodePort Service 类型的流量到达一台节点后，我们在 BPF 所做的事情。&lt;/p&gt;
&lt;h3 id=&quot;2-2-3-Client-pods-和-backend-pods-在同一节点&quot;&gt;&lt;a href=&quot;#2-2-3-Client-pods-和-backend-pods-在同一节点&quot; class=&quot;headerlink&quot; title=&quot;2.2.3 Client pods 和 backend pods 在同一节点&quot;&gt;&lt;/a&gt;2.2.3 Client pods 和 backend pods 在同一节点&lt;/h3&gt;&lt;p&gt;另外一种情况是：本机上的 pod 访问某个 NodePort Service，而且 backend pods 也在本机。&lt;/p&gt;
&lt;p&gt;这种情况下，流量会从 loopback 口转发到 backend pods，中间会经历路由和转发过程， 整个过程对应用是透明的 —— 我们可以在&lt;strong&gt;应用无感知的情况下，修改二者之间的通信方式&lt;/strong&gt;， 只要流量能被双方正确地接受就行。因此，我们在这里&lt;strong&gt;使用了 ClusterIP，并对其进行了一点扩展&lt;/strong&gt;，只要连接的 Service 是 loopback 地址或者其他 local 地址，它都能正 确地转发到本机 pods。&lt;/p&gt;
&lt;p&gt;另外，比较好的一点是，这种实现方式是基于 cgroups 的，因此独立于 netns。这意味着 我们不需要进入到每个 pod 的 netns 来做这种转换。&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_cilium-snat.png&quot; alt=&quot;cilium-snat&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-3-Service-规则的规模及请求延迟对比&quot;&gt;&lt;a href=&quot;#2-3-Service-规则的规模及请求延迟对比&quot; class=&quot;headerlink&quot; title=&quot;2.3 Service 规则的规模及请求延迟对比&quot;&gt;&lt;/a&gt;2.3 Service 规则的规模及请求延迟对比&lt;/h2&gt;&lt;p&gt;有了以上功能，基本上就可以避免 kube-proxy 那样 per-service 的 iptables 规则了， 每个节点上只留下了少数几条由 Kubernetes 自己创建的 iptables 规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables-save | grep ‘\-A KUBE’ | wc &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With kube-proxy: 25401&lt;/li&gt;
&lt;li&gt;With BPF: 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在将来，我们有希望连这几条规则也不需要，完全绕开 Netfilter 框架（译注：新版本已经做到了）。&lt;/p&gt;
&lt;p&gt;此外，我们做了一些初步的基准测试，如下图所示，&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_performance.png&quot; alt=&quot;performance&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，随着 Service 数量从 1 增加到 2000+，&lt;strong&gt;kube-proxy/iptables 的请求延 迟增加了将近一倍&lt;/strong&gt;，而 Cilium/eBPF 的延迟几乎没有任何增加。&lt;/p&gt;
&lt;h2 id=&quot;3-相关的-Cilium-BPF-优化&quot;&gt;&lt;a href=&quot;#3-相关的-Cilium-BPF-优化&quot; class=&quot;headerlink&quot; title=&quot;3 相关的 Cilium/BPF 优化&quot;&gt;&lt;/a&gt;3 相关的 Cilium/BPF 优化&lt;/h2&gt;&lt;p&gt;接下来介绍一些我们在实现 Service 过程中的优化工作，以及一些未来可能会做的事情。&lt;/p&gt;
&lt;h3 id=&quot;3-1-BPF-UDP-recvmsg-hook&quot;&gt;&lt;a href=&quot;#3-1-BPF-UDP-recvmsg-hook&quot; class=&quot;headerlink&quot; title=&quot;3.1 BPF UDP recvmsg() hook&quot;&gt;&lt;/a&gt;3.1 BPF UDP &lt;code&gt;recvmsg()&lt;/code&gt; hook&lt;/h3&gt;&lt;p&gt;实现 socket 层 UDP Service 转换时，我们发现如果只对 UDP &lt;code&gt;sendmsg&lt;/code&gt; 做 hook ，会导致 &lt;strong&gt;DNS 等应用无法正常工作&lt;/strong&gt;，会出现下面这种错误：&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_udp-recvmsg-before.png&quot; alt=&quot;udp-recvmsg-before&quot;&gt;&lt;/p&gt;
&lt;p&gt;深入分析发现，&lt;code&gt;nslookup&lt;/code&gt; 及其他一些工具会检查 &lt;strong&gt;&lt;code&gt;connect()&lt;/code&gt; 时用的 IP 地址和 &lt;code&gt;recvmsg()&lt;/code&gt; 读到的 reply message 里的 IP 地址&lt;/strong&gt;是否一致。如果不一致，就会 报上面的错误。&lt;/p&gt;
&lt;p&gt;原因清楚之后，解决就比较简单了：我们引入了一个做反向映射的 BPF hook，对 &lt;code&gt;recvmsg()&lt;/code&gt; 做额外处理，这个问题就解决了：&lt;br&gt;&lt;img src=&quot;/images/k8s/cim_udp-recvmsg-after.png&quot; alt=&quot;udp-recvmsg-after&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/torvalds/linux/commit/983695fa6765&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;983695fa6765&lt;/a&gt; bpf: fix unconnected udp hooks。&lt;br&gt;这个 patch 能在不重写包（without packet rewrite）的前提下，会对 BPF ClusterIP 做反向映射（reverse mapping）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-2-全局唯一-socket-cookie&quot;&gt;&lt;a href=&quot;#3-2-全局唯一-socket-cookie&quot; class=&quot;headerlink&quot; title=&quot;3.2 全局唯一 socket cookie&quot;&gt;&lt;/a&gt;3.2 全局唯一 socket cookie&lt;/h3&gt;&lt;p&gt;BPF ClusterIP Service 为 UDP 维护了一个 LRU 反向映射表（reverse mapping table）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Socket cookie 是这个映射表的 key 的一部分，但这个 cookie 只在每个 netns 内唯一&lt;/strong&gt;，其背后的实现比较简单：每次调用 BPF cookie helper，它都会增加计数器，然后将 cookie 存储到 socket。因此不同 netns 内分配出来的 cookie 值可能会一样，导致冲突。&lt;/p&gt;
&lt;p&gt;为解决这个问题，我们将 cookie generator 改成了全局的，见下面的 commit。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/torvalds/linux/commit/cd48bdda4fb8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cd48bdda4fb8&lt;/a&gt; sock: make cookie generation global instead of per netns。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-3-维护邻居表&quot;&gt;&lt;a href=&quot;#3-3-维护邻居表&quot; class=&quot;headerlink&quot; title=&quot;3.3 维护邻居表&quot;&gt;&lt;/a&gt;3.3 维护邻居表&lt;/h3&gt;&lt;p&gt;Cilium agent 从 K8s apiserver 收到 Service 事件时， 会将 backend entry 更新到 datapath 中的 Service backend 列表。&lt;/p&gt;
&lt;p&gt;前面已经看到，当 Service 是 NodePort 类型并且 backend 是 remote 时，需要转发到其 他节点（TC ingress BPF &lt;code&gt;redirect()&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;我们发现&lt;strong&gt;在某些直接路由（direct routing）的场景下，会出现 fib 查找失败的问题&lt;/strong&gt; （&lt;code&gt;fib_lookup()&lt;/code&gt;），原因是系统中没有对应 backend 的 neighbor entry（IP-&amp;gt;MAC 映射 信息），并且接下来&lt;strong&gt;不会主动做 ARP 探测&lt;/strong&gt;（ARP probe）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tunneling 模式下这个问题可以忽略，因为本来发送端的 BPF 程 序就会将 src/dst mac 清零，另一台节点对收到的包做处理时， VxLAN 设备上的另一段 BPF 程序会能够正确的转发这个包，因此这种方式更像是 L3 方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们目前 workaround 了这个问题，解决方式有点丑陋：Cilium 解析 backend，然后直接 将 neighbor entry 永久性地（&lt;code&gt;NUD_PERMANENT&lt;/code&gt;）插入邻居表中。&lt;/p&gt;
&lt;p&gt;目前这样做是没问题的，因为邻居的数量是固定或者可控的（fixed/controlled number of entries）。但后面我们想尝试的是让内核来做这些事情，因为它能以最好的方式处理这个 问题。实现方式就是引入一些新的 &lt;code&gt;NUD_*&lt;/code&gt; 类型，只需要传 L3 地址，然后内核自己将解 析 L2 地址，并负责这个地址的维护。这样 Cilium 就不需要再处理 L2 地址的事情了。 但到今天为止，我并没有看到这种方式的可能性。&lt;/p&gt;
&lt;p&gt;对于从集群外来的访问 NodePort Service 的请求，也存在类似的问题， 因为最后将响应流量回给客户端也需要邻居表。由于这些流量都是在 pre-routing，因此我 们现在的处理方式是：自己维护了一个小的 BPF LRU map（L3-&amp;gt;L2 mapping in BPF LRU map）；由于这是主处理逻辑（转发路径），流量可能很高，因此将这种映射放到 BPF LRU 是更合适的，不会导致邻居表的 overflow。&lt;/p&gt;
&lt;h3 id=&quot;3-4-LRU-BPF-callback-on-entry-eviction&quot;&gt;&lt;a href=&quot;#3-4-LRU-BPF-callback-on-entry-eviction&quot; class=&quot;headerlink&quot; title=&quot;3.4 LRU BPF callback on entry eviction&quot;&gt;&lt;/a&gt;3.4 LRU BPF callback on entry eviction&lt;/h3&gt;&lt;p&gt;我们想讨论的另一件事情是：在每个 LRU entry 被 eviction（驱逐）时，能有一个 callback 将会更好。为什么呢？&lt;/p&gt;
&lt;p&gt;Cilium 中现在有一个 BPF conntrack table，我们支持到了一些非常老的内核版本 ，例如 4.9。Cilium 在启动时会检查内核版本，优先选择使用 LRU，没有 LRU 再 fallback 到普通的哈希表（Hash Table）。&lt;strong&gt;对于哈希表，就需要一个不断 GC 的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们&lt;strong&gt;有意将 NAT map 与 CT map 独立开来&lt;/strong&gt;，这是因 为我们要求在 &lt;strong&gt;cilium-agent 升级或降级过程中，现有的连接/流量不能受影响&lt;/strong&gt;。 如果二者是耦合在一起的，假如 CT 相关的东西有很大改动，那升级时那要么 是将当前的连接状态全部删掉重新开始；要么就是服务中断，临时不可用，升级完成后再将 老状态迁移到新状态表，但我认为，要轻松、正确地实现这件事情非常困难。 这就是为什么将它们分开的原因。但实际上，GC 在回收 CT entry 的同时， 也会顺便回收 NAT entry。&lt;/p&gt;
&lt;p&gt;另外一个问题：&lt;strong&gt;每次从 userspace 操作 conntrack entry 都会破坏 LRU 的正常工作流程&lt;/strong&gt;（因为不恰当地更新了所有 entry 的时间戳）。我们通过下面的 commit 解决了这个问题，但要彻底避免这个问题，&lt;strong&gt;最好有一个 GC 以 callback 的方式在第一时 间清理掉这些被 evicted entry&lt;/strong&gt;，例如在 CT entry 被 evict 之后，顺便也清理掉 NAT 映射。这是我们正在做的事情（译注，Cilium 1.9+ 已经实现了）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/torvalds/linux/commit/50b045a8c0cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;50b045a8c0cc&lt;/a&gt; (“bpf, lru: avoid messing with eviction heuristics upon syscall lookup”) fixed map walking from user space&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-5-LRU-BPF-eviction-zones&quot;&gt;&lt;a href=&quot;#3-5-LRU-BPF-eviction-zones&quot; class=&quot;headerlink&quot; title=&quot;3.5 LRU BPF eviction zones&quot;&gt;&lt;/a&gt;3.5 LRU BPF eviction zones&lt;/h3&gt;&lt;p&gt;另一件跟 CT map 相关的比较有意思的探讨：&lt;strong&gt;未来是否能根据流量类型，将 LRU eviction 分割为不同的 zone&lt;/strong&gt;？例如，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;东西向流量分到 zone1：处理 ClusterIP service 流量，都是 pod-{pod,host} 流量， 比较大；&lt;/li&gt;
&lt;li&gt;南北向流量分到 zone2：处理 NodePort 和 ExternalName service 流量，相对比较小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的好处是：当&lt;strong&gt;对南北向流量 CT 进行操作时，占大头的东西向流量不会受影响&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;理想的情况是这种隔离是有保障的，例如：可以安全地假设，如果正在清理 zone1 内的 entries， 那预期不会对 zone2 内的 entry 有任何影响。不过，虽然分为了多个 zones，但在全局， 只有一个 map。&lt;/p&gt;
&lt;h3 id=&quot;3-6-BPF-原子操作&quot;&gt;&lt;a href=&quot;#3-6-BPF-原子操作&quot; class=&quot;headerlink&quot; title=&quot;3.6 BPF 原子操作&quot;&gt;&lt;/a&gt;3.6 BPF 原子操作&lt;/h3&gt;&lt;p&gt;另一个要讨论的内容是原子操作。&lt;/p&gt;
&lt;p&gt;使用场景之一是&lt;strong&gt;过期 NAT entry 的快速重复利用&lt;/strong&gt;（fast recycling）。 例如，结合前面的 GC 过程，如果一个连接断开时， 不是直接删除对应的 entry，而是更 新一个标记，表明这条 entry 过期了；接下来如果有新的连接刚好命中了这个 entry，就 直接将其标记为正常（非过期），重复利用（循环）这个 entry，而不是像之前一样从新创 建。&lt;/p&gt;
&lt;p&gt;现在基于 BPF spinlock 可以实现做这个功能，但并不是最优的方式，因为如果有合适的原 子操作，我们就能节省两次辅助函数调用，然后将 spinlock 移到 map 里。将 spinlock 放到 map 结构体的额外好处是，每个结构体都有自己独立的结构（互相解耦），因此更能 够避免升级/降低导致的问题。&lt;/p&gt;
&lt;p&gt;当前内核只有 &lt;code&gt;BPF_XADD&lt;/code&gt; 指令，我认为它主要适用于计数（counting），因为它并不像原 子递增（inc）函数一样返回一个值。此外内核中还有的就是针对 maps 的 spinlock。&lt;/p&gt;
&lt;p&gt;我觉得如果有 &lt;code&gt;READ_ONCE/WRITE_ONCE&lt;/code&gt; 语义将会带来很大便利，现在的 BPF 代码中其实已 经有了一些这样功能的、自己实现的代码。此外，我们还需要 &lt;code&gt;BPF_XCHG&lt;/code&gt;, &lt;code&gt;BPF_CMPXCHG&lt;/code&gt; 指令，这也将带来很大帮助。&lt;/p&gt;
&lt;h3 id=&quot;3-7-BPF-getpeername-hook&quot;&gt;&lt;a href=&quot;#3-7-BPF-getpeername-hook&quot; class=&quot;headerlink&quot; title=&quot;3.7 BPF getpeername hook&quot;&gt;&lt;/a&gt;3.7 BPF &lt;code&gt;getpeername&lt;/code&gt; hook&lt;/h3&gt;&lt;p&gt;还有一个 hook —— &lt;code&gt;getpeername()&lt;/code&gt; —— 没有讨论到，它&lt;strong&gt;用在 TCP 和 connected UDP 场景&lt;/strong&gt;，对应用是透明的。&lt;/p&gt;
&lt;p&gt;这里的想法是：永远返回 Service IP 而不是 backend pod IP，这样对应用来说，它看到 就是和 Service IP 建立的连接，而不是和某个具体的 backend pod。&lt;/p&gt;
&lt;p&gt;现在返回的是 backend IP 而不是 service IP。从应用的角度看，它连接到的对端并不是 它期望的。&lt;/p&gt;
&lt;h3 id=&quot;3-8-绕过内核最大-BPF-指令数的限制&quot;&gt;&lt;a href=&quot;#3-8-绕过内核最大-BPF-指令数的限制&quot; class=&quot;headerlink&quot; title=&quot;3.8 绕过内核最大 BPF 指令数的限制&quot;&gt;&lt;/a&gt;3.8 绕过内核最大 BPF 指令数的限制&lt;/h3&gt;&lt;p&gt;最后再讨论几个非内核的改动（non-kernel changes）。&lt;/p&gt;
&lt;p&gt;内核对 &lt;strong&gt;BPF 最大指令数有 4K 条&lt;/strong&gt;的限制，现在这个限制已经放大到 &lt;strong&gt;1M&lt;/strong&gt;（一百万） 条（但需要 5.1+ 内核，或者稍低版本的内核 + 相应 patch）。&lt;/p&gt;
&lt;p&gt;我们的 BPF 程序中包含了 NAT 引擎，因此肯定是超过这个限制的。 但 Cilium 这边，我们目前还并未用到这个新的最大限制，而是通过“外包”的方式将 BPF 切分成了子 BPF 程序，然后通过尾调用（tail call）跳转过去，以此来绕过这个 4K 的限 制。&lt;/p&gt;
&lt;p&gt;另外，我们当前使用的是 BPF tail call，而不是 BPF-to-BPF call，因为&lt;strong&gt;二者不能同时使用&lt;/strong&gt;。更好的方式是，Cilium agent 在启动时进行检查，如果内核支持 1M BPF insns/complexity limit + bounded loops（我们用于 NAT mappings 查询优化），就用这 些新特性；否则回退到尾调用的方式。&lt;/p&gt;
&lt;h2 id=&quot;4-Cilium-上手：用-kubeadm-搭建体验环境&quot;&gt;&lt;a href=&quot;#4-Cilium-上手：用-kubeadm-搭建体验环境&quot; class=&quot;headerlink&quot; title=&quot;4 Cilium 上手：用 kubeadm 搭建体验环境&quot;&gt;&lt;/a&gt;4 Cilium 上手：用 kubeadm 搭建体验环境&lt;/h2&gt;&lt;p&gt;有兴趣尝试 Cilium，可以参考下面的快速安装命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm init --pod-network-cidr=10.217.0.0/16 --skip-phases=addon/kube-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm join [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ helm template cilium \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 --namespace kube-system --set global.nodePort.enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 --set global.k8sServiceHost=&lt;span class=&quot;variable&quot;&gt;$API_SERVER_IP&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 --set global.k8sServicePort=&lt;span class=&quot;variable&quot;&gt;$API_SERVER_PORT&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 --set global.tag=v1.6.1 &amp;gt; cilium.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; cilium.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;附录: &lt;a href=&quot;/images/k8s/Making_the_Kubernetes_Service_Abstraction_Scale_using_BPF.pdf&quot;&gt;Making_the_Kubernetes_Service_Abstraction_Scale_using_BPF.pdf&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：ArthurChiao 原文：&lt;a href=&quot;https://linuxplumbersconf.org/event/4/contributions/458/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://linuxplumbersconf.org/event/4/contributions/458/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文翻译自 2019 年 Daniel Borkmann 和 Martynas Pumputis 在 Linux Plumbers Conference 的一篇分享: &lt;a href=&quot;https://linuxplumbersconf.org/event/4/contributions/458/&quot;&gt;Making the Kubernetes Service Abstraction Scale using eBPF&lt;/a&gt; 。 翻译时对大家耳熟能详或已显陈旧的内容（K8s 介绍、Cilium 1.6 之前的版本对 Service 实现等）略有删减，如有需要请查阅原 PDF。&lt;/p&gt;
&lt;p&gt;实际上，一年之后 Daniel 和 Martynas 又在 LPC 做了一次分享，内容是本文的延续：&lt;a href=&quot;http://team.jiunile.com/blog/2020/11/k8s-cilium-service.html&quot;&gt;Cilium：基于 BPF/XDP 实现 K8s Service 负载均衡&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;K8s 当前重度依赖 iptables 来实现 Service 的抽象&lt;/strong&gt;。对于每个 Service 及其 backend pods，在 K8s 里会生成很多 iptables 规则。&lt;strong&gt;例如 5K 个 Service 时，iptables 规则将达到 25K 条&lt;/strong&gt;，导致的后果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;较高、并且不可预测的转发延迟&lt;/strong&gt;（packet latency），因为每个包都要遍历这些规则 ，直到匹配到某条规则；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新规则的操作非常慢&lt;/strong&gt;：无法单独更新某条 iptables 规则，只能将全部规则读出来 ，更新整个集合，再将新的规则集合下发到宿主机。在动态环境中这一问题尤其明显，因为每 小时可能都有几千次的 backend pods 创建和销毁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠性问题&lt;/strong&gt;：iptables 依赖 Netfilter 和系统的连接跟踪模块（conntrack），在 大流量场景下会出现一些竞争问题（race conditions）；&lt;strong&gt;UDP 场景尤其明显&lt;/strong&gt;，会导 致丢包、应用的负载升高等问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将介绍如何基于 Cilium/BPF 来解决这些问题，实现 K8s Service 的大规模扩展。&lt;br&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://team.jiunile.com/categories/Kubernetes/"/>
    
      <category term="Cilium" scheme="http://team.jiunile.com/categories/Kubernetes/Cilium/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="ebpf" scheme="http://team.jiunile.com/tags/ebpf/"/>
    
      <category term="service" scheme="http://team.jiunile.com/tags/service/"/>
    
      <category term="bpf" scheme="http://team.jiunile.com/tags/bpf/"/>
    
  </entry>
  
  <entry>
    <title>使用 Go 实现 Async/Await 模式</title>
    <link href="http://team.jiunile.com//blog/2020/12/go-async-await.html"/>
    <id>http://team.jiunile.com//blog/2020/12/go-async-await.html</id>
    <published>2020-12-01T12:00:00.000Z</published>
    <updated>2020-11-30T15:41:49.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Golang 是一种并发编程语言。它具有强大的特性，如 &lt;code&gt;Goroutines&lt;/code&gt; 和 &lt;code&gt;Channels&lt;/code&gt;，可以很好地处理异步任务。另外，&lt;code&gt;goroutines&lt;/code&gt; 不是 OS 线程，这就是为什么您可以在不增加开销的情况下根据需要启动任意数量的 &lt;code&gt;goroutine&lt;/code&gt; 的原因，它的堆栈大小初始化时仅 &lt;strong&gt;2KB&lt;/strong&gt;。那么为什么要 &lt;code&gt;async/await&lt;/code&gt; 呢？ &lt;code&gt;Async/Await&lt;/code&gt; 是一种很好的语言特点，它为异步编程提供了更简单的接口。&lt;/p&gt;
&lt;p&gt;项目链接：&lt;a href=&quot;https://github.com/icyxp/AsyncGoDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/AsyncGoDemo&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;它是如何工作的？&quot;&gt;&lt;a href=&quot;#它是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;它是如何工作的？&quot;&gt;&lt;/a&gt;它是如何工作的？&lt;/h2&gt;&lt;p&gt;从 F# 开始，然后是 C#，到现在 Python 和 Javascript 中，&lt;code&gt;async/await&lt;/code&gt; 是一种非常流行的语言特点。它简化了异步方法的执行结构并且读起来像同步代码。对于开发人员来说更容易理解。让我们看看 c# 中的一个简单示例 &lt;code&gt;async/await&lt;/code&gt; 是如何工作的。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; async Task &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Let&#39;s start ...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var done = DoneAsync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Done is running ...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(await done);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; async Task&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; DoneAsync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Warming up ...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await Task.Delay(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Done ...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当程序运行时，我们的 &lt;code&gt;Main&lt;/code&gt; 函数将被执行。我们有异步函数 &lt;code&gt;DoneAsync&lt;/code&gt;。我们使用 &lt;code&gt;Delay&lt;/code&gt; 方法停止执行代码 3 秒钟。Delay 本身是一个异步函数，所以我们用 &lt;code&gt;await&lt;/code&gt; 来调用它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;await&lt;/code&gt; 只阻塞异步函数内的代码执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;code&gt;Main&lt;/code&gt; 函数中，我们不使用 &lt;code&gt;await&lt;/code&gt; 来调用 &lt;code&gt;DoneAsync&lt;/code&gt;。但 &lt;code&gt;DoneAsync&lt;/code&gt; 开始执行后，只有当我们 &lt;code&gt;await&lt;/code&gt; 它的时候，我们才会得到结果。执行流程如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Let&lt;span class=&quot;string&quot;&gt;&#39;s start ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Warming up ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done is running ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于异步执行，这看起来非常简单。让我们看看如何使用 Golang 的 &lt;code&gt;Goroutines&lt;/code&gt; 和 &lt;code&gt;Channels&lt;/code&gt; 来做到这一点。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DoneAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Warming up ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time.Sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Let&#39;s start ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	val := DoneAsync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done is running ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&amp;lt;- val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在这里，`&lt;/span&gt;DoneAsync&lt;span class=&quot;string&quot;&gt;` 异步运行并返回一个 `&lt;/span&gt;channel&lt;span class=&quot;string&quot;&gt;`。执行完异步任务后，它会将值写入 `&lt;/span&gt;channel&lt;span class=&quot;string&quot;&gt;`。在 `&lt;/span&gt;main&lt;span class=&quot;string&quot;&gt;` 函数中，我们调用 `&lt;/span&gt;DoneAsync&lt;span class=&quot;string&quot;&gt;` 并继续执行后续操作，然后从返回的 `&lt;/span&gt;channel&lt;span class=&quot;string&quot;&gt;` 读取值。它是一个阻塞调用，等待直到将值写入 `&lt;/span&gt;channel&lt;span class=&quot;string&quot;&gt;`，并在获得值后将其输出到终端。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Let&lt;span class=&quot;string&quot;&gt;&#39;s start ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Warming up ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done is running ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到，我们实现了与 C# 程序相同的结果，但它看起来不像 &lt;code&gt;async/await&lt;/code&gt; 那样优雅。尽管这确实不错，但是我们可以使用这种方法轻松地完成很多细粒度的事情，我们还可以用一个简单的结构和接口在 Golang 中实现 &lt;code&gt;async/await&lt;/code&gt; 关键字。让我们试试。&lt;/p&gt;
&lt;h2 id=&quot;实现-Async-Await&quot;&gt;&lt;a href=&quot;#实现-Async-Await&quot; class=&quot;headerlink&quot; title=&quot;实现 Async/Await&quot;&gt;&lt;/a&gt;实现 Async/Await&lt;/h2&gt;&lt;p&gt;完整代码可在项目链接中找到（在文章开始的地方）。要在 Golang 中实现 &lt;code&gt;async/await&lt;/code&gt;，我们将从一个名为 &lt;code&gt;async&lt;/code&gt; 的包目录开始。项目结构看起来是这样的。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── async&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── async.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── main.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── README.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;async&lt;/code&gt; 文件中，我们编写了可以处理异步任务最简单的 &lt;code&gt;Future&lt;/code&gt; 接口。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; async&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Future interface has the method signature for await&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Future &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Await() &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; future &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	await &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(f future)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Await&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.await(context.Background())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Exec executes the async function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(f &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;) Future &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = f()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; future&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		await: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ctx.Err()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里发生的事情并不多，我们添加了一个具有 &lt;code&gt;Await&lt;/code&gt; 方法标识的 &lt;code&gt;Future&lt;/code&gt; 接口。接下来，我们添加一个 &lt;code&gt;future&lt;/code&gt; 结构，它包含一个值，即 &lt;code&gt;await&lt;/code&gt; 函数的函数标识。现在 &lt;code&gt;futute struct&lt;/code&gt; 通过调用自己的 &lt;code&gt;await&lt;/code&gt; 函数来实现 &lt;code&gt;Future&lt;/code&gt; 接口的 &lt;code&gt;Await&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;接下来在 &lt;code&gt;Exec&lt;/code&gt; 函数中，我们在 &lt;code&gt;goroutine&lt;/code&gt; 中异步执行传递的函数。然后返回 &lt;code&gt;await&lt;/code&gt; 函数。它等待 &lt;code&gt;channel&lt;/code&gt; 关闭或 &lt;code&gt;context&lt;/code&gt; 读取。基于最先发生的情况，它要么返回错误，要么返回作为接口的结果。&lt;/p&gt;
&lt;p&gt;现在，有了这个新的 &lt;code&gt;async&lt;/code&gt; 包，让我们看看如何更改当前的 go 代码：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DoneAsync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Warming up ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Let&#39;s start ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	future := async.Exec(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DoneAsync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done is running ...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	val := future.Await()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;乍一看，它看起来干净得多，这里我们没有显式地使用 &lt;code&gt;goroutine&lt;/code&gt; 或 &lt;code&gt;channels&lt;/code&gt;。我们的 &lt;code&gt;DoneAsync&lt;/code&gt; 函数已更改为完全同步的性质。在 &lt;code&gt;main&lt;/code&gt; 函数中，我们使用 &lt;code&gt;async&lt;/code&gt; 包的&lt;code&gt;Exec&lt;/code&gt; 方法来处理 &lt;code&gt;DoneAsync&lt;/code&gt;。在开始执行 &lt;code&gt;DoneAsync&lt;/code&gt;。控制流返回到可以执行其他代码的 &lt;code&gt;main&lt;/code&gt; 函数中。最后，我们对 &lt;code&gt;Await&lt;/code&gt; 进行阻塞调用并回读数据。&lt;/p&gt;
&lt;p&gt;现在，代码看起来更加简单易读。我们可以修改我们的 async 包从而能在 Golang 中合并许多其他类型的异步任务，但在本教程中，我们现在只坚持简单的实现。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;我们经历了 &lt;code&gt;async/await&lt;/code&gt; 的过程，并在 Golang 中实现了一个简单的版本。我鼓励您进一步研究 &lt;code&gt;async/await&lt;/code&gt;，看看它如何更好的让代码库便于易读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://hackernoon.com/asyncawait-in-golang-an-introductory-guide-ol1e34sg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hackernoon.com/asyncawait-in-golang-an-introductory-guide-ol1e34sg&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Golang 是一种并发编程语言。它具有强大的特性，如 &lt;code&gt;Goroutines&lt;/code&gt; 和 &lt;code&gt;Channels&lt;/code&gt;，可以很好地处理异步任务。另外，&lt;code&gt;goroutines&lt;/code&gt; 不是 OS 线程，这就是为什么您可以在不增加开销的情况下根据需要启动任意数量的 &lt;code&gt;goroutine&lt;/code&gt; 的原因，它的堆栈大小初始化时仅 &lt;strong&gt;2KB&lt;/strong&gt;。那么为什么要 &lt;code&gt;async/await&lt;/code&gt; 呢？ &lt;code&gt;Async/Await&lt;/code&gt; 是一种很好的语言特点，它为异步编程提供了更简单的接口。&lt;/p&gt;
&lt;p&gt;项目链接：&lt;a href=&quot;https://github.com/icyxp/AsyncGoDemo&quot;&gt;https://github.com/icyxp/AsyncGoDemo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="async" scheme="http://team.jiunile.com/categories/golang/async/"/>
    
      <category term="await" scheme="http://team.jiunile.com/categories/golang/async/await/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="async" scheme="http://team.jiunile.com/tags/async/"/>
    
      <category term="await" scheme="http://team.jiunile.com/tags/await/"/>
    
      <category term="goroutine" scheme="http://team.jiunile.com/tags/goroutine/"/>
    
      <category term="channel" scheme="http://team.jiunile.com/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>从 Go 分析 Struct 对齐如何影响内存使用量</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-struct.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-struct.html</id>
    <published>2020-11-30T14:00:00.000Z</published>
    <updated>2020-11-30T02:34:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;不知道大家在写 Go 时有没有注意过，&lt;strong&gt;一个 struct 所占的空间不见得等于各个 field 加起来的空间&lt;/strong&gt;，甚至有时把 field 申明的顺序调换一下，又会得到不同的结果。&lt;/p&gt;
&lt;p&gt;今天的文章就是要从 CPU 抓资料的原理开始介绍，然后再讲到 &lt;strong&gt;Data Structure Alignment&lt;/strong&gt;（数据结构对齐），希望大家在看完之后能对 CPU 跟记忆体有更多认识～&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;直接上例子&quot;&gt;&lt;a href=&quot;#直接上例子&quot; class=&quot;headerlink&quot; title=&quot;直接上例子&quot;&gt;&lt;/a&gt;直接上例子&lt;/h2&gt;&lt;p&gt;以 T1 为例，整个 &lt;code&gt;struct&lt;/code&gt; 共有三个栏位，类型分别是 &lt;code&gt;int8&lt;/code&gt;、&lt;code&gt;int64&lt;/code&gt; 跟 &lt;code&gt;int32&lt;/code&gt;，所以变数 &lt;code&gt;t1&lt;/code&gt; 应该需要 &lt;code&gt;1+8+4=13 bytes&lt;/code&gt; 的空间。但实际在 &lt;a href=&quot;https://goplay.tools/snippet/6kzzmHddQgc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go Playground&lt;/a&gt; 上跑，会发现 &lt;code&gt;t1&lt;/code&gt; 竟然需要 &lt;code&gt;24 bytes&lt;/code&gt;，真奇怪是吧？&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T1 &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f1 &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f2 &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 8 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f3 &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 4 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t1 := T1&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(unsafe.Sizeof(t1)) &lt;span class=&quot;comment&quot;&gt;// 24 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果尝试把栏位的顺序调整一下，改成 &lt;code&gt;int8&lt;/code&gt;、&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;int64&lt;/code&gt; 再跑一次，就只需要 16 bytes，但跟原本预期的 13 bytes 还是有差，那究竟为什么会这样的差异呢？&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T2 &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f1 &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f3 &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 4 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f2 &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 8 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2 := T2&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(unsafe.Sizeof(t2)) &lt;span class=&quot;comment&quot;&gt;// 16 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;从-CPU-如何抓资料开始讲起&quot;&gt;&lt;a href=&quot;#从-CPU-如何抓资料开始讲起&quot; class=&quot;headerlink&quot; title=&quot;从 CPU 如何抓资料开始讲起&quot;&gt;&lt;/a&gt;从 CPU 如何抓资料开始讲起&lt;/h2&gt;&lt;p&gt;如果买电脑时有在留意 CPU 规格的话（身为工程师一定要的吧XD），应该会发现近几年的 CPU 几乎都是 &lt;code&gt;64 bit&lt;/code&gt; 的。而这边的 &lt;code&gt;64 bit&lt;/code&gt;，指的就是 CPU 一次可以从记忆体里面抓 &lt;code&gt;64 bits&lt;/code&gt; 的资料，换算一下也就是 &lt;code&gt;8 bytes&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;虽说是一次抓 &lt;code&gt;8 bytes&lt;/code&gt;，但也不是想抓哪就抓哪，因为记忆体也会以 &lt;strong&gt;&lt;code&gt;8 bytes&lt;/code&gt; 分成一个一个 word&lt;/strong&gt;（如下图），而 CPU 只能一次拿某一个 word。所以如果所需的资料刚好横跨两个 word，那就得花两个 &lt;code&gt;CPU cycle&lt;/code&gt; 的时间去拿。&lt;br&gt;&lt;img src=&quot;/images/go/struct_1.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：在 &lt;code&gt;64 bit&lt;/code&gt; 的系统中一个 word 是 &lt;code&gt;8 bytes&lt;/code&gt;，&lt;code&gt;32 bit&lt;/code&gt; 中则是 &lt;code&gt;4 bytes&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;所以为什么-struct-会变肥&quot;&gt;&lt;a href=&quot;#所以为什么-struct-会变肥&quot; class=&quot;headerlink&quot; title=&quot;所以为什么 struct 会变肥&quot;&gt;&lt;/a&gt;所以为什么 struct 会变肥&lt;/h2&gt;&lt;p&gt;了解 CPU 后我们再看一次 T1，他的栏位顺序是 &lt;code&gt;int8&lt;/code&gt;、&lt;code&gt;int64&lt;/code&gt;、&lt;code&gt;int32&lt;/code&gt;，所以把 t1 的资料连续放在记忆体里面就长得像下图：因为第二个栏位 f2(&lt;code&gt;int64&lt;/code&gt;) 需要 8 个 bytes，所以&lt;strong&gt;会有一个 byte 会被挤到第二个 word&lt;/strong&gt;（第二排）&lt;br&gt;&lt;img src=&quot;/images/go/struct_2.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;那这样有什么坏处呢？如果我的程式需要用到 &lt;code&gt;t1.f2&lt;/code&gt;，譬如说把他 print 出来，那 CPU 就得花两个 cycle 的时间把 f2 从记忆体抓出来，&lt;strong&gt;因为 f2 分散在两个 word 里面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以为了让 CPU 可以更快存取到各个栏位，Go 编译器会帮你的 struct 做 &lt;code&gt;Data Structure Align&lt;/code&gt;，也就是在 T1 的栏位间加上一些 padding，&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; T1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f1 i8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 7 bytes padding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f2 i64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f3 i32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 4 bytes padding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;画成图就长下面这样，有 13 bytes 用来储存 struct 的资料，而深色的 11 个 bytes 则是用来当 padding，&lt;strong&gt;确保每个 field 的所有内容都落在同一个 word 里面&lt;/strong&gt;，所以 struct 才会从 13 bytes 肥到 24 bytes&lt;br&gt;&lt;img src=&quot;/images/go/struct_3.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Padding-可以不要那么肥吗？&quot;&gt;&lt;a href=&quot;#Padding-可以不要那么肥吗？&quot; class=&quot;headerlink&quot; title=&quot;Padding 可以不要那么肥吗？&quot;&gt;&lt;/a&gt;Padding 可以不要那么肥吗？&lt;/h2&gt;&lt;p&gt;虽说 padding 是为了把每个 field 放到更好的位置，但 padding 的空间实际上就是浪费掉了。以 T1 来说，24 bytes 里面就浪费了将近一半，那有什么方法可以兼顾 Alignment 但又不浪费太多空间吗？&lt;/p&gt;
&lt;p&gt;再看一次 T1 的记忆体分佈，就会发现最下面 4 bytes 的 f3 其实可以挪到上面的 padding，反正第一排的 padding 空间超大的，不用白不用，&lt;strong&gt;而且挪上去之后每个栏位都还是在同一个 word 里面&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/go/struct_4.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;一旦把 f3 移上去，就可以省掉最下面一整个 word(8 bytes) 的空间，所以 T2 整个 struct 就只需要 16 bytes，是原本 T1 24 bytes 的三分之二&lt;br&gt;&lt;img src=&quot;/images/go/struct_5.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;写成程式码的话，因为 Go 会按照栏位的顺序来安排记忆体中的位置，所以要把 f2 跟 f3 的顺序交换，宣告的顺序变成 &lt;code&gt;int8&lt;/code&gt;、&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;int64&lt;/code&gt;，这样才会顺利排成上面那个图哦～&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T2 &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f1 &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f3 &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 4 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f2 &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 8 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t2 := T2&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(unsafe.Sizeof(t2)) &lt;span class=&quot;comment&quot;&gt;// 16 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;编译器没办法自动最佳化吗？&quot;&gt;&lt;a href=&quot;#编译器没办法自动最佳化吗？&quot; class=&quot;headerlink&quot; title=&quot;编译器没办法自动最佳化吗？&quot;&gt;&lt;/a&gt;编译器没办法自动最佳化吗？&lt;/h2&gt;&lt;p&gt;看到这你一定觉得很麻烦，难不成每次用 Struct 都要自己拼拼凑凑、算算看怎么样的顺序最省空间？这种底层的鸟事应该&lt;a href=&quot;https://medium.com/starbugs/see-what-compiler-optimization-do-from-llvm-ir-dfd3774292cb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;由编译器来最佳化&lt;/a&gt;才对啊！&lt;/p&gt;
&lt;p&gt;遗憾的是，目前 Go 编译器不会自动做这些最佳化（但 &lt;a href=&quot;https://camlorn.net/posts/April%202017/rust-struct-field-reordering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rust 三年前就支援了&lt;/a&gt;，希望 Go 也能赶快跟进XD），所以如果很在意 struct 有没有充分利用记忆体空间，可以自己画图排排看，或是用 &lt;a href=&quot;https://github.com/orijtech/structslop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;structslop&lt;/a&gt; 进行分析。&lt;/p&gt;
&lt;h3 id=&quot;structslop&quot;&gt;&lt;a href=&quot;#structslop&quot; class=&quot;headerlink&quot; title=&quot;structslop&quot;&gt;&lt;/a&gt;structslop&lt;/h3&gt;&lt;p&gt;&lt;code&gt;structslop&lt;/code&gt; 是一个用 Go 写成的开源工具，他的功能就是帮你调整 struct 的栏位顺序，&lt;strong&gt;以达到最好的空间利用率&lt;/strong&gt;。像下面的例子 Student 里面包含了学号、姓名、班级、成绩等等资讯。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Student &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id       &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name     &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 16 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classID  &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    phone    [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 10 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 16 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grade    &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// 4 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果画成图就长这样，可以看到里面还有很多深色的 padding，算一算总共浪费了 16 bytes，感觉不是那么优。&lt;br&gt;&lt;img src=&quot;/images/go/struct_6.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;这时就可以用 &lt;code&gt;structslop&lt;/code&gt; 帮你分析并且算出一个最佳解，只要把栏位顺序改成他建议的，Student 占用的空间就可以从 64 bytes 最佳化到 48 bytes，共&lt;strong&gt;省下 25% 的空间&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/go/struct_7.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果把 &lt;code&gt;structslop&lt;/code&gt; 推荐的 field 顺序画成图就长这样，全部排得满满的，没有任何一点 padding，看了心情都好了起来XD&lt;br&gt;&lt;img src=&quot;/images/go/struct_8.png&quot; alt=&quot;struct&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;有必要省空间省成这样吗&quot;&gt;&lt;a href=&quot;#有必要省空间省成这样吗&quot; class=&quot;headerlink&quot; title=&quot;有必要省空间省成这样吗&quot;&gt;&lt;/a&gt;有必要省空间省成这样吗&lt;/h2&gt;&lt;p&gt;讲完怎么省空间后，接著我们来想想，虽然重新排列栏位可以让 struct 更省空间，但真的有必要这样吗？&lt;/p&gt;
&lt;p&gt;以 Student 的例子来说，经过重新排列后，一个 struct 可以省下 16 bytes。&lt;/p&gt;
&lt;p&gt;如果你要写个程式来排序全校同学的成绩，需要宣告长度十万的 &lt;code&gt;Student array&lt;/code&gt;，那省下的记忆体也不过 16 MB，跟现在个人电脑配备的 4GB 到 8GB 比起来根本是零头。&lt;/p&gt;
&lt;p&gt;而且笔者我觉得栏位在经过重新排序之后，可读性可能会稍微降低，像 Student 原本的栏位依序是学号、姓名、班级…，满符合直觉的。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Student &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id       &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name     &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classID  &lt;span class=&quot;keyword&quot;&gt;int8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    phone    [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grade    &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但重新排序后顺序就变成姓名、地址、成绩…一直到最后才是学号跟班级，总觉得越重要的栏位应该要放在越前面才是（我自己觉得啦XD）。&lt;/p&gt;
&lt;p&gt;所以我的观点是不需要太早进行最佳化，除非你一开始就知道你的程式瓶颈会卡在这（也许程式要跑在嵌入式装置），否则就照平常的方式写 Go 就好，也不用去算这些有的没的，也许 Go 在哪一次更新之后就像 Rust 默默支援 &lt;code&gt;struct field reordering&lt;/code&gt; 了&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;最后，我想跟大家分享一个忘记在哪看到的句子：&lt;strong&gt;「Understanding the Hardware Makes You a Better Developer」&lt;/strong&gt;，这边的 &lt;strong&gt;Hardware&lt;/strong&gt; 我认为不一定是指硬体，而是泛指你所依赖的底层工具。&lt;/p&gt;
&lt;p&gt;譬如说我完全不懂浏览器的 Reflow 跟 Repaint 还是可以写前端，但要做动画可能就会遇到效能瓶颈；不懂 Go 的 GC 机制还是可以把 Go 写得不错，但流量大起来时可能就会花太多时间在 GC。&lt;/p&gt;
&lt;p&gt;所以虽然这篇文的结论是不需要特别去注意 &lt;code&gt;Data Structure Alignment&lt;/code&gt; ，只要知道程式内部是这样运作的，并且顺其自然即可，但如果有一天真的因为这样记忆体不够了，那记得要想到调整一下栏位顺序哦～。&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;&lt;a href=&quot;#延伸阅读&quot; class=&quot;headerlink&quot; title=&quot;延伸阅读&quot;&gt;&lt;/a&gt;延伸阅读&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6730664/why-doesnt-c-make-the-structure-tighter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why doesn’t C++ make the structure tighter? — Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://camlorn.net/posts/April%202017/rust-struct-field-reordering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimizing Rust Struct Size: A 6-month Compiler Development Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://techterms.com/help/difference_between_32-bit_and_64-bit_systems&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the difference between a 32-bit and 64-bit system?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://medium.com/starbugs/illustrate-how-data-alignment-affects-memory-usage-d29bf9d5bf08&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/starbugs/illustrate-how-data-alignment-affects-memory-usage-d29bf9d5bf08&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;不知道大家在写 Go 时有没有注意过，&lt;strong&gt;一个 struct 所占的空间不见得等于各个 field 加起来的空间&lt;/strong&gt;，甚至有时把 field 申明的顺序调换一下，又会得到不同的结果。&lt;/p&gt;
&lt;p&gt;今天的文章就是要从 CPU 抓资料的原理开始介绍，然后再讲到 &lt;strong&gt;Data Structure Alignment&lt;/strong&gt;（数据结构对齐），希望大家在看完之后能对 CPU 跟记忆体有更多认识～&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="struct" scheme="http://team.jiunile.com/categories/golang/struct/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="struct" scheme="http://team.jiunile.com/tags/struct/"/>
    
  </entry>
  
  <entry>
    <title>Golang 切片综合指南</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-slices.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-slices.html</id>
    <published>2020-11-26T14:00:00.000Z</published>
    <updated>2020-11-27T07:10:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在本文中，我们将讨论 “切片” 的概念，它是 Golang 中使用的一种重要数据结构。这一数据结构为你提供了处理与管理数据集合的方法。切片是围绕动态数组的概念构建的，它与动态数组相似，可以根据你的需要而伸缩。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切片在增长方面是动态的，因为它们有自己的内置函数 &lt;code&gt;append&lt;/code&gt;，可以快速高效地增长切片。&lt;/li&gt;
&lt;li&gt;您还可以通过切割底层内存来减小切片的大小。&lt;/li&gt;
&lt;li&gt;在底层内存中切片是在连续的块上分配的，因此切片为你提供的便利之处包括：索引、迭代与垃圾回收优化。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;切片表示&quot;&gt;&lt;a href=&quot;#切片表示&quot; class=&quot;headerlink&quot; title=&quot;切片表示&quot;&gt;&lt;/a&gt;切片表示&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;切片不存储任何数据；它只描述底层数组的一部分。&lt;/li&gt;
&lt;li&gt;切片使用一个包含三个字段的结构表示：指向底层数组的指针（pointer）、长度（length）与容量（capacity）。&lt;/li&gt;
&lt;li&gt;这个数据结构类似于切片的描述符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_1.png&quot; alt=&quot;Slice representation&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pointer&lt;/strong&gt;：指针用于指向数组的第一个元素，这个元素可以通过切片进行访问。在这里，指向的元素不必是数组的第一个元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Length&lt;/strong&gt;：长度代表数组中所有元素的总数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capacity&lt;/strong&gt;：容量表示切片可扩展的最大大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用长度申明切片&quot;&gt;&lt;a href=&quot;#使用长度申明切片&quot; class=&quot;headerlink&quot; title=&quot;使用长度申明切片&quot;&gt;&lt;/a&gt;使用长度申明切片&lt;/h2&gt;&lt;p&gt;在声明切片过程中，当你仅指定长度（Length）时，容量（Capacity）值与长度（Length）值相同。&lt;br&gt;&lt;img src=&quot;/images/go/slice_2.png&quot; alt=&quot;Declare a slice using the length&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Declaring a slice by length. Create a slice of int. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 5 elements. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用长度和容量申明切片&quot;&gt;&lt;a href=&quot;#使用长度和容量申明切片&quot; class=&quot;headerlink&quot; title=&quot;使用长度和容量申明切片&quot;&gt;&lt;/a&gt;使用长度和容量申明切片&lt;/h2&gt;&lt;p&gt;在声明切片过程中，当你分别指定长度（Length）和容量（Capacity）时，这将初始化一段无法访问的底层数组来创建一个具有可用容量的切片。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Declaring a slice by length and capacity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Create a slice of integers. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Contains a length of 3 and has a capacity of 5 elements.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_3.png&quot; alt=&quot;Declare a slice with length and capacity&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是请注意，尝试创建容量小于长度的切片是不允许的。&lt;/p&gt;
&lt;h2 id=&quot;使用切片字面量创建切片&quot;&gt;&lt;a href=&quot;#使用切片字面量创建切片&quot; class=&quot;headerlink&quot; title=&quot;使用切片字面量创建切片&quot;&gt;&lt;/a&gt;使用切片字面量创建切片&lt;/h2&gt;&lt;p&gt;创建切片的惯用方法是使用切片字面量。它与创建数组相似，只是它不需要在 [ ] 操作符中指定值。你初始化切片时所用元素的数量将决定切片的初始长度与容量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of strings. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 5 elements. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Red&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Green&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Pink&quot;&lt;/span&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;//Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;//Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 3 elements. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intSlice:= []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(intSlice)) &lt;span class=&quot;comment&quot;&gt;//Print 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(intSlice)) &lt;span class=&quot;comment&quot;&gt;//Print 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明一个带有索引位置的切片&quot;&gt;&lt;a href=&quot;#声明一个带有索引位置的切片&quot; class=&quot;headerlink&quot; title=&quot;声明一个带有索引位置的切片&quot;&gt;&lt;/a&gt;声明一个带有索引位置的切片&lt;/h2&gt;&lt;p&gt;当使用切片字面量时，你可以初始化切片的长度与容量。你所需要做的就是初始化表示所需长度和容量的索引。下面的语法将创建一个长度和容量均为 100 的切片。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of strings.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the 100th element with an empty string.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;88&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Print 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Print 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_4.png&quot; alt=&quot;Declare a slice with index positions&quot;&gt;&lt;/p&gt;
&lt;p&gt;声明数组与切片的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你使用[]操作符中指定一个值，那么你在创建一个数组。&lt;/li&gt;
&lt;li&gt;如果你不在[]中指定值，则创建一个切片。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create an array of three integers. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array := [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Create a slice of integers with a length and capacity of three.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;声明一个-nil-切片&quot;&gt;&lt;a href=&quot;#声明一个-nil-切片&quot; class=&quot;headerlink&quot; title=&quot;声明一个 nil 切片&quot;&gt;&lt;/a&gt;声明一个 nil 切片&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;切片用 &lt;code&gt;nil&lt;/code&gt; 代表零值。&lt;/li&gt;
&lt;li&gt;一个 nil 切片的长度和容量等于 0，且没有底层数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a nil slice of integers. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice []&lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(slice == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//This line will print true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice))   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This line will print 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This line will print 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_5.png&quot; alt=&quot;Declare a nil slice&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明一个空切片&quot;&gt;&lt;a href=&quot;#声明一个空切片&quot; class=&quot;headerlink&quot; title=&quot;声明一个空切片&quot;&gt;&lt;/a&gt;声明一个空切片&lt;/h2&gt;&lt;p&gt;还可以通过初始化声明切片创建一个空切片。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use make to create an empty slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sliceOne := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use a slice literal to create an empty slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sliceTwo := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(sliceOne == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// This will print false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(sliceOne))   &lt;span class=&quot;comment&quot;&gt;// This will print 0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(sliceOne))   &lt;span class=&quot;comment&quot;&gt;// This will print 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(sliceTwo == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// This will print false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(sliceTwo))   &lt;span class=&quot;comment&quot;&gt;// This will print 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(sliceTwo))   &lt;span class=&quot;comment&quot;&gt;// This will print 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_6.png&quot; alt=&quot;Declare an empty slice&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为任何特定索引赋值&quot;&gt;&lt;a href=&quot;#为任何特定索引赋值&quot; class=&quot;headerlink&quot; title=&quot;为任何特定索引赋值&quot;&gt;&lt;/a&gt;为任何特定索引赋值&lt;/h2&gt;&lt;p&gt;要修改单个元素的值，请使用[]操作符。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(slice) &lt;span class=&quot;comment&quot;&gt;//This will print [10 20 30 40]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// Change the value of index 1.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(slice) &lt;span class=&quot;comment&quot;&gt;// This will print [10 25 30 40]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_7.png&quot; alt=&quot;Assign a value to any specific index&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;对切片进行切片&quot;&gt;&lt;a href=&quot;#对切片进行切片&quot; class=&quot;headerlink&quot; title=&quot;对切片进行切片&quot;&gt;&lt;/a&gt;对切片进行切片&lt;/h2&gt;&lt;p&gt;我们之所以称呼切片为切片，是因为你可以通过对底层数组的一部分进行切片来创建一个新的切片。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Create a slice of integers. Contains a &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;length and capacity of 5 elements.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(slice)  &lt;span class=&quot;comment&quot;&gt;// Print [10 20 30 40 50]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print  5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print  5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Create a new slice.Contains a length &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;of 2 and capacity of 4 elements.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice := slice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(slice)  &lt;span class=&quot;comment&quot;&gt;//Print [10 20 30 40 50]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(newSlice))  &lt;span class=&quot;comment&quot;&gt;//Print 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(newSlice))  &lt;span class=&quot;comment&quot;&gt;//Print 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_9.png&quot; alt=&quot;Take a slice of a slice&quot;&gt;&lt;/p&gt;
&lt;p&gt;在执行切片操作之后，我们拥有两个共享同一底层数组的切片。然而，这两个切片以不同的方式查看底层数组。原始切片认为底层数组的容量为 5，但 newSlice 与之不同，对 newSlice 而言，底层数组的容量为 4。newSlice 无法访问位于其指针之前的底层数组元素。就 newSlice 而言，这些元素甚至并不存在。使用下面的方式可以为任意切片后的 newSlice 计算长度和容量。&lt;/p&gt;
&lt;h3 id=&quot;切片的长度与容量如何计算？&quot;&gt;&lt;a href=&quot;#切片的长度与容量如何计算？&quot; class=&quot;headerlink&quot; title=&quot;切片的长度与容量如何计算？&quot;&gt;&lt;/a&gt;切片的长度与容量如何计算？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;切片 slice[i:j] 的底层数组容量为 k 长度（Length）：j - i 容量（Capacity）：k - i&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;计算新的长度和容量&quot;&gt;&lt;a href=&quot;#计算新的长度和容量&quot; class=&quot;headerlink&quot; title=&quot;计算新的长度和容量&quot;&gt;&lt;/a&gt;计算新的长度和容量&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;切片 slice[1:3] 的底层数组容量为 5 长度（Length）：3 - 1 = 2 容量（Capacity）：5 - 1 = 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;对一个切片进行更改的结果&quot;&gt;&lt;a href=&quot;#对一个切片进行更改的结果&quot; class=&quot;headerlink&quot; title=&quot;对一个切片进行更改的结果&quot;&gt;&lt;/a&gt;对一个切片进行更改的结果&lt;/h3&gt;&lt;p&gt;一个切片对底层数组的共享部分所做的更改可以被另一个切片看到。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 5 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a new slice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length of 2 and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice := slice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change index 1 of newSlice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change index 2 of the original slice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将数值 35 分配给 newSlice 的第二个元素后，该更改也可以在原始切片的元素中被看到。&lt;/p&gt;
&lt;h2 id=&quot;运行时错误显示索引超出范围&quot;&gt;&lt;a href=&quot;#运行时错误显示索引超出范围&quot; class=&quot;headerlink&quot; title=&quot;运行时错误显示索引超出范围&quot;&gt;&lt;/a&gt;运行时错误显示索引超出范围&lt;/h2&gt;&lt;p&gt;一个切片只能访问它长度以内的索引位。尝试访问超出长度的索引位元素将引发一个运行时错误。与切片容量相关联的元素只能用于切片增长。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 5 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a new slice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length of 2 and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice := slice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Change index 3 of newSlice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This element does not exist for newSlice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Runtime Exception:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;panic: runtime error: index out of range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;切片增长&quot;&gt;&lt;a href=&quot;#切片增长&quot; class=&quot;headerlink&quot; title=&quot;切片增长&quot;&gt;&lt;/a&gt;切片增长&lt;/h2&gt;&lt;p&gt;与使用数组相比，使用切片的优势之一是：你可以根据需要增加切片的容量。当你使用内置函数 「append」 时，Golang 会负责处理所有操作细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 append 前，你需要一个源切片和一个要追加的值。&lt;/li&gt;
&lt;li&gt;当你的 append 调用并返回时，它将为你提供一个更改后的新切片。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;append&lt;/strong&gt; 函数总会增加新切片的长度。&lt;/li&gt;
&lt;li&gt;另一方面，容量可能会受到影响，也可能不会受到影响，这取决于源切片的可用容量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用-append-向切片追加元素&quot;&gt;&lt;a href=&quot;#使用-append-向切片追加元素&quot; class=&quot;headerlink&quot; title=&quot;使用 append 向切片追加元素&quot;&gt;&lt;/a&gt;使用 append 向切片追加元素&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*  Create a slice of integers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Contains a length and capacity of 5 elements.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Create a new slice.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Contains a length of 2 and capacity of 4 elements.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice := slice[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;// Print 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;// Print 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Allocate a new element from capacity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Assign the value of 60 to the new element.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(newSlice, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;// Print 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;// Print 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当切片的底层数组没有可用容量时，append 函数将创建一个新的底层数组，拷贝正在引用的现有值，然后再分配新值。&lt;/p&gt;
&lt;h2 id=&quot;使用-append-增加切片的长度和容量&quot;&gt;&lt;a href=&quot;#使用-append-增加切片的长度和容量&quot; class=&quot;headerlink&quot; title=&quot;使用 append 增加切片的长度和容量&quot;&gt;&lt;/a&gt;使用 append 增加切片的长度和容量&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(slice)) &lt;span class=&quot;comment&quot;&gt;// Print 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Append a new value to the slice.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assign the value of 50 to the new element.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newSlice= &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;//Print 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(newSlice)) &lt;span class=&quot;comment&quot;&gt;//Print 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/slice_9.png&quot; alt=&quot;Increase the length and capacity of a slice&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 append 操作后，newSlice 被给予一个自有的底层数组，该底层数组的容量是原底层数组容量的两倍。在增加底层数组容量时，append 操作十分聪明。举个例子，当切片的容量低于 1,000 个元素时，容量增长总是翻倍的。一旦元素的数量超过 1,000 个，容量就会增长 1.25 倍，即 25%。随着时间的推移，这种增长算法可能会在 Golang 中发生变化。&lt;/p&gt;
&lt;p&gt;更改新切片不会对旧切片产生任何影响，因为新切片现在有一个不同的底层数组，它的指针指向一个新分配的数组。&lt;/p&gt;
&lt;h2 id=&quot;将一个切片追加到另一个切片中&quot;&gt;&lt;a href=&quot;#将一个切片追加到另一个切片中&quot; class=&quot;headerlink&quot; title=&quot;将一个切片追加到另一个切片中&quot;&gt;&lt;/a&gt;将一个切片追加到另一个切片中&lt;/h2&gt;&lt;p&gt;内置函数 &lt;strong&gt;append&lt;/strong&gt; 还是一个&lt;strong&gt;可变参数&lt;/strong&gt;函数。这意味着你可以传递多个值来追加到单个切片中。如果你使用 … 运算符，可以将一个切片的所有元素追加到另一个切片中。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create two slices each initialized with two integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice1:= []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice2 := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Append the two slices together and display the results.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice1, slice2...))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Output: [1 2 3 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;对切片执行索引&quot;&gt;&lt;a href=&quot;#对切片执行索引&quot; class=&quot;headerlink&quot; title=&quot;对切片执行索引&quot;&gt;&lt;/a&gt;对切片执行索引&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过指定一个下限和一个上限来形成切片，例如：&lt;code&gt;a[low:high]&lt;/code&gt;。这将选择一个半开范围，其中包含切片的第一个元素，但不包含切片的最后一个元素。&lt;/li&gt;
&lt;li&gt;你可以省略上限或下限，这将使用它们的默认值。下限的默认值是 0，上限的默认值是切片的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a := [...]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// an array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s := a[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s == []int&amp;#123;1, 2&amp;#125;        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cap(s) == 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = a[:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s == []int&amp;#123;0, 1&amp;#125;        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cap(s) == 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = a[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:]                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s == []int&amp;#123;2, 3&amp;#125;        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cap(s) == 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = a[:]                  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s == []int&amp;#123;0, 1, 2, 3&amp;#125;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cap(s) == 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;遍历切片&quot;&gt;&lt;a href=&quot;#遍历切片&quot; class=&quot;headerlink&quot; title=&quot;遍历切片&quot;&gt;&lt;/a&gt;遍历切片&lt;/h2&gt;&lt;p&gt;Go 有一个特殊的关键字 &lt;code&gt;range&lt;/code&gt;，你可以使用该关键字对切片进行遍历。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Iterate over each element and display each value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, value := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Index: %d Value: %d\n&quot;&lt;/span&gt;, index, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 0 Value: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 1 Value: 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 2 Value: 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 3 Value: 40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在遍历切片时，关键字 range 将返回两个值。&lt;/li&gt;
&lt;li&gt;第一个值是索引下标，第二个值是索引位中值的副本。&lt;/li&gt;
&lt;li&gt;一定要知道 range 是在复制值，而不是返回值的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Create a slice of integers.Contains &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a length and capacity of 4 elements.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Iterate over each element and display &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; the value and addresses.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, value := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Value: %d Value-Addr: %X ElemAddr: %X\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   value, &amp;amp;value, &amp;amp;slice[index])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 10 Value-Addr: 10500168 ElemAddr: 1052E100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 20 Value-Addr: 10500168 ElemAddr: 1052E104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 30 Value-Addr: 10500168 ElemAddr: 1052E108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 40 Value-Addr: 10500168 ElemAddr: 1052E10C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt; 关键字提供元素的拷贝。&lt;/p&gt;
&lt;p&gt;如果你不需要下标值，你可以使用下划线字符丢弃该值。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Iterate over each element and display each value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, value := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; slice &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Value: %d\n&quot;&lt;/span&gt;, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Value: 40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关键字 &lt;strong&gt;range&lt;/strong&gt; 总是从开始处遍历一个切片。如果你需要对切片的迭代进行更多的控制，你可以使用传统的 &lt;strong&gt;for&lt;/strong&gt; 循环。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a slice of integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Contains a length and capacity of 4 elements.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Iterate over each element starting at element 3.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index := &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; index &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(slice); index++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Index: %d Value: %d\n&quot;&lt;/span&gt;, index, slice[index])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 2 Value: 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Index: 3 Value: 40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##总结&lt;br&gt;在本文中，我们深入探讨了切片的概念。我们了解到，切片并不存储任何数据，而是描述了底层数组的一部分。我们还看到，切片可以在底层数组的范围内增长和收缩，并配合索引可作为数组使用；切片的零值是 nil；函数 &lt;strong&gt;len&lt;/strong&gt;、&lt;strong&gt;cap&lt;/strong&gt; 和 &lt;strong&gt;append&lt;/strong&gt; 都将 nil 看作一个长度和容量都为 0 的&lt;strong&gt;空切片&lt;/strong&gt;；你可以通过&lt;strong&gt;切片字面量&lt;/strong&gt;或调用 &lt;strong&gt;make&lt;/strong&gt; 函数（将长度和容量作为参数）来创建切片。希望这些对你有所帮助！&lt;/p&gt;
&lt;h2 id=&quot;免责声明&quot;&gt;&lt;a href=&quot;#免责声明&quot; class=&quot;headerlink&quot; title=&quot;免责声明&quot;&gt;&lt;/a&gt;免责声明&lt;/h2&gt;&lt;p&gt;我参考了各种博客、书籍和媒体故事来撰写这篇文章。如有任何疑问，请在评论中与我联系。&lt;/p&gt;
&lt;p&gt;到此为止……开心编码……快乐学习😃&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：掘金翻译计划 原文：&lt;a href=&quot;https://codeburst.io/a-comprehensive-guide-to-slices-in-golang-bacebfe46669&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://codeburst.io/a-comprehensive-guide-to-slices-in-golang-bacebfe46669&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在本文中，我们将讨论 “切片” 的概念，它是 Golang 中使用的一种重要数据结构。这一数据结构为你提供了处理与管理数据集合的方法。切片是围绕动态数组的概念构建的，它与动态数组相似，可以根据你的需要而伸缩。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切片在增长方面是动态的，因为它们有自己的内置函数 &lt;code&gt;append&lt;/code&gt;，可以快速高效地增长切片。&lt;/li&gt;
&lt;li&gt;您还可以通过切割底层内存来减小切片的大小。&lt;/li&gt;
&lt;li&gt;在底层内存中切片是在连续的块上分配的，因此切片为你提供的便利之处包括：索引、迭代与垃圾回收优化。
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="slice" scheme="http://team.jiunile.com/categories/golang/slice/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="slice" scheme="http://team.jiunile.com/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>Cilium：基于 BPF/XDP 实现 K8s Service 负载均衡</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-cilium-service.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-cilium-service.html</id>
    <published>2020-11-25T14:00:00.000Z</published>
    <updated>2020-11-25T06:00:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;文章介绍了 K8s 的一些核心网络模型和设计、&lt;code&gt;Cilium&lt;/code&gt; 对 &lt;code&gt;K8s Service&lt;/code&gt; 的实现、&lt;code&gt;BPF/XDP&lt;/code&gt; 性能优化，以及他们从中得到的一些实践经验，全是干货。&lt;/p&gt;
&lt;p&gt;去年我们也参加了这个大会（LPC），并做了题为 &lt;a href=&quot;https://linuxplumbersconf.org/event/4/contributions/458/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making the Kubernetes Service Abstraction Scale using eBPF&lt;/a&gt; 的分享。 今天的内容是去年内容的延续，具体分为三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 网络模型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cilium&lt;/code&gt; 对 &lt;code&gt;K8s Service&lt;/code&gt; 负载均衡的实现，以及我们的一些实践经验&lt;/li&gt;
&lt;li&gt;一些新的 &lt;code&gt;BPF&lt;/code&gt; 内核扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-K8s-网络基础：访问集群内服务的几种方式&quot;&gt;&lt;a href=&quot;#1-K8s-网络基础：访问集群内服务的几种方式&quot; class=&quot;headerlink&quot; title=&quot;1 K8s 网络基础：访问集群内服务的几种方式&quot;&gt;&lt;/a&gt;1 K8s 网络基础：访问集群内服务的几种方式&lt;/h2&gt;&lt;p&gt;Kubernetes 是一个分布式容器调度器，最小调度单位是 Pod。从网络的角度来说，可以认为 一个 pod 就是&lt;strong&gt;网络命名空间的一个实例&lt;/strong&gt;（an instance of network namespace）。 一个 pod 内可能会有多个容器，因此，&lt;strong&gt;多个容器可以共存于同一个网络命名空间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;strong&gt;K8s 只定义了网络模型，具体实现则是交给所谓的 CNI 插件&lt;/strong&gt;，后者完成 pod 网络的创建和销毁。本文接下来将以 &lt;code&gt;Cilium CNI&lt;/code&gt; 插件作为例子。&lt;/p&gt;
&lt;p&gt;K8s 规定了&lt;strong&gt;每个 pod 的 IP 在集群内要能访问&lt;/strong&gt;，这是通过 CNI 来完成的：CNI 插件负责为 pod 分配 IP 地址，然后为其创建和打通网络。 &lt;strong&gt;除此之外，K8s 没有对 CNI 插件做任何限制&lt;/strong&gt;。尤其是，K8s 没有对&lt;strong&gt;从集群外访问 pod 的行为做任何规定&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;接下来我们就来看看如何访问 K8s 集群里的一个&lt;strong&gt;服务&lt;/strong&gt;（通常会对应多个 backend pods）。&lt;/p&gt;
&lt;h3 id=&quot;1-1-PodIP（直连容器-IP）&quot;&gt;&lt;a href=&quot;#1-1-PodIP（直连容器-IP）&quot; class=&quot;headerlink&quot; title=&quot;1.1 PodIP（直连容器 IP）&quot;&gt;&lt;/a&gt;1.1 PodIP（直连容器 IP）&lt;/h3&gt;&lt;p&gt;第一种方式是&lt;strong&gt;通过 PodIP 直接访问&lt;/strong&gt;，这是最简单的方式。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_pod-ip.png&quot; alt=&quot;pod-ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，这个服务的 3 个 backend pods 分别位于两个 node 上。当集群外的客户端 访问这个服务时，它会&lt;strong&gt;直接通过某个具体的 PodIP 来访问&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设客户端和 Pod 之间的网络是可达的，那这种访问是没问题的。&lt;/p&gt;
&lt;p&gt;但这种方式有几个&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod 会因为某些原因重建，而 K8s &lt;strong&gt;无法保证它每次都会分到同一个 IP 地址&lt;/strong&gt;。例如，如果 node 重启了，pod 很可能就会分到不同的 IP 地址，这对客户端来说个 大麻烦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有内置的负载均衡&lt;/strong&gt;。即，客户端选择一个 PodIP 后，所有的请求都会发送到这个 pod，而不是分散到不同的后端 pod。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-2-HostPort（宿主机端口映射）&quot;&gt;&lt;a href=&quot;#1-2-HostPort（宿主机端口映射）&quot; class=&quot;headerlink&quot; title=&quot;1.2 HostPort（宿主机端口映射）&quot;&gt;&lt;/a&gt;1.2 HostPort（宿主机端口映射）&lt;/h3&gt;&lt;p&gt;第二种方式是使用所谓的 HostPort。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_host-port.png&quot; alt=&quot;host-port&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，&lt;strong&gt;在宿主机的 netns 分配一个端口&lt;/strong&gt;，并将这个端口的所有流量转发到 后端 pod。&lt;/p&gt;
&lt;p&gt;这种情况下，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端通过 Pod 所在的宿主机的 &lt;code&gt;HostIP:HostPort&lt;/code&gt; 访问服务，例如上图中访问 &lt;code&gt;10.0.0.1:10000&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;宿主机先对&lt;strong&gt;流量进行 DNAT&lt;/strong&gt;，然后转发给 Pod。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方式的&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宿主机的端口资源是所有 Pod 共享的，任何一个端口只能被一个 pod 使用 ，因此&lt;strong&gt;在每台 node 上，任何一个服务最多只能有一个 pod&lt;/strong&gt;（每个 backend 都是一 致的，因此需要使用相同的 HostPort）。对用户非常不友好。&lt;/li&gt;
&lt;li&gt;和 PodIP 方式一样，没有内置的负载均衡。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-3-NodePort-Service&quot;&gt;&lt;a href=&quot;#1-3-NodePort-Service&quot; class=&quot;headerlink&quot; title=&quot;1.3 NodePort Service&quot;&gt;&lt;/a&gt;1.3 NodePort Service&lt;/h3&gt;&lt;p&gt;NodePort 和上面的 HostPort 有点像（可以认为是 HostPort 的增强版），也是将 Pod 暴 露到宿主机 netns 的某个端口，但此时，&lt;strong&gt;集群内的每个 Node 上都会为这个服务的 pods 预留这个端口，并且将流量负载均衡到这些 pods&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，假设这里的 NodePort 是 &lt;code&gt;30001&lt;/code&gt;。当客户端请求到达任意一台 node 的 &lt;code&gt;30001&lt;/code&gt; 端口时，它可以对请求做 DNAT 然后转发给本节点内的 Pod，如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_node-port.png&quot; alt=&quot;node-port&quot;&gt;&lt;/p&gt;
&lt;p&gt;也可以 DNAT 之后将请求转发给其他节点上的 pod，如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_node-port-2.png&quot; alt=&quot;node-port&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意在后面跨宿主机转发的情况下，&lt;strong&gt;除了做 DNAT 还需要做 SNAT&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;已经有了服务（service）的概念&lt;/strong&gt;，多个 pod 属于同一个 service，挂掉一个时其 他 pod 还能继续提供服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端不用关心 pod 在哪个 node 上&lt;/strong&gt;，因为集群内的所有 node 上都开了这个端 口并监听在那里，它们对全局的 backend 有一致的视图。&lt;/li&gt;
&lt;li&gt;已经&lt;strong&gt;有了负载均衡，每个 node 都是 LB&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在宿主机 netns 内访问这些服务时，通过 &lt;code&gt;localhost:NodePort&lt;/code&gt; 就行了，无需 DNS 解析。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;大部分实现都是基于 SNAT&lt;/strong&gt;，当 pod 不在本节点时，导致 packet 中的&lt;strong&gt;真实客户端 IP 地址&lt;/strong&gt;信息丢失，监控、排障等不方便。&lt;/li&gt;
&lt;li&gt;Node 做转发使得&lt;strong&gt;转发路径多了一跳，延时变大&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-4-ExternalIPs-Service&quot;&gt;&lt;a href=&quot;#1-4-ExternalIPs-Service&quot; class=&quot;headerlink&quot; title=&quot;1.4 ExternalIPs Service&quot;&gt;&lt;/a&gt;1.4 ExternalIPs Service&lt;/h3&gt;&lt;p&gt;第四种从集群外访问 service 的方式是 &lt;code&gt;external IP&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果有外部可达的 IP ，即&lt;strong&gt;集群外能通过这个 IP 访问到集群内特定的 nodes&lt;/strong&gt;，那我 们就可以通过这些 nodes 将流量转发到 service 的后端 pods，并提供负载均衡。&lt;/p&gt;
&lt;p&gt;如下图所示，&lt;code&gt;1.1.1.1&lt;/code&gt; 是一个 &lt;code&gt;external IP&lt;/code&gt;，所有目的 IP 地址是 &lt;code&gt;1.1.1.1&lt;/code&gt; 的流量会被底层的网络（K8s 控制之外）转发到 node1。&lt;code&gt;1.1.1.1:8080&lt;/code&gt; 在 K8s 里定义了一个 Service，如果它将流量转发到本机内的 backend pod，需要做一次 DNAT：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_external-ip.png&quot; alt=&quot;external-ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;同样，这里的后端 Pod 也可以在其他 node 上，这时除了做 DNAT 还需要做一次 SNAT， 如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_external-ip-2.png&quot; alt=&quot;external-ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：可以使用任何外部可达的 IP 地址来定义 Service 入口&lt;/strong&gt;，只要用这个 IP 地址能访问集群内的至少一台机器即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;External IP 在 k8s 的控制范围之外&lt;/strong&gt;，是由底层的网络平台提供的。例如，底层网 络通过 BGP 宣告，使得 IP 能到达某些 nodes。&lt;/li&gt;
&lt;li&gt;由于这个 IP 是在 k8s 的控制之外，对 k8s 来说就是黑盒，因此&lt;strong&gt;从集群内访问 external IP 是存在安全隐患的&lt;/strong&gt;，例如 &lt;code&gt;external IP&lt;/code&gt; 上可能运行了 恶意服务，能够进行中间人攻击。因此，&lt;code&gt;Cilium&lt;/code&gt; 目前不支持在集群内通过 &lt;code&gt;external IP&lt;/code&gt; 访问 Service。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-5-LoadBalancer-Service&quot;&gt;&lt;a href=&quot;#1-5-LoadBalancer-Service&quot; class=&quot;headerlink&quot; title=&quot;1.5 LoadBalancer Service&quot;&gt;&lt;/a&gt;1.5 LoadBalancer Service&lt;/h3&gt;&lt;p&gt;第五种访问方式是所谓的 LoadBalancer 模式。针对公有云还是私有云，LoadBalancer 又分为两种。&lt;/p&gt;
&lt;h4 id=&quot;1-5-1-私有云&quot;&gt;&lt;a href=&quot;#1-5-1-私有云&quot; class=&quot;headerlink&quot; title=&quot;1.5.1 私有云&quot;&gt;&lt;/a&gt;1.5.1 私有云&lt;/h4&gt;&lt;p&gt;如果是私有云，可以考虑实现一个自己的 &lt;code&gt;cloud provider&lt;/code&gt;，或者直接使用 &lt;a href=&quot;https://github.com/metallb/metallb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetalLB&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，&lt;strong&gt;这种模式和 externalIPs 模式非常相似&lt;/strong&gt;，local 转发：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_load-balancer.png&quot; alt=&quot;load-balancer&quot;&gt;&lt;/p&gt;
&lt;p&gt;remote 转发：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_load-balancer-2.png&quot; alt=&quot;load-balancer&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是，二者有重要区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;externalIPs 在 K8s 的控制之外&lt;/strong&gt;，使用方式是从某个地方申请一个 external IP， 然后填到 Service 的 Spec 里；这个 &lt;code&gt;external IP&lt;/code&gt; 是存在安全隐患的，因为并不是 K8s 分配和控制的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoadBalancer 在 K8s 的控制之内&lt;/strong&gt;，只需要声明 这是一个 LoadBalancer 类型的 Service，K8s 的 &lt;code&gt;cloud-provider&lt;/code&gt; 组件就会自动给这个 Service 分配一个外部可达的 IP，本质上 &lt;code&gt;cloud-provider&lt;/code&gt; 做的事情就是从某个 LB 分配一个受信任的 VIP 然后填到 Service 的 Spec 里。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：LoadBalancer 分配的 IP 是归 K8s 管的，&lt;strong&gt;用户无法直接配置这些 IP&lt;/strong&gt;，因 此也就避免了前面 &lt;code&gt;external IP&lt;/code&gt; 的流量欺骗（traffic spoofing）风险。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;注意这些 IP 不是由 CNI 分配的，而是由 LoadBalancer 实现分配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/metallb/metallb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetalLB&lt;/a&gt; 能完成 LoadBalancer IP 的分配，然后&lt;strong&gt;基于 ARP/NDP 或 BGP 宣告 IP 的可达性&lt;/strong&gt;。 此外，&lt;strong&gt;MetalLB 本身并不在 critical fast path&lt;/strong&gt; 上（可以认为它只是控制平面，完成 LoadBalancer IP 的生效，接下来的请求和响应流量，即数据平面，都不经过它），因此不 影响 XDP 的使用。&lt;/p&gt;
&lt;h4 id=&quot;1-5-2-公有云&quot;&gt;&lt;a href=&quot;#1-5-2-公有云&quot; class=&quot;headerlink&quot; title=&quot;1.5.2 公有云&quot;&gt;&lt;/a&gt;1.5.2 公有云&lt;/h4&gt;&lt;p&gt;主流的云厂商都实现了 LoadBalancer，在它们提供的托管 K8s 内可以直接使用。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有专门的 LB 节点作为统一入口。&lt;/li&gt;
&lt;li&gt;LB 节点再将流量转发到 NodePort。&lt;/li&gt;
&lt;li&gt;NodePort 再将流量转发到 backend pods。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如下图所示，local 转发：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_load-balancer-cloud.png&quot; alt=&quot;load-balancer-cloud&quot;&gt;&lt;/p&gt;
&lt;p&gt;remote 转发：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_load-balancer-cloud-2.png&quot; alt=&quot;load-balancer-cloud&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LoadBalancer 由云厂商实现，无需用户安装 BGP 软件、配置 BGP 协议等来宣告 VIP 可达性。&lt;/li&gt;
&lt;li&gt;开箱即用，主流云厂商都针对它们的托管 K8s 集群实现了这样的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这种情况下，&lt;strong&gt;Cloud LB 负责检测后端 node（注意不是后端 pod）的健康状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在两层 LB：LB 节点转发和 node 转发。&lt;/li&gt;
&lt;li&gt;使用方式因厂商而已，例如各厂商的 annotations 并没有标准化到 K8s 中，跨云使用会有一些麻烦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud API 非常慢&lt;/strong&gt;，调用厂商的 API 来做拉入拉出非常受影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-6-ClusterIP-Service&quot;&gt;&lt;a href=&quot;#1-6-ClusterIP-Service&quot; class=&quot;headerlink&quot; title=&quot;1.6 ClusterIP Service&quot;&gt;&lt;/a&gt;1.6 ClusterIP Service&lt;/h3&gt;&lt;p&gt;最后一种是&lt;strong&gt;集群内访问 Service 的方式&lt;/strong&gt;：ClusterIP 方式。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_cluster-ip.png&quot; alt=&quot;cluster-ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;ClusterIP 也是 Service 的一种 VIP，但这种方式只适用于从集群内访问 Service，例如 从一个 Pod 访问相同集群内的一个 Service。&lt;/p&gt;
&lt;p&gt;ClusterIP 的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ClusterIP 使用的 IP 地址段是&lt;strong&gt;在创建 K8s 集群之前就预留好的&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;ClusterIP &lt;strong&gt;不可路由&lt;/strong&gt;（会在出宿主机之前被拦截，然后 DNAT 成具体的 PodIP）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只能在集群内访问&lt;/strong&gt;（For in-cluster access only）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上，&lt;strong&gt;当创建一个 LoadBalancer 类型的 Service 时，K8s 会为我们自动创建三种类 型的 Service&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LoadBalancer&lt;/li&gt;
&lt;li&gt;NodePort&lt;/li&gt;
&lt;li&gt;ClusterIP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三种类型的 Service 对应着同一组 backend pods。&lt;/p&gt;
&lt;p&gt;我们此次分享的第一部分，K8s 网络基础至此就要结束了，实际上还有很多与 Service 相 关的 K8s 特性，例如 &lt;code&gt;sessionAffinity&lt;/code&gt; 和 &lt;code&gt;externalTrafficPolicy&lt;/code&gt;，但这里就不展开了，有兴趣可以参考附录。&lt;/p&gt;
&lt;h2 id=&quot;2-K8s-Service-负载均衡：Cilium-基于-BPF-XDP-的实现&quot;&gt;&lt;a href=&quot;#2-K8s-Service-负载均衡：Cilium-基于-BPF-XDP-的实现&quot; class=&quot;headerlink&quot; title=&quot;2 K8s Service 负载均衡：Cilium 基于 BPF/XDP 的实现&quot;&gt;&lt;/a&gt;2 K8s Service 负载均衡：Cilium 基于 BPF/XDP 的实现&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Cilium 基于 eBPF/XDP 实现了前面提到的所有类型的 K8s Service&lt;/strong&gt;。实现方式是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在每个 node 上运行一个 &lt;code&gt;cilium-agent&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cilium-agent&lt;/code&gt; 监听 &lt;code&gt;K8s apiserver&lt;/code&gt;，因此能够感知到 K8s 里 Service 的变化；&lt;/li&gt;
&lt;li&gt;根据 Service 的变化动态更新 BPF 配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/cilium_bpf-lb-layers.png&quot; alt=&quot;bpf-lb-layers&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，Service 的实现由两个主要部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行在 socket 层的 BPF 程序&lt;/li&gt;
&lt;li&gt;运行在 tc/XDP 层的 BPF 程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两者共享 &lt;code&gt;service map&lt;/code&gt; 等资源，其中存储了 service 及其 backend pods 的映射关系。&lt;/p&gt;
&lt;h3 id=&quot;2-1-Socket-层负载均衡（东西向流量）&quot;&gt;&lt;a href=&quot;#2-1-Socket-层负载均衡（东西向流量）&quot; class=&quot;headerlink&quot; title=&quot;2.1 Socket 层负载均衡（东西向流量）&quot;&gt;&lt;/a&gt;2.1 Socket 层负载均衡（东西向流量）&lt;/h3&gt;&lt;p&gt;Socket 层 BPF 负载均衡负责处理&lt;strong&gt;集群内的东西向流量&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;p&gt;实现方式是：&lt;strong&gt;将 BPF 程序 attach 到 socket 的系统调用 hooks，使客户端直接和后端 pod 建连和通信&lt;/strong&gt;，如下图所示，这里能 hook 的系统调用包括 &lt;code&gt;connect()&lt;/code&gt;、&lt;code&gt;sendmsg()&lt;/code&gt;、 &lt;code&gt;recvmsg()&lt;/code&gt;、&lt;code&gt;getpeername()&lt;/code&gt;、&lt;code&gt;bind()&lt;/code&gt; 等，&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_e-w-lb.png&quot; alt=&quot;e-w-lb&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里的一个问题是，&lt;strong&gt;K8s 使用的还是 cgroup v1，但这个功能需要使用 v2&lt;/strong&gt;，而由于 兼容性问题，v2 完全替换 v1 还需要很长时间。所以我们目前所能做的就是 支持 v1 和 v2 的混合模式。这也是为什么 &lt;code&gt;Cilium&lt;/code&gt; 会 mount 自己的 &lt;code&gt;cgroup v2 instance&lt;/code&gt; 的原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cilium mounts cgroup v2, attaches BPF to root cgroup. Hybrid use works well for root v2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体到实现上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connect + sendmsg&lt;/code&gt; 做&lt;strong&gt;正向&lt;/strong&gt;变换（translation）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recvmsg + getpeername&lt;/code&gt; 做&lt;strong&gt;反向&lt;/strong&gt;变换，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个变换或转换是&lt;strong&gt;基于 socket structure 的，此时还没有创建 packet&lt;/strong&gt;，因此&lt;strong&gt;不存在 packet 级别的 NAT！&lt;/strong&gt;目前已经支持 TCP/UDP v4/v6, v4-in-v6。&lt;strong&gt;应用对此是无感知的，它以为自己连接到的还是 Service IP，但其实是 PodIP&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;查找后端-pods&quot;&gt;&lt;a href=&quot;#查找后端-pods&quot; class=&quot;headerlink&quot; title=&quot;查找后端 pods&quot;&gt;&lt;/a&gt;查找后端 pods&lt;/h4&gt;&lt;p&gt;Service lookup &lt;strong&gt;不一定能选到所有的 backend pods&lt;/strong&gt;（scoped lookup），我们将 backend pods 拆成不同的集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样设计的好处&lt;/strong&gt;：可以根据&lt;strong&gt;流量类型&lt;/strong&gt;，例如是来自集群内还是集群外（ internal/external），&lt;strong&gt;来选择不同的 backends&lt;/strong&gt;。例如，如果是到达 node 的 external traffic，我们可以限制它只能选择本机上的 backend pods，这样相比于转发到其他 node 上的 backend 就少了一跳。&lt;/p&gt;
&lt;p&gt;另外，还支持通配符（wildcard）匹配，这样就能将 Service 暴露到 localhost 或者 loopback 地址，能在宿主机 netns 访问 Service。但这种方式不会将 Service 暴露到宿 主机外面。&lt;/p&gt;
&lt;h4 id=&quot;好处&quot;&gt;&lt;a href=&quot;#好处&quot; class=&quot;headerlink&quot; title=&quot;好处&quot;&gt;&lt;/a&gt;好处&lt;/h4&gt;&lt;p&gt;显然，这种 &lt;strong&gt;socket 级别的转换是非常高效和实用的&lt;/strong&gt;，它可以直接将客户端 pod 连 接到某个 backend pod，与 kube-proxy 这样的实现相比，转发路径少了好几跳。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;bind&lt;/code&gt; BPF 程序在 NodePort 冲突时会&lt;strong&gt;直接拒绝应用的请求&lt;/strong&gt;，因此相比产生流 量（packet）然后在后面的协议栈中被拒绝，bind 这里要更加高效，&lt;strong&gt;因为此时 流量（packet）都还没有产生&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对这一功能至关重要的两个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bpf_get_socket_cookie()&lt;/code&gt;&lt;br&gt;主要用于 UDP sockets，我们希望每个 UDP flow 都能选中相同的 backend pods。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bpf_get_netns_cookie()&lt;/code&gt;&lt;br&gt;用在两个地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于区分 &lt;code&gt;host netns&lt;/code&gt; 和 &lt;code&gt;pod netns&lt;/code&gt;，例如检测到在 &lt;code&gt;host netns&lt;/code&gt; 执行 bind 时，直接拒绝（reject）；&lt;/li&gt;
&lt;li&gt;用于 &lt;code&gt;serviceSessionAffinity&lt;/code&gt;，实现在某段时间内永远选择相同的 backend pods。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 &lt;code&gt;cgroup v2 不感知 netns&lt;/code&gt;，因此在这个 context 中我们没用 Pod 源 IP 信 息，通过这个 helper 能让它感知到源 IP，并以此作为它的 &lt;code&gt;source identifier&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-2-TC-amp-XDP-层负载均衡（南北向流量）&quot;&gt;&lt;a href=&quot;#2-2-TC-amp-XDP-层负载均衡（南北向流量）&quot; class=&quot;headerlink&quot; title=&quot;2.2 TC &amp;amp; XDP 层负载均衡（南北向流量）&quot;&gt;&lt;/a&gt;2.2 TC &amp;amp; XDP 层负载均衡（南北向流量）&lt;/h3&gt;&lt;p&gt;第二种是进出集群的流量，称为南北向流量，在宿主机 tc 或 XDP hook 里处理。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_n-s-lb.png&quot; alt=&quot;n-s-lb&quot;&gt;&lt;/p&gt;
&lt;p&gt;BPF 做的事情，将入向流量转发到后端 Pod，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 Pod 在本节点，做 DNAT；&lt;/li&gt;
&lt;li&gt;如果在其他节点，还需要做 SNAT 或者 DSR。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;这些都是 packet 级别的操作&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-3-XDP-相关优化&quot;&gt;&lt;a href=&quot;#2-3-XDP-相关优化&quot; class=&quot;headerlink&quot; title=&quot;2.3 XDP 相关优化&quot;&gt;&lt;/a&gt;2.3 XDP 相关优化&lt;/h3&gt;&lt;p&gt;在引入 XDP 支持时，为了使 context 的抽象更加通用，我们做了很多事情。下面就其中的 一些展开讨论。&lt;/p&gt;
&lt;h4 id=&quot;BPF-XDP-context-通用化&quot;&gt;&lt;a href=&quot;#BPF-XDP-context-通用化&quot; class=&quot;headerlink&quot; title=&quot;BPF/XDP context 通用化&quot;&gt;&lt;/a&gt;BPF/XDP context 通用化&lt;/h4&gt;&lt;p&gt;DNAT/SNAT engine, DSR, conntrack 等等都是在 tc BPF 里实现的。 BPF 代码中用 context 结构体传递数据包信息。&lt;/p&gt;
&lt;p&gt;支持 XDP 时遇到的一个问题是：到底是将 context 抽象地更通用一些，还是直接实现一个 支持 XDP 的最小子集。我们最后是花大力气重构了以前几乎所有的 BPF 代码，来使得它更 加通用。好处是共用一套代码，这样对代码的优化同时适用于 TC 和 XDP 逻辑。&lt;/p&gt;
&lt;p&gt;下面是一个具体例子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctx&lt;/code&gt; 是一个通用抽象，具体是什么类型和 include 的头文件有关，基于 cxt 可以同时处 理 tc BPF 和 XDP BPF 逻辑，&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_generic-code.png&quot; alt=&quot;generic-code&quot;&gt;&lt;/p&gt;
&lt;p&gt;例如对于 XDP 场景，编译时这些宏会被相应的 XDP 实现替换掉：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_context-specific-code.png&quot; alt=&quot;context-specific-code&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;内联汇编：绕过编译器自动优化&quot;&gt;&lt;a href=&quot;#内联汇编：绕过编译器自动优化&quot; class=&quot;headerlink&quot; title=&quot;内联汇编：绕过编译器自动优化&quot;&gt;&lt;/a&gt;内联汇编：绕过编译器自动优化&lt;/h4&gt;&lt;p&gt;我们遇到的另一个问题是：tc BPF 中已经为 skb 实现了很多的 helper 函数，由于共用一 套抽象，因此现在需要为 XDP 实现对应的一套函数集。这些 helpers 都是 inline 函数， 而 LLVM 会对 inline 函数的自动优化会导致接下来校验器（BPF verifier）失败。&lt;/p&gt;
&lt;p&gt;我们的解决方式是用 &lt;strong&gt;inline asm（内联汇编）来绕过这个问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个具体例子：&lt;code&gt;xdp_load_bytes()&lt;/code&gt;，使用下面这段等价的汇编代码，才能让 verifier 认出来：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_inline-asm.png&quot; alt=&quot;inline-asm&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;避免在用户侧使用-generic-XDP&quot;&gt;&lt;a href=&quot;#避免在用户侧使用-generic-XDP&quot; class=&quot;headerlink&quot; title=&quot;避免在用户侧使用 generic XDP&quot;&gt;&lt;/a&gt;避免在用户侧使用 generic XDP&lt;/h4&gt;&lt;p&gt;5.6 内核对 XDP 来说是一个里程碑式的版本（但可能不会是一个 LTS 版本），这个版本使得 &lt;strong&gt;XDP 在公有云上大规模可用了&lt;/strong&gt;，例如 AWS ENA 和 Azure &lt;code&gt;hv_netvsc&lt;/code&gt; 驱动。 但如果想跨平台使用 XDP，那你只应该使用最基本的一些 API，例如 XDP_PASS/DROP/TX 等等。&lt;/p&gt;
&lt;p&gt;Cilium 在用户侧只使用 native XDP（only supports native XDP on user side）， 我们也用 Generic XDP，但目前只限于 CI 等场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么我们避免在用户侧使用 generic XDP 呢&lt;/strong&gt;？因为这套 LB 逻辑会运行在集群内的 每个 node 上，目前 linearize skb 以及 bypass GRO 会增加太大的 overhead。&lt;/p&gt;
&lt;h4 id=&quot;自定义内存操作函数&quot;&gt;&lt;a href=&quot;#自定义内存操作函数&quot; class=&quot;headerlink&quot; title=&quot;自定义内存操作函数&quot;&gt;&lt;/a&gt;自定义内存操作函数&lt;/h4&gt;&lt;p&gt;现在回到加载和存储字节相关的辅助函数（load and store bytes helpers）。&lt;/p&gt;
&lt;p&gt;查看 BPF 反汇编代码时，发现内置函数会执行字节级别（byte-wise）的一些操作，因此我们实现了&lt;strong&gt;自己优化过的 &lt;code&gt;mem{cpy,zero,cmp,move}()&lt;/code&gt; 函数&lt;/strong&gt;。这一点做起来还是比较容 易的，因为 &lt;strong&gt;LLVM 对栈外数据（non-stack data）没有上下文信息&lt;/strong&gt;，例如 packet data 、map data，因而它无法准确地知道底层的架构是否支持高效的非对齐访问（unaligned access）。&lt;/p&gt;
&lt;p&gt;另外，在基准测试中我们发现，&lt;strong&gt;大流量的场景下，&lt;code&gt;bpf_ktime_get_ns()&lt;/code&gt; 在 XDP 中的开 销非常大&lt;/strong&gt;，因此我们将 clock source 变成可选的，Cilium 启动时会执行检查，如果内 核支持，就&lt;strong&gt;自动切换到 &lt;code&gt;bpf_jiffies64()&lt;/code&gt;&lt;/strong&gt;（精度更低，但 conntrack 不需要那么高的 精度），这使得转发性能增加了大约 &lt;code&gt;1.1Mpps&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;cb-control-buffer&quot;&gt;&lt;a href=&quot;#cb-control-buffer&quot; class=&quot;headerlink&quot; title=&quot;cb (control buffer)&quot;&gt;&lt;/a&gt;cb (control buffer)&lt;/h4&gt;&lt;p&gt;tc BPF 中大量使用 &lt;code&gt;skb-&amp;gt;cb[]&lt;/code&gt; 来传递数据，显然，XDP 中也是没有这个东西的。&lt;/p&gt;
&lt;p&gt;为了在 XDP 中传递数据，我们最开始使用的是 &lt;code&gt;xdp_adjust_meta()&lt;/code&gt;，但有两个缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;missing driver support&lt;/li&gt;
&lt;li&gt;high rate of cache-misses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;后来换成 per-CPU scratch map&lt;/strong&gt;（每个 CPU 独立的、内容可随意修改的 map）, 增加了大约 &lt;code&gt;1.2Mpps&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;bpf-map-update-elem&quot;&gt;&lt;a href=&quot;#bpf-map-update-elem&quot; class=&quot;headerlink&quot; title=&quot;bpf_map_update_elem()&quot;&gt;&lt;/a&gt;bpf_map_update_elem()&lt;/h4&gt;&lt;p&gt;在 fast path 中有很多 &lt;code&gt;bpf_map_update_elem()&lt;/code&gt; 调用，触发了 bucket spinlock。&lt;/p&gt;
&lt;p&gt;如果流量来自多个 CPU，这里可以优化的是：先检查一下是否需要更新（这一步不需要加锁 ），如果原来已经存在，并且需要更新的值并没有变，那就直接返回，&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_bpf_map_update_ele.png&quot; alt=&quot;bpf_map_update_ele&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;bpf-fib-lookup&quot;&gt;&lt;a href=&quot;#bpf-fib-lookup&quot; class=&quot;headerlink&quot; title=&quot;bpf_fib_lookup()&quot;&gt;&lt;/a&gt;bpf_fib_lookup()&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bpf_fib_lookup()&lt;/code&gt; 开销非常大，但在 XDP 中，例如 hairpin LB 场景，是不需要这个 函数的，可以在编译时去掉。我们在测试环境的结果显示可以提高 &lt;code&gt;1.5Mpps&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;静态-key&quot;&gt;&lt;a href=&quot;#静态-key&quot; class=&quot;headerlink&quot; title=&quot;静态 key&quot;&gt;&lt;/a&gt;静态 key&lt;/h4&gt;&lt;p&gt;作为这次分享的最后一个例子，不要对不确定的 LLVM 行为做任何假设。&lt;/p&gt;
&lt;p&gt;我们在 BPF map 的基础上有大量的尾调用，它们有静态的 keys，能够在编译期间确 定 key 的大小。我们还实现了一个内联汇编来做静态的尾递归调用，保证 LLVM 不会出现 尾调用相关的问题。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tail_call_static.png&quot; alt=&quot;tail_call_static&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-4-XDP-转发性能&quot;&gt;&lt;a href=&quot;#2-4-XDP-转发性能&quot; class=&quot;headerlink&quot; title=&quot;2.4 XDP 转发性能&quot;&gt;&lt;/a&gt;2.4 XDP 转发性能&lt;/h3&gt;&lt;p&gt;我们在 K8s 集群测试了 &lt;strong&gt;XDP 对 K8s Service 的转发&lt;/strong&gt;。用 pktgen 生成 &lt;code&gt;10Mpps&lt;/code&gt; 的入向处理流量，然后让 node 转发到位于其他节点的 backend pods。来看下几种不同的 负载均衡实现分别能处理多少。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_fwd-performance.png&quot; alt=&quot;fwd-performance&quot;&gt;&lt;/p&gt;
&lt;p&gt;由上图可以看出，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cilium XDP 模式&lt;/strong&gt;：能够处理全部的 &lt;code&gt;10Mpps&lt;/code&gt; 入向流量，将它们转发到其他节点上的 backend pods。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cilium TC 模式&lt;/strong&gt;：可以处理大约 &lt;code&gt;2.8Mpps&lt;/code&gt;，虽然它的处理逻辑和 Cilium XDP 是类似的（除了 BPF helpers）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kube-proxy iptables 模式&lt;/strong&gt;：能处理 &lt;code&gt;2.4Mpps&lt;/code&gt;，这是 K8s 的默认 Service 负载均衡实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kube-proxy IPVS 模式&lt;/strong&gt;：性能更差一些，因为它的 &lt;strong&gt;per-packet overhead 更大一些&lt;/strong&gt;，这里测试的 Service 只对应一个 backend pod。当 Service 数量更多时， &lt;strong&gt;IPVS 的可扩展性更好&lt;/strong&gt;，相比 &lt;code&gt;iptables&lt;/code&gt; 模式的 &lt;code&gt;kube-proxy&lt;/code&gt; 性能会更好，但仍然没 法跟我们基于 TC BPF 和 XDP 的实现相比（no comparison at all）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;softirq 开销&lt;/strong&gt;也是类似的，如下图所示，流量从 1Mpps 到 2Mpps 再到 4Mpps 时， XDP 模式下的 softirq 开销都远小于其他几种模式。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_fwd-performance-cpu.png&quot; alt=&quot;fwd-performance-cpu&quot;&gt;&lt;/p&gt;
&lt;p&gt;特别是 pps 到达某个临界点时，TC 和 Netfilter 实现中 &lt;strong&gt;softirq 开销会大到饱和&lt;/strong&gt; —— 占用几乎全部 CPU。&lt;/p&gt;
&lt;h2 id=&quot;3-新的-BPF-内核扩展&quot;&gt;&lt;a href=&quot;#3-新的-BPF-内核扩展&quot; class=&quot;headerlink&quot; title=&quot;3 新的 BPF 内核扩展&quot;&gt;&lt;/a&gt;3 新的 BPF 内核扩展&lt;/h2&gt;&lt;p&gt;下面介绍几个新的 BPF 内核扩展，主要是 Cilium 相关的场景。&lt;/p&gt;
&lt;h3 id=&quot;3-1-避免穿越内核协议栈&quot;&gt;&lt;a href=&quot;#3-1-避免穿越内核协议栈&quot; class=&quot;headerlink&quot; title=&quot;3.1 避免穿越内核协议栈&quot;&gt;&lt;/a&gt;3.1 避免穿越内核协议栈&lt;/h3&gt;&lt;p&gt;主机收到的包，当其 backend 是本机上的 pod 时，或者包是本机产生的，目的端是一个本 机端口，这个包需要跨越不同的 netns，例如从宿主机的 netns 进入到容 器的 netns，&lt;strong&gt;现在 Cilium 的做法是，将包送到内核协议栈&lt;/strong&gt;，如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_new-bpf-ext.png&quot; alt=&quot;new-bpf-ext&quot;&gt;&lt;/p&gt;
&lt;p&gt;将包送到内核协议栈有两个原因（需要）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TPROXY 需要由内核协议栈完成：我们目前的 L7 proxy 功能会用到这个功能，&lt;/li&gt;
&lt;li&gt;K8s 默认安装了一些 iptables rule，用来检测&lt;strong&gt;从连接跟踪的角度看是非法的连接&lt;/strong&gt;（‘invalid’ connections on asymmetric paths），然后 netfilter 会 drop 这些连接 的包。我们最开始时曾尝试将包从宿主机 tc 层直接 redirect 到 veth，但应答包却要 经过协议栈，因此形成了&lt;strong&gt;非对称路径&lt;/strong&gt;，流量被 drop。因此目前进和出都都要经过协议栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但这样带来两个问题，如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_new-bpf-ext-3.png&quot; alt=&quot;new-bpf-ext-3&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pod 的出向流量在进入协议栈后，在 socket buffer 层会丢掉 socket 信息（&lt;code&gt;skb-&amp;gt;sk&lt;/code&gt; gets orphaned at &lt;code&gt;ip_rcv_core()&lt;/code&gt;），这导致包从主机设备发出去时， 我们无法在 FQ leaf 获得 TCP 反压（TCP back-pressure）。&lt;/li&gt;
&lt;li&gt;转发和处理都是 packet 级别的，因此有 per-packet overhead。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不久之前，&lt;strong&gt;BPF TPROXY 已经合并到内核，因此最后一个真正依赖 Netfilter 的东西已经 解决了。因此我们现在可以在 TC 层做全部逻辑处理了，无需进入内核协议栈&lt;/strong&gt;，如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_new-bpf-ext-2.png&quot; alt=&quot;new-bpf-ext&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-Redirection-helpers&quot;&gt;&lt;a href=&quot;#3-2-Redirection-helpers&quot; class=&quot;headerlink&quot; title=&quot;3.2 Redirection helpers&quot;&gt;&lt;/a&gt;3.2 Redirection helpers&lt;/h3&gt;&lt;p&gt;两个用于 redirection 的 TC BPF helpers：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bpf_redirect_neigh()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bpf_redirect_peer()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;从 IPVLAN driver 中借鉴了一些理念，实现到了 veth 驱动中&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;3-2-1-Pod-egress：bpf-redirect-neigh&quot;&gt;&lt;a href=&quot;#3-2-1-Pod-egress：bpf-redirect-neigh&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 Pod egress：bpf_redirect_neigh()&quot;&gt;&lt;/a&gt;3.2.1 Pod egress：&lt;code&gt;bpf_redirect_neigh()&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于 pod egress 流量，我们会填充 src 和 dst mac 地址，这和原来 neighbor subsystem 做的事情相同；此外，我们还可以保留 skb 的 socket。这些都是由 &lt;code&gt;bpf_redirect_neigh()&lt;/code&gt; 来完成的：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper-2.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;p&gt;整个过程大致实现如下，在 veth 主机端的 ingress（对应 pod 的 egress）调用这 个方法的时候：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先会查找路由，&lt;code&gt;ip_route_output_flow()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 skb 和匹配的路由条目（dst entry）关联起来，&lt;code&gt;skb_dst_set()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后调用到 neighbor 子系统，&lt;code&gt;ip_finish_output2()&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;填充 neighbor 信息，即 src/dst MAC 地址&lt;/li&gt;
&lt;li&gt;保留 &lt;code&gt;skb-&amp;gt;sk&lt;/code&gt; 信息，因此物理网卡上的 qdisc 都能访问到这个字段&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这就是 pod 出向的处理过程。&lt;/p&gt;
&lt;h4 id=&quot;3-2-2-Pod-ingress：bpf-redirect-peer&quot;&gt;&lt;a href=&quot;#3-2-2-Pod-ingress：bpf-redirect-peer&quot; class=&quot;headerlink&quot; title=&quot;3.2.2 Pod ingress：bpf_redirect_peer()&quot;&gt;&lt;/a&gt;3.2.2 Pod ingress：&lt;code&gt;bpf_redirect_peer()&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;入向流量，&lt;strong&gt;会有快速 netns 切换&lt;/strong&gt;，从宿主机 netns 直接进入容器的 netns。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper-3.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是由 &lt;code&gt;bpf_redirect_peer()&lt;/code&gt; 完成的。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper-4.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;p&gt;在主机设备的 ingress 执行这个 helper 的时候，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先会获取对应的 veth pair，&lt;code&gt;dev = ops-&amp;gt;ndo_get_peer_dev(dev)&lt;/code&gt;，然后获取 veth 的对端（在另一个 netns）&lt;/li&gt;
&lt;li&gt;然后，&lt;code&gt;skb_scrub_packet()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置包的 dev 为容器内的 dev，&lt;code&gt;skb-&amp;gt;dev = dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新调度一次，&lt;code&gt;sch_handle_ingress()&lt;/code&gt;，这不会进入 CPU 的 backlog queue:&lt;ol&gt;
&lt;li&gt;goto another_round&lt;/li&gt;
&lt;li&gt;no CPU backlog queue&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;3-2-3-veth-to-veth&quot;&gt;&lt;a href=&quot;#3-2-3-veth-to-veth&quot; class=&quot;headerlink&quot; title=&quot;3.2.3 veth to veth&quot;&gt;&lt;/a&gt;3.2.3 veth to veth&lt;/h4&gt;&lt;p&gt;同宿主机上的两个 Pod 之间通信时，这两个 helper 也非常有用。 因为我们已经在主机 netns 的 TC ingress 层了，因此能直接将其 redirect 到另一个容 器的 ingress 路径。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper-5.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里比较好的一点是，需要针对老版本内核所做的兼容性非常少；因此，我们只需要在启动的 时候检测内核是否有相应的 helper，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有，就用 redirection 功能；&lt;/li&gt;
&lt;li&gt;如果没有，就直接返回 TC_OK，走传统的内核协议栈方式，经过内核邻居子系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持这些功能无需对原有的 BPF datapath 进行大规模重构。&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_tc-redir-helper-6.png&quot; alt=&quot;tc-redir-helper&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-4-BPF-redirection-性能&quot;&gt;&lt;a href=&quot;#3-2-4-BPF-redirection-性能&quot; class=&quot;headerlink&quot; title=&quot;3.2.4 BPF redirection 性能&quot;&gt;&lt;/a&gt;3.2.4 BPF redirection 性能&lt;/h4&gt;&lt;p&gt;下面看下性能。&lt;/p&gt;
&lt;p&gt;TCP stream 场景，相比 Cilium baseline，转发带宽增加了 &lt;code&gt;1.3Gbps&lt;/code&gt;，接近线速：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_new-ext-perf.png&quot; alt=&quot;new-ext-perf&quot;&gt;&lt;/p&gt;
&lt;p&gt;更有趣的是 TCP_RR 的场景，以 transactions/second 衡量，提升了 &lt;code&gt;2.9&lt;/code&gt; 倍，接近最 大性能：&lt;br&gt;&lt;img src=&quot;/images/k8s/cilium_new-ext-perf-2.png&quot; alt=&quot;new-ext-perf&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-结束语&quot;&gt;&lt;a href=&quot;#4-结束语&quot; class=&quot;headerlink&quot; title=&quot;4 结束语&quot;&gt;&lt;/a&gt;4 结束语&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/cilium_try-out.png&quot; alt=&quot;try-out&quot;&gt;&lt;/p&gt;
&lt;p&gt;附录: &lt;a href=&quot;/images/k8s/plumbers_2020_cilium_load_balancer.pdf&quot;&gt;plumbers_2020_cilium_load_balancer.pdf&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者：ArthurChiao 原文：&lt;a href=&quot;https://linuxplumbersconf.org/event/7/contributions/674/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://linuxplumbersconf.org/event/7/contributions/674/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;文章介绍了 K8s 的一些核心网络模型和设计、&lt;code&gt;Cilium&lt;/code&gt; 对 &lt;code&gt;K8s Service&lt;/code&gt; 的实现、&lt;code&gt;BPF/XDP&lt;/code&gt; 性能优化，以及他们从中得到的一些实践经验，全是干货。&lt;/p&gt;
&lt;p&gt;去年我们也参加了这个大会（LPC），并做了题为 &lt;a href=&quot;https://linuxplumbersconf.org/event/4/contributions/458/&quot;&gt;Making the Kubernetes Service Abstraction Scale using eBPF&lt;/a&gt; 的分享。 今天的内容是去年内容的延续，具体分为三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 网络模型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cilium&lt;/code&gt; 对 &lt;code&gt;K8s Service&lt;/code&gt; 负载均衡的实现，以及我们的一些实践经验&lt;/li&gt;
&lt;li&gt;一些新的 &lt;code&gt;BPF&lt;/code&gt; 内核扩展&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://team.jiunile.com/categories/Kubernetes/"/>
    
      <category term="Cilium" scheme="http://team.jiunile.com/categories/Kubernetes/Cilium/"/>
    
      <category term="负载均衡" scheme="http://team.jiunile.com/categories/Kubernetes/Cilium/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="cilium" scheme="http://team.jiunile.com/tags/cilium/"/>
    
      <category term="service" scheme="http://team.jiunile.com/tags/service/"/>
    
      <category term="bpf" scheme="http://team.jiunile.com/tags/bpf/"/>
    
      <category term="xdp" scheme="http://team.jiunile.com/tags/xdp/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 策略引擎工具 - Kyverno</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-kyverno.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-kyverno.html</id>
    <published>2020-11-23T14:00:00.000Z</published>
    <updated>2020-11-23T09:10:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Kubernetes 已经能够允许人们大规模地运行分布式应用程序来彻底改变云原生生态系统。虽然 Kubernetes 是一个功能丰富、健壮的容器编排平台，但它也有自己的一套复杂性。与多个团队一起大规模管理 Kubernetes 并不容易，而且要确保人们做正确的事情并且不越界是很难管理的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kyverno/kyverno&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kyverno&lt;/a&gt; 正是解决这个问题的合适工具。它是一个开源的 Kubernetes 原生策略引擎，可以帮助您使用简单的 Kubernetes manifests 定义策略。它可以验证、修改和生成 Kubernetes 资源。因此，它允许组织定义和执行策略，以便开发人员和管理员保持一定的标准。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Kyverno-是如何工作的？&quot;&gt;&lt;a href=&quot;#Kyverno-是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;Kyverno 是如何工作的？&quot;&gt;&lt;/a&gt;Kyverno 是如何工作的？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Kyverno&lt;/code&gt; 通过使用动态准入控制器来工作，该控制器检查您通过 &lt;code&gt;Kubectl&lt;/code&gt; 发送到 &lt;code&gt;Kube API&lt;/code&gt; 服务端的每个请求。如果请求与策略匹配，&lt;code&gt;Kyverno&lt;/code&gt; 就应用它。否则，它将使用已定义的消息拒绝请求。&lt;/p&gt;
&lt;p&gt;所以这使得 &lt;code&gt;Kyverno&lt;/code&gt; 能够提供如下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 CPU 和内存限制。&lt;/li&gt;
&lt;li&gt;确保用户不更改默认的网络策略。&lt;/li&gt;
&lt;li&gt;检查资源名称是否与特定模式匹配。&lt;/li&gt;
&lt;li&gt;确保特定的资源总是包含特定的标签。&lt;/li&gt;
&lt;li&gt;拒绝对特定资源的删除和更改。&lt;/li&gt;
&lt;li&gt;如果镜像标签是 &lt;code&gt;latest&lt;/code&gt; 将自动更改 &lt;code&gt;imagePullPolicy&lt;/code&gt; 为 &lt;code&gt;Always&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为每个新的命名空间生成一个默认的网络策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Kyverno&lt;/code&gt; 使用自定义资源定义来定义策略，编写策略就像使用 kubectl 应用它们一样简单。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kyverno&lt;/code&gt; 提供了三个主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证（Validation）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变更（Mutation）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成（Generation）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们看一下它们各自的示例清单。&lt;/p&gt;
&lt;h2 id=&quot;Validation&quot;&gt;&lt;a href=&quot;#Validation&quot; class=&quot;headerlink&quot; title=&quot;Validation&quot;&gt;&lt;/a&gt;Validation&lt;/h2&gt;&lt;p&gt;一个很好的用例是确保所有的 pods 都设置了资源请求和限制。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kyverno.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterPolicy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; check-resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  validationFailureAction:&lt;/span&gt; enforce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; check-pod-resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      match:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          kinds:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      validate:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        message:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;CPU and memory resource requests and limits are required&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        pattern:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                  limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;?*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;?*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                  requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;?*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;?*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大多数配置都是比较清楚明白的，&lt;code&gt;validationFailureAction&lt;/code&gt; 申明是强制执行（通过使用 &lt;code&gt;enforcement&lt;/code&gt; ）还是只审计它(通过 &lt;code&gt;audit&lt;/code&gt; )并报告违规情况。&lt;/p&gt;
&lt;h2 id=&quot;Mutation&quot;&gt;&lt;a href=&quot;#Mutation&quot; class=&quot;headerlink&quot; title=&quot;Mutation&quot;&gt;&lt;/a&gt;Mutation&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Mutation&lt;/strong&gt; 意味着如果匹配到满足特定的场景就变更资源属性。一个很好的例子是，如果镜像标签是最新的，那么将 &lt;code&gt;imagePullPolicy&lt;/code&gt; 更改为 &lt;code&gt;Always&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kyverno.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterPolicy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; image-pull-policy-always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; image-pull-policy-latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      match:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          kinds:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      mutate:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        overlay:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;              -&lt;/span&gt; (image): &lt;span class=&quot;string&quot;&gt;&quot;*:latest&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                imagePullPolicy:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Always&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Generate&quot;&gt;&lt;a href=&quot;#Generate&quot; class=&quot;headerlink&quot; title=&quot;Generate&quot;&gt;&lt;/a&gt;Generate&lt;/h2&gt;&lt;p&gt;顾名思义，针对特定事件生成资源。例如，如果有人创建了一个新的名称空间，我们可能希望执行默认的网络策略。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kyverno.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterPolicy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;default-deny&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    match:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      resources:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        kinds:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; Namespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    exclude:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      namespaces:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-system&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-public&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kyverno&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    generate:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      kind:&lt;/span&gt; NetworkPolicy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; default-deny-all-traffic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      namespace:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123;request.object.metadata.namespace&amp;#125;&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      data:&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          podSelector:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          policyTypes:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; Ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; Egress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;体验一把&quot;&gt;&lt;a href=&quot;#体验一把&quot; class=&quot;headerlink&quot; title=&quot;体验一把&quot;&gt;&lt;/a&gt;体验一把&lt;/h2&gt;&lt;p&gt;现在让我们亲自动手，看看 &lt;code&gt;Kyverno&lt;/code&gt; 的行为。我们将安装 &lt;code&gt;Kyverno&lt;/code&gt;，然后应用验证策略来检查特定的标签。如果标签不存在，&lt;code&gt;Kyverno&lt;/code&gt; 将拒绝请求。否则，它将应用它。&lt;/p&gt;
&lt;h3 id=&quot;安装-Kyverno&quot;&gt;&lt;a href=&quot;#安装-Kyverno&quot; class=&quot;headerlink&quot; title=&quot;安装 Kyverno&quot;&gt;&lt;/a&gt;安装 Kyverno&lt;/h3&gt;&lt;p&gt;安装 &lt;code&gt;Kyverno&lt;/code&gt; 很简单。你可以应用 GitHub 上的 &lt;code&gt;Kyverno Kubernetes manifest&lt;/code&gt;，或者安装最新的 &lt;code&gt;helm chart&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;使用-manifest&quot;&gt;&lt;a href=&quot;#使用-manifest&quot; class=&quot;headerlink&quot; title=&quot;使用 manifest&quot;&gt;&lt;/a&gt;使用 manifest&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kyverno/kyverno/master/definitions/release/install.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用-helm-chart&quot;&gt;&lt;a href=&quot;#使用-helm-chart&quot; class=&quot;headerlink&quot; title=&quot;使用 helm chart&quot;&gt;&lt;/a&gt;使用 helm chart&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;helm repo add kyverno https://kyverno.github.io/kyverno/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl create ns kyverno&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;helm install kyverno --namespace kyverno kyverno/kyverno&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;检查我们是否成功安装了 &lt;code&gt;Kyverno&lt;/code&gt;，列出 &lt;code&gt;Kyverno&lt;/code&gt; 命名空间中的所有资源：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get all -n kyverno&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                           READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod/kyverno-5f7769d697-x8lkj   0/1     Running   0          21s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                  TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service/kyverno-svc   ClusterIP   10.96.167.8   &amp;lt;none&amp;gt;        443/TCP   21s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                      READY   UP-TO-DATE   AVAILABLE   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deployment.apps/kyverno   0/1     1            0           21s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                                 DESIRED   CURRENT   READY   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replicaset.apps/kyverno-5f7769d697   1         1         0       21s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;应用策略&quot;&gt;&lt;a href=&quot;#应用策略&quot; class=&quot;headerlink&quot; title=&quot;应用策略&quot;&gt;&lt;/a&gt;应用策略&lt;/h3&gt;&lt;p&gt;让我们应用一个策略来确保所有 &lt;code&gt;pods&lt;/code&gt; 都应该包含一个名为 &lt;code&gt;app&lt;/code&gt; 的标签。创建名为&lt;code&gt;require-app-label.yaml&lt;/code&gt; 的文件，其内容如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kyverno.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterPolicy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; require-app-label&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  validationFailureAction:&lt;/span&gt; enforce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; check-for-app-label&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    match:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        kinds:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    validate:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      message:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;label `app` is required&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      pattern:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            app:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;?*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果您查看 YAML，会看到有一个匹配部分，其中包含我们应该匹配的资源类型。在这个场景中，我们看到一个 pod。&lt;code&gt;validate&lt;/code&gt; 部分定义了验证失败时应该输出的消息，以及定义需要匹配什么内容的模式。&lt;/p&gt;
&lt;p&gt;由于这是一个 CRD，我们可以直接应用它，得到想要的结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; require-app-label.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;p&gt;让我们创建一个没有标签的 pod，看看我们会得到什么：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl run nginx --image=nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/kyverno_1.gif&quot; alt=&quot;kyverno&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以正如我们所看到的，验证失败的原因如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error from server: admission webhook &lt;span class=&quot;string&quot;&gt;&quot;nirmata.kyverno.resource.validating-webhook&quot;&lt;/span&gt; denied the request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;resource Deployment/default/nginx was blocked due to the following policies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require-app-label:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  autogen-check-for-app-label: &lt;span class=&quot;string&quot;&gt;&#39;Validation error: label `app` is required; Validation rule autogen-check-for-app-label failed at path /spec/template/metadata/labels/app/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这和预期的一样，因为我们还没有提供标签。现在让我们尝试使用标签 &lt;code&gt;name=nginx&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl run nginx --image=nginx --labels=&lt;span class=&quot;string&quot;&gt;&quot;name=nginx&quot;&lt;/span&gt; --generator=run-pod/v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/kyverno_2.gif&quot; alt=&quot;kyverno&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个也失败了，因为 app 标签仍然缺失。让我们用 &lt;code&gt;app=NGINX&lt;/code&gt; 标签创建一个 NGINX pod：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl run nginx --image=nginx --labels=&lt;span class=&quot;string&quot;&gt;&quot;app=nginx&quot;&lt;/span&gt; --generator=run-pod/v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/kyverno_3.gif&quot; alt=&quot;kyverno&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如我们所看到的，pod 已经成功创建。现在，让我们使用 kubectl 来获取 pod 和标签:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod nginx --show-labels&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/kyverno_4.gif&quot; alt=&quot;kyverno&quot;&gt;&lt;/p&gt;
&lt;p&gt;pod 正在运行，并包含 &lt;code&gt;app=nginx&lt;/code&gt; 标签。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Kyverno&lt;/code&gt; 是一款优秀的 “policy-as-code” 工具，它在组织层执行最佳实践方面非常强大。由于它是 kubernets 原生的，所以编写和操作都很简单，不需要专门的开发人员进行维护。&lt;/p&gt;
&lt;p&gt;感谢你的阅读！希望你喜欢这篇文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/better-programming/policy-as-code-on-kubernetes-with-kyverno-b144749f144&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/better-programming/policy-as-code-on-kubernetes-with-kyverno-b144749f144&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Kubernetes 已经能够允许人们大规模地运行分布式应用程序来彻底改变云原生生态系统。虽然 Kubernetes 是一个功能丰富、健壮的容器编排平台，但它也有自己的一套复杂性。与多个团队一起大规模管理 Kubernetes 并不容易，而且要确保人们做正确的事情并且不越界是很难管理的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kyverno/kyverno&quot;&gt;Kyverno&lt;/a&gt; 正是解决这个问题的合适工具。它是一个开源的 Kubernetes 原生策略引擎，可以帮助您使用简单的 Kubernetes manifests 定义策略。它可以验证、修改和生成 Kubernetes 资源。因此，它允许组织定义和执行策略，以便开发人员和管理员保持一定的标准。&lt;/p&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="http://team.jiunile.com/categories/Kubernetes/"/>
    
      <category term="策略" scheme="http://team.jiunile.com/categories/Kubernetes/%E7%AD%96%E7%95%A5/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="policy" scheme="http://team.jiunile.com/tags/policy/"/>
    
      <category term="kyverno" scheme="http://team.jiunile.com/tags/kyverno/"/>
    
  </entry>
  
  <entry>
    <title>探索 Go Trace 包</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-trace.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-trace.html</id>
    <published>2020-11-22T12:00:00.000Z</published>
    <updated>2020-11-21T16:34:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文基于 Go 1.13&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go 为我们提供了一个工具，可以在运行时进行跟踪，并获得程序执行的详细视图。这个工具可以通过在测试中使用标记 &lt;code&gt;-trace&lt;/code&gt; 来启用，可以通过 &lt;code&gt;pprof&lt;/code&gt; 来进行实时跟踪，也可以通过&lt;code&gt;trace&lt;/code&gt; &lt;a href=&quot;https://golang.org/pkg/runtime/trace/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;包&lt;/a&gt;在代码中的任何位置启用。这个工具可以更加强大，因为您可以自定义 traces 来增强它。让我们回顾一下它是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;p&gt;该工具的流程非常简单。每个事件，如内存分配；垃圾回收器的所有阶段；goroutines 在运行、暂停等情况下会被 Go 标准库静态记录，并格式化后显示。然而，在录制开始之前，Go 首先“stops the world”，并对当前的 goroutines 及其状态进行快照。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这将在之后能让 Go 正确地构建每个 goroutine 的生命周期。流程如下:&lt;br&gt;&lt;img src=&quot;/images/go/trace_1.png&quot; alt=&quot;Initialization phase before tracing&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，将收集的事件推送到缓冲区，当达到最大容量时，该缓冲区随后将刷新到完整缓冲区列表。这是此流程的图:&lt;br&gt;&lt;img src=&quot;/images/go/trace_2.png&quot; alt=&quot;Tracing collect events per P&quot;&gt;&lt;/p&gt;
&lt;p&gt;跟踪器现在需要一种将这些跟踪转储到输出的方法。为此，当追踪开始时，Go 会产生一个专用于此的 goroutine。如果可用，该 goroutine 将转储数据，并将把 goroutine 停放到下一个。这是它的一个表示：&lt;br&gt;&lt;img src=&quot;/images/go/trace_3.png&quot; alt=&quot;A dedicated goroutine reads and dump the traces&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在流程非常清晰，所以让我们回顾一下记录的跟踪事件。&lt;/p&gt;
&lt;h2 id=&quot;追踪&quot;&gt;&lt;a href=&quot;#追踪&quot; class=&quot;headerlink&quot; title=&quot;追踪&quot;&gt;&lt;/a&gt;追踪&lt;/h2&gt;&lt;p&gt;生成跟踪后，就可以通过运行命令 &lt;code&gt;go tool trace my-output.out&lt;/code&gt; 来实现可视化。让我们以一些跟踪事件为例：&lt;br&gt;&lt;img src=&quot;/images/go/trace_4.png&quot; alt=&quot;Tracing from go tool&quot;&gt;&lt;/p&gt;
&lt;p&gt;大多数都很简单。与垃圾回收器相关的跟踪位于蓝色跟踪 &lt;code&gt;GC&lt;/code&gt; 下:&lt;br&gt;&lt;img src=&quot;/images/go/trace_5.png&quot; alt=&quot;Traces of the garbage collector&quot;&gt;&lt;/p&gt;
&lt;p&gt;快速回顾：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STW&lt;/code&gt; 是垃圾回收器中的两个 “Stop the World” 阶段。在这两个阶段，goroutines 被停止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GC (空闲)&lt;/code&gt; 是在没有工作要做时标记内存的 goroutine。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MARK ASSIST&lt;/code&gt; 是在分配期间帮助标记内存的 goroutines。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GXX runtime.bgsweep&lt;/code&gt; 是垃圾回收器完成后的内存扫描阶段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GXX runtime.gcBgMarkWorker&lt;/code&gt; 是帮助标记内存的专用后台 goroutines。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，有些追踪事件并不容易理解。让我们回顾一下，以便更好地理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当处理器与线程关联时，将调用 &lt;code&gt;proc start&lt;/code&gt;。当启动新线程或从 syscall 恢复时，就会发生这种情况。&lt;br&gt;&lt;img src=&quot;/images/go/trace_6.png&quot; alt=&quot;trace&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当线程与当前处理器解除关联时，将调用 &lt;code&gt;proc stop&lt;/code&gt;。当线程在 syscall 中被阻塞或线程退出时，就会发生这种情况。&lt;br&gt;&lt;img src=&quot;/images/go/trace_7.png&quot; alt=&quot;trace&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 goroutine 进行系统调用时，将调用 &lt;code&gt;syscall&lt;/code&gt;:&lt;br&gt;&lt;img src=&quot;/images/go/trace_8.png&quot; alt=&quot;trace&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当 goroutine 从 syscall 解除阻止时，将调用 &lt;code&gt;unblock&lt;/code&gt; – 在这种情况下，标签 (&lt;code&gt;sysexit&lt;/code&gt;) 将从被阻塞的通道显示:&lt;br&gt;&lt;img src=&quot;/images/go/trace_9.png&quot; alt=&quot;trace&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟踪可以增强，因为 Go 允许您定义和可视化自己的跟踪以及标准库中的跟踪。&lt;/p&gt;
&lt;h2 id=&quot;用户自定义追踪&quot;&gt;&lt;a href=&quot;#用户自定义追踪&quot; class=&quot;headerlink&quot; title=&quot;用户自定义追踪&quot;&gt;&lt;/a&gt;用户自定义追踪&lt;/h2&gt;&lt;p&gt;我们可以定义的跟踪有两个级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在任务的顶层，有开始和结束。&lt;/li&gt;
&lt;li&gt;在区域的子级别上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctx, task := trace.NewTask(context.Background(), &lt;span class=&quot;string&quot;&gt;&quot;main start&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r := trace.StartRegion(ctx, &lt;span class=&quot;string&quot;&gt;&quot;reading file&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; r.End()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ioutil.ReadFile(&lt;span class=&quot;string&quot;&gt;`n1.txt`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		r := trace.StartRegion(ctx, &lt;span class=&quot;string&quot;&gt;&quot;writing file&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; r.End()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ioutil.WriteFile(&lt;span class=&quot;string&quot;&gt;`n2.txt`&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`42`&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; task.End()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些新的跟踪可以通过菜单用户自定义直接从工具中可视化：&lt;br&gt;&lt;img src=&quot;/images/go/trace_10.png&quot; alt=&quot;Custom task and regions&quot;&gt;&lt;/p&gt;
&lt;p&gt;还可以任意将一些日志记录到任务中:&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctx, task := trace.NewTask(context.Background(), &lt;span class=&quot;string&quot;&gt;&quot;main start&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trace.Log(ctx, &lt;span class=&quot;string&quot;&gt;&quot;category&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;I/O file&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trace.Log(ctx, &lt;span class=&quot;string&quot;&gt;&quot;goroutine&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些日志将在设置任务的 goroutine 下找到：&lt;br&gt;&lt;img src=&quot;/images/go/trace_11.png&quot; alt=&quot;Custom logs in the tracing&quot;&gt;&lt;/p&gt;
&lt;p&gt;还可以通过派生父任务的上下文等将任务嵌入到其他任务中。&lt;/p&gt;
&lt;p&gt;但是，由于 &lt;code&gt;pprof&lt;/code&gt; 的存在，在生产中实时跟踪所有这些事件可能会在收集它们时略微降低性能。&lt;/p&gt;
&lt;h2 id=&quot;性能影响&quot;&gt;&lt;a href=&quot;#性能影响&quot; class=&quot;headerlink&quot; title=&quot;性能影响&quot;&gt;&lt;/a&gt;性能影响&lt;/h2&gt;&lt;p&gt;一个简单的基准测试可以帮助理解跟踪的影响。其中一个将带标志 &lt;code&gt;-trace&lt;/code&gt; 运行，另一个则不带。下面是 &lt;code&gt;ioutil.ReadFile()&lt;/code&gt; 函数的基准测试结果，该函数生成了很多事件:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name         time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReadFiles-8  48.1µs ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name         time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReadFiles-8  63.5µs ± 0%  // with tracing&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，影响约为 ~35%，并且可能因应用程序而异。但是有一些工具（如 StackDriver ），允许在生产环境中进行连续的分析，同时又对应用程序保持较小的开销。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/a-journey-with-go/go-discovery-of-the-trace-package-e5a821743c3c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-discovery-of-the-trace-package-e5a821743c3c&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文基于 Go 1.13&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go 为我们提供了一个工具，可以在运行时进行跟踪，并获得程序执行的详细视图。这个工具可以通过在测试中使用标记 &lt;code&gt;-trace&lt;/code&gt; 来启用，可以通过 &lt;code&gt;pprof&lt;/code&gt; 来进行实时跟踪，也可以通过&lt;code&gt;trace&lt;/code&gt; &lt;a href=&quot;https://golang.org/pkg/runtime/trace/&quot;&gt;包&lt;/a&gt;在代码中的任何位置启用。这个工具可以更加强大，因为您可以自定义 traces 来增强它。让我们回顾一下它是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;p&gt;该工具的流程非常简单。每个事件，如内存分配；垃圾回收器的所有阶段；goroutines 在运行、暂停等情况下会被 Go 标准库静态记录，并格式化后显示。然而，在录制开始之前，Go 首先“stops the world”，并对当前的 goroutines 及其状态进行快照。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="追踪" scheme="http://team.jiunile.com/categories/golang/%E8%BF%BD%E8%B8%AA/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="trace" scheme="http://team.jiunile.com/tags/trace/"/>
    
  </entry>
  
  <entry>
    <title>在 Go 中我应该使用指针还是拷贝结构体？</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-copy-struct-or-pointer.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-copy-struct-or-pointer.html</id>
    <published>2020-11-20T14:00:00.000Z</published>
    <updated>2020-11-19T14:49:22.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;对于许多 Go 开发人员来说，系统地使用指针来共享结构体而不是拷贝本身似乎是性能方面的最佳选择。&lt;/p&gt;
&lt;p&gt;为了理解使用指针而不是拷贝结构体的影响，我们将回顾两个用例。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;用例1：数据密集分配&quot;&gt;&lt;a href=&quot;#用例1：数据密集分配&quot; class=&quot;headerlink&quot; title=&quot;用例1：数据密集分配&quot;&gt;&lt;/a&gt;用例1：数据密集分配&lt;/h2&gt;&lt;p&gt;让我们举一个简单的例子，当你想共享一个结构体的值：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; S &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   a, b, c &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   d, e, f &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   g, h, i &lt;span class=&quot;keyword&quot;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一个基本的结构体，可以通过拷贝或指针共享：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;byCopy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;S&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; S&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      e: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, f: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      g: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, h: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, i: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;byPointer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;S&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;S&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      a: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      e: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, f: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      g: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, h: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, i: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;基于这两种方法，我们现在可以编写两个基准测试，其中一个是通过拷贝结构体传递的：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkMemoryStack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   f, err := os.Create(&lt;span class=&quot;string&quot;&gt;&quot;stack.out&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; f.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err = trace.Start(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s = byCopy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   trace.Stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.StopTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _ = fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%v&quot;&lt;/span&gt;, s.a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一个，非常相似，通过指针传递：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkMemoryHeap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s *S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   f, err := os.Create(&lt;span class=&quot;string&quot;&gt;&quot;heap.out&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; f.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err = trace.Start(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s = byPointer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   trace.Stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b.StopTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _ = fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%v&quot;&lt;/span&gt;, s.a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们运行一下基准测试：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; ./... -bench=BenchmarkMemoryHeap -benchmem -run=^$ -count=10 &amp;gt; head.txt &amp;amp;&amp;amp; benchstat head.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; ./... -bench=BenchmarkMemoryStack -benchmem -run=^$ -count=10 &amp;gt; stack.txt &amp;amp;&amp;amp; benchstat stack.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是统计数据：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name          time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4  75.0ns ± 5%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name          alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4   96.0B ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name          allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4    1.00 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4  8.93ns ± 4%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4   0.00B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4    0.00&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这里使用结构的拷贝而不是指针要快 &lt;strong&gt;8 倍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了理解其中的原因，让我们来看一下 trace 生成的图表：&lt;br&gt;&lt;img src=&quot;/images/go/struct_1.png&quot; alt=&quot;graph for the struct passed by copy&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/go/struct_2.png&quot; alt=&quot;graph for the struct passed by pointer&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一个图很简单。由于没有使用堆，因此没有垃圾回收器和额外的 &lt;code&gt;goroutine&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于第二个图，指针的使用迫使 go 编译器将&lt;a href=&quot;https://golang.org/doc/faq#stack_or_heap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;变量转义到堆中&lt;/a&gt;，并对垃圾回收器施加压力。如果我们放大这个图，我们可以看到垃圾回收器在这个过程中扮演了重要的角色:&lt;br&gt;&lt;img src=&quot;/images/go/struct_3.png&quot; alt=&quot;trace struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这个图中我们可以看到，垃圾回收器必须每 4ms 工作一次。&lt;/p&gt;
&lt;p&gt;如果我们再次放大，我们可以得到正在发生的事情的详细信息:&lt;br&gt;&lt;img src=&quot;/images/go/struct_4.png&quot; alt=&quot;trace struct&quot;&gt;&lt;/p&gt;
&lt;p&gt;蓝色、粉色和红色的是垃圾回收器的阶段，而棕色的阶段与堆上的分配有关(在图表上标记为 “&lt;code&gt;runtime.bgsweep&lt;/code&gt;”):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扫描是指回收与堆内存中未标记为正在使用的值相关联的内存。当应用程序 &lt;code&gt;Goroutines&lt;/code&gt; 试图在堆内存中分配新值时，就会发生此活动。扫描的延迟会增加在堆内存中执行分配的成本，并且不会与垃圾回收相关的任何延迟相关联。&lt;br&gt;&lt;a href=&quot;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即使这个示例有点极端，我们也可以看到在堆上分配变量而不是在栈上分配变量的代价有多大。在我们的示例中，代码在栈上分配结构体并拷贝它比在堆上分配结构体并共享其地址要快得多。&lt;/p&gt;
&lt;p&gt;如果您不熟悉栈/堆，如果您想了解更多关于每个堆的内部细节，您可以在网上找到许多资源，比如 Paul Gribble 的这篇&lt;a href=&quot;https://www.gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果我们将 &lt;code&gt;GOMAXPROCS=1&lt;/code&gt; 的处理器限制为 1，情况会更糟：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name        time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap  114ns ± 4%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name        alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap  96.0B ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name        allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap   1.00 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name         time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack  8.77ns ± 5%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name         alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack   0.00B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name         allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack    0.00&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果在栈上有分配的基准没有改变，那么在堆上的基准已经从 75ns/op 降低到 114ns/op。&lt;/p&gt;
&lt;h2 id=&quot;用例2：密集的函数调用&quot;&gt;&lt;a href=&quot;#用例2：密集的函数调用&quot; class=&quot;headerlink&quot; title=&quot;用例2：密集的函数调用&quot;&gt;&lt;/a&gt;用例2：密集的函数调用&lt;/h2&gt;&lt;p&gt;对于第二个用例，我们将在结构体中添加两个空方法，稍微调整一下我们的基准用例:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s S)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s1 S)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *S)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s1 *S)&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在栈上分配的基准测试将创建一个结构并通过拷贝传递它:&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkMemoryStack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s1 S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s = byCopy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s1 = byCopy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         s.stack(s1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而堆的基准测试将通过指针传递结构体：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkMemoryHeap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s *S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s1 *S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s = byPointer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   s1 = byPointer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         s.heap(s1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不出所料，结果现在大不相同：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name          time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4  301µs ± 4%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name          alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4  0.00B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name          allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryHeap-4   0.00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           time/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4  595µs ± 2%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           alloc/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4  0.00B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name           allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MemoryStack-4   0.00&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;在 go 中，使用指针而不是拷贝结构体并不总是一件好事。&lt;/p&gt;
&lt;p&gt;为了你的数据选择好的语义，我强烈建议阅读 &lt;a href=&quot;https://twitter.com/goinggodotnet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bill Kennedy&lt;/a&gt; 写的&lt;a href=&quot;https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于值/指针语义&lt;/a&gt;的文章。它将让您更好地了解结构和内置类型可以使用的策略。&lt;/p&gt;
&lt;p&gt;此外，对内存使用情况的分析肯定会帮助您了解在分配和堆上发生了什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://medium.com/a-journey-with-go/go-should-i-use-a-pointer-instead-of-a-copy-of-my-struct-44b43b104963&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-should-i-use-a-pointer-instead-of-a-copy-of-my-struct-44b43b104963&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;对于许多 Go 开发人员来说，系统地使用指针来共享结构体而不是拷贝本身似乎是性能方面的最佳选择。&lt;/p&gt;
&lt;p&gt;为了理解使用指针而不是拷贝结构体的影响，我们将回顾两个用例。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://team.jiunile.com/categories/go/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="指针" scheme="http://team.jiunile.com/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="结构体" scheme="http://team.jiunile.com/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Golang 六种错误处理技术，可帮助您编写优雅的代码</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-handle-error.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-handle-error.html</id>
    <published>2020-11-20T12:00:00.000Z</published>
    <updated>2020-11-19T14:47:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;当在 GO 中遇到错误时你会怎么做？&lt;/p&gt;
&lt;p&gt;处理错误并不简单。在讨论功能性需求时，很少考虑错误处理需求，但是错误处理是软件开发的一个重要部分。&lt;/p&gt;
&lt;p&gt;在 GO 中，错误条件以方法返回值的形式返回。在我看来，将错误条件作为主流程的一部分是很有用的 – 它让开发人员在编写功能代码时承担处理错误的责任。这种范例与其他编程语言(如 Java )所提供的非常不同 – 其中异常是完全不同的流程。虽然这种不同的风格使代码更具可读性，但也带来了新的挑战。&lt;/p&gt;
&lt;p&gt;本文讨论了六种处理错误、重试和可服务性的技术。虽然很少有想法是琐碎的，但其他想法并不那么受欢迎。&lt;/p&gt;
&lt;p&gt;因此，让我们从列表开始！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-向左对齐&quot;&gt;&lt;a href=&quot;#1-向左对齐&quot; class=&quot;headerlink&quot; title=&quot;1 向左对齐&quot;&gt;&lt;/a&gt;1 向左对齐&lt;/h2&gt;&lt;p&gt;处理错误的最佳策略是检查错误并立即从函数返回。在一个函数中有多个错误返回语句是可以的 – 事实上，这是明智的选择。[1]&lt;/p&gt;
&lt;p&gt;例如，下面的代码片段展示了如何使用 &lt;code&gt;if err == nil&lt;/code&gt; 来处理一个愉快的场景，从而导致嵌套 if 检查。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Handling Happy case first - leading to nested if checks...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err := somethingThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        err = somethingElseThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;//More Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述逻辑可以通过向左对齐逻辑来处理：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ABetterExample&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err := somethingThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     err = somethingElseThatReturnsError()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// More Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-重试可恢复错误&quot;&gt;&lt;a href=&quot;#2-重试可恢复错误&quot; class=&quot;headerlink&quot; title=&quot;2 重试可恢复错误&quot;&gt;&lt;/a&gt;2 重试可恢复错误&lt;/h2&gt;&lt;p&gt;很少有可恢复的错误值得重试 – 网络故障、IO 操作等都可以通过简单的重试恢复。&lt;/p&gt;
&lt;p&gt;下面的包可以帮助解决重试带来的麻烦。&lt;br&gt;&lt;a href=&quot;https://godoc.org/github.com/cenkalti/backoff#example-Retry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package backoff&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// An operation that may fail.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;operation := &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// or an error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;err := Retry(operation, NewExponentialBackOff())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Handle error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指数回退意味着重试间隔呈指数增长 – 对于大多数网络 /IO 故障来说，这是一个明智的选择。&lt;/p&gt;
&lt;h2 id=&quot;3-包装错误&quot;&gt;&lt;a href=&quot;#3-包装错误&quot; class=&quot;headerlink&quot; title=&quot;3 包装错误&quot;&gt;&lt;/a&gt;3 包装错误&lt;/h2&gt;&lt;p&gt;默认的错误包是有限的 – 错误上下文的详细信息经常会丢失。例如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;New Error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError(&lt;span class=&quot;string&quot;&gt;&quot;Acct1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，主函数收到的错误实例没有发生在帐户 &lt;code&gt;Acct1&lt;/code&gt; 上的信息。可以在函数 &lt;code&gt;testingErrror&lt;/code&gt; 中记录 &lt;code&gt;accountNumber&lt;/code&gt;，但是由于当前包错误，无法将该信息传递给主函数。&lt;/p&gt;
&lt;p&gt;这就是 &lt;code&gt;github.Com/pkg/errors&lt;/code&gt; 的来源。该库与 &lt;code&gt;errors&lt;/code&gt; 兼容并带来了一些很酷的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;New Error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError2()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;Error occurred while processing Card Number &quot;&lt;/span&gt;+accoutNumber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   err := testingError(&lt;span class=&quot;string&quot;&gt;&quot;Acct1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;github.com/pkg/errors&lt;/code&gt; 中，您还可以使用一些额外的有用功能 – &lt;code&gt;errors.Unwrap&lt;/code&gt; 和 &lt;code&gt;errors.Is&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-日志策略&quot;&gt;&lt;a href=&quot;#4-日志策略&quot; class=&quot;headerlink&quot; title=&quot;4 日志策略&quot;&gt;&lt;/a&gt;4 日志策略&lt;/h2&gt;&lt;p&gt;Golang 的默认包日志不提供使用日志记录级别进行日志记录功能。这里有一些其他的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Glog&lt;/code&gt;: &lt;a href=&quot;https://github.com/golang/glog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/golang/glog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Logrus&lt;/code&gt;: &lt;a href=&quot;https://github.com/sirupsen/logrus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/sirupsen/logrus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Zap&lt;/code&gt;: &lt;a href=&quot;https://github.com/uber-go/zap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Logrus&lt;/code&gt; 和 &lt;code&gt;Zap&lt;/code&gt; 还提供了&lt;strong&gt;结构化日志输出&lt;/strong&gt;的功能 – 这是一个非常方便的功能，因为它为开发人员提供了向错误日志消息添加上下文的能力。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accountNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; logrus.SetFormatter(&amp;amp;logrus.JSONFormatter&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctxFields := logrus.Fields&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;accountNumber&quot;&lt;/span&gt;: accountNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;appname&quot;&lt;/span&gt;:       &lt;span class=&quot;string&quot;&gt;&quot;my-app&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Happy processing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Some test error while doing happy processing&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  logrus.WithFields(ctxFields).WithError(err).Error(&lt;span class=&quot;string&quot;&gt;&quot;ErrMsg&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结构化日志输出如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;accountNumber&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;appname&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;my-app&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Some test error while doing happy processing&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;level&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;msg&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;ErrMsg&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;2009-11-10T23:00:00Z&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;日志的另一个关键方面是获得日志堆栈跟踪的能力。如果你使用 &lt;code&gt;github.com/pkg/errors&lt;/code&gt;，你就可以&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;logrus.Error(&lt;span class=&quot;string&quot;&gt;&quot;Error occurred&quot;&lt;/span&gt;, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%+v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会得到一个错误堆栈跟踪如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main.testingError2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.testingError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /home/nayars/go/src/github.com/nayarsn/temp.go:39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /usr/lib/go-1.15/src/runtime/proc.go:204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;runtime.goexit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /usr/lib/go-1.15/src/runtime/asm_amd64.s:1374&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Zap&lt;/code&gt; 为性能进行了缓冲和优化。[2]&lt;/p&gt;
&lt;h2 id=&quot;5-错误检查&quot;&gt;&lt;a href=&quot;#5-错误检查&quot; class=&quot;headerlink&quot; title=&quot;5 错误检查&quot;&gt;&lt;/a&gt;5 错误检查&lt;/h2&gt;&lt;p&gt;将错误视为值是好的 – 它是明确的，而明确的有很多意义。但它也可以为开发人员提供跳过的机会。例如：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testingError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(accoutNumber &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = errors.New(&lt;span class=&quot;string&quot;&gt;&quot;errors.New with _&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors.New(&lt;span class=&quot;string&quot;&gt;&quot;errors.New not capturing return&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的示例显示应用程序程序员是由 &lt;code&gt;errors.New&lt;/code&gt; 语句返回的两个错误。这可能是有意或无意发生的。&lt;/p&gt;
&lt;p&gt;幸运的是，有一个 linter 实用程序可以帮助您。&lt;br&gt;&lt;a href=&quot;https://github.com/kisielk/errcheck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kisielk/errcheck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一旦你安装了 linter，你可以简单地做以下事情：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;errcheck -blank ./...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你会得到这样的输出：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;temp.go:16:2:   _ = errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Error capturing return using _&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;temp.go:18:12:  errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Error not capturing return&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这可以作为 CI/CD 流程的一部分，以确保应用程序开发人员不会错过这一部分。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errchec&lt;/code&gt; 是 Go linters 聚合器实用程序的一部分 – &lt;a href=&quot;https://golangci-lint.run/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://golangci-lint.run/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-多个错误&quot;&gt;&lt;a href=&quot;#6-多个错误&quot; class=&quot;headerlink&quot; title=&quot;6 多个错误&quot;&gt;&lt;/a&gt;6 多个错误&lt;/h2&gt;&lt;p&gt;你有多个错误的场景 – 它们是同一个 &lt;code&gt;go routine&lt;/code&gt; 的一部分，你不想停止处理 – 而是继续处理并记录所有错误。这里有一个专门的库：&lt;br&gt;&lt;a href=&quot;https://github.com/hashicorp/go-multierror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hashicorp/go-multierror&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;step1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Step1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;step2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(&lt;span class=&quot;string&quot;&gt;&quot;Step2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := step1(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = multierror.Append(result, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := step2(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = multierror.Append(result, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fmt.Println(multierror.Flatten(result))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样，对于多个 &lt;code&gt;go routines&lt;/code&gt;，可以使用以下库：&lt;br&gt;&lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我知道上述列表并非全部。对于你们中的一些人来说，这可能是微不足道的 – 但希望对你们中的一些人来说，这有助于你们掌握错误处理技术。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&quot;https://medium.com/a-journey-with-go/go-how-zap-package-is-optimized-dbf72ef48f2d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-how-zap-package-is-optimized-dbf72ef48f2d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/higher-order-functions/golang-six-error-handling-techniques-to-help-you-write-elegant-code-8e6363e6d2b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/higher-order-functions/golang-six-error-handling-techniques-to-help-you-write-elegant-code-8e6363e6d2b&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;当在 GO 中遇到错误时你会怎么做？&lt;/p&gt;
&lt;p&gt;处理错误并不简单。在讨论功能性需求时，很少考虑错误处理需求，但是错误处理是软件开发的一个重要部分。&lt;/p&gt;
&lt;p&gt;在 GO 中，错误条件以方法返回值的形式返回。在我看来，将错误条件作为主流程的一部分是很有用的 – 它让开发人员在编写功能代码时承担处理错误的责任。这种范例与其他编程语言(如 Java )所提供的非常不同 – 其中异常是完全不同的流程。虽然这种不同的风格使代码更具可读性，但也带来了新的挑战。&lt;/p&gt;
&lt;p&gt;本文讨论了六种处理错误、重试和可服务性的技术。虽然很少有想法是琐碎的，但其他想法并不那么受欢迎。&lt;/p&gt;
&lt;p&gt;因此，让我们从列表开始！&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/categories/golang/error/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 kubernetes iptables proxy 模式</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-proxy-iptables.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-proxy-iptables.html</id>
    <published>2020-11-19T15:00:00.000Z</published>
    <updated>2020-11-18T13:56:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;最近在面试的时候问了不少 &lt;code&gt;network request&lt;/code&gt; 如何到 &lt;code&gt;k8s service backend&lt;/code&gt; 的问题，觉得可以整合一下网络上的资料，这篇主要讨论 &lt;code&gt;iptables proxy mode&lt;/code&gt;。大部分的情况没有在使用 &lt;code&gt;userspace proxy modes&lt;/code&gt;， &lt;code&gt;ipvs proxy mode&lt;/code&gt; 可能要等到下一次讨论。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;事先准备&quot;&gt;&lt;a href=&quot;#事先准备&quot; class=&quot;headerlink&quot; title=&quot;事先准备&quot;&gt;&lt;/a&gt;事先准备&lt;/h2&gt;&lt;p&gt;要先了解 &lt;code&gt;iptable&lt;/code&gt; 工作机制，建议可以看这一篇：&lt;a href=&quot;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&lt;/a&gt;，当然 wikipedia 也是写的不错，我下面的文字也大多数引用：&lt;a href=&quot;https://zh.wikipedia.org/wiki/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/Iptables&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速带过-iptable&quot;&gt;&lt;a href=&quot;#快速带过-iptable&quot; class=&quot;headerlink&quot; title=&quot;快速带过 iptable&quot;&gt;&lt;/a&gt;快速带过 &lt;code&gt;iptable&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;说到 &lt;code&gt;iptable&lt;/code&gt; 要先了解 &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Rueles&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Table&lt;/code&gt;&lt;/strong&gt; 指不同类型的封包处理流程，总共有五种，不同的 &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt; 处理不同的行为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;：处理异常，追踪状态 -&amp;gt; &lt;code&gt;/proc/net/nf_conntrack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt;：处理封包，修改 headler 之类的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;：进行位址转换操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;：进行封包过滤&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt;：SElinux 相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 来对应进行不同的行为。像是 “filter” &lt;strong&gt;&lt;code&gt;Tables&lt;/code&gt;&lt;/strong&gt; 进行封包过滤的流程，而 “nat” 针对连接进行位址转换操作。&lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt; 里面包含许多规则，主要有五种类型的 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PREROUTING&lt;/code&gt;：处理路由规则前通过此 &lt;code&gt;Chains&lt;/code&gt;，通常用于目的位址转换（DNAT）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INPUT&lt;/code&gt;：发往本机的封包通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FORWARD&lt;/code&gt;：本机转发的封包通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUTPUT&lt;/code&gt;：处理本机发出的封包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTROUTING&lt;/code&gt;：完成路由规则后通过此 &lt;strong&gt;&lt;code&gt;Chains&lt;/code&gt;&lt;/strong&gt;，通常用于源位址转换（SNAT）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Rules&lt;/code&gt;&lt;/strong&gt; 规则会被逐一进行匹配，如果匹配，可以执行相应的动作  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;大致的工作流向情况分两种：&quot;&gt;&lt;a href=&quot;#大致的工作流向情况分两种：&quot; class=&quot;headerlink&quot; title=&quot;大致的工作流向情况分两种：&quot;&gt;&lt;/a&gt;大致的工作流向情况分两种：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;backend 为本机&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NIC → PREROUTING → INPUT → Local process &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Local process → OUTPUT → POSTROUTING → NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;backend 目的地非本机&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NIC→PREROUTING → FORWARD → POSTROUTING→NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_1.png&quot; alt=&quot;Iptables Basics&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是比较详细的流程，有包含 &lt;code&gt;EBTABLES&lt;/code&gt;，但这个看久头会昏，我这次会主要讨论 Network Layer 这一部分，然后用上面这张比较精简的图&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_2.png&quot; alt=&quot;Netfilter pic of wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kube-proxy&lt;/code&gt; 修改了 filter，nat 两个表，自定义了&lt;br&gt;&lt;code&gt;KUBE-SERVICES&lt;/code&gt;，&lt;code&gt;KUBE-NODEPORTS&lt;/code&gt;，&lt;code&gt;KUBE-POSTROUTING&lt;/code&gt;，&lt;code&gt;KUBE-FORWARD&lt;/code&gt;，&lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt;，所以我这次会 focus on filter ，nat 两个 Table&lt;/p&gt;
&lt;h3 id=&quot;1-filter-table-有三个-Chain-“INPUT”-“OUTPUT”-“FORWARD”&quot;&gt;&lt;a href=&quot;#1-filter-table-有三个-Chain-“INPUT”-“OUTPUT”-“FORWARD”&quot; class=&quot;headerlink&quot; title=&quot;1. filter table 有三个 Chain “INPUT” “OUTPUT” “FORWARD”&quot;&gt;&lt;/a&gt;1. filter table 有三个 Chain “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;FORWARD&lt;/strong&gt;”&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_3.png&quot; alt=&quot;iptables-routing&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt; 在 filter table 的 “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” chain 增加了 &lt;code&gt;KUBE-FIREWALL&lt;/code&gt; 在 “&lt;strong&gt;INPUT&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;FORWARD&lt;/strong&gt;” chain 增加了 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KUBE_FIREWALL&lt;/code&gt; 会丢弃所有被 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 标记 0x8000 的封包，而标记的动作可以在其他的 table 中(像是第二部分提到的 NAT table 中)&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_4.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_5.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;/p&gt;
&lt;p&gt;而 filter table 的 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 可以过滤封包，假如一个 service 没有对应的 endpoint，就会被 reject，这里我先要建立一个 service 和没有正确设定 endpoint。&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Endpoints &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;service cluster ip 为 10.95.58.92&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selfLink:&lt;/span&gt; /api/v1/namespaces/default/services/test-error-endpoint &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  uid:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;d415d63&lt;span class=&quot;bullet&quot;&gt;-6&lt;/span&gt;fc3&lt;span class=&quot;bullet&quot;&gt;-444e-8&lt;/span&gt;b5a&lt;span class=&quot;bullet&quot;&gt;-29015&lt;/span&gt;b436a83 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resourceVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; 73026369&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  creationTimestamp:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;2020-11-17T05:48:52Z&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7777&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  clusterIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.58&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.92&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; ClusterIP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  sessionAffinity:&lt;/span&gt; None &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  loadBalancer:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再次检查 iptable，就可以看到 &lt;code&gt;default/test-error-endpoint: has no endpoints -&amp;gt; tcp dpt:7777 reject-with icmp-port-unreachable&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_6.png&quot; alt=&quot;proxy iptable&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-nat-table-有三个-Chain-“PREROUTING”-“OUTPUT”-“POSTROUTING”&quot;&gt;&lt;a href=&quot;#2-nat-table-有三个-Chain-“PREROUTING”-“OUTPUT”-“POSTROUTING”&quot; class=&quot;headerlink&quot; title=&quot;2. nat table 有三个 Chain “PREROUTING” “OUTPUT” “POSTROUTING”&quot;&gt;&lt;/a&gt;2. nat table 有三个 Chain “&lt;strong&gt;PREROUTING&lt;/strong&gt;” “&lt;strong&gt;OUTPUT&lt;/strong&gt;” “&lt;strong&gt;POSTROUTING&lt;/strong&gt;”&lt;/h3&gt;&lt;p&gt;在前两个封包处理流程是比较相似和复杂的，大体来说是藉由客制化的规则，来处理符合条件封包，帮它们找到正确的 k8s endpoint (后面会细讲)，在 &lt;code&gt;POSTROUTING&lt;/code&gt; 主要是针对 k8s 处理的封包(标记 0x4000 的封包)，在离开 node 的时候做 SNAT&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(inbound) 在 “&lt;strong&gt;PREROUTING&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(outbound) 在 “&lt;strong&gt;OUTPUT&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(outbound) 在 “&lt;strong&gt;POSTROUTING&lt;/strong&gt;” 将所有封包转发到 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_7.png&quot; alt=&quot;iptables-routing&quot;&gt;&lt;br&gt;当封包进入 “&lt;strong&gt;PREROUTING&lt;/strong&gt;” 和 “&lt;strong&gt;OUTPUT&lt;/strong&gt;”，会整个被 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; Chain 整个绑架走，开始逐一匹配 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 中的 rule 和打上标签。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_8.png&quot; alt=&quot;nat tables&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-proxy&lt;/code&gt; 的用法是一种 O(n) 算法，其中的 n 随 k8s cluster 的规模同步增加，更简单的说就是 service 和 endpoint 的数量。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_9.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里会准备三个最常见的 service type 的 &lt;code&gt;kube-proxy&lt;/code&gt; 路由流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cluster IP&lt;/li&gt;
&lt;li&gt;nodePort&lt;/li&gt;
&lt;li&gt;load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;clusterIP-流程&quot;&gt;&lt;a href=&quot;#clusterIP-流程&quot; class=&quot;headerlink&quot; title=&quot;clusterIP 流程&quot;&gt;&lt;/a&gt;clusterIP 流程&lt;/h4&gt;&lt;p&gt;这里我使用 &lt;code&gt;default/jeff-api(clusterIP: 10.95.57.19)&lt;/code&gt; 举例，我下面图过滤掉不必要的资讯&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_10.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后会到实际 pod 的位置，&lt;code&gt;podIP: 10.95.35.31，hostIP: 10.20.0.128&lt;/code&gt; 是该 pod 所在 node 的 ip&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-api&lt;span class=&quot;bullet&quot;&gt;-746&lt;/span&gt;f4c9985&lt;span class=&quot;bullet&quot;&gt;-5&lt;/span&gt;qmw6 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  generateName:&lt;/span&gt; jeff-api&lt;span class=&quot;bullet&quot;&gt;-746&lt;/span&gt;f4c9985- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; promotion-api &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;gcr.io/jeff-project/jeff /jeff-api:202011161901&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;tcp02 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeName:&lt;/span&gt; gke-sit-jeff-k8s-tw&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;-default-pool&lt;span class=&quot;bullet&quot;&gt;-7983&lt;/span&gt;af35-ug91 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  phase:&lt;/span&gt; Running &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.128&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  podIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.35&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.31&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;nodePort-流程&quot;&gt;&lt;a href=&quot;#nodePort-流程&quot; class=&quot;headerlink&quot; title=&quot;nodePort 流程&quot;&gt;&lt;/a&gt;nodePort 流程&lt;/h4&gt;&lt;p&gt;这里有一个关键就是 &lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 一定是在 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 最后一项，iptables 在处理 packet 会先处理 ip 为 cluster ip 的 service，当全部的 &lt;code&gt;KUBE-SVC-XXXXXX&lt;/code&gt; 都对应不到的时候就会使用 nodePort 去匹配。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_11.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看实际 pod 的资讯，&lt;code&gt;podIP: 10.95.32.17，hostIP: 10.20.0.124&lt;/code&gt; 是其中一台 node 的 ip&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      nodePort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;31929&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  clusterIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.58&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.51&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; NodePort &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  externalTrafficPolicy:&lt;/span&gt; Cluster &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; jeff-frontend-c94bf68d9-bbmp8 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  generateName:&lt;/span&gt; jeff-frontend-c94bf68d9- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; jeff-frontend &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; jeff-frontend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;gcr.io/jeff-project/jeff/jeff-image:jeff-1.0.6.5&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; http &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeName:&lt;/span&gt; gke-sit-jeff-k8s-tw&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;-default -pool-b5692f8d-enk7 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  phase:&lt;/span&gt; Running &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.124&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  podIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.95&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.32&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;load-balancer流程&quot;&gt;&lt;a href=&quot;#load-balancer流程&quot; class=&quot;headerlink&quot; title=&quot;load balancer流程&quot;&gt;&lt;/a&gt;load balancer流程&lt;/h4&gt;&lt;p&gt;假如目的地 IP 是 load balancer 就会使用 &lt;code&gt;KUBE-FW-XXXXXX&lt;/code&gt;，我建立一个 internal load balancer service 和 endpoint 指到 google postgresql DB(10.28.193.9)&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_12.png&quot; alt=&quot;kube-services&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  annotations:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cloud.google.com/load-balancer-type: Internal &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    networking.gke.io/internal-load-balancer-allow-global-access: &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; external-postgresql &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spec : &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - protocol:&lt;/span&gt; TCP &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; LoadBalancer &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt;-- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Endpoints &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; external-postgresql &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subsets:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- addresses:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - ip:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.28&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.193&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5432&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protocol : TCP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_13.png&quot; alt=&quot;kube-services&quot;&gt;&lt;br&gt;在 NAT table 看到 &lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 这两个规则主要是经过的封包打上标签，打上标签的封包会做相应的处理。&lt;code&gt;KUBE-MARK-DROP&lt;/code&gt; 和 &lt;code&gt;KUBE-MARK-MASQ&lt;/code&gt; 本质上就是使用 iptables 的 &lt;a href=&quot;https://serverfault.com/questions/514116/how-to-set-mark-on-packet-when-forwarding-it-in-nat-prerouting-table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MARK 指令&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-DROP -j MARK --set-xmark 0x8000/0x8000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果打上了 &lt;code&gt;0x8000&lt;/code&gt; 到后面 filter table (上面提到 &lt;code&gt;KUBE_FIREWALL&lt;/code&gt; )就会丢弃。&lt;/p&gt;
&lt;p&gt;如果打上了 &lt;code&gt;0x4000&lt;/code&gt; k8s 将会在 &lt;code&gt;PREROUTING&lt;/code&gt; table 的 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt; chain 对它进行 SNAT 转换。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_14.png&quot; alt=&quot;kube-services&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_15.png&quot; alt=&quot;POSTROUTING table&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_16.png&quot; alt=&quot;KUBE-POSTROUTING Chain&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy_iptable_17.png&quot; alt=&quot;KUBE-SERVICES&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Netfilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Netfilter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Iptables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/Iptables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://phoenixnap.com/kb/iptables-tutorial-linux-firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www&lt;/a&gt; .cnblogs.com/charlieroro/p/9588019.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/iptables/proxier.go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lijiaocn.com/%E9%&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.lijiaocn.com/%E9%&lt;/a&gt; A1%B9%E7%9B%AE/2017/03/27/Kubernetes-kube-proxy.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/6844904098605563912&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://juejin.im/post/6844904098605563912&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tizeen.github.io/2019/03/19/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://tizeen.github.io/2019/03/19/&lt;/a&gt; kubernetes-service-iptables%E5%88%86%E6%9E%90/&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hwchiu.com/kubernetes-service-ii.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.hwchiu.com/kubernetes-service-ii.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hwchiu.com/kubernetes-service-iii&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.hwchiu.com/kubernetes-service-iii&lt;/a&gt; .html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.itread01.com/content/1542712570.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.itread01.com/content/1542712570.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://jeff-yen.medium.com/iptables-proxy-mode-in-kube-proxy-6862bb4b329&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jeff-yen.medium.com/iptables-proxy-mode-in-kube-proxy-6862bb4b329&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;最近在面试的时候问了不少 &lt;code&gt;network request&lt;/code&gt; 如何到 &lt;code&gt;k8s service backend&lt;/code&gt; 的问题，觉得可以整合一下网络上的资料，这篇主要讨论 &lt;code&gt;iptables proxy mode&lt;/code&gt;。大部分的情况没有在使用 &lt;code&gt;userspace proxy modes&lt;/code&gt;， &lt;code&gt;ipvs proxy mode&lt;/code&gt; 可能要等到下一次讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="kuberntes" scheme="http://team.jiunile.com/categories/kuberntes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kuberntes/kube-proxy/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>Go 多重错误管理</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-multi-errors.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-multi-errors.html</id>
    <published>2020-11-19T14:00:00.000Z</published>
    <updated>2020-11-18T03:55:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.golang.org/survey2019-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;年度调查&lt;/a&gt;中，关于开发人员在使用 Go 时面临的最大挑战，Go 中的错误管理总是容易引起争论，并且是一个反复出现的话题。然而，当涉及到在并发环境中处理错误或为同一个 &lt;code&gt;goroutine&lt;/code&gt; 合并多个错误时，Go 提供了很棒的包，使管理多个错误变得容易。让我们看看如何合并由单个 &lt;code&gt;goroutine&lt;/code&gt; 生成的多个错误。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;单个-goroutine-多个错误&quot;&gt;&lt;a href=&quot;#单个-goroutine-多个错误&quot; class=&quot;headerlink&quot; title=&quot;单个 goroutine, 多个错误&quot;&gt;&lt;/a&gt;单个 goroutine, 多个错误&lt;/h2&gt;&lt;p&gt;例如，当您处理具有重试策略的代码时，将多个错误合并为一个错误会非常有用。这是我们需要收集生成的错误的基本示例：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_1.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个程序读取和解析一个 CSV 文本，并显示发现的错误。将错误分组以获得完整的报告可能更方便。要将错误合并为一个，我们可以在两个很棒的包中进行选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/hashicorp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashiCorp&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/hashicorp/go-multierror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-multierror&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/manage_muti_error_2.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;输出结果如下：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_3.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://github.com/uber-go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Uber&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/uber-go/multierr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multierr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的实现类似，下面是输出:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_4.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;错误通过分号连接起来，没有任何其他格式。&lt;/p&gt;
&lt;p&gt;对于每个包的性能，下面是一个基准测试结论：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name                    time/op         alloc/op        allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashiCorpMultiErrors-4  6.01µs ± 1%     6.78kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UberMultiErrors-4       9.26µs ± 1%     10.3kB ± 0%      126 ± 0%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Uber 的实现稍微慢一些，消耗更多的内存。但是，这个包的设计目的是将收集到的错误分组在一起，而不是每次都附加它们。当对错误进行分组时，结果很接近，但是代码不够优雅，因为它需要额外的步骤。以下是最新的测试结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;name                    time/op         alloc/op        allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HashiCorpMultiErrors-4  6.01µs ± 1%     6.78kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UberMultiErrors-4       6.02µs ± 1%     7.06kB ± 0%     77.0 ± 0%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个包都利用了 Go &lt;code&gt;error&lt;/code&gt; 接口，并在其自定义实现中实现了 &lt;code&gt;Error() string&lt;/code&gt; 函数。&lt;/p&gt;
&lt;h2 id=&quot;单个错误-多个-goroutines&quot;&gt;&lt;a href=&quot;#单个错误-多个-goroutines&quot; class=&quot;headerlink&quot; title=&quot;单个错误, 多个 goroutines&quot;&gt;&lt;/a&gt;单个错误, 多个 goroutines&lt;/h2&gt;&lt;p&gt;当处理多个 &lt;code&gt;goroutines&lt;/code&gt; 来执行一个任务时，有必要正确管理结果和将错误聚合，以确保程序的正确性。&lt;/p&gt;
&lt;p&gt;让我们从一个使用多个 &lt;code&gt;goroutines&lt;/code&gt; 执行一系列操作的程序开始; 每个操作持续一秒钟:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_5.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了说明错误传播，第三个 &lt;code&gt;goroutine&lt;/code&gt; 的第一个操作将失败。事情是这样的:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_6.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如预期的那样，这个程序大约需要 3 秒，因为大多数 &lt;code&gt;goroutines&lt;/code&gt; 需要经历三个动作，每个动作需要 1 秒:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go run .  0.30s user 0.19s system 14% cpu 3.274 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，我们可能希望使 &lt;code&gt;goroutines&lt;/code&gt; 相互依赖，并在其中一个失败时取消它们。避免不必要工作的解决方案是添加上下文，一旦 &lt;code&gt;goroutine&lt;/code&gt; 失败，它就会取消它:&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_7.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;这正是 &lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup?tab=doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt; 所提供的;处理一组 &lt;code&gt;goroutines&lt;/code&gt; 时的错误和上下文传播。下面是使用包 &lt;a href=&quot;https://pkg.go.dev/golang.org/x/sync/errgroup?tab=doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;errgroup&lt;/a&gt; 的新代码：&lt;br&gt;&lt;img src=&quot;/images/go/manage_muti_error_8.png&quot; alt=&quot;multiple errors&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序现在运行得更快，因为它通过错误传播取消的上下文：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go run .  0.30s user 0.19s system 38% cpu 1.269 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该包提供的另一个好处是，我们不需要再担心等待组添加和标记 &lt;code&gt;goroutines&lt;/code&gt; 完成。包为我们管理这些，我们只需要说我们准备好等待过程的结束。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/a-journey-with-go/go-multiple-errors-management-a67477628cf1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/a-journey-with-go/go-multiple-errors-management-a67477628cf1&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.golang.org/survey2019-results&quot;&gt;年度调查&lt;/a&gt;中，关于开发人员在使用 Go 时面临的最大挑战，Go 中的错误管理总是容易引起争论，并且是一个反复出现的话题。然而，当涉及到在并发环境中处理错误或为同一个 &lt;code&gt;goroutine&lt;/code&gt; 合并多个错误时，Go 提供了很棒的包，使管理多个错误变得容易。让我们看看如何合并由单个 &lt;code&gt;goroutine&lt;/code&gt; 生成的多个错误。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/categories/golang/error/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="error" scheme="http://team.jiunile.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>Go chan 为啥没有判断 close 的接口</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-chan-close.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-chan-close.html</id>
    <published>2020-11-16T14:00:00.000Z</published>
    <updated>2020-11-16T02:19:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 为什么没有判断 close 的接口？&lt;/li&gt;
&lt;li&gt;Go 关闭 channel 究竟做了什么？&lt;br&gt;  -&lt;code&gt;closechan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个判断 chan 是否 close 的函数&lt;ul&gt;
&lt;li&gt;思考方法一：通过“写”chan 实现&lt;/li&gt;
&lt;li&gt;思考方法二：通过“读”chan 实现&lt;/li&gt;
&lt;li&gt;chan close 原则&lt;/li&gt;
&lt;li&gt;其实并不需要 &lt;code&gt;isChanClose&lt;/code&gt; 函数 !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎么优雅关闭 chan ？&lt;ul&gt;
&lt;li&gt;方法一：panic-recover&lt;/li&gt;
&lt;li&gt;方法二：sync.Once&lt;/li&gt;
&lt;li&gt;方法三：事件同步来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Go-为什么没有判断-close-的接口？&quot;&gt;&lt;a href=&quot;#Go-为什么没有判断-close-的接口？&quot; class=&quot;headerlink&quot; title=&quot;Go 为什么没有判断 close 的接口？&quot;&gt;&lt;/a&gt;Go 为什么没有判断 close 的接口？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/go/chan_close_1.png&quot; alt=&quot;go channel close&quot;&gt;&lt;/p&gt;
&lt;p&gt;相信大家初学 golang chan 的时候应该都遇到过 “&lt;strong&gt;send on closed channel&lt;/strong&gt;“ 的 panic 。这个 panic 是当你意图往一个已经 close 的 channel 里面投递元素的时候触发。那么你当你第一次遇到这个问题是否想过 channel 是否能提供一个接口方法来判断是否已经 close 了？我想过这个问题，但是把 chan 的源代码翻了个遍没有找到。为什么？&lt;/p&gt;
&lt;p&gt;我先 hold 这个问题，我们捋一下跟 channel close 相关的事情，主要思考到 3 个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 channel 究竟做了什么 ？&lt;/li&gt;
&lt;li&gt;怎么避免 close channel 导致的 panic 问题 ？&lt;/li&gt;
&lt;li&gt;怎么优雅的关闭 channel ？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Go-关闭-channel-究竟做了什么？&quot;&gt;&lt;a href=&quot;#Go-关闭-channel-究竟做了什么？&quot; class=&quot;headerlink&quot; title=&quot;Go 关闭 channel 究竟做了什么？&quot;&gt;&lt;/a&gt;Go 关闭 channel 究竟做了什么？&lt;/h2&gt;&lt;p&gt;首先，用户可以 close channel，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 gdb 或者 delve 调试下就能发现 close 一个 channel，编译器会转换成 &lt;code&gt;closechan&lt;/code&gt; 函数，在这个函数里是关闭 channel 的全部实现了，我们可以分析下。&lt;/p&gt;
&lt;h3 id=&quot;closechan&quot;&gt;&lt;a href=&quot;#closechan&quot; class=&quot;headerlink&quot; title=&quot;closechan&quot;&gt;&lt;/a&gt;closechan&lt;/h3&gt;&lt;p&gt;对应编译函数为 &lt;code&gt;closechan&lt;/code&gt; ，该函数很简单，大概做 3 个事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标志位置 1 ，也就是 &lt;code&gt;c.closed = 1&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;释放资源，唤醒所有等待取元素的协程；&lt;/li&gt;
&lt;li&gt;释放资源，唤醒所有等待写元素的协程；&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;closechan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 以下为锁内操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; lock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 不能重复 close 一个 channel，否则 panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(plainError(&lt;span class=&quot;string&quot;&gt;&quot;close of closed channel&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// closed 标志位置 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c.closed = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; glist gList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 释放所有等待取元素的 waiter 资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 等待读的 waiter 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg := c.recvq.dequeue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 资源一个个销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sg.elem != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   typedmemclr(c.elemtype, sg.elem)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sg.elem = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := sg.g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.param = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//  相应 goroutine 加到统一队列，下面会统一唤醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  glist.push(gp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 释放所有等待写元素的 waiter 资源（他们之后将会 panic）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 等待写的 waiter 出队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg := c.sendq.dequeue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 资源一个个销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sg.elem = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := sg.g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.param = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 对应 goroutine 加到统一队列，下面会统一唤醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  glist.push(gp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 唤醒所有的 waiter 对应的 goroutine （这个协程列表是上面 push 进来的）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; !glist.empty() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp := glist.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gp.schedlink = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  goready(gp, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的代码逻辑，我们窥视到两个重要的信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;close chan 是有标识位的；&lt;/li&gt;
&lt;li&gt;close chan 是会唤醒哪些等待的人们的；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是很奇怪的是，我们 golang 官方没有提供一个接口用于判断 chan 是否关闭？那我们能不能实现一个判断 chan 是否 close 的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;一个判断-chan-是否-close-的函数&quot;&gt;&lt;a href=&quot;#一个判断-chan-是否-close-的函数&quot; class=&quot;headerlink&quot; title=&quot;一个判断 chan 是否 close 的函数&quot;&gt;&lt;/a&gt;一个判断 chan 是否 close 的函数&lt;/h2&gt;&lt;p&gt;怎么实现？首先 &lt;code&gt;isChanClose&lt;/code&gt; 函数有几点要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够指明确实是 close 的；&lt;/li&gt;
&lt;li&gt;任何时候能够正常运行，且有返回的（非阻塞）；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想想 &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt; 相关的函数，我们可以知道，当前 channel 给到用户的使用姿势本质上只有两种：读和写，我们实现的 &lt;code&gt;isChanClose&lt;/code&gt; 也只能在这个基础上做。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写：&lt;code&gt;c &amp;lt;- x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;读：&lt;code&gt;&amp;lt;-c&lt;/code&gt; 或 &lt;code&gt;v := &amp;lt;-c&lt;/code&gt; 或 &lt;code&gt;v, ok := &amp;lt;-c&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;思考方法一：通过“写”chan-实现&quot;&gt;&lt;a href=&quot;#思考方法一：通过“写”chan-实现&quot; class=&quot;headerlink&quot; title=&quot;思考方法一：通过“写”chan 实现&quot;&gt;&lt;/a&gt;思考方法一：通过“写”chan 实现&lt;/h3&gt;&lt;p&gt;“写”肯定不能作为判断，总不能为了判断 chan 是否 close，我尝试往里面写数据吧？这个会导致 &lt;code&gt;chansend&lt;/code&gt; 里面直接 panic 的，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chansend&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, callerpc &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 当 channel close 之后的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt;(plainError(&lt;span class=&quot;string&quot;&gt;&quot;send on closed channel&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//  ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然了，你路子要是野一点，这样做技术上也能实现，因为 panic 是可以捕捉的，只不过这也太野了吧，不推荐。&lt;/p&gt;
&lt;h3 id=&quot;思考方法二：通过“读”chan-实现&quot;&gt;&lt;a href=&quot;#思考方法二：通过“读”chan-实现&quot; class=&quot;headerlink&quot; title=&quot;思考方法二：通过“读”chan 实现&quot;&gt;&lt;/a&gt;思考方法二：通过“读”chan 实现&lt;/h3&gt;&lt;p&gt;“读”来判断。分析函数 &lt;code&gt;chanrecv&lt;/code&gt; 可以知道，当尝试从一个已经 close 的 chan 读数据的时候，返回 （selected=true, received=false），我们通过 received = false 即可知道 channel 是否 close 。&lt;code&gt;chanrecv&lt;/code&gt; 有如下代码：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chanrecv&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(c *hchan, ep unsafe.Pointer, block &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(selected, received &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 当 channel close 之后的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c.closed != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; c.qcount == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unlock(&amp;amp;c.lock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ep != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   typedmemclr(c.elemtype, ep)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以，我们现在知道了，可以通过 “读”的效果来判断，但是我们不能直接写成这样：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 错误示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _, ok := &amp;lt;- c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是个&lt;strong&gt;错误示例&lt;/strong&gt;，因为 &lt;code&gt;_, ok := &amp;lt;-c&lt;/code&gt; 编译出来的是 &lt;code&gt;chanrecv2&lt;/code&gt; ，这个函数 block 赋值 true 传入的，所以当 c 是正常的时候，这里是阻塞的，所以这个不能用来作为一个正常的函数调用，因为会卡死协程，怎么解决这个问题？用 &lt;code&gt;select&lt;/code&gt;  和 &lt;code&gt;&amp;lt;-chan&lt;/code&gt;  来结合可以解决这个问题，&lt;code&gt;select&lt;/code&gt; 和 &lt;code&gt;&amp;lt;-chan&lt;/code&gt; 结合起来是对应 &lt;code&gt;selectnbrecv&lt;/code&gt;  和 &lt;code&gt;selectnbrecv2&lt;/code&gt; 这两个函数，这两个函数是非阻塞的（ &lt;code&gt;block = false&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;正确示例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; _, received := &amp;lt;- ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !received&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;网上很多人举了一个 &lt;code&gt;isChanClose&lt;/code&gt; 错误的例子，错误示例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isChanClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;  &amp;lt;- ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;思考下：为什么第一个例子是对的，第二个例子是错的？&lt;/p&gt;
&lt;p&gt;因为，第一个例子编译出来对应的函数是 &lt;code&gt;selectnbrecv2&lt;/code&gt; ，第二个例子编译出来对应的是 &lt;code&gt;selectnbrecv1&lt;/code&gt; ，这两个函数的区别在于 &lt;code&gt;selectnbrecv2&lt;/code&gt; 多了一个返回参数 &lt;code&gt;received&lt;/code&gt;，只有这个函数才能指明是否元素出队成功，而 &lt;code&gt;selected&lt;/code&gt; 只是判断是否要进到 select case 分支。我们通过 &lt;code&gt;received&lt;/code&gt; 这个返回值（其实是一个入参，只不过是指针类型，函数内可修改）来反向推断 chan 是否 close 了。&lt;/p&gt;
&lt;h4 id=&quot;小结：&quot;&gt;&lt;a href=&quot;#小结：&quot; class=&quot;headerlink&quot; title=&quot;小结：&quot;&gt;&lt;/a&gt;小结：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;case 的代码必须是 &lt;code&gt;_, received := &amp;lt;- ch&lt;/code&gt; 的形式，如果仅仅是 &lt;code&gt;&amp;lt;- ch&lt;/code&gt; 来判断，是错的逻辑，因为我们关注的是 &lt;code&gt;received&lt;/code&gt; 的值；&lt;/li&gt;
&lt;li&gt;select 必须要有 default 分支，否则会阻塞函数，我们这个函数要保证一定能正常返回；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;chan-close-原则&quot;&gt;&lt;a href=&quot;#chan-close-原则&quot; class=&quot;headerlink&quot; title=&quot;chan close 原则&quot;&gt;&lt;/a&gt;chan close 原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;永远不要尝试在读取端关闭 channel ，写入端无法知道 channel 是否已经关闭，往已关闭的 channel 写数据会 panic ；&lt;/li&gt;
&lt;li&gt;一个写入端，在这个写入端可以放心关闭 channel；&lt;/li&gt;
&lt;li&gt;多个写入端时，不要在写入端关闭 channel ，其他写入端无法知道 channel 是否已经关闭，关闭已经关闭的 channel 会发生 panic （你要想个办法保证只有一个人调用 close）；&lt;/li&gt;
&lt;li&gt;channel 作为函数参数的时候，最好带方向；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实这些原则只有一点：一定要是安全的是否才能去 close channel 。&lt;/p&gt;
&lt;h3 id=&quot;其实并不需要-isChanClose-函数&quot;&gt;&lt;a href=&quot;#其实并不需要-isChanClose-函数&quot; class=&quot;headerlink&quot; title=&quot;其实并不需要 isChanClose 函数 !!!&quot;&gt;&lt;/a&gt;其实并不需要 isChanClose 函数 !!!&lt;/h3&gt;&lt;p&gt;上面实现的 &lt;code&gt;isChanClose&lt;/code&gt; 是可以判断出 channel 是否 close，但是适用场景优先，因为可能等你 &lt;code&gt;isChanClose&lt;/code&gt; 判断的时候返回值 false，你以为 channel 还是正常的，但是下一刻 channel 被关闭了，这个时候往里面“写”数据就又会 panic ，如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isChanClose( c ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 关闭的场景，exit  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 未关闭的场景，继续执行（可能还是会 panic）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为判断之后还是有时间窗，所以 &lt;code&gt;isChanClose&lt;/code&gt; 的适用还是有限，那么是否有更好的办法？&lt;/p&gt;
&lt;p&gt;我们换一个思路，你其实并不是一定要判断 channel 是否 close，真正的目的是：&lt;strong&gt;安全的使用 channel，避免使用到已经关闭的 closed channel，从而导致 panic&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;这个问题的本质上是保证一个事件的时序，官方推荐通过 &lt;code&gt;context&lt;/code&gt; 来配合使用，我们可以通过一个 ctx 变量来指明 close 事件，而不是直接去判断 channel 的一个状态。举个栗子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v, ok := &amp;lt;-c:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do default ....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctx.Done()&lt;/code&gt; 事件发生之后，我们就明确不去读 channel 的数据。&lt;/p&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// push &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctx.Done()&lt;/code&gt; 事件发生之后，我们就明确不写数据到 channel ，或者不从 channel 里读数据，那么保证这个时序即可。就一定不会有问题。&lt;/p&gt;
&lt;p&gt;我们只需要确保一点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;触发时序保证：一定要先触发 ctx.Done() 事件，再去做 close channel 的操作，保证这个时序的才能保证 select 判断的时候没有问题；&lt;br&gt; a. 只有这个时序，才能保证在获悉到 Done 事件的时候，一切还是安全的；&lt;/li&gt;
&lt;li&gt;条件判断顺序：select 的 case 先判断 ctx.Done() 事件，这个很重要哦，否则很有可能先执行了 chan 的操作从而导致 panic 问题；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;怎么优雅关闭-chan-？&quot;&gt;&lt;a href=&quot;#怎么优雅关闭-chan-？&quot; class=&quot;headerlink&quot; title=&quot;怎么优雅关闭 chan ？&quot;&gt;&lt;/a&gt;怎么优雅关闭 chan ？&lt;/h2&gt;&lt;h3 id=&quot;方法一：panic-recover&quot;&gt;&lt;a href=&quot;#方法一：panic-recover&quot; class=&quot;headerlink&quot; title=&quot;方法一：panic-recover&quot;&gt;&lt;/a&gt;方法一：panic-recover&lt;/h3&gt;&lt;p&gt;关闭一个 channel 直接调用 close 即可，但是关闭一个已经关闭的 channel 会导致 panic，怎么办？panic-recover 配合使用即可。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SafeClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ch &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(closed &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;() != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   closed = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 如果 ch 是一个已经关闭的，会 panic 的，然后被 recover 捕捉到；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这并不优雅。&lt;/p&gt;
&lt;h3 id=&quot;方法二：sync-Once&quot;&gt;&lt;a href=&quot;#方法二：sync-Once&quot; class=&quot;headerlink&quot; title=&quot;方法二：sync.Once&quot;&gt;&lt;/a&gt;方法二：sync.Once&lt;/h3&gt;&lt;p&gt;可以使用 &lt;code&gt;sync.Once&lt;/code&gt; 来确保 &lt;code&gt;close&lt;/code&gt; 只执行一次。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ChanMgr &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; C    &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; once sync.Once&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewChanMgr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;ChanMgr&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;ChanMgr&amp;#123;C: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(cm *ChanMgr)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SafeClose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; cm.once.Do(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(cm.C) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这看着还可以。&lt;/p&gt;
&lt;h3 id=&quot;方法三：事件同步来解决&quot;&gt;&lt;a href=&quot;#方法三：事件同步来解决&quot; class=&quot;headerlink&quot; title=&quot;方法三：事件同步来解决&quot;&gt;&lt;/a&gt;方法三：事件同步来解决&lt;/h3&gt;&lt;p&gt;对于关闭 channel 这个我们有两个简要的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;永远不要尝试在读端关闭 channel ；&lt;/li&gt;
&lt;li&gt;永远只允许一个 goroutine（比如，只用来执行关闭操作的一个 goroutine ）执行关闭操作；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用 &lt;code&gt;sync.WaitGroup&lt;/code&gt; 来同步这个关闭事件，遵守以上的原则，举几个例子：&lt;/p&gt;
&lt;h4 id=&quot;第一个例子：一个-sender&quot;&gt;&lt;a href=&quot;#第一个例子：一个-sender&quot; class=&quot;headerlink&quot; title=&quot;第一个例子：一个 sender&quot;&gt;&lt;/a&gt;第一个例子：一个 sender&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// channel 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 用来 recevivers 同步事件的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg := sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// sender（写端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c &amp;lt;- &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 满足某些情况，则 close channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// receivers （读端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// ... 处理 channel 里的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 等待所有的 receivers 完成；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里例子里面，我们在 sender 的 goroutine 关闭 channel，因为只有一个 sender，所以关闭自然是安全的。receiver 使用 &lt;code&gt;WaitGroup&lt;/code&gt; 来同步事件，receiver 的 for 循环只有在 channel close 之后才会退出，主协程的 &lt;code&gt;wg.Wait()&lt;/code&gt; 语句只有所有的 receivers 都完成才会返回。所以，事件的顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写端入队一个整形元素&lt;/li&gt;
&lt;li&gt;关闭 channel&lt;/li&gt;
&lt;li&gt;所有的读端安全退出&lt;/li&gt;
&lt;li&gt;主协程返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一切都是安全的&lt;/p&gt;
&lt;h4 id=&quot;第二个例子：多个-sender&quot;&gt;&lt;a href=&quot;#第二个例子：多个-sender&quot; class=&quot;headerlink&quot; title=&quot;第二个例子：多个 sender&quot;&gt;&lt;/a&gt;第二个例子：多个 sender&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// channel 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 用来 recevivers 同步事件的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg := sync.WaitGroup&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ctx, cancel := context.WithCancel(context.TODO())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 专门关闭的协程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time.Sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cancel()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ... 某种条件下，关闭 channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// senders（写端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context, id &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; c &amp;lt;- id: &lt;span class=&quot;comment&quot;&gt;// 入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;(ctx, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// receivers（读端）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// ... 处理 channel 里的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 等待所有的 receivers 完成；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子我们看到有多个 sender 和 receiver ，这种情况我们还是要保证一点：close(ch) 操作的只能有一个人，我们单独抽出来一个 goroutine 来做这个事情，并且使用 context 来做事件同步，事件发生顺序是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;10 个写端协程（sender）运行，投递元素；&lt;/li&gt;
&lt;li&gt;10 个读端协程（receiver）运行，读取元素；&lt;/li&gt;
&lt;li&gt;2 分钟超时之后，单独协程执行 &lt;code&gt;close(channel)&lt;/code&gt; 操作；&lt;/li&gt;
&lt;li&gt;主协程返回；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一切都是安全的。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;channel 并没有直接提供判断是否 close 的接口，官方推荐使用 context 和 select 语法配合使用，事件通知的方式，达到优雅判断 channel 关闭的效果；&lt;/li&gt;
&lt;li&gt;channel 关闭姿势也有讲究，永远不要尝试在读端关闭，永远保持一个关闭入口处，使用 sync.WaitGroup 和 context 实现事件同步，达到优雅关闭效果；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者：奇伢   来源：奇伢云存储&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 为什么没有判断 close 的接口？&lt;/li&gt;
&lt;li&gt;Go 关闭 channel 究竟做了什么？&lt;br&gt;  -&lt;code&gt;closechan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个判断 chan 是否 close 的函数&lt;ul&gt;
&lt;li&gt;思考方法一：通过“写”chan 实现&lt;/li&gt;
&lt;li&gt;思考方法二：通过“读”chan 实现&lt;/li&gt;
&lt;li&gt;chan close 原则&lt;/li&gt;
&lt;li&gt;其实并不需要 &lt;code&gt;isChanClose&lt;/code&gt; 函数 !!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;怎么优雅关闭 chan ？&lt;ul&gt;
&lt;li&gt;方法一：panic-recover&lt;/li&gt;
&lt;li&gt;方法二：sync.Once&lt;/li&gt;
&lt;li&gt;方法三：事件同步来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="channel" scheme="http://team.jiunile.com/categories/golang/channel/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="closechan" scheme="http://team.jiunile.com/tags/closechan/"/>
    
  </entry>
  
  <entry>
    <title>Go Sync.Pool 背后的想法</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-sync-pool.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-sync-pool.html</id>
    <published>2020-11-14T14:00:00.000Z</published>
    <updated>2020-11-13T09:45:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我最近在我的一个项目中遇到了垃圾回收问题。大量对象被重复分配，并导致 GC 的巨大工作量。使用 &lt;code&gt;sync.Pool&lt;/code&gt;，我能够减少分配和 GC 工作负载。&lt;/p&gt;
&lt;h2 id=&quot;什么是-sync-Pool？&quot;&gt;&lt;a href=&quot;#什么是-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;什么是 sync.Pool？&quot;&gt;&lt;/a&gt;什么是 sync.Pool？&lt;/h2&gt;&lt;p&gt;Go 1.3 版本的亮点之一是同步池。它是 &lt;code&gt;sync&lt;/code&gt; 包下的一个组件，用于创建自我管理的临时检索对象池。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#为什么要使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 sync.Pool？&quot;&gt;&lt;/a&gt;为什么要使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;我们希望尽可能减少 GC 开销。频繁的内存分配和回收会给 GC 带来沉重的负担。&lt;code&gt;sync.Poll&lt;/code&gt; 可以缓存暂时不使用的对象，并在下次需要时直接使用它们（无需重新分配）。这可能会减少 GC 工作负载并提高性能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;怎么使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#怎么使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;怎么使用 sync.Pool？&quot;&gt;&lt;/a&gt;怎么使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;首先，您需要设置新函数。当池中没有缓存对象时将使用此函数。之后，您只需要使用 &lt;code&gt;Get&lt;/code&gt; 和 &lt;code&gt;Put&lt;/code&gt; 方法来检索和返回对象。另外，池在第一次使用后绝对不能复制。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;New&lt;/code&gt; 函数类型是 &lt;code&gt;func() interface{}&lt;/code&gt;，&lt;code&gt;Get&lt;/code&gt; 方法返回一个 &lt;code&gt;interface{}&lt;/code&gt;。为了得到具体对象，你需要做一个类型断言。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A dummy struct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initializing pool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; personPool = sync.Pool&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// New optionally specifies a function to generate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// a value when Get would otherwise return nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	New: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Main function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Get hold of an instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newPerson := personPool.Get().(*Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Defer release function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// After that the same instance is &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// reusable by another routine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; personPool.Put(newPerson)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Using the instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newPerson.Name = &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基准测试&quot;&gt;&lt;a href=&quot;#基准测试&quot; class=&quot;headerlink&quot; title=&quot;基准测试&quot;&gt;&lt;/a&gt;基准测试&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; personPool = sync.Pool&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	New: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkWithoutPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ReportAllocs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ResetTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Age = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkWithPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p *Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ReportAllocs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.ResetTimer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; j++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p = personPool.Get().(*Person)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Age = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			personPool.Put(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithoutPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithoutPool-8   160698 ns/op   80001 B/op   10000 allocs/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkWithPool-8      191163 ns/op       0 B/op       0 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;权衡&quot;&gt;&lt;a href=&quot;#权衡&quot; class=&quot;headerlink&quot; title=&quot;权衡&quot;&gt;&lt;/a&gt;权衡&lt;/h2&gt;&lt;p&gt;生活中的一切都是一种权衡。池也有它的性能成本。使用 &lt;code&gt;sync.Pool&lt;/code&gt; 比简单的初始化要慢得多。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkPool&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p sync.Pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Put(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p.Get()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkAllocation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b.RunParallel(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pb.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i = i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;压测结果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkPool-8           283395016          4.40 ns/op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkAllocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BenchmarkAllocation-8    1000000000         0.344 ns/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;sync-Pool-是如何工作的？&quot;&gt;&lt;a href=&quot;#sync-Pool-是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;sync.Pool 是如何工作的？&quot;&gt;&lt;/a&gt;sync.Pool 是如何工作的？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sync.Pool&lt;/code&gt; 有两个对象容器: 本地池 (活动) 和受害者缓存 (存档)。&lt;/p&gt;
&lt;p&gt;根据 &lt;code&gt;sync/pool.go&lt;/code&gt; ，包 &lt;code&gt;init&lt;/code&gt; 函数作为清理池的方法&lt;a href=&quot;https://golang.org/src/sync/pool.go?s=8003:8060#L271&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;注册到运行时&lt;/a&gt;。此方法将由 GC 触发。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   runtime_registerPoolCleanup(poolCleanup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 GC 被触发时，受害者缓存中的对象将被收集，然后本地池中的对象将被移动到受害者缓存中。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;poolCleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Drop victim caches from all pools.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; oldPools &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victim = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victimSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Move primary cache to victim cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; allPools &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victim = p.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.victimSize = p.localSize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.local = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.localSize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oldPools, allPools = allPools, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新对象被放入本地池中。调用 &lt;code&gt;Put&lt;/code&gt; 方法也会将对象放入本地池中。调用 &lt;code&gt;Get&lt;/code&gt; 方法将首先从受害者缓存中获取对象，如果受害者缓存为空，则对象将从本地池中获取。&lt;br&gt;&lt;img src=&quot;/images/go/syncpool_1.gif&quot; alt=&quot;sync.Pool localPool and victimCache&quot;&gt;&lt;/p&gt;
&lt;p&gt;供你参考，Go 1.12 sync.pool 实现使用基于 &lt;code&gt;mutex&lt;/code&gt; 的锁，用于来自多个 Goroutines 的线程安全操作。Go 1.13 &lt;a href=&quot;https://github.com/golang/go/commit/d5fd2dd6a17a816b7dfd99d4df70a85f1bf0de31#diff-491b0013c82345bf6cfa937bd78b690d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;引入了一个双链表&lt;/a&gt;作为共享池，它删除了 &lt;code&gt;mutex&lt;/code&gt; 并改善了共享访问。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;当有一个昂贵的对象需要频繁创建时，使用 &lt;code&gt;sync.Pool&lt;/code&gt; 是非常有益的。&lt;/p&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/swlh/go-the-idea-behind-sync-pool-32da5089df72&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/swlh/go-the-idea-behind-sync-pool-32da5089df72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我最近在我的一个项目中遇到了垃圾回收问题。大量对象被重复分配，并导致 GC 的巨大工作量。使用 &lt;code&gt;sync.Pool&lt;/code&gt;，我能够减少分配和 GC 工作负载。&lt;/p&gt;
&lt;h2 id=&quot;什么是-sync-Pool？&quot;&gt;&lt;a href=&quot;#什么是-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;什么是 sync.Pool？&quot;&gt;&lt;/a&gt;什么是 sync.Pool？&lt;/h2&gt;&lt;p&gt;Go 1.3 版本的亮点之一是同步池。它是 &lt;code&gt;sync&lt;/code&gt; 包下的一个组件，用于创建自我管理的临时检索对象池。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-sync-Pool？&quot;&gt;&lt;a href=&quot;#为什么要使用-sync-Pool？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 sync.Pool？&quot;&gt;&lt;/a&gt;为什么要使用 sync.Pool？&lt;/h2&gt;&lt;p&gt;我们希望尽可能减少 GC 开销。频繁的内存分配和回收会给 GC 带来沉重的负担。&lt;code&gt;sync.Poll&lt;/code&gt; 可以缓存暂时不使用的对象，并在下次需要时直接使用它们（无需重新分配）。这可能会减少 GC 工作负载并提高性能。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="sync" scheme="http://team.jiunile.com/categories/golang/sync/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="sync.poll" scheme="http://team.jiunile.com/tags/sync-poll/"/>
    
      <category term="连接池" scheme="http://team.jiunile.com/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>我在 Go 中犯了 5 个错误</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-5-mistakes.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-5-mistakes.html</id>
    <published>2020-11-13T14:00:00.000Z</published>
    <updated>2020-11-13T04:58:39.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;人皆犯错，宽恕是德   — Alexander Pope&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些都是我在写 Go 中犯的错误。尽管这些可能不会导致任何类型的错误，但它们可能会潜在地影响软件。&lt;/p&gt;
&lt;h2 id=&quot;1-内循环&quot;&gt;&lt;a href=&quot;#1-内循环&quot; class=&quot;headerlink&quot; title=&quot;1 内循环&quot;&gt;&lt;/a&gt;1 内循环&lt;/h2&gt;&lt;p&gt;有几种方法可以造成循环内部的混乱，你需要注意。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-使用引用循环迭代变量&quot;&gt;&lt;a href=&quot;#1-1-使用引用循环迭代变量&quot; class=&quot;headerlink&quot; title=&quot;1.1 使用引用循环迭代变量&quot;&gt;&lt;/a&gt;1.1 使用引用循环迭代变量&lt;/h3&gt;&lt;p&gt;由于效率的原因，循环迭代变量是单个变量，在每次循环迭代中采用不同的值。这可能会导致不知情的行为。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;in := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out []*&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; in &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	out = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(out, &amp;amp;v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;, *out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Addresses:&quot;&lt;/span&gt;, out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果将是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Values: 3 3 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Addresses: 0xc000014188 0xc000014188 0xc000014188&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，&lt;code&gt;out&lt;/code&gt; 切片中的所有元素都是 3。实际上，实际上很容易解释为什么会发生这种情况：在每次迭代中，我们都会将 &lt;code&gt;v&lt;/code&gt; 的地址附加到 &lt;code&gt;out&lt;/code&gt; 切片中。如前所述，&lt;code&gt;v&lt;/code&gt; 是在每次迭代中接受新值的单个变量。因此，正如您在输出的第二行中看到的，地址是相同的，并且所有地址都指向相同的值。&lt;/p&gt;
&lt;p&gt;简单的解决方法是将循环迭代器变量复制到新变量中：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;in := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; out []*&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; in &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	v := v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	out = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(out, &amp;amp;v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Values:&quot;&lt;/span&gt;, *out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], *out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Addresses:&quot;&lt;/span&gt;, out[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;新的输出：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Values: 1 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Addresses: 0xc0000b6010 0xc0000b6018 0xc0000b6020&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的问题可以找到正在 Goroutine 中使用的循环迭代变量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list := []&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果将是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 3 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它可以使用上面提到的相同的解决方案来修复。注意，如果不使用 Goroutine 运行该函数，代码将按照预期运行。&lt;/p&gt;
&lt;h3 id=&quot;1-2-在循环中调用-WaitGroup-Wait&quot;&gt;&lt;a href=&quot;#1-2-在循环中调用-WaitGroup-Wait&quot; class=&quot;headerlink&quot; title=&quot;1.2 在循环中调用 WaitGroup.Wait&quot;&gt;&lt;/a&gt;1.2 在循环中调用 WaitGroup.Wait&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;WaitGroup&lt;/code&gt; 类型的共享变量会犯此错误，如下面的代码所示，当第 5 行的 &lt;code&gt;Done()&lt;/code&gt; 被调用 &lt;code&gt;len(tasks)&lt;/code&gt; 次数时，第 7 行的 &lt;code&gt;Wait()&lt;/code&gt; 只能被解除阻塞，因为它被用作参数在第 2 行调用 &lt;code&gt;Add()&lt;/code&gt;。但是，&lt;code&gt;Wait()&lt;/code&gt; 在循环中被调用，因此在下一个迭代中，它会阻止在第 4 行创建 Goroutine。简单的解决方案是将 &lt;code&gt;Wait()&lt;/code&gt; 的调用移出循环。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wg.Add(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(tasks))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, t := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tasks &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t *task)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; group.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// group.Wait()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group.Wait()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-3-在循环中使用-defer&quot;&gt;&lt;a href=&quot;#1-3-在循环中使用-defer&quot; class=&quot;headerlink&quot; title=&quot;1.3 在循环中使用 defer&quot;&gt;&lt;/a&gt;1.3 在循环中使用 defer&lt;/h3&gt;&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; 直到函数返回才执行。除非你确定你在做什么，否则你不应该在循环中使用 &lt;code&gt;defer&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;persons := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]Person, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; persons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// defer mutex.Unlock()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p.Age = &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，如果你使用第 8 行而不是第 10 行，下一次迭代就不能持有互斥锁，因为锁已经在使用中，并且循环永远阻塞。&lt;/p&gt;
&lt;p&gt;如果你真的需要使用 defer 内循环，你可能想委托另一个函数来做这项工作。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Person &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;persons := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]Person, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, p := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; persons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mutex.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mutex.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p.Age = &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，有时使用 &lt;code&gt;defer&lt;/code&gt; 在循环可能会变得很方便。所以你真的需要知道你在做什么。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go 不能容忍愚蠢者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-发送到一个无保证的-channel&quot;&gt;&lt;a href=&quot;#2-发送到一个无保证的-channel&quot; class=&quot;headerlink&quot; title=&quot;2 发送到一个无保证的 channel&quot;&gt;&lt;/a&gt;2 发送到一个无保证的 channel&lt;/h2&gt;&lt;p&gt;您可以将值从一个 Goroutine 发送到 channels，并将这些值接收到另一个 Goroutine。默认情况下，发送和接收，直到另一方准备好。这允许 Goroutines 在没有显式锁或条件变量的情况下进行同步。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(timeout time.Duration)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ch :=make(chan obj)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; obj, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		obj := do()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ch &amp;lt;- result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; result = &amp;lt;- ch :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&amp;lt;- time.After(timeout):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们检查一下上面的代码。&lt;code&gt;doReq&lt;/code&gt; 函数在第 4 行创建一个子 Goroutine 来处理请求，这在Go服务程序中是一种常见的做法。子 Goroutine 执行 &lt;code&gt;do&lt;/code&gt; 函数并通过第 6 行通道 &lt;code&gt;ch&lt;/code&gt; 将结果发送回父节点。子进程会在第 6 行阻塞，直到父进程在第 9 行接收到 &lt;code&gt;ch&lt;/code&gt; 的结果。同时，父进程将阻塞 &lt;code&gt;select&lt;/code&gt;，直到子进程将结果发送给 &lt;code&gt;ch&lt;/code&gt;（第9行）或发生超时（第11行）。如果超时发生在更早的时候，父函数将从第 12 行 &lt;code&gt;doReq&lt;/code&gt; 方法返回，并且没有人可以再接收 &lt;code&gt;ch&lt;/code&gt; 的结果，这将导致子函数永远被阻塞。解决方案是将 &lt;code&gt;ch&lt;/code&gt; 从无缓冲通道更改为缓冲通道，这样即使父及退出，子 Goroutine 也始终可以发送结果。另一个修复方法是在第 6 行使用默认为空的 &lt;code&gt;select&lt;/code&gt; 语句，这样如果没有 Goroutine 接收 &lt;code&gt;ch&lt;/code&gt;，就会发生默认情况。尽管这种解决方案可能并不总是有效。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- result: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-不使用接口&quot;&gt;&lt;a href=&quot;#3-不使用接口&quot; class=&quot;headerlink&quot; title=&quot;3 不使用接口&quot;&gt;&lt;/a&gt;3 不使用接口&lt;/h2&gt;&lt;p&gt;接口可以使代码更加灵活。这是在代码中引入多态的一种方法。接口允许您请求一组行为，而不是特定类型。不使用接口可能不会导致任何错误，但它会导致代码不简单、不灵活和不具有可扩展性。&lt;/p&gt;
&lt;p&gt;在众多接口中，&lt;code&gt;io.Reader&lt;/code&gt; 和 &lt;code&gt;io.Writer&lt;/code&gt; 可能是最受欢迎的。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Reader &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Read(p []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Writer &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Write(p []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) (n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, err error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些接口可以非常强大。假设您要将对象写入文件中，因此您定义了一个 Save 方法：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *obj)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file os.File)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果您第二天需要写入 &lt;code&gt;http.ResponseWriter&lt;/code&gt; 该怎么办？您不想定义新方法。是吧？所以使用 &lt;code&gt;io.Writer&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(o *obj)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w io.Writer)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一个重要的注意事项，你应该知道，总是要求你要使用的行为。在上面的例子中，请求一个&lt;code&gt;io.ReadWriteCloser&lt;/code&gt; 也可以工作得很好，但当你要使用的唯一方法是 &lt;code&gt;Write&lt;/code&gt; 时，这不是一个最佳实践。接口越大，抽象就越弱。&lt;/p&gt;
&lt;p&gt;所以大多数时候你最好专注于行为而不是具体的类型。&lt;/p&gt;
&lt;h2 id=&quot;4-不好的顺序结构&quot;&gt;&lt;a href=&quot;#4-不好的顺序结构&quot; class=&quot;headerlink&quot; title=&quot;4 不好的顺序结构&quot;&gt;&lt;/a&gt;4 不好的顺序结构&lt;/h2&gt;&lt;p&gt;这个错误也不会导致任何错误，但是它会导致更多的内存使用。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BadOrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 16 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 4 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;似乎两种类型的大小都相同，为 21 个字节，但结果显示出完全不同。使用 &lt;code&gt;GOARCH=amd64&lt;/code&gt; 编译代码，&lt;code&gt;BadOrderedPerson&lt;/code&gt; 类型分配 32 字节，而 &lt;code&gt;OrderedPerson&lt;/code&gt; 类型分配 24 字节。为什么？原因是&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_structure_alignment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据结构对齐&lt;/a&gt;。在 64 位体系结构中，内存分配 8 字节的连续数据包。需要添加的填充可以通过以下方式计算：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;padding = (align - (offset mod align)) mod align&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aligned = offset + padding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = offset + ((align - (offset mod align)) mod align)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BadOrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// 1 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 7 byte: padding for alignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 16 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// 4 byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// to prevent unkeyed literals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// zero sized values, like struct&amp;#123;&amp;#125; and [0]byte occurring at &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// the end of a structure are assumed to have a size of one byte.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// so padding also will be addedd here as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; OrderedPerson &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Age     &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Veteran &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_       &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当您有一个大的常用类型时，它可能会导致性能问题。但是不要担心，您不必手动处理所有的结构。使用 &lt;a href=&quot;https://github.com/mdempsky/maligned&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maligned&lt;/a&gt; 你可以轻松检查代码以解决此问题。&lt;/p&gt;
&lt;h2 id=&quot;5-在测试中没有使用-race-detector&quot;&gt;&lt;a href=&quot;#5-在测试中没有使用-race-detector&quot; class=&quot;headerlink&quot; title=&quot;5 在测试中没有使用 race detector&quot;&gt;&lt;/a&gt;5 在测试中没有使用 race detector&lt;/h2&gt;&lt;p&gt;数据竞争会导致神秘的故障，通常是在代码部署到生产环境很久之后。正因为如此，它们是并发系统中最常见也是最难调试的 bug 类型。为了帮助区分这些 bug, Go 1.1 引入了一个内置的数据竞争检测器。它可以简单地添加 &lt;code&gt;-race&lt;/code&gt; 标志。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -race pkg    // to &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; the package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go run -race pkg.go  // to run the &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go build -race       // to build the package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go install -race pkg // to install the package&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启用 race 检测器后，编译器将记录在代码中访问内存的时间和方式，而 &lt;code&gt;runtime&lt;/code&gt; 监视对共享变量的不同步访问。&lt;/p&gt;
&lt;p&gt;当发现数据竞争时，竞争检测器将打印一份报告，其中包含冲突访问的堆栈跟踪。下面是一个例子：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WARNING: DATA RACE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Read by goroutine 185:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*pollServer).AddFD()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:89 +0x398&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*pollServer).WaitWrite()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:247 +0x45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*netFD).Write()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/fd_unix.go:540 +0x4d4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*conn).Write()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/net.go:129 +0x101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·060()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:603 +0xaf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Previous write by goroutine 184:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.setWriteDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/sockopt_posix.go:135 +0xdf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.setDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/sockopt_posix.go:144 +0x9c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.(*conn).SetDeadline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/net.go:161 +0xe3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·061()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:616 +0x3ed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Goroutine 185 (running) created at:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.func·061()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:609 +0x288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Goroutine 184 (running) created at:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  net.TestProlongTimeout()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/net/timeout_test.go:618 +0x298&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testing.tRunner()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src/testing/testing.go:301 +0xe8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-最后一句&quot;&gt;&lt;a href=&quot;#6-最后一句&quot; class=&quot;headerlink&quot; title=&quot;6 最后一句&quot;&gt;&lt;/a&gt;6 最后一句&lt;/h2&gt;&lt;p&gt;唯一真正的错误是我们什么也没学到。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译自：&lt;a href=&quot;https://medium.com/swlh/5-mistakes-ive-made-in-go-75fb64b943b8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/swlh/5-mistakes-ive-made-in-go-75fb64b943b8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;人皆犯错，宽恕是德   — Alexander Pope&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些都是我在写 Go 中犯的错误。尽管这些可能不会导致任何类型的错误，但它们可能会潜在地影响软件。&lt;/p&gt;
&lt;h2 id=&quot;1-内循环&quot;&gt;&lt;a href=&quot;#1-内循环&quot; class=&quot;headerlink&quot; title=&quot;1 内循环&quot;&gt;&lt;/a&gt;1 内循环&lt;/h2&gt;&lt;p&gt;有几种方法可以造成循环内部的混乱，你需要注意。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="犯错" scheme="http://team.jiunile.com/categories/golang/%E7%8A%AF%E9%94%99/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="错误" scheme="http://team.jiunile.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>用 Go 从头开始构建容器（第1部分：命名空间）</title>
    <link href="http://team.jiunile.com//blog/2020/11/go-build-container-ns.html"/>
    <id>http://team.jiunile.com//blog/2020/11/go-build-container-ns.html</id>
    <published>2020-11-12T14:00:00.000Z</published>
    <updated>2020-11-13T01:53:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在过去几年中，容器的使用显著增加。容器的概念已经出现好几年了，但是 Docker 易于使用的命令行才从 2013 年开始在开发人员中普及容器。&lt;/p&gt;
&lt;p&gt;在这个系列中，我试图演示容器是如何在下面工作的，以及我是如何开发容器的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是-vessel？&quot;&gt;&lt;a href=&quot;#什么是-vessel？&quot; class=&quot;headerlink&quot; title=&quot;什么是 vessel？&quot;&gt;&lt;/a&gt;什么是 vessel？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/0xc0d/vessel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vessel&lt;/a&gt; 是我的一个教学目的的项目，它实现了一个小版本的 Docker 来管理容器。它既不使用 &lt;a href=&quot;https://containerd.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;containerd&lt;/a&gt; 也不使用 &lt;a href=&quot;https://github.com/opencontainers/runc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;runc&lt;/a&gt;，而是使用一组 Linux 特性来创建容器。&lt;/p&gt;
&lt;p&gt;vessel 既不是生产就绪的，也没有经过良好测试的软件。这只是一个简单的项目来了解更多关于容器的知识。&lt;/p&gt;
&lt;h2 id=&quot;让我们开始：阅读-Docker！&quot;&gt;&lt;a href=&quot;#让我们开始：阅读-Docker！&quot; class=&quot;headerlink&quot; title=&quot;让我们开始：阅读 Docker！&quot;&gt;&lt;/a&gt;让我们开始：阅读 Docker！&lt;/h2&gt;&lt;p&gt;我发现，在开始编写代码之前，先看一下 &lt;a href=&quot;https://docs.docker.com/get-started/overview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 文档&lt;/a&gt;，了解一下容器是很有用的。&lt;/p&gt;
&lt;p&gt;Docker 就其&lt;a href=&quot;https://docs.docker.com/get-started/overview/#the-underlying-technology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;而言，利用了 linux 内核的几个特性，并将它们组合成一个称为容器格式的包装器。这些特性是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespaces&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control groups&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Union file systems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在让我们浏览一下上面的列表，并简要地了解一下它们是什么。&lt;/p&gt;
&lt;h2 id=&quot;什么是命名空间（Namespace-）&quot;&gt;&lt;a href=&quot;#什么是命名空间（Namespace-）&quot; class=&quot;headerlink&quot; title=&quot;什么是命名空间（Namespace!）?&quot;&gt;&lt;/a&gt;什么是命名空间（Namespace!）?&lt;/h2&gt;&lt;p&gt;Linux 命名空间是最现代容器实现背后的基础技术。名称空间是进程对周围运行的其他事物的感知。命名空间允许隔离一组进程中的全局系统资源。例如，网络命名空间隔离网络堆栈，这意味着该网络命名空间中的进程可以拥有自己的独立路由、防火墙规则和网络设备。&lt;/p&gt;
&lt;p&gt;因此，如果没有命名空间，容器中的进程可能（例如）卸载文件系统，或在另一个容器中设置网络接口。&lt;/p&gt;
&lt;h3 id=&quot;哪些资源可以使用命名空间进行隔离？&quot;&gt;&lt;a href=&quot;#哪些资源可以使用命名空间进行隔离？&quot; class=&quot;headerlink&quot; title=&quot;哪些资源可以使用命名空间进行隔离？&quot;&gt;&lt;/a&gt;哪些资源可以使用命名空间进行隔离？&lt;/h3&gt;&lt;p&gt;在当前的 linux 内核 (5.9) 中，有 8 种类型的不同命名空间。每个命名空间可以隔离某个全局系统资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cgroup&lt;/strong&gt;: 此命名空间隔离控制组根目录。我将在第 2 部分中解释什么是 cgroups。但简而言之，cgroup 允许系统为一组进程定义资源限制。但要注意的是，“cgroup namespce” 仅控制在命名空间中哪些 cgroup 可见。命名空间无法分配资源限制。我们稍后将对此进行深入解释。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPC&lt;/strong&gt;: 此命名空间隔离进程间通信机制，如 System V 和 POSIX 消息队列。理解IPC 并不难，但这篇文章不会讨论这个主题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: 此名称空间隔离路由、防火墙规则和名称空间内的一组进程可以看到的网络设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mount&lt;/strong&gt;：此名称空间隔离每个名称空间中的挂载点列表。在单独的挂载名称空间中运行的进程可以挂载和卸载，而不会影响其他名称空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt;：这个命名空间隔离进程 ID 号空间。它支持在名称空间内挂起/恢复进程之类的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;：这个命名空间隔离了 &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt; 和 &lt;code&gt;CLOCK_BOOTTIME&lt;/code&gt; 系统时钟，它们影响了针对这些时钟（如系统正常运行时间）测量的 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User&lt;/strong&gt;：此名称空间隔离用户 id、组 id、根目录、密钥和功能。这允许进程在名称空间内是根，但不在命名空间外（如在主机中）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTS&lt;/strong&gt;：这个命名空间隔离主机名和域名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;关于命名空间的重要注意事项&quot;&gt;&lt;a href=&quot;#关于命名空间的重要注意事项&quot; class=&quot;headerlink&quot; title=&quot;关于命名空间的重要注意事项&quot;&gt;&lt;/a&gt;关于命名空间的重要注意事项&lt;/h3&gt;&lt;p&gt;命名空间除了隔离之外什么也没做，这意味着，例如，加入一个新的网络名称空间不会给您提供一组隔离的网络设备，您必须自己创建它们。UTS 命名空间也是如此，它不会改变您的主机名。它所做的唯一事情就是隔离与主机名相关的系统调用。我们将在这个系列中一起做这些事情。&lt;/p&gt;
&lt;h3 id=&quot;命名空间生命周期&quot;&gt;&lt;a href=&quot;#命名空间生命周期&quot; class=&quot;headerlink&quot; title=&quot;命名空间生命周期&quot;&gt;&lt;/a&gt;命名空间生命周期&lt;/h3&gt;&lt;p&gt;当命名空间中的最后一个进程离开命名空间时，命名空间将自动删除。然而，有许多例外情况使名称空间在没有任何成员进程的情况下保持活动。我们将在为 vessel 创建网络名称空间时解释其中一个例外。&lt;/p&gt;
&lt;h3 id=&quot;命名空间的系统调用&quot;&gt;&lt;a href=&quot;#命名空间的系统调用&quot; class=&quot;headerlink&quot; title=&quot;命名空间的系统调用&quot;&gt;&lt;/a&gt;命名空间的系统调用&lt;/h3&gt;&lt;p&gt;现在我们已经简要了解了命名空间是什么，接下来看看如何与命名空间交互。在 Linux 中，有一组允许创建、加入和发现命名空间的系统调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/strong&gt;：此系统调用实际上创建了一个新进程。但是借助 flags 参数，新进程将创建自己的新命名空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;setns&lt;/code&gt;&lt;/strong&gt;：此系统调用允许正在运行的进程加入现有命名空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;unshare&lt;/code&gt;&lt;/strong&gt;：此系统调用实际上与克隆相同，但不同之处在于此系统调用将创建当前进程并将其移动到新的命名空间，而 &lt;code&gt;clone&lt;/code&gt; 将创建具有新的命名空间的新进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;额外提示：&lt;code&gt;fork&lt;/code&gt; 和 &lt;code&gt;vfork&lt;/code&gt; 内部系统调用只是使用不同的参数调用 &lt;code&gt;clone()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;命名空间-Flags&quot;&gt;&lt;a href=&quot;#命名空间-Flags&quot; class=&quot;headerlink&quot; title=&quot;命名空间 Flags&quot;&gt;&lt;/a&gt;命名空间 Flags&lt;/h3&gt;&lt;p&gt;上面提到的系统调用需要一个能够指定所需命名空间的 flag。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWCGROUP Cgroup namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWIPC    IPC namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWNET    Network namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWNS     Mount namespaces$$ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWPID    PID namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWTIME   Time namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWUSER   User namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLONE_NEWUTS    UTS namespaces&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例如，如果你想为当前进程创建一个新的网络命名空间，你应该用 &lt;code&gt;CLONE_NEWNET&lt;/code&gt; 标记调用&lt;code&gt;unshare&lt;/code&gt;，如果您想使用新用户和 UTS 命名空间创建新进程，你应该用&lt;code&gt;CLONE_NEWUSER|CLONE_NEWUTS&lt;/code&gt; 调用 clone。竖线表示或按位组合两个标记。&lt;/p&gt;
&lt;h3 id=&quot;命名空间文件&quot;&gt;&lt;a href=&quot;#命名空间文件&quot; class=&quot;headerlink&quot; title=&quot;命名空间文件&quot;&gt;&lt;/a&gt;命名空间文件&lt;/h3&gt;&lt;p&gt;在上面我提到过 &lt;code&gt;setns&lt;/code&gt; 系统调用将在名称空间之间移动一个正在运行的进程。但是，如何指定要移动到哪个名称空间呢？好的，在创建名称空间之后，成员进程将具有指向命名空间文件的符号链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Unix 中，所有内容都是文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，在您的 shell 中，通过列出 /proc/[pid]/ns 目录下的文件，您可以看到进程命名空间。在这里你可以看到正在运行的 shell 的当前命名空间（&lt;code&gt;self&lt;/code&gt; 代表当前 shell pid）:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /proc/self/ns | cut &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 10-12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgroup            -&amp;gt; cgroup:[4026531835]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipc               -&amp;gt; ipc:[4026531839]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mnt               -&amp;gt; mnt:[4026531840]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net               -&amp;gt; net:[4026532008]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid               -&amp;gt; pid:[4026531836]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_children  -&amp;gt; pid:[4026531836]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time              -&amp;gt; time:[4026531834]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_children -&amp;gt; time:[4026531834]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user              -&amp;gt; user:[4026531837]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uts               -&amp;gt; uts:[4026531838]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样使用 &lt;code&gt;lsns&lt;/code&gt; 命令，您也可以看到进程命名空间列表:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# lsns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NS TYPE   NPROCS   PID USER    COMMAND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531834 time      244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531835 cgroup    244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531836 pid       199     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531837 user      198     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531838 uts       241     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531839 ipc       244     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4026531840 mnt       234     1 root    /sbin/init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实际上 &lt;code&gt;setns&lt;/code&gt; syscall 所做的是更改 &lt;code&gt;/proc/[pid]/ns&lt;/code&gt; 目录下文件的链接。&lt;/p&gt;
&lt;h2 id=&quot;废话少说，让我们编码吧！&quot;&gt;&lt;a href=&quot;#废话少说，让我们编码吧！&quot; class=&quot;headerlink&quot; title=&quot;废话少说，让我们编码吧！&quot;&gt;&lt;/a&gt;废话少说，让我们编码吧！&lt;/h2&gt;&lt;p&gt;现在我们知道我们想要的一切。是时候编写第一个在单独命名空间上运行的代码了。首先让我们看看 &lt;code&gt;unshare&lt;/code&gt; 是如何工作的。下面的代码，在第 1 行使用 &lt;code&gt;syscall&lt;/code&gt; 包和 &lt;code&gt;Unshare&lt;/code&gt; 方法为当前运行的 Go 程序创建一个新的名称空间，然后在第 5 行将主机名设置为“container”，然后在第 9 行，它创建一个新命令并运行它。&lt;code&gt;Run&lt;/code&gt; 启动命令并等待其完成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;除用户命名空间外，创建命名空间需要 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 功能。因此，您需要以 root 用户来运行该程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;err := syscall.Unshare(syscall.CLONE_NEWPID|syscall.CLONE_NEWUTS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Fprintln(os.Stderr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;err = syscall.Sethostname([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Fprintln(os.Stderr, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdin = os.Stdin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdout = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stderr = os.Stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们构建程序并进行测试。对于 host 中的第一个命令，我运行 ps 来监视正在运行的进程，然后获取主机名和当前 shell PID（例如 self，$$ 代表当前进程 PID）。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PID TTY          TIME CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27973 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27984 pts/2    00:00:00 ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27973&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在让我们看看运行程序后会发生什么。获取主机名它返回“container”。似乎有用！&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;container&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们看看进程 ID 是什么。是的！它是 1，可行。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让我们运行 ps 来查看在容器内运行的进程。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PID TTY          TIME CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27973 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  27998 pts/2    00:00:00 unshare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  28003 pts/2    00:00:00 sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  28011 pts/2    00:00:00 ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发生什么事了!？我们可以看到带有大型 pid 的容器内的主机进程没有意义。&lt;/p&gt;
&lt;p&gt;我将终止其中一个进程，看看会发生什么:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt; 27998&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh: &lt;span class=&quot;built_in&quot;&gt;kill&lt;/span&gt;: (27998) - No such process&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;没有这样的进程，它说。精彩吗？让我解释一下。代码实际上是有效的，我们在一个新的 PID 命名空间中，我们可以看到我们的进程 ID 是 1。问题是 ps 命令。下面的 ps 使用 proc 伪文件系统列出所有正在运行的进程。为了能够拥有我们自己的 proc 文件系统，我们需要一个新的挂载名称空间，以及一个新的根路径来将 proc 挂载到其中。我们将在下一部分深入讨论。&lt;/p&gt;
&lt;h3 id=&quot;Clone-in-Go&quot;&gt;&lt;a href=&quot;#Clone-in-Go&quot; class=&quot;headerlink&quot; title=&quot;Clone in Go&quot;&gt;&lt;/a&gt;Clone in Go&lt;/h3&gt;&lt;p&gt;在我看来，Go 没有 clone 功能。但是，有一个名为 &lt;a href=&quot;https://github.com/liquidgecka/goclone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;goclone&lt;/a&gt; 的包，它包装了 Go 的 clone 系统调用。但是我们将要使用的解决方案是不同的。在 vessel 中，我们使用一个叫做 &lt;code&gt;reexec&lt;/code&gt; 的包，它是 Docker 团队开发的。&lt;/p&gt;
&lt;h3 id=&quot;reexec-是什么？&quot;&gt;&lt;a href=&quot;#reexec-是什么？&quot; class=&quot;headerlink&quot; title=&quot;reexec 是什么？&quot;&gt;&lt;/a&gt;reexec 是什么？&lt;/h3&gt;&lt;p&gt;Go 允许您使用一组新的名称空间运行命令。&lt;code&gt;reexec&lt;/code&gt; 背后的思想是用新的名称空间重新执行正在运行的程序本身。&lt;code&gt;reexec&lt;/code&gt; 包，后台的 &lt;code&gt;reexec&lt;/code&gt; 包将从调用 &lt;code&gt;/proc/self/exe&lt;/code&gt; 的 Go 标准库返回 &lt;code&gt;*exec.Cmd&lt;/code&gt;。该文件基本上是指向正在运行的程序可执行文件的链接。&lt;/p&gt;
&lt;p&gt;现在您已经了解了 &lt;code&gt;reexec&lt;/code&gt; 是如何工作的，让我们从容器中深入研究一些代码。下面的代码，是在 vessel 的早期阶段。它实际上是使用一组新名称空间运行新进程的代码。这个过程就是我们的容器。在第 1 行到第 4 行，函数创建参数和新的 reexec 命令，然后为其设置标准的输入、输出和错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 容器的 &lt;code&gt;fork&lt;/code&gt; 子命令（第一行）是容器模式。虽然它被隐藏在使用中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;args := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;fork&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd := reexec.Command(args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmd.SysProcAttr = &amp;amp;syscall.SysProcAttr&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Cloneflags: syscall.CLONE_NEWUTS |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWIPC |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWPID |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		syscall.CLONE_NEWNS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Go 中的  &lt;code&gt;SysProcAttr&lt;/code&gt; 命令包含操作系统特定的属性。这些属性之一是 &lt;code&gt;Cloneflags&lt;/code&gt;，通过将 flags 传递到这个值，该命令将使用新的特定名称空间运行。这样，我们的新进程就有了新的 IPC、UTS、PID 和 Mount (NS) 命名空间。但是网络命名空间呢？!&lt;/p&gt;
&lt;h3 id=&quot;深入研究网络命名空间&quot;&gt;&lt;a href=&quot;#深入研究网络命名空间&quot; class=&quot;headerlink&quot; title=&quot;深入研究网络命名空间&quot;&gt;&lt;/a&gt;深入研究网络命名空间&lt;/h3&gt;&lt;p&gt;正如我已经提到的，命名空间只能隔离资源和容器感知的边界。因此，使用新的网络命名空间运行容器不会有太大帮助。我们也应该做一些连接容器到外部网络的事情。但这怎么可能？!&lt;/p&gt;
&lt;h3 id=&quot;什么是虚拟以太网设备？&quot;&gt;&lt;a href=&quot;#什么是虚拟以太网设备？&quot; class=&quot;headerlink&quot; title=&quot;什么是虚拟以太网设备？&quot;&gt;&lt;/a&gt;什么是虚拟以太网设备？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;veth&lt;/code&gt; 可以充当网络命名空间之间的隧道。这意味着它可以在另一个命名空间中创建与网络设备的连接。&lt;br&gt;&lt;img src=&quot;/images/go/docker_ns_1.png&quot; alt=&quot;figure 1: Virtual Ethernet Devices&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟以太网设备总是成对地创建，并相互连接。在一对中的一个设备上传输的所有数据将立即在另一个设备上接收。当任一设备关闭时，这对设备的链路状态也关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，在图 1 中，有两个 veth 对。在每对设备中，一个对等设备位于主机网络命名空间内，另一个位于容器内。主机命名空间中的设备连接到网桥，该网桥被路由到名为 &lt;code&gt;eth0&lt;/code&gt; 的物理互联网连接设备。&lt;/p&gt;
&lt;p&gt;现在让我们来看看 vessel 是如何创建这样一个网络的。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(c *Container)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SetupNetwork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bridge &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(filesystem.Unmounter, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nsMountTarget := filepath.Join(netnsPath, c.Digest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vethName := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;veth%.7s&quot;&lt;/span&gt;, c.Digest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	peerName := fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;P%s&quot;&lt;/span&gt;, vethName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.SetupVirtualEthernet(vethName, peerName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetMaster(vethName, bridge); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unmount, err := network.MountNewNetworkNamespace(nsMountTarget)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetNsByFile(nsMountTarget, peerName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Change current network namespace to setup the veth&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unset, err := network.SetNetNSByFile(nsMountTarget)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; unset()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctrEthName := &lt;span class=&quot;string&quot;&gt;&quot;eth0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctrEthIPAddr := c.GetIP()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkRename(peerName, ctrEthName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkAddAddr(ctrEthName, ctrEthIPAddr); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetup(ctrEthName); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkAddGateway(ctrEthName, &lt;span class=&quot;string&quot;&gt;&quot;172.30.0.1&quot;&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := network.LinkSetup(&lt;span class=&quot;string&quot;&gt;&quot;lo&quot;&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码涵盖了容器包的 &lt;code&gt;SetupNetwork&lt;/code&gt; 方法。这个方法的职责是创建一个如图 1 所示的网络。&lt;/p&gt;
&lt;p&gt;在调用此方法之前，vessel 将创建其名为 &lt;code&gt;vessel0&lt;/code&gt; 的桥梁。这是实际传递给 &lt;code&gt;SetupNetwork&lt;/code&gt; 网桥值的名称。&lt;/p&gt;
&lt;p&gt;从现在开始，事情可能会有点混乱，但别担心。请务必多阅读几次，并遵循代码。&lt;/p&gt;
&lt;p&gt;在第 3-4 行，定义了 veth 设备对名称。然后在第 6 行，将使用关联的名称创建 veth。在第 9 行，veth 将指定 &lt;code&gt;vessel0&lt;/code&gt; 作为其主服务器，以便进一步通信。&lt;br&gt;&lt;img src=&quot;/images/go/docker_ns_2.png&quot; alt=&quot;docker_ns_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在是时候创建一个新的网络名称空间，并将其中一个 veth 对移动到其中。我们的容器终究会加入这个网络命名空间。然而，问题是命名空间的生命周期！如前所述，当最后一个进程成员离开名称空间时，名称空间将被删除。我也提到了一些例外。其中一个例外是绑定挂载命名空间时。这就是为什么有一个名为 &lt;code&gt;MountNewNetworkNamespace&lt;/code&gt; 的函数。这个函数创建一个新的名称空间，并将其绑定到一个文件以保持其活动。下面的代码涵盖了此功能。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MountNewNetworkNamespace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nsTarget &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(filesystem.Unmounter, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err := os.OpenFile(nsTarget, syscall.O_RDONLY|syscall.O_CREAT|syscall.O_EXCL, &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;unable to create target file&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// store current network namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	file, err = os.OpenFile(&lt;span class=&quot;string&quot;&gt;&quot;/proc/self/ns/net&quot;&lt;/span&gt;, os.O_RDONLY, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := syscall.Unshare(syscall.CLONE_NEWNET); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;unshare syscall failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mountPoint := filesystem.MountOption&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Source: &lt;span class=&quot;string&quot;&gt;&quot;/proc/self/ns/net&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Target: nsTarget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Type:   &lt;span class=&quot;string&quot;&gt;&quot;bind&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Flag:   syscall.MS_BIND,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unmount, err := filesystem.Mount(mountPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// reset previous network namespace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := unix.Setns(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(file.Fd()), syscall.CLONE_NEWNET); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, errors.Wrap(err, &lt;span class=&quot;string&quot;&gt;&quot;setns syscall failed: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unmount, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在第 2 行，函数创建一个文件。此文件将用于绑定新的网络命名空间。然后在第 9 行，函数存储了当前的命名空间链接，以便能够返回到它。现在是时候创建一个新的网络命名空间，并在第 15 行使用 &lt;code&gt;unshare&lt;/code&gt; 系统调用连接它。该函数现在将 &lt;code&gt;/proc/self/ns/net&lt;/code&gt; 绑定到第 2 行创建的文件。记住，&lt;code&gt;/proc/self/ns/net&lt;/code&gt; 将在 &lt;code&gt;unshare&lt;/code&gt; 系统调用后改变。&lt;/p&gt;
&lt;p&gt;这一切都很好，我们只需要离开当前的网络命名空间，然后使用第 29 行的 &lt;code&gt;setns&lt;/code&gt; 系统调用返回到我们以前的命名空间。这就是为什么函数首先存储了进程网络名称空间（第 9 行）。&lt;/p&gt;
&lt;p&gt;回到 &lt;code&gt;SetupNetwork&lt;/code&gt; 函数，现在让我们将对等设备移动到我们刚刚在 &lt;code&gt;MountNewNetworkNamespace&lt;/code&gt; 函数中创建的命名空间。由于 &lt;code&gt;nsMountTarget&lt;/code&gt; 值绑定到网络名称空间，因此它表示命名空间本身。因此，我们可以使用该文件的描述符来指定命名空间。&lt;/p&gt;
&lt;p&gt;好吧，毕竟我们有一个虚拟以太网设备对，其中一个设备在主机网络命名空间内，另一个在新的命名空间内。&lt;/p&gt;
&lt;p&gt;现在剩下的唯一任务是在新命名空间内配置设备。问题是设备在主机网络命名空间中不再可见，因此，我们需要使用 &lt;code&gt;SetNetNsByFile&lt;/code&gt; 函数（第21行）再次加入网络命名空间。此函数仅使用给定文件的描述符调用 &lt;code&gt;setns&lt;/code&gt; 系统调用。注意，我们需要 &lt;code&gt;defer&lt;/code&gt; &lt;code&gt;unset&lt;/code&gt; 函数（第 25 行），以将容器网络命名空间保留在函数的末尾。&lt;/p&gt;
&lt;p&gt;现在，代码的其余部分（第 22-43 行）在容器网络命名空间内运行。首先要做的是将容器设备重命名为 eth0（第 29行），然后关联一个新的 IP 地址（第 32 行），设置设备（第 35 行），添加设备的网关（第 38 行），最后设置回环（127.0.0.1）网络接口。现在我们完成了这里的工作，我们的网络命名空间已经完全准备好了。&lt;/p&gt;
&lt;p&gt;还要提到 172.30.0.1 是 &lt;code&gt;vessel0&lt;/code&gt; 网桥的默认 IP 地址，这并不是最好的方法，因为这个 IP 地址可能已经在使用了。我这样做是为了简单。现在你的任务是让它变得更好，并发送一个 Pull 请求。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;我们了解到命名空间是 Linux 特性之一，它为一组进程隔离全局系统资源，因此它是大多数容器中的基本技术。我们还学习了如何在 Go 中使用 &lt;code&gt;unshare&lt;/code&gt;、&lt;code&gt;clone&lt;/code&gt; 和 &lt;code&gt;setns&lt;/code&gt; 系统调用与命名空间进行交互。&lt;/p&gt;
&lt;p&gt;它还没有完成。我们将在下一部分中讨论 union 文件系统，但是现在让我们试着阅读容器代码来理解它。&lt;/p&gt;
&lt;p&gt;另外，别忘了用谷歌搜索 “Liz Rice”，看她谈论容器。&lt;/p&gt;
&lt;p&gt;感谢阅读！&lt;/p&gt;
&lt;p&gt;作者：Ali Josie 来源：medium.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在过去几年中，容器的使用显著增加。容器的概念已经出现好几年了，但是 Docker 易于使用的命令行才从 2013 年开始在开发人员中普及容器。&lt;/p&gt;
&lt;p&gt;在这个系列中，我试图演示容器是如何在下面工作的，以及我是如何开发容器的。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="容器" scheme="http://team.jiunile.com/categories/golang/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="container" scheme="http://team.jiunile.com/tags/container/"/>
    
      <category term="namespace" scheme="http://team.jiunile.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 网络模型来龙去脉</title>
    <link href="http://team.jiunile.com//blog/2020/11/k8s-network-source.html"/>
    <id>http://team.jiunile.com//blog/2020/11/k8s-network-source.html</id>
    <published>2020-11-11T14:00:00.000Z</published>
    <updated>2020-11-11T03:09:30.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/network_1.jpg&quot; alt=&quot;network&quot;&gt;&lt;br&gt;容器网络发端于 &lt;code&gt;Docker&lt;/code&gt; 的网络。&lt;code&gt;Docker&lt;/code&gt; 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。这种设计的好处在于容器的网络和外部世界是解耦的，无需占用宿主机的 IP 或者宿主机的资源，完全是虚拟的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;它的设计初衷是：当需要访问外部世界时，会采用 &lt;code&gt;SNAT&lt;/code&gt; 这种方法来借用 Node 的 IP 去访问外面的服务。比如容器需要对外提供服务的时候，所用的是 &lt;code&gt;DNAT&lt;/code&gt; 技术，也就是在 Node 上开一个端口，然后通过 &lt;code&gt;iptable&lt;/code&gt; 或者别的某些机制，把流导入到容器的进程上以达到目的。&lt;/p&gt;
&lt;p&gt;该模型的问题在于，外部网络无法区分哪些是容器的网络与流量、哪些是宿主机的网络与流量。比如，如果要做一个高可用的时候，172.16.1.1 和 172.16.1.2 是拥有同样功能的两个容器，此时我们需要将两者绑成一个 Group 对外提供服务，而这个时候我们发现从外部看来两者没有相同之处，它们的 IP 都是借用宿主机的端口，因此很难将两者归拢到一起。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_2.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此基础上，&lt;code&gt;Kubernetes&lt;/code&gt; 提出了这样一种机制：即每一个 Pod，也就是一个功能聚集小团伙应有自己的“身份证”，或者说 ID。在 TCP 协议栈上，这个 ID 就是 IP。&lt;/p&gt;
&lt;p&gt;这个 IP 是真正属于该 Pod 的，外部世界不管通过什么方法一定要给它。对这个 Pod IP 的访问就是真正对它的服务的访问，中间拒绝任何的变化。比如以 10.1.1.1 的 IP 去访问 10.1.2.1 的 Pod，结果到了 10.1.2.1 上发现，它实际上借用的是宿主机的 IP，而不是源 IP，这样是不被允许的。Pod 内部会要求共享这个 IP，从而解决了一些功能内聚的容器如何变成一个部署的原子的问题。&lt;/p&gt;
&lt;p&gt;剩下的问题是我们的部署手段。&lt;code&gt;Kubernetes&lt;/code&gt; 对怎么实现这个模型其实是没有什么限制的，用 &lt;code&gt;underlay&lt;/code&gt; 网络来控制外部路由器进行导流是可以的；如果希望解耦，用 &lt;code&gt;overlay&lt;/code&gt; 网络在底层网络之上再加一层叠加网，这样也是可以的。总之，只要达到模型所要求的目的即可。&lt;/p&gt;
&lt;h2 id=&quot;Pod-究竟如何上网&quot;&gt;&lt;a href=&quot;#Pod-究竟如何上网&quot; class=&quot;headerlink&quot; title=&quot;Pod 究竟如何上网&quot;&gt;&lt;/a&gt;Pod 究竟如何上网&lt;/h2&gt;&lt;p&gt;容器网络的网络包究竟是怎么传送的？&lt;br&gt;&lt;img src=&quot;/images/k8s/network_3.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以从以下两个维度来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议层次&lt;/li&gt;
&lt;li&gt;网络拓扑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-1-协议层次&quot;&gt;&lt;a href=&quot;#2-1-协议层次&quot; class=&quot;headerlink&quot; title=&quot;2.1 协议层次&quot;&gt;&lt;/a&gt;2.1 协议层次&lt;/h3&gt;&lt;p&gt;它和 TCP 协议栈的概念是相同的，需要从两层、三层、四层一层层地摞上去，发包的时候从右往左，即先有应用数据，然后发到了 TCP 或者 UDP 的四层协议，继续向下传送，加上 IP 头，再加上 MAC 头就可以送出去了。收包的时候则按照相反的顺序，首先剥离 MAC 的头，再剥离 IP 的头，最后通过协议号在端口找到需要接收的进程。&lt;/p&gt;
&lt;h3 id=&quot;2-2-网络拓扑&quot;&gt;&lt;a href=&quot;#2-2-网络拓扑&quot; class=&quot;headerlink&quot; title=&quot;2.2 网络拓扑&quot;&gt;&lt;/a&gt;2.2 网络拓扑&lt;/h3&gt;&lt;p&gt;一个容器的包所要解决的问题分为两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，如何从容器的空间 (c1) 跳到宿主机的空间 (infra)；&lt;/li&gt;
&lt;li&gt;第二步，如何从宿主机空间到达远端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我个人的理解是，容器网络的方案可以通过接入、流控、通道这三个层面来考虑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个是接入，就是说我们的容器和宿主机之间是使用哪一种机制做连接，比如 &lt;code&gt;Veth + bridge&lt;/code&gt;、&lt;code&gt;Veth + pair&lt;/code&gt; 这样的经典方式，也有利用高版本内核的新机制等其他方式（如 mac/IPvlan 等），来把包送入到宿主机空间；&lt;/li&gt;
&lt;li&gt;第二个是流控，就是说我的这个方案要不要支持 &lt;code&gt;Network Policy&lt;/code&gt;，如果支持的话又要用何种方式去实现。这里需要注意的是，我们的实现方式一定需要在数据路径必经的一个关节点上。如果数据路径不通过该 Hook 点，那就不会起作用；&lt;/li&gt;
&lt;li&gt;第三个是通道，即两个主机之间通过什么方式完成包的传输。我们有很多种方式，比如以路由的方式，具体又可分为 BGP 路由或者直接路由。还有各种各样的隧道技术等等。最终我们实现的目的就是一个容器内的包通过容器，经过接入层传到宿主机，再穿越宿主机的流控模块（如果有）到达通道送到对端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-3-一个最简单的路由方案：Flannel-host-gw&quot;&gt;&lt;a href=&quot;#2-3-一个最简单的路由方案：Flannel-host-gw&quot; class=&quot;headerlink&quot; title=&quot;2.3 一个最简单的路由方案：Flannel-host-gw&quot;&gt;&lt;/a&gt;2.3 一个最简单的路由方案：Flannel-host-gw&lt;/h3&gt;&lt;p&gt;这个方案采用的是每个 Node 独占网段，每个 Subnet 会绑定在一个 Node 上，网关也设置在本地，或者说直接设在 cni0 这个网桥的内部端口上。该方案的好处是管理简单，坏处就是无法跨 Node 迁移 Pod。就是说这个 IP、网段已经是属于这个 Node 之后就无法迁移到别的 Node 上。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_4.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个方案的精髓在于 route 表的设置，如上图所示。接下来为大家一一解读一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条很简单，我们在设置网卡的时候都会加上这一行。就是指定我的默认路由是通过哪个 IP 走掉，默认设备又是什么；&lt;/li&gt;
&lt;li&gt;第二条是对 Subnet 的一个规则反馈。就是说我的这个网段是 10.244.0.0，掩码是 24 位，它的网关地址就在网桥上，也就是 10.244.0.1。这就是说这个网段的每一个包都发到这个网桥的 IP 上；&lt;/li&gt;
&lt;li&gt;第三条是对对端的一个反馈。如果你的网段是 10.244.1.0（上图右边的 Subnet），我们就把它的 Host 的网卡上的 IP (10.168.0.3) 作为网关。也就是说，如果数据包是往 10.244.1.0 这个网段发的，就请以 10.168.0.3 作为网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再来看一下这个数据包到底是如何跑起来的？&lt;/p&gt;
&lt;p&gt;假设容器 (10.244.0.2) 想要发一个包给 10.244.1.3，那么它在本地产生了 TCP 或者 UDP 包之后，再依次填好对端 IP 地址、本地以太网的 MAC 地址作为源 MAC 以及对端 MAC。一般来说本地会设定一条默认路由，默认路由会把 cni0 上的 IP 作为它的默认网关，对端的 MAC 就是这个网关的 MAC 地址。然后这个包就可以发到桥上去了。如果网段在本桥上，那么通过 MAC 层的交换即可解决。&lt;/p&gt;
&lt;p&gt;这个例子中我们的 IP 并不属于本网段，因此网桥会将其上送到主机的协议栈去处理。主机协议栈恰好找到了对端的 MAC 地址。使用 10.168.0.3 作为它的网关，通过本地 ARP 探查后，我们得到了 10.168.0.3 的 MAC 地址。即通过协议栈层层组装，我们达到了目的，将 Dst-MAC 填为右图主机网卡的 MAC 地址，从而将包从主机的 eth0 发到对端的 eth0 上去。&lt;/p&gt;
&lt;p&gt;所以大家可以发现，这里有一个隐含的限制，上图中的 MAC 地址填好之后一定是能到达对端的，但如果这两个宿主机之间不是二层连接的，中间经过了一些网关、一些复杂的路由，那么这个 MAC 就不能直达，这种方案就是不能用的。当包到达了对端的 MAC 地址之后，发现这个包确实是给它的，但是 IP 又不是它自己的，就开始 Forward 流程，包上送到协议栈，之后再走一遍路由，刚好会发现 10.244.1.0/24 需要发到 10.244.1.1 这个网关上，从而到达了 cni0 网桥，它会找到 10.244.1.3 对应的 MAC 地址，再通过桥接机制，这个包就到达了对端容器。&lt;/p&gt;
&lt;p&gt;大家可以看到，整个过程总是二层、三层，发的时候又变成二层，再做路由，就是一个大环套小环。这是一个比较简单的方案，如果中间要走隧道，则可能会有一条 &lt;code&gt;vxlan tunnel&lt;/code&gt; 的设备，此时就不填直接的路由，而填成对端的隧道号。&lt;/p&gt;
&lt;h2 id=&quot;Service-究竟如何工作&quot;&gt;&lt;a href=&quot;#Service-究竟如何工作&quot; class=&quot;headerlink&quot; title=&quot;Service 究竟如何工作&quot;&gt;&lt;/a&gt;Service 究竟如何工作&lt;/h2&gt;&lt;p&gt;Service 其实是一种负载均衡 (Load Balance) 的机制。&lt;/p&gt;
&lt;p&gt;我们认为它是一种用户侧(Client Side) 的负载均衡，也就是说 VIP 到 RIP 的转换在用户侧就已经完成了，并不需要集中式地到达某一个 NGINX 或者是一个 ELB 这样的组件来进行决策。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_5.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;它的实现是这样的：首先是由一群 Pod 组成一组功能后端，再在前端上定义一个虚 IP 作为访问入口。一般来说，由于 IP 不太好记，我们还会附赠一个 DNS 的域名，Client 先访问域名得到虚 IP 之后再转成实 IP。&lt;code&gt;Kube-proxy&lt;/code&gt;则是整个机制的实现核心，它隐藏了大量的复杂性。它的工作机制是通过 &lt;code&gt;apiserver&lt;/code&gt; 监控 Pod/Service 的变化（比如是不是新增了 Service、Pod）并将其反馈到本地的规则或者是用户态进程。&lt;/p&gt;
&lt;h2 id=&quot;一个-LVS-版的-Service&quot;&gt;&lt;a href=&quot;#一个-LVS-版的-Service&quot; class=&quot;headerlink&quot; title=&quot;一个 LVS 版的 Service&quot;&gt;&lt;/a&gt;一个 LVS 版的 Service&lt;/h2&gt;&lt;p&gt;我们来实际做一个 LVS 版的 Service。LVS 是一个专门用于负载均衡的内核机制。它工作在第四层，性能会比用 &lt;code&gt;iptable&lt;/code&gt; 实现好一些。&lt;/p&gt;
&lt;p&gt;假设我们是一个 &lt;code&gt;Kube-proxy&lt;/code&gt;，拿到了一个 Service 的配置，如下图所示：它有一个 &lt;code&gt;Cluster IP&lt;/code&gt;，在该 IP 上的端口是 9376，需要反馈到容器上的是 80 端口，还有三个可工作的 Pod，它们的 IP 分别是 10.1.2.3, 10.1.14.5, 10.1.3.8。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_6.jpg&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;它要做的事情就是：&lt;br&gt;&lt;img src=&quot;/images/k8s/network_7.png&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 1 步，绑定 VIP 到本地（欺骗内核）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先需要让内核相信它拥有这样的一个虚 IP，这是 LVS 的工作机制所决定的，因为它工作在第四层，并不关心 IP 转发，只有它认为这个 IP 是自己的才会拆到 TCP 或 UDP 这一层。在第一步中，我们将该 IP 设到内核中，告诉内核它确实有这么一个 IP。实现的方法有很多，我们这里用的是 ip route 直接加 local 的方式，用 Dummy 设备上加 IP 的方式也是可以的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 2 步，为这个虚 IP 创建一个 IPVS 的 &lt;code&gt;virtual server&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;告诉它我需要为这个 IP 进行负载均衡分发，后面的参数就是一些分发策略等等。&lt;code&gt;virtual server&lt;/code&gt; 的 IP 其实就是我们的 &lt;code&gt;Cluster IP&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 3 步，为这个 &lt;code&gt;IPVS service&lt;/code&gt; 创建相应的 &lt;code&gt;real server&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要为 &lt;code&gt;virtual server&lt;/code&gt; 配置相应的 &lt;code&gt;real server&lt;/code&gt;，就是真正提供服务的后端是什么。比如说我们刚才看到有三个 Pod，于是就把这三个的 IP 配到 &lt;code&gt;virtual server&lt;/code&gt; 上，完全一一对应过来就可以了。&lt;code&gt;Kube-proxy&lt;/code&gt; 工作跟这个也是类似的。只是它还需要去监控一些 Pod 的变化，比如 Pod 的数量变成 5 个了，那么规则就应变成 5 条。如果这里面某一个 Pod 死掉了或者被杀死了，那么就要相应地减掉一条。又或者整个 Service 被撤销了，那么这些规则就要全部删掉。所以它其实做的是一些管理层面的工作。&lt;/p&gt;
&lt;h2 id=&quot;啥？负载均衡还分内部外部&quot;&gt;&lt;a href=&quot;#啥？负载均衡还分内部外部&quot; class=&quot;headerlink&quot; title=&quot;啥？负载均衡还分内部外部&quot;&gt;&lt;/a&gt;啥？负载均衡还分内部外部&lt;/h2&gt;&lt;p&gt;最后我们介绍一下 Service 的类型，可以分为以下 4 类。&lt;/p&gt;
&lt;h3 id=&quot;5-1-ClusterIP&quot;&gt;&lt;a href=&quot;#5-1-ClusterIP&quot; class=&quot;headerlink&quot; title=&quot;5.1 ClusterIP&quot;&gt;&lt;/a&gt;5.1 ClusterIP&lt;/h3&gt;&lt;p&gt;集群内部的一个虚拟 IP，这个 IP 会绑定到一堆服务的 Group Pod 上面，这也是默认的服务方式。它的缺点是这种方式只能在 Node 内部也就是集群内部使用。&lt;/p&gt;
&lt;h3 id=&quot;5-2-NodePort&quot;&gt;&lt;a href=&quot;#5-2-NodePort&quot; class=&quot;headerlink&quot; title=&quot;5.2 NodePort&quot;&gt;&lt;/a&gt;5.2 NodePort&lt;/h3&gt;&lt;p&gt;供集群外部调用。将 Service 承载在 Node 的静态端口上，端口号和 Service 一一对应，那么集群外的用户就可以通过 &lt;code&gt;&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code&gt; 的方式调用到 Service。&lt;/p&gt;
&lt;h3 id=&quot;5-3-LoadBalancer&quot;&gt;&lt;a href=&quot;#5-3-LoadBalancer&quot; class=&quot;headerlink&quot; title=&quot;5.3 LoadBalancer&quot;&gt;&lt;/a&gt;5.3 LoadBalancer&lt;/h3&gt;&lt;p&gt;给云厂商的扩展接口。像阿里云、亚马逊这样的云厂商都是有成熟的 LB 机制的，这些机制可能是由一个很大的集群实现的，为了不浪费这种能力，云厂商可通过这个接口进行扩展。它首先会自动创建 NodePort 和 ClusterIP 这两种机制，云厂商可以选择直接将 LB 挂到这两种机制上，或者两种都不用，直接把 Pod 的 RIP 挂到云厂商的 ELB 的后端也是可以的。&lt;/p&gt;
&lt;h3 id=&quot;5-4-ExternalName&quot;&gt;&lt;a href=&quot;#5-4-ExternalName&quot; class=&quot;headerlink&quot; title=&quot;5.4 ExternalName&quot;&gt;&lt;/a&gt;5.4 ExternalName&lt;/h3&gt;&lt;p&gt;摈弃内部机制，依赖外部设施，比如某个用户特别强，他觉得我们提供的都没什么用，就是要自己实现，此时一个 Service 会和一个域名一一对应起来，整个负载均衡的工作都是外部实现的。&lt;/p&gt;
&lt;p&gt;下图是一个实例。它灵活地应用了 ClusterIP、NodePort 等多种服务方式，又结合了云厂商的 ELB，变成了一个很灵活、极度伸缩、生产上真正可用的一套系统。&lt;br&gt;&lt;img src=&quot;/images/k8s/network_8.png&quot; alt=&quot;network&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先我们用 ClusterIP 来做功能 Pod 的服务入口。大家可以看到，如果有三种 Pod 的话，就有三个 &lt;code&gt;Service Cluster IP&lt;/code&gt; 作为它们的服务入口。这些方式都是 Client 端的，如何在 Server 端做一些控制呢？&lt;/p&gt;
&lt;p&gt;首先会起一些 Ingress 的 Pod（Ingress 是 K8s 后来新增的一种服务，本质上还是一堆同质的 Pod），然后将这些 Pod 组织起来，暴露到一个 NodePort 的 IP，K8s 的工作到此就结束了。&lt;/p&gt;
&lt;p&gt;任何一个用户访问 23456 端口的 Pod 就会访问到 Ingress 的服务，它的后面有一个 Controller，会把 Service IP 和 Ingress 的后端进行管理，最后会调到 ClusterIP，再调到我们的功能 Pod。前面提到我们去对接云厂商的 ELB，我们可以让 ELB 去监听所有集群节点上的 23456 端口，只要在 23456 端口上有服务的，就认为有一个 Ingress 的实例在跑。&lt;/p&gt;
&lt;p&gt;整个的流量经过外部域名的一个解析跟分流到达了云厂商的 ELB，ELB 经过负载均衡并通过 NodePort 的方式到达 Ingress，Ingress 再通过 ClusterIP 调用到后台真正的 Pod。这种系统看起来比较丰富，健壮性也比较好。任何一个环节都不存在单点的问题，任何一个环节也都有管理与反馈。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文的主要内容就到此为止了，这里为大家简单总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大家要从根本上理解 Kubernetes 网络模型的演化来历，理解 PerPodPerIP 的用心在哪里；&lt;/li&gt;
&lt;li&gt;网络的事情万变不离其宗，按照模型从 4 层向下就是发包过程，反正层层剥离就是收包过程，容器网络也是如此；&lt;/li&gt;
&lt;li&gt;Ingress 等机制是在更高的层次上（服务&amp;lt;-&amp;gt;端口）方便大家部署集群对外服务，通过一个真正可用的部署实例，希望大家把 &lt;code&gt;Ingress + Cluster IP + PodIP&lt;/code&gt; 等概念联合来看，理解社区出台新机制、新资源对象的思考。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者：叶磊 来源：阿里巴巴云原生&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/network_1.jpg&quot; alt=&quot;network&quot;&gt;&lt;br&gt;容器网络发端于 &lt;code&gt;Docker&lt;/code&gt; 的网络。&lt;code&gt;Docker&lt;/code&gt; 使用了一个比较简单的网络模型，即内部的网桥加内部的保留 IP。这种设计的好处在于容器的网络和外部世界是解耦的，无需占用宿主机的 IP 或者宿主机的资源，完全是虚拟的。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/categories/kubernetes/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
