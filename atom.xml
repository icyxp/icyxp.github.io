<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CloudNative 架构</title>
  <subtitle>CloudNative|云原生应用架构|云原生架构|容器化架构|微服务架构|平台架构|基础架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://team.jiunile.com/"/>
  <updated>2020-09-16T09:45:48.000Z</updated>
  <id>http://team.jiunile.com/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes hostpath和local volume区别</title>
    <link href="http://team.jiunile.com//blog/2020/09/k8s-local-volume.html"/>
    <id>http://team.jiunile.com//blog/2020/09/k8s-local-volume.html</id>
    <published>2020-09-16T12:00:00.000Z</published>
    <updated>2020-09-16T09:45:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;很多人对hostPath volume和local persistent volume的使用场景还存在很多困惑。下面对着两种volume的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，并简单介绍&lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt;如何帮助administrator进行local persistent volume的生命周期管理的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hostPath-volume存在的问题&quot;&gt;&lt;a href=&quot;#hostPath-volume存在的问题&quot; class=&quot;headerlink&quot; title=&quot;hostPath volume存在的问题&quot;&gt;&lt;/a&gt;hostPath volume存在的问题&lt;/h2&gt;&lt;p&gt;过去我们经常会通过hostPath volume让Pod能够使用本地存储，将Node文件系统中的文件或者目录挂载到容器内，但是hostPath volume的使用是很难受的，并不适合在生产环境中使用。&lt;/p&gt;
&lt;p&gt;我们先看看hostPath Type有哪些类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;行为&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DirectoryOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FileOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 Kubelet 相同的组和所有权。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Socket&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的 UNIX 套接字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CharDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的字符设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BlockDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的块设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看起来支持这么多type还是挺好的，但为什么说不适合在生产环境中使用呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于集群内每个节点的差异化，要使用 &lt;code&gt;hostPath Volume&lt;/code&gt;，我们需要通过&lt;code&gt;NodeSelector&lt;/code&gt; 等方式进行精确调度，这种事情多了，你就会不耐烦了。&lt;/li&gt;
&lt;li&gt;注意 &lt;code&gt;DirectoryOrCreate&lt;/code&gt; 和 &lt;code&gt;FileOrCreate&lt;/code&gt; 两种类型的 &lt;code&gt;hostPath&lt;/code&gt;，当Node上没有对应的 &lt;code&gt;File/Directory&lt;/code&gt; 时，你需要保证kubelet有在 &lt;code&gt;Node上Create File/Directory&lt;/code&gt; 的权限。&lt;/li&gt;
&lt;li&gt;另外，如果 Node 上的文件或目录是由 root 创建的，挂载到容器内之后，你通常还要保证容器内进程有权限对该文件或者目录进行写入，比如你需要以 root 用户启动进程并运行于 privileged 容器，或者你需要事先修改好 Node 上的文件权限配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scheduler&lt;/code&gt; 并不会考虑 &lt;code&gt;hostPath volume&lt;/code&gt; 的大小，&lt;code&gt;hostPath&lt;/code&gt; 也不能申明需要的 &lt;code&gt;storage size&lt;/code&gt;，这样调度时存储的考虑，就需要人为检查并保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;local-persistent-volume工作机制&quot;&gt;&lt;a href=&quot;#local-persistent-volume工作机制&quot; class=&quot;headerlink&quot; title=&quot;local persistent volume工作机制&quot;&gt;&lt;/a&gt;local persistent volume工作机制&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Local persistent volume&lt;/code&gt; 就是用来解决 &lt;code&gt;hostPath volume&lt;/code&gt; 面临的 &lt;strong&gt;portability, disk accounting, and scheduling&lt;/strong&gt; 的缺陷。&lt;code&gt;PV Controller&lt;/code&gt; 和 &lt;code&gt;Scheduler&lt;/code&gt; 会对 &lt;code&gt;local PV&lt;/code&gt; 做特殊的逻辑处理，以实现 Pod 使用本地存储时发生Pod &lt;code&gt;re-schedule&lt;/code&gt; 的情况下能再次调度到 &lt;code&gt;local volume&lt;/code&gt; 所在的 Node。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;local pv&lt;/code&gt; 在生产中使用，也是需要谨慎的，毕竟它本质上还是使用的是节点上的本地存储，如果没有相应的存储副本机制，那意味着一旦节点或者磁盘异常，使用该volume的Pod也会异常，甚至出现数据丢失，除非你明确知道这个风险不会对你的应用造成很大影响或者允许数据丢失。&lt;/p&gt;
&lt;p&gt;那么通常什么情况会使用Local PV呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如节点上的目录数据是从远程的网络存储上挂载或者预先读取到本地的，为了能加速Pod读取这些数据的速度，相当于起Cache作用，这种情况下因为只读，不存在惧怕数据丢失。这种AI训练中存在需要重复利用并且训练数据巨大的时候可能会采取的方式。&lt;/li&gt;
&lt;li&gt;如果本地节点上目录/磁盘实际是具有副本/分片机制的分布式存储(比如gluster, ceph等)挂载过来的，这种情况也可以使用&lt;code&gt;local pv&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Local volume&lt;/code&gt; 允许挂载本地的 disk, partition, directory 到容器内某个挂载点。在 Kuberentes 1.11 仍然仅支持 &lt;code&gt;local pv&lt;/code&gt; 的 &lt;code&gt;static provision&lt;/code&gt;，不支持&lt;code&gt;dynamic provision&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 使用 &lt;code&gt;PersistentVolume&lt;/code&gt; 的 &lt;code&gt;.spec.nodeAffinityfield&lt;/code&gt; 来描述&lt;code&gt;local volume&lt;/code&gt; 与 Node 的绑定关系。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;volumeBindingMode: WaitForFirstConsumer&lt;/code&gt; 的 &lt;code&gt;local-storage StorageClass&lt;/code&gt; 来实现 PVC 的延迟绑定，使得 &lt;code&gt;PV Controller&lt;/code&gt; 并不会立刻为 PVC 做 Bound，而是等待某个需要使用该 &lt;code&gt;local pv&lt;/code&gt; 的 Pod 完成调度后，才去做 Bound。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是定义local pv的Sample：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; PersistentVolume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; example-pv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  capacity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    storage:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;Gi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# volumeMode field requires BlockVolume Alpha feature gate to be enabled.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumeMode:&lt;/span&gt; Filesystem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  accessModes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; ReadWriteOnce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  persistentVolumeReclaimPolicy:&lt;/span&gt; Retain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  storageClassName:&lt;/span&gt; local-storage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  local:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    path:&lt;/span&gt; /mnt/disks/ssd1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeAffinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    required:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      nodeSelectorTerms:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - matchExpressions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - key:&lt;/span&gt; kubernetes.io/hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          operator:&lt;/span&gt; In&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          values:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; example-node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的&lt;code&gt;local-storage storageClass&lt;/code&gt;定义如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StorageClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; storage.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; local-storage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;provisioner:&lt;/span&gt; kubernetes.io/&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;-provisioner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;volumeBindingMode:&lt;/span&gt; WaitForFirstConsumer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用local-persistent-volume注意事项&quot;&gt;&lt;a href=&quot;#使用local-persistent-volume注意事项&quot; class=&quot;headerlink&quot; title=&quot;使用local persistent volume注意事项&quot;&gt;&lt;/a&gt;使用local persistent volume注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;local pv&lt;/code&gt; 时必须定义 &lt;code&gt;nodeAffinity&lt;/code&gt;，Kubernetes Scheduler 需要使用PV 的 &lt;code&gt;nodeAffinity&lt;/code&gt; 描述信息来保证 Pod 能够调度到有对应 &lt;code&gt;local volume&lt;/code&gt; 的Node 上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumeMode&lt;/code&gt; 可以是 &lt;code&gt;FileSystem（Default）&lt;/code&gt;和 Block，并且需要 &lt;code&gt;enable BlockVolume Alpha feature gate&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 &lt;code&gt;local PV&lt;/code&gt; 之前，你需要先保证有对应的 &lt;code&gt;storageClass&lt;/code&gt; 已经创建。并且该&lt;code&gt;storageClass&lt;/code&gt; 的 &lt;code&gt;volumeBindingMode&lt;/code&gt; 必须是 &lt;code&gt;WaitForFirstConsumer&lt;/code&gt; 以标识延迟 &lt;code&gt;Volume Binding&lt;/code&gt; 。&lt;code&gt;WaitForFirstConsumer&lt;/code&gt; 可以保证正常的 Pod 调度要求（resource requirements, node selectors, Pod affinity, and Pod anti-affinity等），又能保证 Pod 需要的 &lt;code&gt;Local PV&lt;/code&gt; 的 &lt;code&gt;nodeAffinity&lt;/code&gt; 得到满足，实际上，一共有以下两种 &lt;code&gt;volumeBindingMode&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// VolumeBindingImmediate indicates that PersistentVolumeClaims should be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// immediately provisioned and bound.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VolumeBindingImmediate VolumeBindingMode = &lt;span class=&quot;string&quot;&gt;&quot;Immediate&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// VolumeBindingWaitForFirstConsumer indicates that PersistentVolumeClaims&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// should not be provisioned and bound until the first Pod is created that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// references the PeristentVolumeClaim.  The volume provisioning and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// binding will occur during Pod scheduing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VolumeBindingWaitForFirstConsumer VolumeBindingMode = &lt;span class=&quot;string&quot;&gt;&quot;WaitForFirstConsumer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;节点上 &lt;code&gt;local volume&lt;/code&gt; 的初始化需要我们人为去完成（比如 &lt;code&gt;local disk&lt;/code&gt; 需要 pre-partitioned, formatted, and mounted. 共享存储对应的 Directories 也需要 pre-created），并且人工创建这个 &lt;code&gt;local PV&lt;/code&gt;，当 Pod 结束，我们还需要手动的清理 &lt;code&gt;local volume&lt;/code&gt;，然后手动删除该 &lt;code&gt;local PV&lt;/code&gt; 对象。因此，&lt;code&gt;persistentVolumeReclaimPolicy&lt;/code&gt; 只能是 &lt;code&gt;Retain&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;local-volume-manager&quot;&gt;&lt;a href=&quot;#local-volume-manager&quot; class=&quot;headerlink&quot; title=&quot;local volume manager&quot;&gt;&lt;/a&gt;local volume manager&lt;/h2&gt;&lt;p&gt;上面这么多事情需要人为的去做预处理的工作，我们必须要有解决方案帮我们自动完成 &lt;code&gt;local volume&lt;/code&gt; 的 create 和 cleanup 的工作。官方给出了一个简单的 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; ，注意它仍然只是一个 &lt;code&gt;static provisioner&lt;/code&gt;，目前主要帮我们做两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local volume manager&lt;/code&gt; 监控配置好的 discovery directory 的新的挂载点，并为每个挂载点根据对应的 storageClassName, path, nodeAffinity, and capacity 创建&lt;code&gt;PersistentVolume object&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当Pod结束并删除了使用 &lt;code&gt;local volume&lt;/code&gt; 的 PVC，&lt;code&gt;local volume manager&lt;/code&gt; 将自动清理该 local mount 上的所有文件, 然后删除对应的 &lt;code&gt;PersistentVolume object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，除了需要人为的完成 &lt;code&gt;local volume&lt;/code&gt; 的 mount 操作，&lt;code&gt;local PV&lt;/code&gt; 的生命周期管理就全部交给 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; 了。下面我们专门介绍下这个 &lt;code&gt;Static Local Volume Provisioner&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;后面我会单独写一个博文对 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; 进行深度剖析。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文对 &lt;code&gt;hostPath volume&lt;/code&gt; 不能在生产环境中很好使用的原因进行了阐述，然后对 &lt;code&gt;local persistent volume&lt;/code&gt; 的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，最后简单介绍了 &lt;code&gt;local volume manager&lt;/code&gt; 如何帮助 administrator 进行 &lt;code&gt;local persistent volume&lt;/code&gt; 的生命周期管理的。&lt;/p&gt;
&lt;p&gt;来源：oschina&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多人对hostPath volume和local persistent volume的使用场景还存在很多困惑。下面对着两种volume的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，并简单介绍&lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot;&gt;local volume manager&lt;/a&gt;如何帮助administrator进行local persistent volume的生命周期管理的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hostPath-volume存在的问题&quot;&gt;&lt;a href=&quot;#hostPath-volume存在的问题&quot; class=&quot;headerlink&quot; title=&quot;hostPath volume存在的问题&quot;&gt;&lt;/a&gt;hostPath volume存在的问题&lt;/h2&gt;&lt;p&gt;过去我们经常会通过hostPath volume让Pod能够使用本地存储，将Node文件系统中的文件或者目录挂载到容器内，但是hostPath volume的使用是很难受的，并不适合在生产环境中使用。&lt;/p&gt;
&lt;p&gt;我们先看看hostPath Type有哪些类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;行为&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DirectoryOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FileOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 Kubelet 相同的组和所有权。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Socket&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的 UNIX 套接字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CharDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的字符设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BlockDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的块设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看起来支持这么多type还是挺好的，但为什么说不适合在生产环境中使用呢？&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="volume" scheme="http://team.jiunile.com/categories/kubrenetes/volume/"/>
    
      <category term="pv" scheme="http://team.jiunile.com/categories/kubrenetes/volume/pv/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="local volume" scheme="http://team.jiunile.com/tags/local-volume/"/>
    
      <category term="hostpath volume" scheme="http://team.jiunile.com/tags/hostpath-volume/"/>
    
      <category term="pv" scheme="http://team.jiunile.com/tags/pv/"/>
    
  </entry>
  
  <entry>
    <title>Go Singleflight导致死锁问题分析</title>
    <link href="http://team.jiunile.com//blog/2020/09/go-singleflight-deadlock.html"/>
    <id>http://team.jiunile.com//blog/2020/09/go-singleflight-deadlock.html</id>
    <published>2020-09-14T12:00:00.000Z</published>
    <updated>2020-09-16T05:45:23.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;思路排查&quot;&gt;&lt;a href=&quot;#思路排查&quot; class=&quot;headerlink&quot; title=&quot;思路排查&quot;&gt;&lt;/a&gt;思路排查&lt;/h2&gt;&lt;h3 id=&quot;Dump-堆栈很重要&quot;&gt;&lt;a href=&quot;#Dump-堆栈很重要&quot; class=&quot;headerlink&quot; title=&quot;Dump 堆栈很重要&quot;&gt;&lt;/a&gt;Dump 堆栈很重要&lt;/h3&gt;&lt;p&gt;线上某个环境发现 S3 上传请求卡住，请求不返回，卡了30分钟，长时间没有发现有效日志。一般来讲，死锁问题还是好排查的，因为现场一般都在。类似于 c 程序，遇到死锁问题都会用 pstack 看一把。golang 死锁排查思路也类似（golang 不适合使用 pstack，因为 golang 调度的是协程，pstack 只能看到线程栈），我们其实是需要知道 S3 程序里 goroutine 的栈状态。golang 遇到这个问题我们有两个办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法一：条件允许的话，gcore 出一个堆栈，这个是最有效的方法，因为是把整个 golang 程序的内存镜像 dump 出来，然后用 dlv 分析&lt;/li&gt;
&lt;li&gt;方法二：如果你提前开启 net/pprof 库的引用，开启了 debug 接口，那么就可以调用 curl 接口，通过 http 接口获取进程的状态信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意到，golang 程序和 c 程序还是有点区别，goroutine 非常多，成百上千个 goroutine 是常态，甚至上万个也不稀奇。所以我们一般无法在终端上直接看完所有的栈，一般都是把所有的 goroutine 栈 dump 到文件，然用 vi 打开慢慢分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试这个 core 文件，意图从堆栈里找到些东西，由于堆栈太多了，所以就使用 &lt;code&gt;gorouties -t -u&lt;/code&gt; 这个命令，并且把输出 dump 到文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl xxx/debug/pprof/goroutine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;关键思路&quot;&gt;&lt;a href=&quot;#关键思路&quot; class=&quot;headerlink&quot; title=&quot;关键思路&quot;&gt;&lt;/a&gt;关键思路&lt;/h3&gt;&lt;p&gt;成千上万个 goroutine ，直接显示到终端是不合适的，我们 dump 到文件 test.txt，然后分析 test.txt 这个文件。&lt;strong&gt;去查找发现了一些可疑堆栈，那么什么是可疑堆栈？重点关注加锁等待的堆栈，关键字是 &lt;code&gt;runtime_notifyListWait&lt;/code&gt; 、&lt;code&gt;semaphore&lt;/code&gt; 、&lt;code&gt;sync.(*Cond).Wait&lt;/code&gt; 、&lt;code&gt;Acquire&lt;/code&gt;  这些阻塞场景才会用到的，如果业务堆栈上出现这个加锁调用，就非常可疑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;留意阻塞关键字 &lt;code&gt;runtime_notifyListWait&lt;/code&gt; 、&lt;code&gt;semaphore&lt;/code&gt; 、&lt;code&gt;sync.(*Cond).Wait&lt;/code&gt; 、&lt;code&gt;Acquire&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;业务堆栈（非 runtime 的一些内部堆栈）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/singleflight01.png&quot; alt=&quot;singleflight-heap&quot;&gt;&lt;/p&gt;
&lt;p&gt;统计分析发现，有 11 个这个堆栈都在这同一个地方，都是在等同一把锁 &lt;code&gt;blockingKeyCountLimit.lock&lt;/code&gt;，所以基本确认了阻塞的位置，就是这个地方阻塞到了所有的请求，但是这把锁我们使用 defer 释放的，使用姿势如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// do someting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.Acquire(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; lock.Release(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下为锁内操作；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blockingKeyCountLimit 是我们封装针对 key 操作流控的组件。举个例子，如果 limit == 1，key为 “test” 在 g1 上 Acquire 成功，g2 acquire(“test”) 就会等待，这个可以算是我们优化的一个逻辑。如果 limit == 2，那么就允许两个人加锁到，后面的人都等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从代码来看，函数退出一定会释放的，但是偏偏现在锁就卡在这个地方，所以就非常奇怪。我们先找哪个 goroutine 占着这把锁不释放，看看能不能搞清楚怎样导致这里抢不到锁的原因。&lt;/p&gt;
&lt;p&gt;通过审查业务代码分析，发现可能的源头函数（这个函数是向后端请求的函数）：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;api.(*Client).getBytesNolc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;确认是 &lt;code&gt;getBytesNolc&lt;/code&gt; 这个函数执行的操作，那么大概率就是卡在这个地方了。用这个 &lt;code&gt;getBytesNolc&lt;/code&gt; 字符串搜索堆栈，找下是哪个堆栈 ？搜索到这个堆栈 &lt;code&gt;goroutine 19458&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/go/singleflight02.png&quot; alt=&quot;singleflight-heap&quot;&gt;&lt;/p&gt;
&lt;p&gt;大概率就是第 1 个堆栈了，也就是其他的 11 个 goroutine 都在等这 &lt;code&gt;goroutine 19458&lt;/code&gt;  来放锁，仔细看这个堆栈。那么为啥这个堆栈不放锁呢？这里有个细节要注意下，这里是卡到 &lt;code&gt;gihub.com/golang/groupcache/singleflight/singleflight.go:48&lt;/code&gt; 这一行：&lt;br&gt;&lt;img src=&quot;/images/go/singleflight03.png&quot; alt=&quot;singleflight&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一个开源库，singleflight 实现了缓存防击穿的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单介绍下 &lt;code&gt;singleflight&lt;/code&gt; 的功能，这是一个非常有效的工具。在缓存大量失效的场景，如果针对同一个 key ，其实只需要有一个人穿透到后端请求数据，其他人等待他完成，然后取缓存结果即可。这个就是 &lt;code&gt;singleflight&lt;/code&gt; 实现的功能。具体实现就是：来了请求之后，把 key 插入到 map 里，后面的请求如果发现同名 key 在 map 里面，那么就等待它完成就好；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;截屏显示卡到 &lt;code&gt;c.wg.Wait()&lt;/code&gt; 这一行，那么说明 map 里面肯定有已经存在的 key，说明 &lt;code&gt;goroutine 19458&lt;/code&gt; 不是第一个人？但是外面还有一个 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 的互斥呢，按道理其他的人也进不来（因为 limit == 1），这里这么讲来肯定要是源头才对？&lt;/p&gt;
&lt;h3 id=&quot;思路整理&quot;&gt;&lt;a href=&quot;#思路整理&quot; class=&quot;headerlink&quot; title=&quot;思路整理&quot;&gt;&lt;/a&gt;思路整理&lt;/h3&gt;&lt;p&gt;伪代码显示如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;xxx&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 大部分协程都卡在这里（11个）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这个锁的效果主要是流控，limit 值初始化赋值，可以是 1，也可以是其他；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// locker 为 blockingKeyCountLimit 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limitLocker.Acquire( key )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; limitLocker.Release( key )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getBytesNolc( key , ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBytesNolc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 下面就是 singleflight.Group 的用法，防穿透&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 同一时间只允许一个人去后端更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret, err = x.Group.Do(id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 去服务后台获取，更新数据；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;图示显示当前的现状：&lt;br&gt;&lt;img src=&quot;/images/go/singleflight04.png&quot; alt=&quot;singleflight&quot;&gt;&lt;/p&gt;
&lt;p&gt;现状小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大量的协程都在等 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 这把锁释放；&lt;/li&gt;
&lt;li&gt;协程 &lt;code&gt;goroutine 19458&lt;/code&gt; 持有 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 这把锁；&lt;/li&gt;
&lt;li&gt;协程 &lt;code&gt;goroutine 19458&lt;/code&gt;  却在等一个相同 key 名字的任务的完成（ &lt;code&gt;singleflight&lt;/code&gt; 一个防击穿的库，同一时间相同 key 只允许放到一个后端去执行），却永远没等到，协程因此呈现死锁；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前的疑问就是第一个 key 的任务为啥永远完不成，堆栈也找不到了，去哪里了？&lt;/p&gt;
&lt;h3 id=&quot;发现蛛丝马迹&quot;&gt;&lt;a href=&quot;#发现蛛丝马迹&quot; class=&quot;headerlink&quot; title=&quot;发现蛛丝马迹&quot;&gt;&lt;/a&gt;发现蛛丝马迹&lt;/h3&gt;&lt;p&gt;我们再仔细审一下 &lt;code&gt;singleflight&lt;/code&gt; 的代码：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, fn &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;) &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; g.m == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g.m = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]*call)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果找到同名 key 已经存在；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c, ok := g.m[key]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 等待者走到这个分支：等待第一个人执行完成，最后直接返回它的结果就行了；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.val, c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果同名 key 不存在（第一个人走到这个分支）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(call)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// map 里放置 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.m[key] = c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 执行任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.val, c.err = fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 唤醒所有的等待者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除 map 里的 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(g.m, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.val, c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现有个线索，我们的 S3 服务程序一个 http 请求对应一个协程处理，为了提高服务端进程的可用性，在框架里会捕捉 &lt;code&gt;panic&lt;/code&gt;，这样确保单个协程处理不会影响到其他的请求。基于这个前提，我们假设：如果 &lt;code&gt;fn()&lt;/code&gt; 执行异常，&lt;code&gt;panic&lt;/code&gt; 掉了，那么就不会走 &lt;code&gt;delete(g.m, key)&lt;/code&gt; 的代码，那么 key 就永远都残留在 map 里面，而进程却又还活着。恍然大悟。&lt;/p&gt;
&lt;h3 id=&quot;完整的推理流程&quot;&gt;&lt;a href=&quot;#完整的推理流程&quot; class=&quot;headerlink&quot; title=&quot;完整的推理流程&quot;&gt;&lt;/a&gt;完整的推理流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;第一个协程 g1 来了，加了 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 锁，然后准备穿透到后端，调用函数 &lt;code&gt;getBytesNolc&lt;/code&gt; 获取数据，并走进了 &lt;code&gt;singlelight&lt;/code&gt; ，添加了一个 key：x， 准备干活；&lt;ol&gt;
&lt;li&gt;干活发生了一些不可预期的异常（后面发现是配置的异常），nil 指针引用之类的， &lt;code&gt;panic&lt;/code&gt; 堆栈了，&lt;code&gt;panic&lt;/code&gt; 导致后面 &lt;code&gt;delete key&lt;/code&gt; 操作没有执行&lt;/li&gt;
&lt;li&gt;虽然 g1 现在 &lt;code&gt;panic&lt;/code&gt; 了，但是由于在函数 &lt;code&gt;func xxx&lt;/code&gt; 里面 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 是 defer 执行的，所以这把锁还是，但是 &lt;code&gt;singlelight&lt;/code&gt; 的 key 还存在，于是残留在 map 里面&lt;/li&gt;
&lt;li&gt;但是由于我们服务程序为了高可用是 &lt;code&gt;recover&lt;/code&gt; 了 &lt;code&gt;panic&lt;/code&gt; 的，单个请求的失败不会导致整个进程挂掉，所以进程还是好好的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;第二个 &lt;code&gt;goroutine 19458&lt;/code&gt; 协程来了，&lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 加锁，然后走到 &lt;code&gt;singlelight&lt;/code&gt; 的时候，发现有 &lt;code&gt;key: x&lt;/code&gt; 了，于是就等待&lt;ol&gt;
&lt;li&gt;并且等待的是一个永远得不到的锁，因为 g1 早就没了；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后续的 11 个 协程来了，于是被 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 阻塞住，并且永远不能释放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实锤：后续基于这个猜想，再去搜索一遍日志，发现确实是有一条 panic 相关的日志。这个时间点后面的请求全部被卡住。&lt;/p&gt;
&lt;h2 id=&quot;思考总结&quot;&gt;&lt;a href=&quot;#思考总结&quot; class=&quot;headerlink&quot; title=&quot;思考总结&quot;&gt;&lt;/a&gt;思考总结&lt;/h2&gt;&lt;p&gt;一般来讲 c 语言写程序容易出现死锁问题，因为各种异常逻辑可能会导致忘记放锁，从而导致抢一个永远都不可能得到的锁。&lt;strong&gt;golang 为了解决这个问题，一般是用 defer 机制来实现，使用姿势如下&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mtx.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mtx.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 临界区 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;golang 的 defer 机制是一个经过经验沉淀下来的有效功能&lt;/strong&gt;。我们必须要合理使用。defer 实现原理是和所在函数绑定，保证函数 return 的时候一定能调用到（ panic 退出也能），所以 golang 加锁放锁的有效实践是写在相邻的两行。&lt;/p&gt;
&lt;p&gt;其实思考下，&lt;strong&gt;&lt;code&gt;singleflight&lt;/code&gt; 作为一个通用开源库，其实可以把 &lt;code&gt;delete map key&lt;/code&gt; 放到 defer 里，这样就能保证 map 里面的 key 一定是可以被清理的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还有一点，&lt;strong&gt;其实 golang 是不提倡异常-捕捉这样的方式编程&lt;/strong&gt;，&lt;code&gt;panic&lt;/code&gt; 一般不让随便用，如果真是严重的问题，挂掉就挂掉，这个估计还好一些。当然这是要看场景的，还是有一些特殊场景的，毕竟 golang 都已经提供了 &lt;code&gt;panic-recover&lt;/code&gt; 这样的一个手段，就说明还是有需求。这个就跟 unsafe 库一样，你只有明确知道自己的行为影响，才去使用这个工具，否则别用。&lt;/p&gt;
&lt;p&gt;来源：奇伢云存储&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;思路排查&quot;&gt;&lt;a href=&quot;#思路排查&quot; class=&quot;headerlink&quot; title=&quot;思路排查&quot;&gt;&lt;/a&gt;思路排查&lt;/h2&gt;&lt;h3 id=&quot;Dump-堆栈很重要&quot;&gt;&lt;a href=&quot;#Dump-堆栈很重要&quot; class=&quot;headerlink&quot; title=&quot;Dump 堆栈很重要&quot;&gt;&lt;/a&gt;Dump 堆栈很重要&lt;/h3&gt;&lt;p&gt;线上某个环境发现 S3 上传请求卡住，请求不返回，卡了30分钟，长时间没有发现有效日志。一般来讲，死锁问题还是好排查的，因为现场一般都在。类似于 c 程序，遇到死锁问题都会用 pstack 看一把。golang 死锁排查思路也类似（golang 不适合使用 pstack，因为 golang 调度的是协程，pstack 只能看到线程栈），我们其实是需要知道 S3 程序里 goroutine 的栈状态。golang 遇到这个问题我们有两个办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法一：条件允许的话，gcore 出一个堆栈，这个是最有效的方法，因为是把整个 golang 程序的内存镜像 dump 出来，然后用 dlv 分析&lt;/li&gt;
&lt;li&gt;方法二：如果你提前开启 net/pprof 库的引用，开启了 debug 接口，那么就可以调用 curl 接口，通过 http 接口获取进程的状态信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意到，golang 程序和 c 程序还是有点区别，goroutine 非常多，成百上千个 goroutine 是常态，甚至上万个也不稀奇。所以我们一般无法在终端上直接看完所有的栈，一般都是把所有的 goroutine 栈 dump 到文件，然用 vi 打开慢慢分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试这个 core 文件，意图从堆栈里找到些东西，由于堆栈太多了，所以就使用 &lt;code&gt;gorouties -t -u&lt;/code&gt; 这个命令，并且把输出 dump 到文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl xxx/debug/pprof/goroutine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="http://team.jiunile.com/categories/go/"/>
    
      <category term="singleflight" scheme="http://team.jiunile.com/categories/go/singleflight/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="singleflight" scheme="http://team.jiunile.com/tags/singleflight/"/>
    
      <category term="死锁" scheme="http://team.jiunile.com/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Istio 实战系列(1) - 应用容器对 Envoy Sidecar 的启动依赖问题</title>
    <link href="http://team.jiunile.com//blog/2020/09/istio-depend-sidecar.html"/>
    <id>http://team.jiunile.com//blog/2020/09/istio-depend-sidecar.html</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2020-09-10T03:14:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;典型案例：某运维同学反馈：昨天晚上 &lt;code&gt;Istio&lt;/code&gt; 环境中应用的心跳检测报 &lt;code&gt;connect reset&lt;/code&gt;，然后服务重启了。怀疑是 &lt;code&gt;Istio&lt;/code&gt; 环境中网络不稳定导致了服务重启。&lt;/p&gt;
&lt;p&gt;该问题的表现是安装了 &lt;code&gt;sidecar proxy&lt;/code&gt; 的应用，在启动后的一小段时间内无法通过网络访问 pod 外部的其他服务，例如外部的 HTTP，MySQL，Redis等服务。如果应用没有对依赖服务的异常进行容错处理，该问题还常常会导致应用启动失败。&lt;/p&gt;
&lt;p&gt;下面我们以该问题导致的一个典型故障的分析过程为例，对该问题的原因进行说明。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;故障分析&quot;&gt;&lt;a href=&quot;#故障分析&quot; class=&quot;headerlink&quot; title=&quot;故障分析&quot;&gt;&lt;/a&gt;故障分析&lt;/h2&gt;&lt;p&gt;根据运维同学的反馈，该 pod 曾多次重启。因此我们先用 &lt;code&gt;kubectl logs --previous&lt;/code&gt; 命令查询 awesome-app 容器最后一次重启前的日志，以从日志中查找其重启的原因。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl logs --previous awesome-app-cd1234567-gzgwg -c awesome-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从日志中查询到了其重启前最后的错误信息如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logging system failed to initialize using configuration from &lt;span class=&quot;string&quot;&gt;&#39;http://log-config-server:12345/******/logback-spring.xml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.net.ConnectException: Connection refused (Connection refused)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.PlainSocketImpl.socketConnect(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从错误信息可以得知，应用进程在启动时试图通过 HTTP 协议从配置中心拉取 logback 的配置信息，但该操作由于网络异常失败了，导致应用进程启动失败，最终导致容器重启。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是什么导致了网络异常呢？&lt;/strong&gt;我们再用 &lt;code&gt;Kubectl get pod&lt;/code&gt; 命令查询 Pod 的运行状态，尝试找到更多的线索：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod awesome-app-cd1234567-gzgwg  -o yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令输出的 pod 详细内容如下，该 yaml 片段省略了其他无关的细节，只显示了 lastState 和 state 部分的容器状态信息。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;containerStatuses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lastState:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      terminated:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        exitCode:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        finishedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        reason:&lt;/span&gt; Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ready:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    restartCount:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    state:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      running:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lastState:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; istio-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ready:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    restartCount:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    state:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      running:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.161&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从该输出可以看到 pod 中的应用容器 awesome-app 重启了两次。整理该 pod 中 awesome-app 应用容器和 istio-proxy sidecar 容器的启动和终止的时间顺序，可以得到下面的时间线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2020-09-01T13:16:20Z istio-proxy 启动&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:22Z awesome-app 上一次启动时间&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:23Z awesome-app 上一次异常退出时间&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:36Z awesome-app 最后一次启动，以后就一直正常运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到在 &lt;code&gt;istio-proxy&lt;/code&gt; 启动2秒后，awesome-app 启动，并于1秒后异常退出。结合前面的日志信息，我们知道这次启动失败的直接原因是应用访问配置中心失败导致。在 &lt;code&gt;istio-proxy&lt;/code&gt; 启动16秒后，awesome-app 再次启动，这次启动成功，之后一直正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istio-proxy&lt;/code&gt; 启动和 awesome-app 上一次异常退出的时间间隔很短，只有2秒钟，因此我们基本可以判断此时 &lt;code&gt;istio-proxy&lt;/code&gt; 尚未启动初始化完成，导致 awesome-app 不能通过&lt;code&gt;istio-proxy&lt;/code&gt; 连接到外部服务，导致其启动失败。待 awesome-app 于 2020-09-01T13:16:36Z 再次启动时，由于 &lt;code&gt;istio-proxy&lt;/code&gt; 已经启动了较长时间，完成了从 pilot 获取动态配置的过程，因此 awesome-app 向 pod 外部的网络访问就正常了。&lt;/p&gt;
&lt;p&gt;如下图所示，Envoy 启动后会通过 xDS 协议向 pilot 请求服务和路由配置信息，Pilot 收到请求后会根据 Envoy 所在的节点（pod或者VM）组装配置信息，包括 &lt;code&gt;Listener&lt;/code&gt;、&lt;code&gt;Route&lt;/code&gt;、&lt;code&gt;Cluster&lt;/code&gt; 等，然后再通过 xDS 协议下发给 Envoy。根据 Mesh 的规模和网络情况，该配置下发过程需要数秒到数十秒的时间。由于初始化容器已经在 pod 中创建了 Iptables rule 规则，因此这段时间内应用向外发送的网络流量会被重定向到 Envoy ，而此时 Envoy 中尚没有对这些网络请求进行处理的监听器和路由规则，无法对此进行处理，导致网络请求失败。（关于 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化过程和 &lt;code&gt;Istio&lt;/code&gt; 流量管理原理的更多内容，可以参考 &lt;a href=&quot;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Istio流量管理实现机制深度解析-基于1.4.0更新&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/istio/istio-1.png&quot; alt=&quot;Envory sidecar初始化&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;h3 id=&quot;在应用启动命令中判断-Envoy-初始化状态&quot;&gt;&lt;a href=&quot;#在应用启动命令中判断-Envoy-初始化状态&quot; class=&quot;headerlink&quot; title=&quot;在应用启动命令中判断 Envoy 初始化状态&quot;&gt;&lt;/a&gt;在应用启动命令中判断 Envoy 初始化状态&lt;/h3&gt;&lt;p&gt;从前面的分析可以得知，该问题的根本原因是由于应用进程对 &lt;code&gt;Envoy sidecar&lt;/code&gt; 配置初始化的依赖导致的。因此最直接的解决思路就是：在应用进程启动时判断 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的初始化状态，待其初始化完成后再启动应用进程。&lt;/p&gt;
&lt;p&gt;Envoy 的健康检查接口 &lt;code&gt;localhost:15020/healthz/ready&lt;/code&gt; 会在 xDS 配置初始化完成后才返回 200，否则将返回 503，因此可以根据该接口判断 Envoy 的配置初始化状态，待其完成后再启动应用容器。我们可以在应用容器的启动命令中加入调用 Envoy 健康检查的脚本，如下面的配置片段所示。在其他应用中使用时，将 &lt;code&gt;start-awesome-app-cmd&lt;/code&gt; 改为容器中的应用启动命令即可。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; awesome-app-deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        args:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;while [[ \&quot;$(curl -s -o /dev/null -w &#39;&#39;&lt;span class=&quot;template-variable&quot;&gt;%&amp;#123;http_code&amp;#125;&lt;/span&gt;&#39;&#39; localhost:15020/healthz/ready)\&quot; != &#39;200&#39; ]]; do echo Waiting for Sidecar;sleep 1; done; echo Sidecar available; start-awesome-app-cmd&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 应用容器。&lt;/li&gt;
&lt;li&gt;应用容器启动脚本中通过 &lt;code&gt;curl get localhost:15020/healthz/ready&lt;/code&gt; 查询 &lt;code&gt;Envoy sidcar&lt;/code&gt; 状态，由于此时 &lt;code&gt;Envoy sidecar&lt;/code&gt; 尚未就绪，因此该脚本会不断重试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Envoy sidecar&lt;/code&gt; 通过 xDS 连接 Pilot，进行配置初始化。&lt;/li&gt;
&lt;li&gt;应用容器启动脚本通过 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的健康检查接口判断其初始化已经完成，启动应用进程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该方案虽然可以规避依赖顺序的问题，但需要对应用容器的启动脚本进行修改，对 Envoy 的健康状态进行判断。更理想的方案应该是应用对 &lt;code&gt;Envoy sidecar&lt;/code&gt; 不感知。&lt;/p&gt;
&lt;h3 id=&quot;通过-pod-容器启动顺序进行控制&quot;&gt;&lt;a href=&quot;#通过-pod-容器启动顺序进行控制&quot; class=&quot;headerlink&quot; title=&quot;通过 pod 容器启动顺序进行控制&quot;&gt;&lt;/a&gt;通过 pod 容器启动顺序进行控制&lt;/h3&gt;&lt;p&gt;通过阅读 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/537a602195efdc04cdf2cb0368792afad082d9fd/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L827-L830&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes源码&lt;/a&gt; ，我们可以发现当 pod 中有多个容器时，&lt;code&gt;Kubernetes&lt;/code&gt; 会在一个线程中依次启动这些容器，如下面的代码片段所示：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Step 7: start containers in podContainerChanges.ContainersToStart.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, idx := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; podContainerChanges.ContainersToStart &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  start(&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;, containerStartSpec(&amp;amp;pod.Spec.Containers[idx]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此我们可以在向 pod 中注入 &lt;code&gt;Envoy sidecar&lt;/code&gt; 时将 &lt;code&gt;Envoy sidecar&lt;/code&gt; 放到应用容器之前，这样 &lt;code&gt;Kubernetes&lt;/code&gt; 会先启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;，再启动应用容器。但是还有一个问题，Envoy 启动后我们并不能立即启动应用容器，还需要等待 xDS 配置初始化完成。这时我们就可以采用容器的 &lt;a href=&quot;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postStart lifecycle hook&lt;/a&gt; 来达成该目的。&lt;code&gt;Kubernetes&lt;/code&gt; 会在启动容器后调用该容器的 &lt;code&gt;postStart hook&lt;/code&gt;，&lt;code&gt;postStart hook&lt;/code&gt; 会阻塞 pod 中的下一个容器的启动，直到 &lt;code&gt;postStart hook&lt;/code&gt; 执行完成。因此如果在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的 &lt;code&gt;postStart hook&lt;/code&gt; 中对 Envoy 的配置初始化状态进行判断，待完成初始化后再返回，就可以保证 &lt;code&gt;Kubernetes&lt;/code&gt; 在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 配置初始化完成后再启动应用容器。该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 执行 &lt;code&gt;postStart hook&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postStart hook&lt;/code&gt; 通过 Envoy 健康检查接口判断其配置初始化状态，直到 Envoy 启动完成 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动应用容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Istio&lt;/code&gt; 已经在 1.7 中合入了该修复方案，参见 &lt;a href=&quot;https://github.com/istio/istio/pull/24737&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Allow users to delay application start until proxy is ready&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;插入 &lt;code&gt;sidecar&lt;/code&gt; 后的 pod spec 如下面的 yaml 片段所示。&lt;code&gt;postStart hook&lt;/code&gt; 配置的 &lt;code&gt;pilot-agent wait&lt;/code&gt; 命令会持续调用 &lt;code&gt;Envoy&lt;/code&gt; 的健康检查接口 ‘/healthz/ready’ 检查其状态，直到 Envoy 完成配置初始化。这篇文章 &lt;a href=&quot;https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Delaying application start until sidecar is ready&lt;/a&gt; 中介绍了更多关于该方案的细节。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sidecar-starts-first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; istio-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lifecycle:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      postStart:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        exec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; pilot-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; wait&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; my-application&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该方案在不对应用进行修改的情况下比较完美地解决了应用容器和 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化的依赖问题。但是该解决方案对 &lt;code&gt;Kubernetes&lt;/code&gt; 有两个隐式依赖条件：&lt;code&gt;Kubernetes&lt;/code&gt; 在一个线程中按定义顺序依次启动 pod 中的多个容器，以及前一个容器的 &lt;code&gt;postStart hook&lt;/code&gt; 执行完毕后再启动下一个容器。这两个前提条件在目前的 &lt;code&gt;Kuberenetes&lt;/code&gt; 代码实现中是满足的，但由于这并不是 &lt;code&gt;Kubernetes&lt;/code&gt; 的 API 规范，因此该前提在将来 &lt;code&gt;Kubernetes&lt;/code&gt; 升级后很可能被打破，导致该问题再次出现。&lt;/p&gt;
&lt;h3 id=&quot;Kubernetes-支持定义-pod-中容器之间的依赖关系&quot;&gt;&lt;a href=&quot;#Kubernetes-支持定义-pod-中容器之间的依赖关系&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 支持定义 pod 中容器之间的依赖关系&quot;&gt;&lt;/a&gt;Kubernetes 支持定义 pod 中容器之间的依赖关系&lt;/h3&gt;&lt;p&gt;为了彻底解决该问题，避免 &lt;code&gt;Kubernetes&lt;/code&gt; 代码变动后该问题再次出现，更合理的方式应该是由 &lt;code&gt;Kubernetes&lt;/code&gt; 支持显式定义 pod 中一个容器的启动依赖于另一个容器的健康状态。目前 &lt;code&gt;Kubernetes&lt;/code&gt; 中已经有一个 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/65502&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue Support startup dependencies between containers on the same Pod&lt;/a&gt; 对该问题进行跟踪处理。如果 &lt;code&gt;Kubernetes&lt;/code&gt; 支持了该特性，则该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt; 容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 通过 &lt;code&gt;Envoy sidecar&lt;/code&gt; 容器的 readiness probe 检查其状态，直到 readiness probe 反馈 &lt;code&gt;Envoy sidecar&lt;/code&gt; 已经 ready，即已经初始化完毕。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动应用容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解耦应用服务之间的启动依赖关系&quot;&gt;&lt;a href=&quot;#解耦应用服务之间的启动依赖关系&quot; class=&quot;headerlink&quot; title=&quot;解耦应用服务之间的启动依赖关系&quot;&gt;&lt;/a&gt;解耦应用服务之间的启动依赖关系&lt;/h3&gt;&lt;p&gt;以上几个解决方案的思路都是控制 pod 中容器的启动顺序，在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化完成后再启动应用容器，以确保应用容器启动时能够通过网络正常访问其他服务。但这些方案只是『头痛医头，脚痛医脚』,是治标不治本的方法。因为即使 pod 中对外的网络访问没有问题，应用容器依赖的其他服务也可能由于尚未启动，或者某些问题而不能在此时正常提供服务。要彻底解决该问题，我们需要解耦应用服务之间的启动依赖关系，使应用容器的启动不再强依赖其他服务。&lt;/p&gt;
&lt;p&gt;在一个微服务系统中，原单体应用中的各个业务模块被拆分为多个独立进程（服务）。这些服务的启动顺序是随机的，并且服务之间通过不可靠的网络进行通信。微服务多进程部署、跨进程网络通信的特定决定了服务之间的调用出现异常是一个常见的情况。为了应对微服务的该特点，微服务的一个基本的设计原则是 &lt;strong&gt;“design for failure”&lt;/strong&gt;，即需要以优雅的方式应对可能出现的各种异常情况。当在微服务进程中不能访问一个依赖的外部服务时，需要通过重试、降级、超时、断路等策略对异常进行容错处理，以尽可能保证系统的正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化期间网络暂时不能访问的情况只是放大了微服务系统未能正确处理服务依赖的问题，即使解决了 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的依赖顺序，该问题依然存在。例如在本案例中，配置中心也是一个独立的微服务，当一个依赖配置中心的微服务启动时，配置中心有可能尚未启动，或者尚未初始化完成。在这种情况下，如果在代码中没有对该异常情况进行处理，也会导致依赖配置中心的微服务启动失败。在一个更为复杂的系统中，多个微服务进程之间可能存在网状依赖关系，如果没有按照 &lt;strong&gt;“design for failure”&lt;/strong&gt; 的原则对微服务进行容错处理，那么只是将整个系统启动起来就将是一个巨大的挑战。对于本例而言，可以采用一个类似这样的简单容错策略：先用一个缺省的 logback 配置启动应用进程，并在启动后对配置中心进行重试，待连接上配置中心后，再使用配置中心下发的配置对 logback 进行设置。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;应用容器对 &lt;code&gt;Envoy Sidecar&lt;/code&gt; 启动依赖问题的典型表现是应用容器在刚启动的一小段时间内调用外部服务失败。原因是此时 &lt;code&gt;Envoy sidecar&lt;/code&gt; 尚未完成 xDS 配置的初始化，因此不能为应用容器转发网络请求。该调用失败可能导致应用容器不能正常启动。此问题的根本原因是微服务应用中对依赖服务的调用失败没有进行合理的容错处理。&lt;/p&gt;
&lt;p&gt;对于遗留系统，为了尽量避免对应用的影响，我们可以通过在应用启动命令中判断 &lt;code&gt;Envoy&lt;/code&gt; 初始化状态的方案，或者升级到 &lt;code&gt;Istio 1.7&lt;/code&gt; 来缓解该问题。但为了彻底解决服务依赖导致的错误，建议参考 &lt;strong&gt;“design for failure”&lt;/strong&gt; 的设计原则，解耦微服务之间的强依赖关系，在出现暂时不能访问一个依赖的外部服务的情况时，通过重试、降级、超时、断路等策略进行处理，以尽可能保证系统的正常运行。&lt;/p&gt;
&lt;p&gt;来源：mp.weixin.qq.com/s/iXU2LH90_ZA3VeN7xORmBw&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;典型案例：某运维同学反馈：昨天晚上 &lt;code&gt;Istio&lt;/code&gt; 环境中应用的心跳检测报 &lt;code&gt;connect reset&lt;/code&gt;，然后服务重启了。怀疑是 &lt;code&gt;Istio&lt;/code&gt; 环境中网络不稳定导致了服务重启。&lt;/p&gt;
&lt;p&gt;该问题的表现是安装了 &lt;code&gt;sidecar proxy&lt;/code&gt; 的应用，在启动后的一小段时间内无法通过网络访问 pod 外部的其他服务，例如外部的 HTTP，MySQL，Redis等服务。如果应用没有对依赖服务的异常进行容错处理，该问题还常常会导致应用启动失败。&lt;/p&gt;
&lt;p&gt;下面我们以该问题导致的一个典型故障的分析过程为例，对该问题的原因进行说明。&lt;br&gt;
    
    </summary>
    
      <category term="istio" scheme="http://team.jiunile.com/categories/istio/"/>
    
    
      <category term="istio" scheme="http://team.jiunile.com/tags/istio/"/>
    
      <category term="sidecar" scheme="http://team.jiunile.com/tags/sidecar/"/>
    
      <category term="istio-proxy" scheme="http://team.jiunile.com/tags/istio-proxy/"/>
    
      <category term="启动依赖" scheme="http://team.jiunile.com/tags/%E5%90%AF%E5%8A%A8%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes securityContext</title>
    <link href="http://team.jiunile.com//blog/2020/09/k8s-securitycontext.html"/>
    <id>http://team.jiunile.com//blog/2020/09/k8s-securitycontext.html</id>
    <published>2020-09-09T12:00:00.000Z</published>
    <updated>2020-09-09T10:25:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;kubernetes 中的 &lt;code&gt;securityContext&lt;/code&gt; 是什么？在什么场景下来使用？第一感觉反正是和安全相关的东西，来自官方定义如下：&lt;/p&gt;
&lt;p&gt;安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。 安全上下文包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制（Discretionary Access Control）：基于 用户 ID（UID）和组 ID（GID）. 来判定对对象（例如文件）的访问权限&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安全性增强的 Linux（SELinux）&lt;/a&gt;： 为对象赋予安全性标签。&lt;/li&gt;
&lt;li&gt;以特权模式或者非特权模式运行。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 权能&lt;/a&gt;: 为进程赋予 root 用户的部分特权而非全部特权。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tutorials/clusters/apparmor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppArmor&lt;/a&gt;：使用程序文件来限制单个程序的权限。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Seccomp&lt;/a&gt;：限制一个进程访问文件描述符的权限。&lt;/li&gt;
&lt;li&gt;AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 &lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;no_new_privs&lt;/a&gt; 标志。 当容器以特权模式运行或者具有 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 权能时，AllowPrivilegeEscalation 总是为 &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;readOnlyRootFilesystem：以只读方式加载容器的根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上条目不是安全上下文设置的完整列表 – 请参阅 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#securitycontext-v1-core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SecurityContext&lt;/a&gt; 了解其完整列表。&lt;/p&gt;
&lt;p&gt;关于在 Linux 系统中的安全机制的更多信息，可参阅 &lt;a href=&quot;https://www.linux.com/learn/overview-linux-kernel-security-features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 内核安全性能力概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上面的定义有些似懂非懂，能不能更加直白的描述下呢？好吧，下面来给大家来一些实际的应用场景来讲解下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Security-Context-应用场景&quot;&gt;&lt;a href=&quot;#Security-Context-应用场景&quot; class=&quot;headerlink&quot; title=&quot;Security Context 应用场景&quot;&gt;&lt;/a&gt;Security Context 应用场景&lt;/h2&gt;&lt;h3 id=&quot;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot;&gt;&lt;a href=&quot;#场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot; class=&quot;headerlink&quot; title=&quot;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot;&gt;&lt;/a&gt;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&lt;/h3&gt;&lt;p&gt;有了上面的场景，那我们如何来进行设定呢？假设运行用户对应的 uid为999 gid为999&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      runAsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      fsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 1h&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; sc-vol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        mountPath:&lt;/span&gt; /data/demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumeClaimTemplates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; sc-vol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        accessModes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; ReadWriteOnce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            storage:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;Gi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        storageClassName:&lt;/span&gt; gp2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有两个 &lt;code&gt;securityContext&lt;/code&gt; 设定，一个是针对 pod 级别的，另外一个则是针对 container 级别的，那两者的优先级如何定义呢？规则就是：&lt;strong&gt;container中的会覆写pod中的定义&lt;/strong&gt;。了解了优先级后，来讲解下 runAsUser、runAsGroup、fsGroup 这三个参数的意义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runAsUser&lt;/code&gt; 字段指定 Pod 中的所有容器内的进程都使用 用户ID 1000 来运行。&lt;code&gt;但这里 sc-demo 容器进行了覆写，如果 sc-demo 容器内的进行使用用户 ID 为999来运行&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runAsGroup&lt;/code&gt; 字段指定所有容器中的进程都以主 组ID 999 来运行。 如果忽略此字段，则容器的 主组ID 将是 root（0）。 当 &lt;code&gt;runAsGroup&lt;/code&gt; 被设置时，所有创建的文件也会划归为 用户1000 和 组999。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fsGroup&lt;/code&gt; 由于 &lt;code&gt;fsGroup&lt;/code&gt; 被设置，容器中所有进程也会是附 组ID 0 (root) 的一部分。 卷 &lt;code&gt;/data/demo&lt;/code&gt; 及在该卷中创建的任何文件的属主都会是 组ID 0 (root)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器中查看&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid=999(xx) gid=999(xx) groups=999(xx),0(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /data/demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwsr-x 3 xx root  4096 Sep  8 17:51 &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为 Pod 配置卷访问权限和属主变更策略&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FEATURE STATE: Kubernetes v1.18 [alpha]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下，Kubernetes 在挂载一个卷时，会递归地更改每个卷中的内容的属主和访问权限，使之与 Pod 的 &lt;code&gt;securityContext&lt;/code&gt; 中指定的 &lt;code&gt;fsGroup&lt;/code&gt; 匹配。 对于较大的数据卷，检查和变更属主与访问权限可能会花费很长时间，降低 Pod 启动速度。 你可以在 &lt;code&gt;securityContext&lt;/code&gt; 中使用 &lt;code&gt;fsGroupChangePolicy&lt;/code&gt; 字段来控制 Kubernetes 检查和管理卷属主和访问权限的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fsGroupChangePolicy&lt;/strong&gt; - &lt;code&gt;fsGroupChangePolicy&lt;/code&gt; 定义在卷被暴露给 Pod 内部之前对其 内容的属主和访问许可进行变更的行为。此字段仅适用于那些支持使用 &lt;code&gt;fsGroup&lt;/code&gt; 来 控制属主与访问权限的卷类型。此字段的取值可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OnRootMismatch&lt;/code&gt;：只有根目录的属主与访问权限与卷所期望的权限不一致时，才改变其中内容的属主和访问权限。这一设置有助于缩短更改卷的属主与访问权限所需要的时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Always&lt;/code&gt;：在挂载卷时总是更改卷中内容的属主和访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  runAsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  fsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  fsGroupChangePolicy:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;OnRootMismatch&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个 Alpha 阶段的功能特性。要使用此特性，需要在 kube-apiserver、kube-controller-manager 和 kubelet 上启用 ConfigurableFSGroupPolicy &lt;a href=&quot;https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;特性门控&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot;&gt;&lt;a href=&quot;#场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot; class=&quot;headerlink&quot; title=&quot;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot;&gt;&lt;/a&gt;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 1h&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;给予 &lt;code&gt;privileged: true&lt;/code&gt; 是一个比较粗的权限，一般不建议如此，可以为权限定义更细粒度的权限，类似需要在容器中使用 &lt;code&gt;perf&lt;/code&gt; 命令，则可以进行如下定义：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    capabilities:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        add:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;SYS_ADMIN&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体 &lt;code&gt;capabilities&lt;/code&gt; 的使用规则可参考：&lt;a href=&quot;http://team.jiunile.com/blog/2019/12/capabilities.html&quot;&gt;在 Kubernetes 中配置 Container Capabilities&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;场景三：我需要对启动的容器赋予SELinux标签&quot;&gt;&lt;a href=&quot;#场景三：我需要对启动的容器赋予SELinux标签&quot; class=&quot;headerlink&quot; title=&quot;场景三：我需要对启动的容器赋予SELinux标签&quot;&gt;&lt;/a&gt;场景三：我需要对启动的容器赋予SELinux标签&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  seLinuxOptions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    level:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;s0:c123,c456&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;要指定 SELinux，需要在宿主操作系统中装载 SELinux 安全性模块。&lt;code&gt;seLinuxOptions&lt;/code&gt; 字段的取值是一个 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#selinuxoptions-v1-core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SELinuxOptions&lt;/a&gt; 对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;kubernetes 中的 &lt;code&gt;securityContext&lt;/code&gt; 是什么？在什么场景下来使用？第一感觉反正是和安全相关的东西，来自官方定义如下：&lt;/p&gt;
&lt;p&gt;安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。 安全上下文包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制（Discretionary Access Control）：基于 用户 ID（UID）和组 ID（GID）. 来判定对对象（例如文件）的访问权限&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux&quot;&gt;安全性增强的 Linux（SELinux）&lt;/a&gt;： 为对象赋予安全性标签。&lt;/li&gt;
&lt;li&gt;以特权模式或者非特权模式运行。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/&quot;&gt;Linux 权能&lt;/a&gt;: 为进程赋予 root 用户的部分特权而非全部特权。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tutorials/clusters/apparmor/&quot;&gt;AppArmor&lt;/a&gt;：使用程序文件来限制单个程序的权限。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot;&gt;Seccomp&lt;/a&gt;：限制一个进程访问文件描述符的权限。&lt;/li&gt;
&lt;li&gt;AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 &lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot;&gt;no_new_privs&lt;/a&gt; 标志。 当容器以特权模式运行或者具有 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 权能时，AllowPrivilegeEscalation 总是为 &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;readOnlyRootFilesystem：以只读方式加载容器的根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上条目不是安全上下文设置的完整列表 – 请参阅 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#securitycontext-v1-core&quot;&gt;SecurityContext&lt;/a&gt; 了解其完整列表。&lt;/p&gt;
&lt;p&gt;关于在 Linux 系统中的安全机制的更多信息，可参阅 &lt;a href=&quot;https://www.linux.com/learn/overview-linux-kernel-security-features&quot;&gt;Linux 内核安全性能力概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上面的定义有些似懂非懂，能不能更加直白的描述下呢？好吧，下面来给大家来一些实际的应用场景来讲解下。&lt;/p&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="securityContext" scheme="http://team.jiunile.com/categories/kubrenetes/securityContext/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="securityContext" scheme="http://team.jiunile.com/tags/securityContext/"/>
    
      <category term="安全上下文" scheme="http://team.jiunile.com/tags/%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes in Kuberntes</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-k8s-in-k8s.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-k8s-in-k8s.html</id>
    <published>2020-06-12T12:00:00.000Z</published>
    <updated>2020-06-12T05:58:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;KinD&lt;/code&gt; 是一个非常轻量级的 Kubernetes 安装工具，他将 Docker 容器当成 Kubernetes 的节点，使用非常方便。既然在 Docker 容器中可以运行 Kubernetes 集群，那么我们自然就会想到是否可以在 Pod 中来运行呢？在 Pod 中运行会遇到哪些问题呢？&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中安装-Docker-Daemon&quot;&gt;&lt;a href=&quot;#在-Pod-中安装-Docker-Daemon&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中安装 Docker Daemon&quot;&gt;&lt;/a&gt;在 Pod 中安装 Docker Daemon&lt;/h2&gt;&lt;p&gt;&lt;code&gt;KIND&lt;/code&gt; 当前依赖于 Docker（尽管他们计划很快支持其他容器运行时，例如&lt;code&gt;podman&lt;/code&gt;）。因此，第一步是创建一个容器映像，该映像允许您在 Pod 内运行 Docker守护程序，以便使诸如&lt;code&gt;docker run&lt;/code&gt;之类的命令在Pod内运行（又名 Docker-in-Docker 或 DIND ）。&lt;/p&gt;
&lt;p&gt;Docker-in-Docker 是一个众所周知的问题，并且已经解决了相当一段时间。尽管如此，当尝试在生产 Kubernetes 集群中正确设置 Docker-in-Docker 时，我们仍然遇到很多问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;MTU问题&quot;&gt;&lt;a href=&quot;#MTU问题&quot; class=&quot;headerlink&quot; title=&quot;MTU问题&quot;&gt;&lt;/a&gt;MTU问题&lt;/h3&gt;&lt;p&gt;MTU 问题的性质实际上取决于生产 Kubernetes 集群的网络提供商。我们用于 CI 的Kubernetes 发行版是 &lt;a href=&quot;https://d2iq.com/solutions/ksphere/konvoy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Konvoy&lt;/a&gt;。Konvoy 使用&lt;code&gt;Calico&lt;/code&gt;作为其默认网络提供商，并且默认情况下使用&lt;code&gt;IPIP&lt;/code&gt;封装。&lt;code&gt;IPIP&lt;/code&gt;封装产生20字节的开销。换句话说，如果群集中主机网络的主网络接口的&lt;code&gt;MTU&lt;/code&gt;为1500，则Pod中网络接口的&lt;code&gt;MTU&lt;/code&gt;将为1480。如果您的生产群集在某些云提供商（例如GCE）上运行，则&lt;code&gt;MTU Pod&lt;/code&gt;的最大值甚至更低（1460-20 = 1440）。&lt;/p&gt;
&lt;p&gt;重要的是，我们在 Pod 内配置默认 Docker 网络的&lt;code&gt;MTU&lt;/code&gt;（&lt;code&gt;dockerd&lt;/code&gt; 的 &lt;code&gt;--mtu&lt;/code&gt;标志），使其等于或小于 Pod 的网络接口的&lt;code&gt;MTU&lt;/code&gt;。否则，您将无法与外界建立连接（例如，从互联网上获取容器图像时）。&lt;/p&gt;
&lt;h3 id=&quot;PID-1-的问题&quot;&gt;&lt;a href=&quot;#PID-1-的问题&quot; class=&quot;headerlink&quot; title=&quot;PID 1 的问题&quot;&gt;&lt;/a&gt;PID 1 的问题&lt;/h3&gt;&lt;p&gt;比如我们需要在一个容器中去运行 &lt;code&gt;Docker Daemon&lt;/code&gt; 以及一些 Kubernetes 的集群测试，而这些测试依赖于 &lt;code&gt;KinD&lt;/code&gt; 和 &lt;code&gt;Docker Damon&lt;/code&gt;，在一个容器中运行多个服务我们可能会去使用 &lt;code&gt;systemd&lt;/code&gt;，但是使用 &lt;code&gt;systemd&lt;/code&gt; 也会有一些问题。&lt;/p&gt;
&lt;p&gt;比如我们需要保留测试的退出状态，Kubernetes 中使用的容器运行时可以 watch 到容器中的第一个进程（PID 1）的退出状态。如果我们使用 &lt;code&gt;systemd&lt;/code&gt; 的话，那么我们测试的进程退出状态不会被转发到 Kubernetes。&lt;/p&gt;
&lt;p&gt;此外获取测试的日志也是非常重要的，在 Kubernetes 中会自动获取写入到 stdout 和 stderr 的容器日志，但是如果使用 &lt;code&gt;systemd&lt;/code&gt; 的话，要想获取应用的日志就比较麻烦的。&lt;/p&gt;
&lt;p&gt;为了解决上面的问题，我们可以在容器镜像中使用如下所示的启动脚本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dockerd &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Wait until dockerd is ready.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;until docker ps &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Waiting for dockerd...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sleep 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是我们不能将上面的脚本作为容器的 entrypoint，在镜像中定义的 entrypoint 会在容器中以 PID 1 的形式运行在一个单独的 &lt;code&gt;pid namespace&lt;/code&gt; 中。PID 1 是一个内核中的一个特殊进程，它的行为和其他进程不同。&lt;/p&gt;
&lt;p&gt;本质上，接收信号的进程是 PID 1：它会被内核做特殊处理；如果它没有为信号注册一个处理器，内核就不会回到默认行为（即杀死进程）。由于当收到 SIGTERM 信号时，内核会默认杀死这个进程，所以一些进程也许不会为 SIGTERM 信号注册信号处理程序。如果出现了这种情况，当 Kubernetes 尝试终止 Pod 时，SIGTERM 将被吞噬，你会注意到 Pod 会被卡在 Terminating 的状态下。&lt;/p&gt;
&lt;p&gt;这其实不是一个什么新鲜的问题，但是了解这个问题的人却并不多，而且还一直在构建有这样问题的容器。我们可以使用 tini 这个应用来解决这个问题，将其作为镜像的入口点，如在 &lt;code&gt;Dockerfile&lt;/code&gt; 中所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/tini&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;--&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/entrypoint.sh&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个程序会正确注册信号处理程序和转发信号。它还会执行一些其他 PID 1 的事情，比如回收容器中的僵尸进程。&lt;/p&gt;
&lt;h3 id=&quot;挂载-cgroups&quot;&gt;&lt;a href=&quot;#挂载-cgroups&quot; class=&quot;headerlink&quot; title=&quot;挂载 cgroups&quot;&gt;&lt;/a&gt;挂载 cgroups&lt;/h3&gt;&lt;p&gt;由于 &lt;code&gt;Docker Daemon&lt;/code&gt; 需要控制 cgroups，所以需要将 cgroup 文件系统挂载到容器中去。但是由于 cgroups 和宿主机是共享的，所以我们需要确保 &lt;code&gt;Docker Daemon&lt;/code&gt; 控制的 cgroups 不会影响到其他容器或者宿主机进程使用的其他 cgroups，还需要确保 &lt;code&gt;Docker Daemon&lt;/code&gt; 在容器中创建的 cgroups 在容器退出后不会被泄露。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Docker Daemon&lt;/code&gt; 中有一个 &lt;code&gt;--cgroup—parent&lt;/code&gt; 参数来告诉 Daemon 将所有容器的 cgroups 嵌套在指定的 cgroup 下面。当容器运行在 Kubernetes 集群下面时，我们在容器中设置 &lt;code&gt;Docker Daemon&lt;/code&gt; 的 &lt;code&gt;--cgroup—parent&lt;/code&gt; 参数，这样它的所有 cgroups 就会被嵌套在 Kubernetes 为容器创建的 cgroup 下面了。&lt;/p&gt;
&lt;p&gt;在以前为了让 cgroup 文件系统在容器中可用，一些用户会将宿主机中的 &lt;code&gt;/sys/fs/cgroup&lt;/code&gt; 挂载到容器中的这个位置，如果这样使用的话，我们就需要在容器启动脚本中把 &lt;code&gt;--cgroup—parent&lt;/code&gt; 设置为下面的内容，这样 &lt;code&gt;Docker Daemon&lt;/code&gt; 创建的 cgroups 就可以正确被嵌套了。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CGROUP_PARENT=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(grep systemd /proc/self/cgroup | cut -d: -f3)&lt;/span&gt;/docker&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;/proc/self/cgroup&lt;/code&gt; 显示的是调用进程的 cgroup 路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是我们要知道，挂载宿主机的 &lt;code&gt;/sys/fs/cgroup&lt;/code&gt; 文件是非常危险的事情，因为他把整个宿主机的 cgroup 层次结构都暴露给了容器。以前为了解决这个问题，Docker 用了一个小技巧把不相关的 cgroups 隐藏起来，不让容器看到。Docker 从容器的 cgroups 对每个 cgroup 系统的 cgroup 层次结构的根部进行绑定挂载。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm debian findmnt -lo &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;,target -t cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOURCE                                                                               TARGET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpuset[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/cpuset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpu[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]        /sys/fs/cgroup/cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpuacct[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]    /sys/fs/cgroup/cpuacct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blkio[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/blkio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memory[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgroup[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/systemd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面我们可以看出 cgroups 通过将宿主机 cgroup 文件系统上的 &lt;code&gt;/sys/fs/cgroup/memory/memory.limit_in_bytes&lt;/code&gt; 文件映射到 &lt;code&gt;/sys/fs/cgroup/memory/docker/&amp;lt;CONTAINER_ID&amp;gt;/memory.limit_in_bytes&lt;/code&gt; 来控制容器内 cgroup 层次结构根部的文件，这种方式可以防止容器进程意外地修改宿主机的 cgroup。&lt;/p&gt;
&lt;p&gt;但是这种方式有时候会让 cadvisor 和 kubelet 这样的应用感动困惑，因为绑定挂载并不会改变 &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/cgroup&lt;/code&gt; 里面的内容。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm debian cat /proc/1/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14:name=systemd:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5:memory:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4:blkio:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3:cpuacct:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2:cpu:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1:cpuset:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0::/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cadvisor 会通过查看 &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/cgroup&lt;/code&gt; 来获取给定进程的 cgroup，并尝试从对应的 cgroup 中获取 CPU 或内存统计数据。但是由于 &lt;code&gt;Docker Daemon&lt;/code&gt; 进程做了绑定挂载，cadvisor 就无法找到容器进程对应的 cgroup。为了解决这个问题，我们在容器内部又做了一次挂载，从 &lt;code&gt;/sys/fs/cgroup/memory&lt;/code&gt; 挂载到 &lt;code&gt;/sys/fs/cgroup/memory/docker/&amp;lt;CONTAINER_ID&amp;gt;/&lt;/code&gt;（针对所有的 cgroup 子系统），这个方法可以很好的解决这个问题。&lt;/p&gt;
&lt;p&gt;现在新的解决方法是使用 &lt;code&gt;cgroup namespace&lt;/code&gt;，如果你运行在一个内核版本 4.6+ 的 Linux 系统下面，runc 和 docker 都加入了 cgroup 命名空间的支持。但是目前 Kubernetes 暂时还不支持 cgroup 命名空间，但是很快会作为 &lt;code&gt;cgroups v2&lt;/code&gt; 支持的一部分。&lt;/p&gt;
&lt;h3 id=&quot;IPtables&quot;&gt;&lt;a href=&quot;#IPtables&quot; class=&quot;headerlink&quot; title=&quot;IPtables&quot;&gt;&lt;/a&gt;IPtables&lt;/h3&gt;&lt;p&gt;在使用的时候我们发现在线上的 Kubernetes 集群运行时，有时候容器内的 &lt;code&gt;Docker Daemon&lt;/code&gt; 启动的嵌套容器无法访问外网，但是在本地开发电脑上却可以很正常的工作，大部分开发者应该都会经常遇到这种情况。&lt;/p&gt;
&lt;p&gt;最后发现当出现这个问题的时候，来自嵌套的 Docker 容器的数据包并没有打到 iptables 的 POSTROUTING 链，所以没有做 masqueraded。&lt;/p&gt;
&lt;p&gt;这个问题是因为包含 &lt;code&gt;Docker Daemon&lt;/code&gt; 的镜像是基于 Debian buster 的，而默认情况下，Debian buster 使用的是 nftables 作为 iptables 的默认后端，然而 Docker 本身还不支持 nftables。要解决这个问题只需要在容器镜像中切换到 iptables 命令即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN update-alternatives --set iptables  /usr/sbin/iptables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update-alternatives --set arptables /usr/sbin/arptables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整的 Dockerfile 文件和启动脚本可以在 &lt;a href=&quot;https://github.com/jieyu/docker-images/tree/master/dind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上面获取，也可以直接使用 &lt;code&gt;jieyu/dind-buster:v0.1.8&lt;/code&gt; 这个镜像来测试。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm --privileged jieyu/dind-buster:v0.1.8 docker run alpine wget baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群下使用如下所示的 Pod 资源清单部署即可：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; dind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; jieyu/dind-buster:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; dind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    stdin:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tty:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    emptyDir:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中运行-KinD&quot;&gt;&lt;a href=&quot;#在-Pod-中运行-KinD&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中运行 KinD&quot;&gt;&lt;/a&gt;在 Pod 中运行 KinD&lt;/h2&gt;&lt;p&gt;上面我们成功配置了 Docker-in-Docker(DinD)，接下来我们就来在该容器中使用 KinD 启动 Kubernetes 集群。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --rm --privileged jieyu/dind-buster:v0.1.8 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dockerd...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# curl -Lso ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-$(uname)-amd64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# chmod +x ./kind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# mv ./kind /usr/bin/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# kind create cluster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (kindest/node:v1.18.2) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing CNI 🔌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing StorageClass 💾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set kubectl context to &lt;span class=&quot;string&quot;&gt;&quot;kind-kind&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can now use your cluster with:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl cluster-info --context kind-kind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have a nice day! 👋&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   11m   v1.18.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于某些原因可能你用上面的命令下载不了 kind，我们可以想办法提前下载到宿主机上面，然后直接挂载到容器中去也可以，我这里将 kind 和 kubectl 命令都挂载到容器中去，使用下面的命令启动容器即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --privileged -v /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kind:/usr/bin/kind -v /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kubectl:/usr/bin/kubectl jieyu/dind-buster:v0.1.8 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_1.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;br&gt;可以看到在容器中可以很好的使用 KinD 来创建 Kubernetes 集群。接下来我们直接在 Kubernetes 中来测试一次：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; dind.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -ti dind /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# curl -Lso ./kind https://kind.sigs.k8s.io/dl/v0.7.0/kind-$(uname)-amd64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# chmod +x ./kind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# mv ./kind /usr/bin/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# kind create cluster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (kindest/node:v1.17.0) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✗ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR: failed to create cluster: failed to init node with kubeadm: &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;docker exec --privileged kind-control-plane kubeadm init --ignore-preflight-errors=all --config=/kind/kubeadm.conf --skip-token-print --v=6&quot;&lt;/span&gt; failed with error: &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; status 137&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到在 Pod 中使用 KinD 来创建集群失败了，这是因为在 KinD 节点嵌套容器内运行的 kubelet 会随机杀死顶层容器内的进程，这其实还是和上面讨论的 cgroups 的挂载有关。&lt;/p&gt;
&lt;p&gt;但其实我自己在使用 v0.8.1 版本的 KinD 的时候，在上面的 Pod 中是可以正常创建集群的，不知道是否是 KinD 搭建的集群有什么特殊处理，这里需要再深入研究：&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_2.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你在使用的过程中也遇到了上述的问题，则可以继续往下看解决方案。&lt;/p&gt;
&lt;p&gt;当顶层容器（DIND）在 Kubernetes  Pod 中运行的时候，对于每个 cgroup 子系统（比如内存），从宿主机的角度来看，它的 cgroup 路径是 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当 KinD 在 DIND 容器内的嵌套节点容器内启动 kubelet 的时候，kubelet 将在 &lt;code&gt;/kubepods/burstable/&lt;/code&gt; 下相对于嵌套 KIND 节点容器的根 cgroup 为其 Pods 来操作 cgroup。从宿主机的角度来看，cgroup 路径就是 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;/docker/&amp;lt;KIND_CID&amp;gt;/kubepods/burstable/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些都是正确的，但是在嵌套的 KinD 节点容器中，有另一个 cgroup 存在于 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;/docker/&amp;lt;DIND_CID&amp;gt;&lt;/code&gt; 下面，相对于嵌套的 KinD 节点容器的根 cgroup，在 kubelet 启动之前就存在了，这是上面我们讨论过的 cgroups 挂载造成的，通过 KinD entrypoint 脚本设置。而如果你在 KinD 节点容器里面做一个 &lt;code&gt;cat /kubepods/burstable/&amp;lt;POD_ID&amp;gt;/docker/&amp;lt;DIND_CID&amp;gt;/tasks&lt;/code&gt;，你会看到 DinD 容器的进程。&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_3.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就是最根本的原因，KinD 节点容器里面的 kubelet 看到了这个 cgroup，以为应该由它来管理，但是却找不到和这个 cgroup 相关联的 Pod，所以就会尝试来杀死属于这个 cgroup 的进程来删除这个 cgroup。这个操作的结果就是随机进程被杀死。解决这个问题的方法可以通过设置 kubelet 的 &lt;code&gt;--cgroup-root&lt;/code&gt; 参数，通过该标志来指示 KinD 节点容器内的 kubelet 为其 Pods 使用不同的 cgroup 根路径（比如 /kubelet）。这样就可以在 Kubernetes 集群中来启动 KinD 集群了，我们可以通过下面的 YAML 资源清单文件来修复这个问题。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; kind-cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; jieyu/kind-cluster-buster:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kind-cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    stdin:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tty:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    env:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; API_SERVER_ADDRESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      valueFrom:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        fieldRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          fieldPath:&lt;/span&gt; status.podIP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /lib/modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; libmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; api-server-port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    readinessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        path:&lt;/span&gt; /healthz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        port:&lt;/span&gt; api-server-port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        scheme:&lt;/span&gt; HTTPS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      periodSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      successThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    emptyDir:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; libmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /lib/modules&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用上面的资源清单文件创建完成后，稍等一会儿我们就可以进入 Pod 中来验证。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -ti kind-cluster /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@kind-cluster:/&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   72s   v1.17.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样也可以直接使用 Docker CLI 来进行测试：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --rm --privileged jieyu/kind-cluster-buster:v0.1.0 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dockerd...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Setting up KIND cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (jieyu/kind-node:v1.17.0) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing CNI 🔌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing StorageClass 💾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Waiting ≤ 15m0s &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; control-plane = Ready ⏳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; • Ready after 31s 💚&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set kubectl context to &lt;span class=&quot;string&quot;&gt;&quot;kind-kind&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can now use your cluster with:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl cluster-info --context kind-kind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have a nice day! 👋&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@d95fa1302557:/&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   71s   v1.17.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@d95fa1302557:/&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面镜像对应的 Dockerfile 和启动脚本地址：&lt;a href=&quot;https://github.com/jieyu/docker-images/tree/master/kind-cluster&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jieyu/docker-images/tree/master/kind-cluster&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图是我在 KinD 搭建的 Kubernetes 集群中，创建的一个 Pod，然后在 Pod 中创建的一个独立的 Kubernetes 集群最终效果：&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_4.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在实现上面功能的时候，过程中还是遇到了不少的障碍，其中大部分都是因为 Docker 容器没有提供和宿主机完全隔离的功能造成的，某些内核资源比如 cgroups 是在内核中共享的，如果很多容器同时操作它们，也可能会造成潜在的冲突。但是一旦解决了这些问题，我们就可以非常方便的在 Kubernetes 集群 Pod 中轻松地运行一个独立的 Kubernetes 集群了，这应该算真正的 Kubernetes IN Kubernetes 了吧~&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://d2iq.com/blog/running-kind-inside-a-kubernetes-cluster-for-continuous-integration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://d2iq.com/blog/running-kind-inside-a-kubernetes-cluster-for-continuous-integration&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;KinD&lt;/code&gt; 是一个非常轻量级的 Kubernetes 安装工具，他将 Docker 容器当成 Kubernetes 的节点，使用非常方便。既然在 Docker 容器中可以运行 Kubernetes 集群，那么我们自然就会想到是否可以在 Pod 中来运行呢？在 Pod 中运行会遇到哪些问题呢？&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中安装-Docker-Daemon&quot;&gt;&lt;a href=&quot;#在-Pod-中安装-Docker-Daemon&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中安装 Docker Daemon&quot;&gt;&lt;/a&gt;在 Pod 中安装 Docker Daemon&lt;/h2&gt;&lt;p&gt;&lt;code&gt;KIND&lt;/code&gt; 当前依赖于 Docker（尽管他们计划很快支持其他容器运行时，例如&lt;code&gt;podman&lt;/code&gt;）。因此，第一步是创建一个容器映像，该映像允许您在 Pod 内运行 Docker守护程序，以便使诸如&lt;code&gt;docker run&lt;/code&gt;之类的命令在Pod内运行（又名 Docker-in-Docker 或 DIND ）。&lt;/p&gt;
&lt;p&gt;Docker-in-Docker 是一个众所周知的问题，并且已经解决了相当一段时间。尽管如此，当尝试在生产 Kubernetes 集群中正确设置 Docker-in-Docker 时，我们仍然遇到很多问题。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="k8s in k8s" scheme="http://team.jiunile.com/tags/k8s-in-k8s/"/>
    
  </entry>
  
  <entry>
    <title>多集群kubernetes dashboard 通过ldap统一登录与授权</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-mutiboard-ldap.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-mutiboard-ldap.html</id>
    <published>2020-06-12T11:00:00.000Z</published>
    <updated>2020-06-12T02:11:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/icyxp/kubernetes-dashboard-ldap/master/assets/images/logo.png&quot; alt=&quot;logo.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;工具由来&quot;&gt;&lt;a href=&quot;#工具由来&quot; class=&quot;headerlink&quot; title=&quot;工具由来&quot;&gt;&lt;/a&gt;工具由来&lt;/h1&gt;&lt;p&gt;为什么要写这样的一个工具呢？这是因为我司有多个 &lt;code&gt;kubernetes&lt;/code&gt; 集群(8+)，且都是云托管服务无法接触到Apiserver配置，这就给我们带来一个痛点，&lt;strong&gt;开发、sre需要登录k8s dashbaord且不同部门和角色间需要不同的授权&lt;/strong&gt;，原先都是通过 &lt;code&gt;sa token&lt;/code&gt; 进行登录dashboard，但随着k8s集群的增长，每增加一个集群，就需要告知使用方对应dashboard访问地址以及对应的token，这不管是提供方还是使用方都让人感觉非常的痛苦。那是否有一款工具能&lt;strong&gt;提供统一地址统一登录多集群dashboard的方案&lt;/strong&gt;呢？经过一番搜索后，发现并没有，市面上大多数是单集群集成 &lt;code&gt;LDAP&lt;/code&gt; 的方案，主要是以 &lt;code&gt;DEX&lt;/code&gt; 为主，但光单集群的统一登录授权方案就让人感觉非常的困难。难道就没有简单方便的工具供我们使用吗？好吧，那我就来打造这样一款工具吧。&lt;/p&gt;
&lt;p&gt;Dashboard LDAP集成方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://k2r2bai.com/2019/09/29/ironman2020/day14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://k2r2bai.com/2019/09/29/ironman2020/day14/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两篇文档是成LDAP的方案，个人感觉还不错，供有需要的人参考！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;如何打造&quot;&gt;&lt;a href=&quot;#如何打造&quot; class=&quot;headerlink&quot; title=&quot;如何打造&quot;&gt;&lt;/a&gt;如何打造&lt;/h1&gt;&lt;p&gt;好吧既然没有，那就自动动手打造一个！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目标： &lt;strong&gt;简单使用&lt;/strong&gt;！！！通过访问同一地址，使用LDAP登录且可切换不同集群的dashboard，同时对应不同的集群权限可单独配置！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了上面的目标，那如何来实现呢？&lt;/p&gt;
&lt;p&gt;实现方式其实很简单，首先写一个登录界面与公司的AD进行打通获取用户与组，然后将用户或者组与k8s集群中的 &lt;code&gt;service account&lt;/code&gt; 进行关联就实现了对应的rbac与登录token，最后在登录后实现一个反向代理服务即可完成。&lt;/p&gt;
&lt;p&gt;是不是非常的简单！！！&lt;/p&gt;
&lt;p&gt;实现技术栈：golang(gin、client-go、viper、ldap) + Kubernetes Dashboard&lt;/p&gt;
&lt;h1 id=&quot;如何部署&quot;&gt;&lt;a href=&quot;#如何部署&quot; class=&quot;headerlink&quot; title=&quot;如何部署&quot;&gt;&lt;/a&gt;如何部署&lt;/h1&gt;&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;在使用此工具前，需要有以下一些条件约束：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已在各k8s集群部署 &lt;code&gt;dashboard&lt;/code&gt; 且能被此工具访问到&lt;/li&gt;
&lt;li&gt;已有 &lt;code&gt;ldap&lt;/code&gt; 且有管理权限能进行访问操作&lt;/li&gt;
&lt;li&gt;各集群中有对应的 &lt;code&gt;service account&lt;/code&gt; 可进行映射，如需对不同用户和组需要有不同的操作权限，则对sa进行rbac授权即可，下面会详细说明。&lt;/li&gt;
&lt;li&gt;此工具需要操作各集群的api，故需要获取每个集群的 &lt;code&gt;apiserver地址&lt;/code&gt;、&lt;code&gt;ca.crt&lt;/code&gt; 以及 &lt;code&gt;token&lt;/code&gt; 进行配置，至于每个集群的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 如果获取，后面会进行说明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何获取-ca-crt-及-token&quot;&gt;&lt;a href=&quot;#如何获取-ca-crt-及-token&quot; class=&quot;headerlink&quot; title=&quot;如何获取 ca.crt 及 token&quot;&gt;&lt;/a&gt;如何获取 ca.crt 及 token&lt;/h2&gt;&lt;p&gt;此工具需要操作每个集群的api来获取对应的 sa 以及 token，故需要有对各集群操作的权限。那如何在各集群生成对应的 ca证书 及 token 呢？答案就是创建一个 sa 并给予一定的权限。&lt;/p&gt;
&lt;p&gt;在每个k8s集群中执行如下yaml文件:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-crb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; serviceaccounts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; secrets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此yaml文件的含义：创建一个名为&lt;code&gt;mutiboard-ldap&lt;/code&gt;的 sa，并且给予&lt;code&gt;serviceaccounts&lt;/code&gt;和&lt;code&gt;secrets&lt;/code&gt;的get和list的权限。&lt;/p&gt;
&lt;p&gt;获取 &lt;code&gt;mutiboard-ldap&lt;/code&gt; 的 ca.crt：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(⎈|aws-local:default)❯ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $(kubectl get secret $(kubectl get secret | grep mutiboard-ldap | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;) -o go-template=&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#123;index .data &quot;ca.crt&quot;&amp;#125;&amp;#125;&#39;&lt;/span&gt;) | base64 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----BEGIN CERTIFICATE-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cm5ldGVzMB4XDTE5MDEyNTEwMTgzNFoXDTI5MDEyMjEwMTgzNFowFTETMBEGA1UE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMmc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TW0stLLP+M6Pc9wpRgZufg6eQ7puBfbYgik20QlO4LFtocgNUDa0y+aSXjxheA2C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A+o9wW0IC3GHQHKgeFY8KXIJu6wM0TO+JNQy5XZAWfbsLeXU/sLhKuWET/KJzVWT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0uBE+GCADAAQIec1oQXMbQ551hU5gBFcr67NXHpa2qwEGA1mGtZ7ztmW4+IFUD74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G166z4AOgmR4YWxBs/+8NhfWudFD32xevBfSKuHRxRGG5dtffY8QnRbnrmy70HE5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yzLtBvAGfCwtHLTP2ngCAnn2Fb6IeMdIYGpI1544ZjRbzT1YIWsG1v3dlu6tvK1q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X5Pj+UTDmJuf2SW52A0CAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKE2hV0DIG8fSf4/eOi5R2sPRfBW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qTwgZDDT9dxZNhbxEInALdruwRUbKRpwaUBOGVpIlaK3/rZkAfjUwoDJ+J4fmmCX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w3ySrYFjx6tqVFqCPjDkBHh4xpMwUlvsvryRuCEQUQgjqBvj6sWm9GERF2n3VYBF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S8bjsQQAZJoE4W+OKchlEoSFlKhxAoeZx9CD3Rxnhj2og6&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;VoGCUqAMh4WZWX+w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pENnui6M96SysH3SkrA02RXWTGeKzK4E6Av3IG+2a2hauHorbqVfaM6HeL3hkU/B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JCWpOgN3T4Fw7E359CBQxnSHPasmZ5VBoyIk/HUU6ZlMK6Xo6JlbS7ZvVl4=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----END CERTIFICATE-----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取 &lt;code&gt;mutiboard-ldap&lt;/code&gt; 的 token：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(⎈|aws-local:default)❯ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $(kubectl get secret $(kubectl get secret | grep mutiboard-ldap | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;) -o go-template=&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#123;.data.token&amp;#125;&amp;#125;&#39;&lt;/span&gt;) | base64 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Im11dGlib2FyZC1sZGFwLXRva2VuLWJ3NWdmIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im11dGlib2FyZC1sZGFwIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMjVmZjI4MGQtYWJhMi0xMWVhLWFlOGEtMDIzOTBjMzcyNzhlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6bXV0aWJvYXJkLWxkYXA&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;Q.q14hqEu2p70_YczDviR6c8McDM5vfnKPzjO9usCsC-uQUxciBbuJU_PK9j3uawppUNlrs3rAPrZIGUS7Jv14rifEXpGxIIfGR6n8-le0b-9YvMZCgs9-jhf-1r01EAnZFh6gcXfxESFguFQI0vYOsX4P2LQvZ9XTMzsqXbW3KGYao5elAjCE4e8Rg4--9e_zU8NGTEycsvUMxP-9p0SaAzn9Iak3saZtAnzJq5hkSf1t7l2_CgEsYN-3b7uGpHupK_zdgAeOflj9ze4Cz2YScv5eixwVXJ-RcI4lgSFCgt5yzSbnIuHgxRZyN3NcYLrSBYKftezZysWm3jELgLPogQ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，各集群的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 都已获取，下面会告知如何进行配置使用这些 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;SA-RBAC列子&quot;&gt;&lt;a href=&quot;#SA-RBAC列子&quot; class=&quot;headerlink&quot; title=&quot;SA RBAC列子&quot;&gt;&lt;/a&gt;SA RBAC列子&lt;/h2&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/cluster-service: &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;namespaces&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;list&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;watch&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-listnamespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; RoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-ci-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; ops-ci&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; RoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-qa-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; ops-qa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段YAML的意思为：创建了一个ops-admin的sa，并为这个sa赋予了两个命名空间(ops-ci、ops-qa) admin 的权限。&lt;/p&gt;
&lt;p&gt;具体想了解更多rbac相关的说明，可参考：&lt;a href=&quot;https://www.cnblogs.com/wlbl/p/10694364.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/wlbl/p/10694364.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ldap说明&quot;&gt;&lt;a href=&quot;#ldap说明&quot; class=&quot;headerlink&quot; title=&quot;ldap说明&quot;&gt;&lt;/a&gt;ldap说明&lt;/h2&gt;&lt;p&gt;我司&lt;code&gt;ldap&lt;/code&gt;目录规则如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|---公司&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|----分公司&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|-----|----部门&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|-----|-----|-----用户&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的&lt;code&gt;Distinguished Name&lt;/code&gt;显示如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CN=Peng Xu,OU=部门,OU=分公司,OU=公司,DC=corp,DC=xxx,DC=com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我会获取第一个&lt;code&gt;OU&lt;/code&gt;作为&lt;code&gt;group&lt;/code&gt;，如果你的需求和我不一样，可以给我提 issue 进行适配&lt;/p&gt;
&lt;p&gt;ldap 详细说明请参考：&lt;a href=&quot;https://blog.poychang.net/ldap-introduction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.poychang.net/ldap-introduction&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;configmap-yaml-配置说明&quot;&gt;&lt;a href=&quot;#configmap-yaml-配置说明&quot; class=&quot;headerlink&quot; title=&quot;configmap.yaml 配置说明&quot;&gt;&lt;/a&gt;configmap.yaml 配置说明&lt;/h2&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ldap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  addr:&lt;/span&gt; ldap://&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.81&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;389&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  adminUser:&lt;/span&gt; xxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  adminPwd:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  baseDN:&lt;/span&gt; dc=corp,dc=patsnap,dc=com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  filter:&lt;/span&gt; (&amp;amp;(objectClass=person)(sAMAccountName=%s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  attributes:&lt;/span&gt; user_dn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  orgUnitName:&lt;/span&gt; OU=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#全局用户/用户组与SA的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rbac:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DevOps team:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    sa:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ns:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  xupeng:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    sa:&lt;/span&gt; inno-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ns:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clusters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#集群别名，在登录下拉框中显示的key，这个别名需要和secret.sh中的ca.crt和token的键名一一对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  local:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#apiserver地址，能够被当前工具访问到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-dev.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#kubernetes dashboard地址，能够被当前工具访问到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-dev.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#集群说明，在登录下拉框中显示的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; Dev Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#针对单独集群细分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#rbac:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#  DevOps team:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    sa: admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    ns: kube-system&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#  xupeng:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    sa: ops-admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    ns: default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  cnrelease:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-cn-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-cn-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; CN Release Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  usrelease:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-us-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-us-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; US Release Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  euprod:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-eu-prod.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-eu-prod.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; EU Prod Cluster&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;修改并部署&lt;code&gt;deploy/configmap.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将各集群获取的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 写入到对应的deploy/token下&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行 deploy 下的 secret.sh 脚本 &lt;code&gt;sh deploy/secret.sh&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: secret.sh 中的&lt;code&gt;xx_token/xxx_ca.crt&lt;/code&gt;中的 &lt;code&gt;xx&lt;/code&gt; 对应于&lt;code&gt;configmap.yaml&lt;/code&gt; 中的&lt;strong&gt;集群别名，必须要一一对应&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署&lt;code&gt;deploy/deployment.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;访问&quot;&gt;&lt;a href=&quot;#访问&quot; class=&quot;headerlink&quot; title=&quot;访问&quot;&gt;&lt;/a&gt;访问&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://{nodeip}:31000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://{nodeip}:31000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频地址：&lt;a href=&quot;http://www.youtube.com/watch?v=ILiviSLbSq8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.youtube.com/watch?v=ILiviSLbSq8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git地址：&lt;a href=&quot;https://github.com/icyxp/kubernetes-dashboard-ldap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/kubernetes-dashboard-ldap&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/icyxp/kubernetes-dashboard-ldap/master/assets/images/logo.png&quot; alt=&quot;logo.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;工具由来&quot;&gt;&lt;a href=&quot;#工具由来&quot; class=&quot;headerlink&quot; title=&quot;工具由来&quot;&gt;&lt;/a&gt;工具由来&lt;/h1&gt;&lt;p&gt;为什么要写这样的一个工具呢？这是因为我司有多个 &lt;code&gt;kubernetes&lt;/code&gt; 集群(8+)，且都是云托管服务无法接触到Apiserver配置，这就给我们带来一个痛点，&lt;strong&gt;开发、sre需要登录k8s dashbaord且不同部门和角色间需要不同的授权&lt;/strong&gt;，原先都是通过 &lt;code&gt;sa token&lt;/code&gt; 进行登录dashboard，但随着k8s集群的增长，每增加一个集群，就需要告知使用方对应dashboard访问地址以及对应的token，这不管是提供方还是使用方都让人感觉非常的痛苦。那是否有一款工具能&lt;strong&gt;提供统一地址统一登录多集群dashboard的方案&lt;/strong&gt;呢？经过一番搜索后，发现并没有，市面上大多数是单集群集成 &lt;code&gt;LDAP&lt;/code&gt; 的方案，主要是以 &lt;code&gt;DEX&lt;/code&gt; 为主，但光单集群的统一登录授权方案就让人感觉非常的困难。难道就没有简单方便的工具供我们使用吗？好吧，那我就来打造这样一款工具吧。&lt;/p&gt;
&lt;p&gt;Dashboard LDAP集成方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://k2r2bai.com/2019/09/29/ironman2020/day14/&quot;&gt;https://k2r2bai.com/2019/09/29/ironman2020/day14/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&quot;&gt;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两篇文档是成LDAP的方案，个人感觉还不错，供有需要的人参考！&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="ldap" scheme="http://team.jiunile.com/categories/kubrenetes/ldap/"/>
    
      <category term="rbac" scheme="http://team.jiunile.com/categories/kubrenetes/ldap/rbac/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="ldap" scheme="http://team.jiunile.com/tags/ldap/"/>
    
      <category term="rbac" scheme="http://team.jiunile.com/tags/rbac/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Kubernetes 调度器</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-custom-scheduler.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-custom-scheduler.html</id>
    <published>2020-06-08T11:00:00.000Z</published>
    <updated>2020-06-08T08:35:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。&lt;/p&gt;
&lt;h2 id=&quot;调度流程&quot;&gt;&lt;a href=&quot;#调度流程&quot; class=&quot;headerlink&quot; title=&quot;调度流程&quot;&gt;&lt;/a&gt;调度流程&lt;/h2&gt;&lt;p&gt;默认情况下，&lt;code&gt;kube-scheduler&lt;/code&gt; 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 &lt;code&gt;PodSpec.NodeName&lt;/code&gt; 为空的 Pod，对每个 Pod 都会创建一个 binding。&lt;br&gt;&lt;img src=&quot;/images/k8s/kube-scheduler-overview.png&quot; alt=&quot;kube-scheduler-overview&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这个过程在我们看来好像比较简单，但在实际的生产环境中，需要考虑的问题就有很多了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何保证全部的节点调度的公平性？要知道并不是所有节点资源配置一定都是一样的&lt;/li&gt;
&lt;li&gt;如何保证每个节点都能被分配资源？&lt;/li&gt;
&lt;li&gt;集群资源如何能够被高效利用？&lt;/li&gt;
&lt;li&gt;集群资源如何才能被最大化使用？&lt;/li&gt;
&lt;li&gt;如何保证 Pod 调度的性能和效率？&lt;/li&gt;
&lt;li&gt;用户是否可以根据自己的实际需求定制自己的调度策略？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到实际环境中的各种复杂情况，kubernetes 的调度器采用插件化的形式实现，可以方便用户进行定制或者二次开发，我们可以自定义一个调度器并以插件形式和 kubernetes 进行集成。&lt;/p&gt;
&lt;p&gt;kubernetes 调度器的源码位于 &lt;code&gt;kubernetes/pkg/scheduler&lt;/code&gt; 中，大体的代码目录结构如下所示：(不同的版本目录结构可能不太一样)&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubernetes/pkg/scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- scheduler.go         //调度相关的具体实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- algorithm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- predicates      //节点筛选策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- priorities      //节点打分策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- algorithmprovider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- defaults         //定义默认的调度器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 Scheduler 创建和运行的核心程序，对应的代码在 &lt;code&gt;pkg/scheduler/scheduler.go&lt;/code&gt;，如果要查看 &lt;code&gt;kube-scheduler&lt;/code&gt; 的入口程序，对应的代码在 &lt;code&gt;cmd/kube-scheduler/scheduler.go&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;自定义调度器&quot;&gt;&lt;a href=&quot;#自定义调度器&quot; class=&quot;headerlink&quot; title=&quot;自定义调度器&quot;&gt;&lt;/a&gt;自定义调度器&lt;/h2&gt;&lt;p&gt;一般来说，我们有4种扩展 Kubernetes 调度器的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种方法就是直接 clone 官方的 kube-scheduler 源代码，在合适的位置直接修改代码，然后重新编译运行修改后的程序，当然这种方法是最不建议使用的，也不实用，因为需要花费大量额外的精力来和上游的调度程序更改保持一致。&lt;/li&gt;
&lt;li&gt;第二种方法就是和默认的调度程序一起运行独立的调度程序，默认的调度器和我们自定义的调度器可以通过 Pod 的 &lt;code&gt;spec.schedulerName&lt;/code&gt; 来覆盖各自的 Pod，默认是使用 default 默认的调度器，但是多个调度程序共存的情况下也比较麻烦，比如当多个调度器将 Pod 调度到同一个节点的时候，可能会遇到一些问题，因为很有可能两个调度器都同时将两个 Pod 调度到同一个节点上去，但是很有可能其中一个 Pod 运行后其实资源就消耗完了，并且维护一个高质量的自定义调度程序也不是很容易的，因为我们需要全面了解默认的调度程序，整体 Kubernetes 的架构知识以及各种 Kubernetes API 对象的各种关系或限制。&lt;/li&gt;
&lt;li&gt;第三种方法是&lt;a href=&quot;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/scheduler_extender.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调度器扩展程序&lt;/a&gt;，这个方案目前是一个可行的方案，可以和上游调度程序兼容，所谓的调度器扩展程序其实就是一个可配置的 Webhook 而已，里面包含 &lt;code&gt;过滤器&lt;/code&gt; 和 &lt;code&gt;优先级&lt;/code&gt; 两个端点，分别对应调度周期中的两个主要阶段（过滤和打分）。&lt;/li&gt;
&lt;li&gt;第四种方法是通过调度框架（Scheduling Framework），Kubernetes v1.15 版本中引入了可插拔架构的调度框架，使得定制调度器这个任务变得更加的容易。调库框架向现有的调度器中添加了一组插件化的 API，该 API 在保持调度程序“核心”简单且易于维护的同时，使得大部分的调度功能以插件的形式存在，而且在我们现在的 v1.16 版本中上面的 &lt;code&gt;调度器扩展程序&lt;/code&gt; 也已经被废弃了，所以以后调度框架才是自定义调度器的核心方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们可以简单介绍下后面两种方式的实现。&lt;/p&gt;
&lt;h3 id=&quot;调度器扩展程序&quot;&gt;&lt;a href=&quot;#调度器扩展程序&quot; class=&quot;headerlink&quot; title=&quot;调度器扩展程序&quot;&gt;&lt;/a&gt;调度器扩展程序&lt;/h3&gt;&lt;p&gt;在进入调度器扩展程序之前，我们再来了解下 Kubernetes 调度程序是如何工作的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认调度器根据指定的参数启动（我们使用 kubeadm 搭建的集群，启动配置文件位于 &lt;code&gt;/etc/kubernetes/manifests/kube-schdueler.yaml&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;watch apiserver，将 &lt;code&gt;spec.nodeName&lt;/code&gt; 为空的 Pod 放入调度器内部的调度队列中&lt;/li&gt;
&lt;li&gt;从调度队列中 Pop 出一个 Pod，开始一个标准的调度周期&lt;/li&gt;
&lt;li&gt;从 Pod 属性中检索“硬性要求”（比如 CPU/内存请求值，nodeSelector/nodeAffinity），然后过滤阶段发生，在该阶段计算出满足要求的节点候选列表&lt;/li&gt;
&lt;li&gt;从 Pod 属性中检索“软需求”，并应用一些默认的“软策略”（比如 Pod 倾向于在节点上更加聚拢或分散），最后，它为每个候选节点给出一个分数，并挑选出得分最高的最终获胜者&lt;/li&gt;
&lt;li&gt;和 apiserver 通信（发送绑定调用），然后设置 Pod 的 &lt;code&gt;spec.nodeName&lt;/code&gt; 属性以表示将该 Pod 调度到的节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以通过查看&lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，可以通过 &lt;code&gt;--config&lt;/code&gt; 参数指定调度器将使用哪些参数，该配置文件应该包含一个 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#KubeSchedulerConfiguration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KubeSchedulerConfiguration&lt;/a&gt; 对象，如下所示格式：（/etc/kubernetes/scheduler-extender.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 通过&quot;--config&quot; 传递文件内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clientConnection:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kubeconfig:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc/kubernetes/scheduler.conf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;algorithmSource:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  policy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    file:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc/kubernetes/scheduler-extender-policy.yaml&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 指定自定义调度策略文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们在这里应该输入的关键参数是 &lt;code&gt;algorithmSource.policy&lt;/code&gt;，这个策略文件可以是本地文件也可以是 ConfigMap 资源对象，这取决于调度程序的部署方式，比如我们这里默认的调度器是静态 Pod 方式启动的，所以我们可以用本地文件的形式来配置。&lt;/p&gt;
&lt;p&gt;该策略文件 &lt;code&gt;/etc/kubernetes/scheduler-extender-policy.yaml&lt;/code&gt; 应该遵循 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#Policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/pkg/scheduler/apis/config/legacy_types.go#L28&lt;/a&gt; 的要求，在我们这里的 v1.16.2 版本中已经支持 JSON 和 YAML 两种格式的策略文件，下面是我们定义的一个简单的示例，可以查看 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#Extender&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Extender&lt;/a&gt; 描述了解策略文件的定义规范：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;extenders:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- urlPrefix:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http://127.0.0.1:8888/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  filterVerb:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  prioritizeVerb:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;prioritize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  weight:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  enableHttps:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们这里的 Policy 策略文件是通过定义 &lt;code&gt;extenders&lt;/code&gt; 来扩展调度器的，有时候我们不需要去编写代码，可以直接在该配置文件中通过指定 &lt;code&gt;predicates&lt;/code&gt; 和 &lt;code&gt;priorities&lt;/code&gt; 来进行自定义，如果没有指定则会使用默认的 &lt;code&gt;DefaultProvier&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Policy&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;v1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;predicates&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;MatchNodeSelector&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;PodFitsResources&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;PodFitsHostPorts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;HostName&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;priorities&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;EqualPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ImageLocalityPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;LeastRequestedPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;BalancedResourceAllocation&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;extenders&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;urlPrefix&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;/prefix&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;filterVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;prioritizeVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;prioritize&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;bindVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bind&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;enableHttps&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改策略文件定义了一个 HTTP 的扩展程序服务，该服务运行在 &lt;code&gt;127.0.0.1:8888&lt;/code&gt; 下面，并且已经将该策略注册到了默认的调度器中，这样在过滤和打分阶段结束后，可以将结果分别传递给该扩展程序的端点 &lt;code&gt;&amp;lt;urlPrefix&amp;gt;/&amp;lt;filterVerb&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;urlPrefix&amp;gt;/&amp;lt;prioritizeVerb&amp;gt;&lt;/code&gt;，在扩展程序中，我们可以进一步过滤并确定优先级，以适应我们的特定业务需求。&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;p&gt;我们直接用 golang 来实现一个简单的调度器扩展程序，当然你可以使用其他任何编程语言，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router := httprouter.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.GET(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, Index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.POST(&lt;span class=&quot;string&quot;&gt;&quot;/filter&quot;&lt;/span&gt;, Filter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.POST(&lt;span class=&quot;string&quot;&gt;&quot;/prioritize&quot;&lt;/span&gt;, Prioritize)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, router))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后接下来我们需要实现 &lt;code&gt;/filter&lt;/code&gt; 和 &lt;code&gt;/prioritize&lt;/code&gt; 两个端点的处理程序。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;Filter&lt;/code&gt; 这个扩展函数接收一个输入类型为 &lt;code&gt;schedulerapi.ExtenderArgs&lt;/code&gt; 的参数，然后返回一个类型为 &lt;code&gt;*schedulerapi.ExtenderFilterResult&lt;/code&gt; 的值。在函数中，我们可以进一步过滤输入的节点：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// filter 根据扩展程序定义的预选规则来过滤节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(args schedulerapi.ExtenderArgs)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;schedulerapi&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;ExtenderFilterResult&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filteredNodes []v1.Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	failedNodes := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(schedulerapi.FailedNodesMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pod := args.Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, node := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; args.Nodes.Items &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fits, failReasons, _ := podFitsOnNode(pod, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fits &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			filteredNodes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(filteredNodes, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			failedNodes[node.Name] = strings.Join(failReasons, &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result := schedulerapi.ExtenderFilterResult&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Nodes: &amp;amp;v1.NodeList&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Items: filteredNodes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		FailedNodes: failedNodes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Error:       &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在过滤函数中，我们循环每个节点然后用我们自己实现的业务逻辑来判断是否应该批准该节点，这里我们实现比较简单，在 &lt;code&gt;podFitsOnNode()&lt;/code&gt; 函数中我们只是简单的检查随机数是否为偶数来判断即可，如果是的话我们就认为这是一个幸运的节点，否则拒绝批准该节点。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; predicatesSorted = []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;LuckyPred&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; predicatesFuncs = &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]FitPredicate&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LuckyPred: LuckyPredicate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FitPredicate &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;podFitsOnNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fits := &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failReasons []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, predicateKey := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; predicatesSorted &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fit, failures, err := predicatesFuncs[predicateKey](pod, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fits = fits &amp;amp;&amp;amp; fit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failReasons = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(failReasons, failures...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fits, failReasons, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LuckyPredicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lucky := rand.Intn(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; lucky &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;pod %v/%v is lucky to fit on node %v\n&quot;&lt;/span&gt;, pod.Name, pod.Namespace, node.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;pod %v/%v is unlucky to fit on node %v\n&quot;&lt;/span&gt;, pod.Name, pod.Namespace, node.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;LuckyPredFailMsg&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的打分功能用同样的方式来实现，我们在每个节点上随机给出一个分数：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// it&#39;s webhooked to pkg/scheduler/core/generic_scheduler.go#PrioritizeNodes()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个函数输出的分数会被添加会默认的调度器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prioritize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(args schedulerapi.ExtenderArgs)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;schedulerapi&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;HostPriorityList&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pod := args.Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nodes := args.Nodes.Items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hostPriorityList := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(schedulerapi.HostPriorityList, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nodes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, node := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nodes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		score := rand.Intn(schedulerapi.MaxPriority + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 在最大优先级内随机取一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Printf(luckyPrioMsg, pod.Name, pod.Namespace, score)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hostPriorityList[i] = schedulerapi.HostPriority&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Host:  node.Name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Score: score,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;hostPriorityList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以使用下面的命令来编译打包我们的应用：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GOOS=linux GOARCH=amd64 go build -o app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本节调度器扩展程序完整的代码获取地址：&lt;a href=&quot;https://github.com/icyxp/sample-scheduler-extender&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/sample-scheduler-extender&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建完成后，将应用 &lt;code&gt;app&lt;/code&gt; 拷贝到 &lt;code&gt;kube-scheduler&lt;/code&gt; 所在的节点直接运行即可。现在我们就可以将上面的策略文件配置到 &lt;code&gt;kube-scheduler&lt;/code&gt; 组件中去了，我们这里集群是 kubeadm 搭建的，所以直接修改文件 &lt;code&gt;/etc/kubernetes/manifests/kube-schduler.yaml&lt;/code&gt; 文件即可，内容如下所示：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  creationTimestamp:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    component:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tier:&lt;/span&gt; control-plane&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --authentication-kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --authorization-kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --bind-address=&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --leader-elect=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --config=/etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --v=&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; gcr.azk8s.cn/google_containers/kube-scheduler:v1&lt;span class=&quot;number&quot;&gt;.16&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    livenessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        path:&lt;/span&gt; /healthz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10251&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        scheme:&lt;/span&gt; HTTP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; kubeconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; extender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler-extender-policy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; extender-policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostNetwork:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  priorityClassName:&lt;/span&gt; system-cluster-critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kubeconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; extender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler-extender-policy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; extender-policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然我们这个地方是直接在系统默认的 &lt;code&gt;kube-scheduler&lt;/code&gt; 上面配置的，我们也可以复制一个调度器的 YAML 文件然后更改下 schedulerName 来部署，这样就不会影响默认的调度器了，然后在需要使用这个测试的调度器的 Pod 上面指定 &lt;code&gt;spec.schedulerName&lt;/code&gt; 即可。对于多调度器的使用可以查看官方文档 &lt;a href=&quot;https://kubernetes.io/zh/docs/tasks/administer-cluster/configure-multiple-schedulers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置多个调度器&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 重新配置后可以查看日志来验证是否重启成功，需要注意的是一定需要将 &lt;code&gt;/etc/kubernetes/scheduler-extender.yaml&lt;/code&gt; 和 &lt;code&gt;/etc/kubernetes/scheduler-extender-policy.yaml&lt;/code&gt; 两个文件挂载到 Pod 中去：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl logs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; kube-scheduler-ydzs-master -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:38.824657       1 serving.go:319] Generated self-signed cert &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.472276       1 server.go:143] Version: v1.16.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.472674       1 defaults.go:91] TaintNodesByCondition is enabled, PodToleratesNodeTaints predicate is mandatory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0102 15:17:39.479704       1 authorization.go:47] Authorization is disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0102 15:17:39.479733       1 authentication.go:79] Authentication is disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.479777       1 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.480559       1 secure_serving.go:123] Serving securely on 127.0.0.1:10259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.682180       1 leaderelection.go:241] attempting to acquire leader lease  kube-system/kube-scheduler...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:56.500505       1 leaderelection.go:251] successfully acquired lease kube-system/kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里我们就创建并配置了一个非常简单的调度扩展程序，现在我们来运行一个 Deployment 查看其工作原理，我们准备一个包含20个副本的部署 Yaml：(test-scheduler.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; gcr.azk8s.cn/google_containers/pause:&lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接创建上面的资源对象：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kuectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deployment.apps/pause created&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们去查看下我们编写的调度器扩展程序日志：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is unlucky to fit on node ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is lucky to get score 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is lucky to get score 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is unlucky to fit on node ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is unlucky to fit on node ydzs-node4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to fit on node ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to fit on node ydzs-node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to get score 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to get score 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到 Pod 调度的过程，另外默认调度程序会定期重试失败的 Pod，因此它们将一次又一次地重新传递到我们的调度扩展程序上，我们的逻辑是检查随机数是否为偶数，所以最终所有 Pod 都将处于运行状态。&lt;/p&gt;
&lt;p&gt;调度器扩展程序可能是在一些情况下可以满足我们的需求，但是他仍然有一些限制和缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信成本：数据在默认调度程序和调度器扩展程序之间以 &lt;code&gt;http（s）&lt;/code&gt; 传输，在执行序列化和反序列化的时候有一定成本&lt;/li&gt;
&lt;li&gt;有限的扩展点：扩展程序只能在某些阶段的末尾参与，例如 &lt;code&gt;“Filter”&lt;/code&gt; 和 &lt;code&gt;“Prioritize”&lt;/code&gt; ，它们不能在任何阶段的开始或中间被调用&lt;/li&gt;
&lt;li&gt;减法优于加法：与默认调度程序传递的节点候选列表相比，我们可能有一些需求需要添加新的候选节点列表，但这是比较冒险的操作，因为不能保证新节点可以通过其他要求，所以，调度器扩展程序最好执行 &lt;code&gt;“减法”&lt;/code&gt;（进一步过滤），而不是 &lt;code&gt;“加法”&lt;/code&gt;（添加节点）&lt;/li&gt;
&lt;li&gt;缓存共享：上面只是一个简单的测试示例，但在真实的项目中，我们是需要通过查看整个集群的状态来做出调度决策的，默认调度程序可以很好地调度决策，但是无法共享其缓存，这意味着我们必须构建和维护自己的缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些局限性，Kubernetes 调度小组就提出了上面第四种方法来进行更好的扩展，也就是&lt;code&gt;调度框架（Scheduler Framework）&lt;/code&gt;，它基本上可以解决我们遇到的所有难题，现在也已经成官方推荐的扩展方式，所以这将是以后扩展调度器的最主流的方式。&lt;/p&gt;
&lt;h2 id=&quot;调度框架&quot;&gt;&lt;a href=&quot;#调度框架&quot; class=&quot;headerlink&quot; title=&quot;调度框架&quot;&gt;&lt;/a&gt;调度框架&lt;/h2&gt;&lt;p&gt;调度框架定义了一组扩展点，用户可以实现扩展点定义的接口来定义自己的调度逻辑（我们称之为扩展），并将扩展注册到扩展点上，调度框架在执行调度工作流时，遇到对应的扩展点时，将调用用户注册的扩展。调度框架在预留扩展点时，都是有特定的目的，有些扩展点上的扩展可以改变调度程序的决策方法，有些扩展点上的扩展只是发送一个通知。&lt;/p&gt;
&lt;p&gt;我们知道每当调度一个 Pod 时，都会按照两个过程来执行：调度过程和绑定过程。&lt;/p&gt;
&lt;p&gt;调度过程为 Pod 选择一个合适的节点，绑定过程则将调度过程的决策应用到集群中（也就是在被选定的节点上运行 Pod），将调度过程和绑定过程合在一起，称之为调度上下文（&lt;strong&gt;scheduling context&lt;/strong&gt;）。需要注意的是调度过程是&lt;code&gt;同步&lt;/code&gt;运行的（同一时间点只为一个 Pod 进行调度），绑定过程可异步运行（同一时间点可并发为多个 Pod 执行绑定）。&lt;/p&gt;
&lt;p&gt;调度过程和绑定过程遇到如下情况时会中途退出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度程序认为当前没有该 Pod 的可选节点&lt;/li&gt;
&lt;li&gt;内部错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个时候，该 Pod 将被放回到 待调度队列，并等待下次重试。&lt;/p&gt;
&lt;h3 id=&quot;扩展点（Extension-Points）&quot;&gt;&lt;a href=&quot;#扩展点（Extension-Points）&quot; class=&quot;headerlink&quot; title=&quot;扩展点（Extension Points）&quot;&gt;&lt;/a&gt;扩展点（Extension Points）&lt;/h3&gt;&lt;p&gt;下图展示了调度框架中的调度上下文及其中的扩展点，一个扩展可以注册多个扩展点，以便可以执行更复杂的有状态的任务。&lt;br&gt;&lt;img src=&quot;/images/k8s/scheduling-framework-extensions.png&quot; alt=&quot;scheduling-framework-extensions&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;QueueSort&lt;/code&gt; 扩展用于对 Pod 的待调度队列进行排序，以决定先调度哪个 Pod，&lt;code&gt;QueueSort&lt;/code&gt; 扩展本质上只需要实现一个方法 &lt;code&gt;Less(Pod1, Pod2)&lt;/code&gt; 用于比较两个 Pod 谁更优先获得调度即可，同一时间点只能有一个 &lt;code&gt;QueueSort&lt;/code&gt; 插件生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pre-filter&lt;/code&gt; 扩展用于对 Pod 的信息进行预处理，或者检查一些集群或 Pod 必须满足的前提条件，如果 &lt;code&gt;pre-filter&lt;/code&gt; 返回了 error，则调度过程终止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 扩展用于排除那些不能运行该 Pod 的节点，对于每一个节点，调度器将按顺序执行 &lt;code&gt;filter&lt;/code&gt; 扩展；如果任何一个 &lt;code&gt;filter&lt;/code&gt; 将节点标记为不可选，则余下的 &lt;code&gt;filter&lt;/code&gt; 扩展将不会被执行。调度器可以同时对多个节点执行 &lt;code&gt;filter&lt;/code&gt; 扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-filter&lt;/code&gt; 是一个通知类型的扩展点，调用该扩展的参数是 &lt;code&gt;filter&lt;/code&gt; 阶段结束后被筛选为可选节点的节点列表，可以在扩展中使用这些信息更新内部状态，或者产生日志或 metrics 信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scoring&lt;/code&gt; 扩展用于为所有可选节点进行打分，调度器将针对每一个节点调用 &lt;code&gt;Soring&lt;/code&gt; 扩展，评分结果是一个范围内的整数。在 &lt;code&gt;normalize scoring&lt;/code&gt; 阶段，调度器将会把每个 &lt;code&gt;scoring&lt;/code&gt; 扩展对具体某个节点的评分结果和该扩展的权重合并起来，作为最终评分结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Normalize scoring&lt;/code&gt; 扩展在调度器对节点进行最终排序之前修改每个节点的评分结果，注册到该扩展点的扩展在被调用时，将获得同一个插件中的 &lt;code&gt;scoring&lt;/code&gt; 扩展的评分结果作为参数，调度框架每执行一次调度，都将调用所有插件中的一个 &lt;code&gt;normalize scoring&lt;/code&gt; 扩展一次。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reserve&lt;/code&gt; 是一个通知性质的扩展点，有状态的插件可以使用该扩展点来获得节点上为 Pod 预留的资源，该事件发生在调度器将 Pod 绑定到节点之前，目的是避免调度器在等待 Pod 与节点绑定的过程中调度新的 Pod 到节点上时，发生实际使用资源超出可用资源的情况。（因为绑定 Pod 到节点上是异步发生的）。这是调度过程的最后一个步骤，Pod 进入 &lt;code&gt;reserved&lt;/code&gt; 状态以后，要么在绑定失败时触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展，要么在绑定成功时，由 &lt;code&gt;Post-bind&lt;/code&gt; 扩展结束绑定过程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permit&lt;/code&gt; 扩展用于阻止或者延迟 Pod 与节点的绑定。Permit 扩展可以做下面三件事中的一项：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;approve&lt;/code&gt;（批准）：当所有的 &lt;code&gt;permit&lt;/code&gt; 扩展都 &lt;code&gt;approve&lt;/code&gt; 了 Pod 与节点的绑定，调度器将继续执行绑定过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deny&lt;/code&gt;（拒绝）：如果任何一个 &lt;code&gt;permit&lt;/code&gt; 扩展 &lt;code&gt;deny&lt;/code&gt; 了 Pod 与节点的绑定，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt;（等待）：如果一个 &lt;code&gt;permit&lt;/code&gt; 扩展返回了 &lt;code&gt;wait&lt;/code&gt;，则 Pod 将保持在 &lt;code&gt;permit&lt;/code&gt; 阶段，直到被其他扩展 &lt;code&gt;approve&lt;/code&gt;，如果超时事件发生，&lt;code&gt;wait&lt;/code&gt; 状态变成 &lt;code&gt;deny&lt;/code&gt;，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pre-bind&lt;/code&gt; 扩展用于在 Pod 绑定之前执行某些逻辑。例如，&lt;code&gt;pre-bind&lt;/code&gt; 扩展可以将一个基于网络的数据卷挂载到节点上，以便 Pod 可以使用。如果任何一个 &lt;code&gt;pre-bind&lt;/code&gt; 扩展返回错误，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bind&lt;/code&gt; 扩展用于将 Pod 绑定到节点上：&lt;ul&gt;
&lt;li&gt;只有所有的 &lt;code&gt;pre-bind&lt;/code&gt; 扩展都成功执行了，&lt;code&gt;bind&lt;/code&gt; 扩展才会执行&lt;/li&gt;
&lt;li&gt;调度框架按照 &lt;code&gt;bind&lt;/code&gt; 扩展注册的顺序逐个调用 &lt;code&gt;bind&lt;/code&gt; 扩展&lt;/li&gt;
&lt;li&gt;具体某个 &lt;code&gt;bind&lt;/code&gt; 扩展可以选择处理或者不处理该 Pod&lt;/li&gt;
&lt;li&gt;如果某个 &lt;code&gt;` 扩展处理了该 Pod 与节点的绑定，余下的&lt;/code&gt;bind` 扩展将被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 是一个通知性质的扩展：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 扩展在 Pod 成功绑定到节点上之后被动调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 扩展是绑定过程的最后一个步骤，可以用来执行资源清理的动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unreserve&lt;/code&gt; 是一个通知性质的扩展，如果为 Pod 预留了资源，Pod 又在被绑定过程中被拒绝绑定，则 &lt;code&gt;unreserve&lt;/code&gt; 扩展将被调用。&lt;code&gt;Unreserve&lt;/code&gt; 扩展应该释放已经为 Pod 预留的节点上的计算资源。在一个插件中，&lt;code&gt;reserve&lt;/code&gt; 扩展和 &lt;code&gt;unreserve&lt;/code&gt; 扩展应该成对出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我们要实现自己的插件，必须向调度框架注册插件并完成配置，另外还必须实现扩展点接口，对应的扩展点接口我们可以在源码 &lt;code&gt;pkg/scheduler/framework/v1alpha1/interface.go&lt;/code&gt; 文件中找到，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Plugin is the parent type for all the scheduling framework plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Plugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name() &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; QueueSortPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Less(*PodInfo, *PodInfo) &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PreFilterPlugin is an interface that must be implemented by &quot;prefilter&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called at the beginning of the scheduling cycle.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PreFilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PreFilter(pc *PluginContext, p *v1.Pod) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// FilterPlugin is an interface for Filter plugins. These plugins are called at the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// filter extension point for filtering out hosts that cannot run a pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This concept used to be called &#39;predicate&#39; in the original scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins should return &quot;Success&quot;, &quot;Unschedulable&quot; or &quot;Error&quot; in Status.code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// However, the scheduler accepts other valid codes as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Anything other than &quot;Success&quot; will lead to exclusion of the given host from&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// running the pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Filter(pc *PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PostFilterPlugin is an interface for Post-filter plugin. Post-filter is an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// informational extension point. Plugins will be called with a list of nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// that passed the filtering phase. A plugin may use this data to update internal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// state or to generate logs/metrics.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PostFilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PostFilter(pc *PluginContext, pod *v1.Pod, nodes []*v1.Node, filteredNodesStatuses NodeToStatusMap) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ScorePlugin is an interface that must be implemented by &quot;score&quot; plugins to rank&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// nodes that passed the filtering phase.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ScorePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Score(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, *Status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ScoreWithNormalizePlugin is an interface that must be implemented by &quot;score&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugins that also need to normalize the node scoring results produced by the same&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugin&#39;s &quot;Score&quot; method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ScoreWithNormalizePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ScorePlugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NormalizeScore(pc *PluginContext, p *v1.Pod, scores NodeScoreList) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ReservePlugin is an interface for Reserve plugins. These plugins are called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// at the reservation point. These are meant to update the state of the plugin.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This concept used to be called &#39;assume&#39; in the original scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins should return only Success or Error in Status.code. However,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the scheduler accepts other valid codes as well. Anything other than Success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// will lead to rejection of the pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ReservePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Reserve(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PreBindPlugin is an interface that must be implemented by &quot;prebind&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called before a pod being scheduled.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PreBindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PreBind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PostBindPlugin is an interface that must be implemented by &quot;postbind&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called after a pod is successfully bound to a node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PostBindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PostBind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UnreservePlugin is an interface for Unreserve plugins. This is an informational&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// extension point. If a pod was reserved and then rejected in a later phase, then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// un-reserve plugins will be notified. Un-reserve plugins should clean up state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// associated with the reserved Pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; UnreservePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Unreserve(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PermitPlugin is an interface that must be implemented by &quot;permit&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called before a pod is bound to a node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PermitPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Permit(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (*Status, time.Duration)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// BindPlugin is an interface that must be implemented by &quot;bind&quot; plugins. Bind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugins are used to bind a pod to a Node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Bind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于调度框架插件的启用或者禁用，我们同样可以使用上面的 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#KubeSchedulerConfiguration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KubeSchedulerConfiguration&lt;/a&gt; 资源对象来进行配置。下面的例子中的配置启用了一个实现了 &lt;code&gt;reserve&lt;/code&gt; 和 &lt;code&gt;preBind&lt;/code&gt; 扩展点的插件，并且禁用了另外一个插件，同时为插件 foo 提供了一些配置信息：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  reserve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; baz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  preBind:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; baz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;pluginConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  args:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo插件可以解析的任意内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;扩展的调用顺序如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某个扩展点没有配置对应的扩展，调度框架将使用默认插件中的扩展&lt;/li&gt;
&lt;li&gt;如果为某个扩展点配置且激活了扩展，则调度框架将先调用默认插件的扩展，再调用配置中的扩展&lt;/li&gt;
&lt;li&gt;默认插件的扩展始终被最先调用，然后按照 &lt;code&gt;KubeSchedulerConfiguration&lt;/code&gt; 中扩展的激活 &lt;code&gt;enabled&lt;/code&gt; 顺序逐个调用扩展点的扩展&lt;/li&gt;
&lt;li&gt;可以先禁用默认插件的扩展，然后在 &lt;code&gt;enabled&lt;/code&gt; 列表中的某个位置激活默认插件的扩展，这种做法可以改变默认插件的扩展被调用时的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设默认插件 foo 实现了 &lt;code&gt;reserve&lt;/code&gt; 扩展点，此时我们要添加一个插件 bar，想要在 foo 之前被调用，则应该先禁用 foo 再按照 bar foo 的顺序激活。示例配置如下所示：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  reserve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在源码目录 &lt;code&gt;pkg/scheduler/framework/plugins/examples&lt;/code&gt; 中有几个示范插件，我们可以参照其实现方式。&lt;/p&gt;
&lt;h3 id=&quot;示例-1&quot;&gt;&lt;a href=&quot;#示例-1&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;其实要实现一个调度框架的插件，并不难，我们只要实现对应的扩展点，然后将插件注册到调度器中即可，下面是默认调度器在初始化的时候注册的插件：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewRegistry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Registry&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Registry&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// FactoryMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// New plugins are registered here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// example:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//  stateful_plugin.Name: stateful.NewStatefulMultipointExample,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//  fooplugin.Name: fooplugin.New,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是可以看到默认并没有注册一些插件，所以要想让调度器能够识别我们的插件代码，就需要自己来实现一个调度器了，当然这个调度器我们完全没必要完全自己实现，直接调用默认的调度器，然后在上面的 &lt;code&gt;NewRegistry()&lt;/code&gt; 函数中将我们的插件注册进去即可。在 &lt;code&gt;kube-scheduler&lt;/code&gt; 的源码文件 &lt;code&gt;kubernetes/cmd/kube-scheduler/app/server.go&lt;/code&gt; 中有一个 &lt;code&gt;NewSchedulerCommand&lt;/code&gt; 入口函数，其中的参数是一个类型为 &lt;code&gt;Option&lt;/code&gt; 的列表，而这个 &lt;code&gt;Option&lt;/code&gt; 恰好就是一个插件配置的定义：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Option configures a framework.Registry.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Option &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(framework.Registry)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;title&quot;&gt;NewSchedulerCommand&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;creates&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;cobra&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registryOptions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewSchedulerCommand&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(registryOptions ...Option)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;cobra&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Command&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以我们完全就可以直接调用这个函数来作为我们的函数入口，并且传入我们自己实现的插件作为参数即可，而且该文件下面还有一个名为 &lt;code&gt;WithPlugin&lt;/code&gt; 的函数可以来创建一个 &lt;code&gt;Option&lt;/code&gt; 实例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// WithPlugin creates an Option based on plugin name and factory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WithPlugin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, factory framework.PluginFactory)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Option&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(registry framework.Registry)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; registry.Register(name, factory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以最终我们的入口函数如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rand.Seed(time.Now().UTC().UnixNano())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	command := app.NewSchedulerCommand(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		app.WithPlugin(sample.Name, sample.New), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logs.InitLogs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; logs.FlushLogs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := command.Execute(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_, _ = fmt.Fprintf(os.Stderr, &lt;span class=&quot;string&quot;&gt;&quot;%v\n&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		os.Exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;app.WithPlugin(sample.Name, sample.New)&lt;/code&gt; 就是我们接下来要实现的插件，从 &lt;code&gt;WithPlugin&lt;/code&gt; 函数的参数也可以看出我们这里的 &lt;code&gt;sample.New&lt;/code&gt; 必须是一个 &lt;code&gt;framework.PluginFactory&lt;/code&gt; 类型的值，而 &lt;code&gt;PluginFactory&lt;/code&gt; 的定义就是一个函数：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PluginFactory = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(configuration *runtime.Unknown, f FrameworkHandle)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Plugin, error)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;sample.New&lt;/code&gt; 实际上就是上面的这个函数，在这个函数中我们可以获取到插件中的一些数据然后进行逻辑处理即可，插件实现如下所示，我们这里只是简单获取下数据打印日志，如果你有实际需求的可以根据获取的数据就行处理即可，我们这里只是实现了 &lt;code&gt;PreFilter&lt;/code&gt;、&lt;code&gt;Filter&lt;/code&gt;、&lt;code&gt;PreBind&lt;/code&gt; 三个扩展点，其他的可以用同样的方式来扩展即可：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 插件名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Name = &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Args &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FavoriteColor  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&quot;favorite_color,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FavoriteNumber &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;`json:&quot;favorite_number,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ThanksTo       &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&quot;thanks_to,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Sample &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args   *Args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	handle framework.FrameworkHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreFilter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;prefilter pod: %v&quot;&lt;/span&gt;, pod.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;filter pod: %v, node: %v&quot;&lt;/span&gt;, pod.Name, nodeName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreBind&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nodeInfo, ok := s.handle.NodeInfoSnapshot().NodeInfoMap[nodeName]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Error, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;prebind get node info error: %+v&quot;&lt;/span&gt;, nodeName))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;prebind node info: %+v&quot;&lt;/span&gt;, nodeInfo.Node())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//type PluginFactory = func(configuration *runtime.Unknown, f FrameworkHandle) (Plugin, error)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(configuration *runtime.Unknown, f framework.FrameworkHandle)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(framework.Plugin, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args := &amp;amp;Args&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := framework.DecodeInto(configuration, args); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;get plugin config args: %+v&quot;&lt;/span&gt;, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Sample&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		args: args,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		handle: f,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整代码可以前往仓库 &lt;a href=&quot;https://github.com/icyxp/sample-scheduler-framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/sample-scheduler-framework&lt;/a&gt; 获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现完成后，编译打包成镜像即可，然后我们就可以当成普通的应用用一个 &lt;code&gt;Deployment&lt;/code&gt; 控制器来部署即可，由于我们需要去获取集群中的一些资源对象，所以当然需要申请 RBAC 权限，然后同样通过 &lt;code&gt;--config&lt;/code&gt; 参数来配置我们的调度器，同样还是使用一个 &lt;code&gt;KubeSchedulerConfiguration&lt;/code&gt; 资源对象配置，可以通过 &lt;code&gt;plugins&lt;/code&gt; 来启用或者禁用我们实现的插件，也可以通过 &lt;code&gt;pluginConfig&lt;/code&gt; 来传递一些参数值给插件：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; events&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; delete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; bindings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods/binding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods/status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; patch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; replicationcontrollers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; apps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; extensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; replicasets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; apps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; statefulsets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; poddisruptionbudgets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; persistentvolumeclaims&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; persistentvolumes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; configmaps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;storage.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; storageclasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; csinodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;coordination.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; leases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;events.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; events&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; patch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrolebinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ConfigMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;data:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scheduler-config.yaml: &lt;span class=&quot;string&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;    apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    schedulerName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    leaderElection:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      leaderElect:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      lockObjectName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      lockObjectNamespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      preFilter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      filter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      preBind:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    pluginConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        favorite_color:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#326CE5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        favorite_number:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        thanks_to:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;thockin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      serviceAccount:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      priorityClassName:&lt;/span&gt; system-cluster-critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          configMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; scheduler-ctrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          image:&lt;/span&gt; cnych/sample-scheduler:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; sample-scheduler-framework&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; --config=/etc/kubernetes/scheduler-config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; --v=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              mountPath:&lt;/span&gt; /etc/kubernetes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接部署上面的资源对象即可，这样我们就部署了一个名为 &lt;code&gt;sample-scheduler&lt;/code&gt; 的调度器了，接下来我们可以部署一个应用来使用这个调度器进行调度：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      schedulerName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - image:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是我们现在手动指定了一个 &lt;code&gt;schedulerName&lt;/code&gt; 的字段，将其设置成上面我们自定义的调度器名称 &lt;code&gt;sample-scheduler&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们直接创建这个资源对象，创建完成后查看我们自定义调度器的日志信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; component=sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                               READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sample-scheduler-7c469787f-rwhhd   1/1     Running   0          13m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl logs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; sample-scheduler-7c469787f-rwhhd -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.087881       1 scheduler.go:530] Attempting to schedule pod: default/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.087992       1 plugins.go:23] prefilter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088657       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088797       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088871       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088946       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088992       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.090653       1 plugins.go:36] prebind node info: &amp;amp;Node&amp;#123;ObjectMeta:&amp;#123;ydzs-node3   /api/v1/nodes/ydzs-node3 1ff6e228-4d98-4737-b6d3-30a5d55ccdc2 15466372 0 2019-11-10 09:05:09 +0000 UTC &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt; ......&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.091761       1 factory.go:610] Attempting to &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb to ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.104994       1 scheduler.go:667] pod default/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb is bound successfully on node &lt;span class=&quot;string&quot;&gt;&quot;ydzs-node3&quot;&lt;/span&gt;, 5 nodes evaluated, 4 nodes were found feasible. Bound node resource: &lt;span class=&quot;string&quot;&gt;&quot;Capacity: CPU&amp;lt;4&amp;gt;|Memory&amp;lt;8008820Ki&amp;gt;|Pods&amp;lt;110&amp;gt;|StorageEphemeral&amp;lt;17921Mi&amp;gt;; Allocatable: CPU&amp;lt;4&amp;gt;|Memory&amp;lt;7906420Ki&amp;gt;|Pods&amp;lt;110&amp;gt;|StorageEphemeral&amp;lt;16912377419&amp;gt;.&quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到当我们创建完 Pod 后，在我们自定义的调度器中就出现了对应的日志，并且在我们定义的扩展点上面都出现了对应的日志，证明我们的示例成功了，也可以通过查看 Pod 的 &lt;code&gt;schedulerName&lt;/code&gt; 来验证：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                                      READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb           1/1     Running   0          22m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb -o yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restartPolicy: Always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;schedulerName: sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;securityContext: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serviceAccount: default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在最新的 Kubernetes v1.17 版本中，&lt;code&gt;Scheduler Framework&lt;/code&gt; 内置的预选和优选函数已经全部插件化，所以要扩展调度器我们应该掌握并理解调度框架这种方式。&lt;/p&gt;
&lt;p&gt;参考：明阳的博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。&lt;/p&gt;
&lt;h2 id=&quot;调度流程&quot;&gt;&lt;a href=&quot;#调度流程&quot; class=&quot;headerlink&quot; title=&quot;调度流程&quot;&gt;&lt;/a&gt;调度流程&lt;/h2&gt;&lt;p&gt;默认情况下，&lt;code&gt;kube-scheduler&lt;/code&gt; 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 &lt;code&gt;PodSpec.NodeName&lt;/code&gt; 为空的 Pod，对每个 Pod 都会创建一个 binding。&lt;br&gt;&lt;img src=&quot;/images/k8s/kube-scheduler-overview.png&quot; alt=&quot;kube-scheduler-overview&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="调度器" scheme="http://team.jiunile.com/categories/kubrenetes/%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="scheduler" scheme="http://team.jiunile.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>k8s v1.17 新增拓扑感知服务路由</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-service-topology.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-service-topology.html</id>
    <published>2020-05-22T11:00:00.000Z</published>
    <updated>2020-05-22T07:47:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;拓扑域&lt;/code&gt;: 表示在集群中的某一类 “地方”，比如某节点、某机架、某可用区或某地域等，这些都可以作为某种拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: k8s 某个服务的某个 ip+port，通常是 pod 的 ip+port。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;: k8s 的 service 资源(服务)，关联一组 endpoint ，访问 service 会被转发到关联的某个 endpoint 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;拓扑感知服务路由，此特性最初由杜军大佬提出并设计。为什么要设计此特性呢？想象一下，k8s 集群节点分布在不同的地方，service 对应的 endpoints 分布在不同节点，传统转发策略会对所有 endpoint 做负载均衡，通常会等概率转发，当访问 service 时，流量就可能被分散打到这些不同的地方。虽然 service 转发做了负载均衡，但如果 endpoint 距离比较远，流量转发过去网络时延就相对比较高，会影响网络性能，在某些情况下甚至还可能会付出额外的流量费用。要是如能实现 service 就近转发 endpoint，是不是就可以实现降低网络时延，提升网络性能了呢？是的！这也正是该特性所提出的目的和意义。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;k8s-亲和性&quot;&gt;&lt;a href=&quot;#k8s-亲和性&quot; class=&quot;headerlink&quot; title=&quot;k8s 亲和性&quot;&gt;&lt;/a&gt;k8s 亲和性&lt;/h2&gt;&lt;p&gt;service 的就近转发实际就是一种网络的亲和性，倾向于转发到离自己比较近的 endpoint。在此特性之前，已经在调度和存储方面有一些亲和性的设计与实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;节点亲和性 (Node Affinity)&lt;/code&gt;: 让 Pod 被调度到符合一些期望条件的 Node 上，比如限制调度到某一可用区，或者要求节点支持 GPU，这算是调度亲和，调度结果取决于节点属性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod 亲和性与反亲和性 (Pod Affinity/AntiAffinity)&lt;/code&gt;: 让一组 Pod 调度到同一拓扑域的节点上，或者打散到不同拓扑域的节点， 这也算是调度亲和，调度结果取决于其它 Pod。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据卷拓扑感知调度 (Volume Topology-aware Scheduling)&lt;/code&gt;: 让 Pod 只被调度到符合其绑定的存储所在拓扑域的节点上，这算是调度与存储的亲和，调度结果取决于存储的拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;本地数据卷 (Local Persistent Volume)&lt;/code&gt;: 让 Pod 使用本地数据卷，比如高性能 SSD，在某些需要高 IOPS 低时延的场景很有用，它还会保证 Pod 始终被调度到同一节点，数据就不会不丢失，这也算是调度与存储的亲和，调度结果取决于存储所在节点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据卷拓扑感知动态创建 (Topology-Aware Volume Dynamic Provisioning)&lt;/code&gt;: 先调度 Pod，再根据 Pod 所在节点的拓扑域来创建存储，这算是存储与调度的亲和，存储的创建取决于调度的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 k8s 目前在网络方面还没有亲和性能力，拓扑感知服务路由这个新特性恰好可以补齐这个的空缺，此特性使得 service 可以实现就近转发而不是所有 endpoint 等概率转发。&lt;/p&gt;
&lt;h2 id=&quot;如何实现&quot;&gt;&lt;a href=&quot;#如何实现&quot; class=&quot;headerlink&quot; title=&quot;如何实现&quot;&gt;&lt;/a&gt;如何实现&lt;/h2&gt;&lt;p&gt;我们知道，service 转发主要是 node 上的 kube-proxy 进程通过 watch apiserver 获取 service 对应的 endpoint，再写入 iptables 或 ipvs 规则来实现的; 对于 headless service，主要是通过 kube-dns 或 coredns 动态解析到不同 endpoint ip 来实现的。实现 service 就近转发的关键点就在于如何将流量转发到跟当前节点在同一拓扑域的 endpoint 上，也就是会进行一次 endpoint 筛选，选出一部分符合当前节点拓扑域的 endpoint 进行转发。&lt;/p&gt;
&lt;p&gt;那么如何判断 endpoint 跟当前节点是否在同一拓扑域里呢？只要能获取到 endpoint 的拓扑信息，用它跟当前节点拓扑对比下就可以知道了。那又如何获取 endpoint 的拓扑信息呢？答案是通过 endpoint 所在节点的 label，我们可以使用 node label 来描述拓扑域。&lt;/p&gt;
&lt;p&gt;通常在节点初始化的时候，controller-manager 就会为节点打上许多 label，比如 &lt;code&gt;kubernetes.io/hostname&lt;/code&gt; 表示节点的 hostname 来区分节点；另外，在云厂商提供的 k8s 服务，或者使用 cloud-controller-manager 的自建集群，通常还会给节点打上 &lt;code&gt;failure-domain.beta.kubernetes.io/zone&lt;/code&gt; 和 &lt;code&gt;failure-domain.beta.kubernetes.io/region&lt;/code&gt; 以区分节点所在可用区和所在地域，但自 v1.17 开始将会改名成 &lt;code&gt;topology.kubernetes.io/zone&lt;/code&gt; 和 &lt;code&gt;topology.kubernetes.io/region&lt;/code&gt;，参见 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/pull/81431&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #81431&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如何根据 endpoint 查到它所在节点的这些 label 呢？答案是通过 &lt;code&gt;Endpoint Slice&lt;/code&gt;，该特性在 v1.16 发布了 alpha，在 v1.17 将会进入 beta，它相当于 Endpoint API 增强版，通过将 endpoint 做数据分片来解决大规模 endpoint 的性能问题，并且可以携带更多的信息，包括 endpoint 所在节点的拓扑信息，拓扑感知服务路由特性会通过 &lt;code&gt;Endpoint Slice&lt;/code&gt; 获取这些拓扑信息实现 endpoint 筛选 (过滤出在同一拓扑域的 endpoint)，然后再转换为 iptables 或 ipvs 规则写入节点以实现拓扑感知的路由转发。&lt;/p&gt;
&lt;p&gt;细心的你可能已经发现，之前每个节点上转发 service 的 iptables/ipvs 规则基本是一样的，但启用了拓扑感知服务路由特性之后，每个节点上的转发规则就可能不一样了，因为不同节点的拓扑信息不一样，导致过滤出的 endpoint 就不一样，也正是因为这样，service 转发变得不再等概率，灵活的就近转发才得以实现。&lt;/p&gt;
&lt;p&gt;当前还不支持 headless service 的拓扑路由，计划在 beta 阶段支持。由于 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/54153164&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;headless service&lt;/a&gt; 不是通过 kube-proxy 生成转发规则，而是通过 dns 动态解析实现的，所以需要改 kube-dns/coredns 来支持这个特性。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;启用当前 alpha 实现的拓扑感知服务路由特性需要满足以下前提条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群版本在 v1.17 及其以上。&lt;/li&gt;
&lt;li&gt;Kube-proxy 以 iptables 或 IPVS 模式运行 (alpha 阶段暂时只实现了这两种模式)。&lt;/li&gt;
&lt;li&gt;启用了 &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Endpoint Slices&lt;/a&gt; (此特性虽然在 v1.17 进入 beta，但没有默认开启)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何启用此特性&quot;&gt;&lt;a href=&quot;#如何启用此特性&quot; class=&quot;headerlink&quot; title=&quot;如何启用此特性&quot;&gt;&lt;/a&gt;如何启用此特性&lt;/h2&gt;&lt;p&gt;给所有 k8s 组件打开 &lt;code&gt;ServiceTopology&lt;/code&gt; 和 &lt;code&gt;EndpointSlice&lt;/code&gt; 这两个 feature:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--feature-gates=&lt;span class=&quot;string&quot;&gt;&quot;ServiceTopology=true,EndpointSlice=true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;p&gt;在 Service spec 里加上 &lt;code&gt;topologyKeys&lt;/code&gt; 字段，表示该 Service 优先顺序选用的拓扑域列表，对应节点标签的 key；当访问此 Service 时，会找是否有 endpoint 有对应 topology key 的拓扑信息并且 value 跟当前节点也一样，如果是，那就选定此 topology key 作为当前转发的拓扑域，并且筛选出其余所有在这个拓扑域的 endpoint 来进行转发；如果没有找到任何 endpoint 在当前 topology key 对应拓扑域，就会尝试第二个 topology key，依此类推；如果遍历完所有 topology key 也没有匹配到 endpoint 就会拒绝转发，就像此 service 没有后端 endpoint 一样。&lt;/p&gt;
&lt;p&gt;有一个特殊的 topology key “&lt;code&gt;*&lt;/code&gt;”，它可以匹配所有 endpoint，如果 &lt;code&gt;topologyKeys&lt;/code&gt; 包含了 &lt;code&gt;*&lt;/code&gt;，它必须在列表末尾，通常是在没有匹配到合适的拓扑域来实现就近转发时，就打消就近转发的念头，可以转发到任意 endpoint 上。&lt;/p&gt;
&lt;p&gt;当前 topology key 支持以下可能的值（未来会增加更多）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/hostname&lt;/code&gt;: 节点的 hostname，通常将它放列表中第一个，表示如果本机有 endpoint 就直接转发到本机的 endpoint。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topology.kubernetes.io/zone&lt;/code&gt;: 节点所在的可用区，通常将它放在 &lt;code&gt;kubernetes.io/hostname&lt;/code&gt; 后面，表示如果本机没有对应 endpoint，就转发到当前可用区其它节点上的 endpoint（部分云厂商跨可用区通信会收取额外的流量费用）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topology.kubernetes.io/region&lt;/code&gt;: 表示节点所在的地域，表示转发到当前地域的 endpoint，这个用的应该会比较少，因为通常集群所有节点都只会在同一个地域，如果节点跨地域了，节点之间通信延时将会很高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: 忽略拓扑域，匹配所有 endpoint，相当于一个保底策略，避免丢包，只能放在列表末尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有以下约束:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topologyKeys&lt;/code&gt; 与 &lt;code&gt;externalTrafficPolicy=Local&lt;/code&gt; 不兼容，是互斥的，如果 &lt;code&gt;externalTrafficPolicy&lt;/code&gt; 为 &lt;code&gt;Local&lt;/code&gt;，就不能定义 &lt;code&gt;topologyKeys&lt;/code&gt;，反之亦然。&lt;/li&gt;
&lt;li&gt;topology key 必须是合法的 label 格式，并且最多定义 16 个 key。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里给出一个简单的 Service 示例:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; ClusterIP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  topologyKeys:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;kubernetes.io/hostname&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;topology.kubernetes.io/zone&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解释: 当访问 nginx 服务时，首先看本机是否有这个服务的 endpoint，如果有就直接本机路由过去；如果没有，就看是否有 endpoint 位于当前节点所在可用区，如果有，就转发过去，如果还是没有，就转发给任意 endpoint。&lt;br&gt;&lt;img src=&quot;/images/k8s/service-topology.png&quot; alt=&quot;service-topology&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是其中一次转发的例子：Pod 访问 nginx 这个 service 时，发现本机没有 endpoint，就找当前可用区的，找到了就转发过去，也就不会考虑转发给另一可用区的 endpoint。&lt;/p&gt;
&lt;p&gt;参考：imroc&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;拓扑域&lt;/code&gt;: 表示在集群中的某一类 “地方”，比如某节点、某机架、某可用区或某地域等，这些都可以作为某种拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: k8s 某个服务的某个 ip+port，通常是 pod 的 ip+port。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;: k8s 的 service 资源(服务)，关联一组 endpoint ，访问 service 会被转发到关联的某个 endpoint 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;拓扑感知服务路由，此特性最初由杜军大佬提出并设计。为什么要设计此特性呢？想象一下，k8s 集群节点分布在不同的地方，service 对应的 endpoints 分布在不同节点，传统转发策略会对所有 endpoint 做负载均衡，通常会等概率转发，当访问 service 时，流量就可能被分散打到这些不同的地方。虽然 service 转发做了负载均衡，但如果 endpoint 距离比较远，流量转发过去网络时延就相对比较高，会影响网络性能，在某些情况下甚至还可能会付出额外的流量费用。要是如能实现 service 就近转发 endpoint，是不是就可以实现降低网络时延，提升网络性能了呢？是的！这也正是该特性所提出的目的和意义。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="新特性" scheme="http://team.jiunile.com/categories/kubrenetes/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="服务路由" scheme="http://team.jiunile.com/tags/%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1/"/>
    
      <category term="新特性" scheme="http://team.jiunile.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用NodeLocal DNSCache来提升CoreDNS的性能及压力</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-nodelocal-dnscache.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-nodelocal-dnscache.html</id>
    <published>2020-05-22T10:00:00.000Z</published>
    <updated>2020-05-22T02:58:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;之前在解决 CoreDNS 的5秒超时问题的时候，除了通过 &lt;code&gt;dnsConfig&lt;/code&gt; 去强制使用 tcp 方式解析之外，我们提到过使用 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 来解决这个问题。&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 &lt;code&gt;ClusterFirst&lt;/code&gt; 的 DNS 模式下的 Pod 可以连接到 &lt;code&gt;kube-dns&lt;/code&gt; 的 serviceIP 进行 DNS 查询。通过 &lt;code&gt;kube-proxy&lt;/code&gt; 组件添加的 &lt;code&gt;iptables&lt;/code&gt; 规则将其转换为 &lt;code&gt;CoreDNS&lt;/code&gt; 端点。通过在每个集群节点上运行 DNS 缓存，&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 &lt;code&gt;kube-dns&lt;/code&gt; 的 DNS 查询次数。&lt;/p&gt;
&lt;p&gt;在集群中运行 NodeLocal DNSCache 有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果本地没有 CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须到另一个节点进行解析，使用 NodeLocal DNSCache 后，拥有本地缓存将有助于改善延迟&lt;/li&gt;
&lt;li&gt;跳过 iptables DNAT 和连接跟踪将有助于减少 &lt;code&gt;conntrack&lt;/code&gt; 竞争并避免 UDP DNS 条目填满 &lt;code&gt;conntrack&lt;/code&gt; 表（常见的5s超时问题就是这个原因造成的）&lt;/li&gt;
&lt;li&gt;从本地缓存代理到 kube-dns 服务的连接可以升级到 TCP，TCP conntrack 条目将在连接关闭时被删除，而 UDP 条目必须超时(&lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;默认 nf_conntrack_udp_timeout 是 30 秒&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;将 DNS 查询从 UDP 升级到 TCP 将减少归因于丢弃的 UDP 数据包和 DNS 超时的尾部等待时间，通常长达 30 秒（3 次重试+ 10 秒超时）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/dnscache.png&quot; alt=&quot;NodeLocal DNSCache&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装使用&quot;&gt;&lt;a href=&quot;#安装使用&quot; class=&quot;headerlink&quot; title=&quot;安装使用&quot;&gt;&lt;/a&gt;安装使用&lt;/h2&gt;&lt;p&gt;要安装 NodeLocal DNSCache 也非常简单，直接获取官方的资源清单即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该资源清单文件中包含几个变量，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__DNS__SERVER__&lt;/code&gt; ：表示 &lt;code&gt;kube-dns&lt;/code&gt; 这个 Service 的 ClusterIP，可以通过命令 &lt;code&gt;kubectl get svc -n kube-system | grep kube-dns | awk &amp;#39;{ print $3 }&amp;#39;&lt;/code&gt; 获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__LOCAL__DNS__&lt;/code&gt;：表示 DNSCache 本地的 IP，默认为 169.254.20.10&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__DNS__DOMAIN__&lt;/code&gt;：表示集群域，默认就是 cluster.local&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有两个参数 &lt;code&gt;__PILLAR__CLUSTER__DNS__&lt;/code&gt; 和 &lt;code&gt;__PILLAR__UPSTREAM__SERVERS__&lt;/code&gt;，这两个参数会通过镜像 1.15.6 版本以上的去进行配置，对应的值来源于 kube-dns 的 ConfigMap 和定制的 Upstream Server 配置。直接执行如下所示的命令即可安装：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed &lt;span class=&quot;string&quot;&gt;&#39;s/k8s.gcr.io/cnych/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__DNS__SERVER__/10.96.0.10/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__LOCAL__DNS__/169.254.20.10/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#39;&lt;/span&gt; nodelocaldns.yaml |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过如下命令来查看对应的 Pod 是否已经启动成功：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system | grep node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-8zm2f                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-dd4xg                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-hs8qq                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-pxfxn                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-stjm9                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-wjxvz                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-wn5wc                    1/1     Running     0          7m49s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是这里使用 DaemonSet 部署 node-local-dns 使用了 &lt;code&gt;hostNetwork=true&lt;/code&gt;，会占用宿主机的 8080 端口，所以需要保证该端口未被占用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是到这里还没有完，如果 kube-proxy 组件使用的是 ipvs 模式的话我们还需要修改 kubelet 的 &lt;code&gt;--cluster-dns&lt;/code&gt; 参数，将其指向 &lt;code&gt;169.254.20.10&lt;/code&gt;，Daemonset 会在每个节点创建一个网卡来绑这个 IP，Pod 向本节点这个 IP 发 DNS 请求，缓存没有命中的时候才会再代理到上游集群 DNS 进行查询。 &lt;code&gt;iptables&lt;/code&gt; 模式下 Pod 还是向原来的集群 DNS 请求，节点上有这个 IP 监听，会被本机拦截，再请求集群上游 DNS，所以不需要更改 &lt;code&gt;--cluster-dns&lt;/code&gt; 参数。&lt;/p&gt;
&lt;h3 id=&quot;ipvs使用localDNS修改方式一&quot;&gt;&lt;a href=&quot;#ipvs使用localDNS修改方式一&quot; class=&quot;headerlink&quot; title=&quot;ipvs使用localDNS修改方式一&quot;&gt;&lt;/a&gt;ipvs使用localDNS修改方式一&lt;/h3&gt;&lt;p&gt;由于我这里使用的是 kubeadm 安装的 1.16 版本的集群，所以我们只需要替换节点上 &lt;code&gt;/var/lib/kubelet/config.yaml&lt;/code&gt; 文件中的 &lt;code&gt;clusterDNS&lt;/code&gt; 这个参数值，然后重启即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/10.96.0.10/169.254.20.10/g&#39;&lt;/span&gt; /var/lib/kubelet/config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;ipvs使用localDNS修改方式二-（不推荐）&quot;&gt;&lt;a href=&quot;#ipvs使用localDNS修改方式二-（不推荐）&quot; class=&quot;headerlink&quot; title=&quot;ipvs使用localDNS修改方式二 （不推荐）&quot;&gt;&lt;/a&gt;ipvs使用localDNS修改方式二 （不推荐）&lt;/h3&gt;&lt;p&gt;我们也可以完全在官方的 DaemonSet 资源对象中添加一个 initContainer 来完成这个工作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initContainers:  &lt;span class=&quot;comment&quot;&gt;# ipvs模式下需要修改dns配置，重启kubelet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - name: setup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image: alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tty: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stdin: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    securityContext:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - nsenter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --mount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --uts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --ipc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --net&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - -c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 确保 kubelet --cluster-dns 被设置为 169.254.20.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Configuring kubelet --cluster-dns=169.254.20.10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/10.96.0.10/169.254.20.10/g&#39;&lt;/span&gt; /var/lib/kubelet/config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是对于线上环境还是不推荐用上面的方式，因为它会优先将 kubelet 的 &lt;code&gt;cluster-dns&lt;/code&gt; 参数进行修改，然后再去安装 NodeLocal，这中间毕竟有一段真空期。&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;p&gt;待 &lt;code&gt;node-local-dns&lt;/code&gt; 安装配置完成后，我们可以部署一个新的 Pod 来验证下：(test-node-local-dns.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 60m&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接部署：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-node-local-dns.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-node-local-dns /bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# cat /etc/resolv.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 169.254.20.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search default.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到 &lt;code&gt;nameserver&lt;/code&gt; 已经变成 &lt;code&gt;169.254.20.10&lt;/code&gt; 了，当然对于之前的历史 Pod 要想使用 &lt;code&gt;node-local-dns&lt;/code&gt; 则需要重建，当然如果要想去跟踪 DNS 的解析过程的话可以去通过抓包来观察。&lt;/p&gt;
&lt;h2 id=&quot;番外篇&quot;&gt;&lt;a href=&quot;#番外篇&quot; class=&quot;headerlink&quot; title=&quot;番外篇&quot;&gt;&lt;/a&gt;番外篇&lt;/h2&gt;&lt;p&gt;在使用了&lt;code&gt;NodeLocal DNSCache&lt;/code&gt;后，如果在配置自定义域名？&lt;/p&gt;
&lt;p&gt;首先我们需要在 CoreDNS 的 ConfigMap 中添加 hosts 插件：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hosts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.211&lt;/span&gt; git.k8s.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其次我们需要修改 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 的 ConfigMap，当前配置如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cluster.local:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            success &lt;span class=&quot;number&quot;&gt;9984&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            denial &lt;span class=&quot;number&quot;&gt;9984&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    health &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in-addr.arpa:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip6.arpa:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . /etc/resolv.conf &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;分析上面的 LocalDNS 的配置信息，其中 &lt;code&gt;10.96.0.10&lt;/code&gt; 为 CoreDNS 的 Service ClusterIP，&lt;code&gt;169.254.20.10&lt;/code&gt; 为 LocalDNS 的 IP 地址，&lt;code&gt;10.96.207.156&lt;/code&gt; 是 LocalDNS 新建的一个 Service ClusterIP，该 Service 和 CoreDNS 一样都是关联以前的 CoreDNS 的 Endpoints 列表。&lt;/p&gt;
&lt;p&gt;仔细观察可以发现 &lt;code&gt;cluster.local&lt;/code&gt;、&lt;code&gt;in-addr.arpa&lt;/code&gt; 以及 &lt;code&gt;ip6.arpa&lt;/code&gt; 都会通过 forward 转发到 &lt;code&gt;10.96.207.156&lt;/code&gt;，也就是去 CoreDNS 解析，其他的则是 &lt;strong&gt;&lt;code&gt;forward . /etc/resolv.conf&lt;/code&gt;&lt;/strong&gt; 通过 &lt;code&gt;resolv.conf&lt;/code&gt; 文件去解析，该文件的内容如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameserver 169.254.20.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search default.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以当我们解析域名 &lt;code&gt;git.k8s.local&lt;/code&gt; 的时候需要走一遍搜索域，而 &lt;code&gt;k8s.local&lt;/code&gt; 不在 &lt;code&gt;cluster.local&lt;/code&gt;、&lt;code&gt;in-addr.arpa&lt;/code&gt; 以及 &lt;code&gt;ip6.arpa&lt;/code&gt; 这些域中，所以就会走到 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 去解析。这样就会导致 &lt;code&gt;git.k8s.local&lt;/code&gt; 无法进行解析。这个时候我们需要把 &lt;code&gt;forward . /etc/resolv.conf&lt;/code&gt; 更改成 &lt;code&gt;forward . 10.96.207.156&lt;/code&gt;，这样就会去 CoreDNS 解析了，在 NodeLocalDNS 的 ConfigMap 中做如下的修改即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl edit cm node-local-dns -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . __PILLAR__CLUSTER__DNS__ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样修改完成后，需要重建 NodeLocalDNS 的 Pod 才会生效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__PILLAR__CLUSTER__DNS__&lt;/code&gt; 和 &lt;code&gt;__PILLAR__UPSTREAM__SERVERS__&lt;/code&gt; 这两个参数在镜像 1.15.6 版本以上中会自动进行配置，对应的值来源于 kube-dns 的 ConfigMap 和定制的 Upstream Server 地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：明阳的博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;之前在解决 CoreDNS 的5秒超时问题的时候，除了通过 &lt;code&gt;dnsConfig&lt;/code&gt; 去强制使用 tcp 方式解析之外，我们提到过使用 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 来解决这个问题。&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 &lt;code&gt;ClusterFirst&lt;/code&gt; 的 DNS 模式下的 Pod 可以连接到 &lt;code&gt;kube-dns&lt;/code&gt; 的 serviceIP 进行 DNS 查询。通过 &lt;code&gt;kube-proxy&lt;/code&gt; 组件添加的 &lt;code&gt;iptables&lt;/code&gt; 规则将其转换为 &lt;code&gt;CoreDNS&lt;/code&gt; 端点。通过在每个集群节点上运行 DNS 缓存，&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 &lt;code&gt;kube-dns&lt;/code&gt; 的 DNS 查询次数。&lt;/p&gt;
&lt;p&gt;在集群中运行 NodeLocal DNSCache 有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果本地没有 CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须到另一个节点进行解析，使用 NodeLocal DNSCache 后，拥有本地缓存将有助于改善延迟&lt;/li&gt;
&lt;li&gt;跳过 iptables DNAT 和连接跟踪将有助于减少 &lt;code&gt;conntrack&lt;/code&gt; 竞争并避免 UDP DNS 条目填满 &lt;code&gt;conntrack&lt;/code&gt; 表（常见的5s超时问题就是这个原因造成的）&lt;/li&gt;
&lt;li&gt;从本地缓存代理到 kube-dns 服务的连接可以升级到 TCP，TCP conntrack 条目将在连接关闭时被删除，而 UDP 条目必须超时(&lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt&quot;&gt;默认 nf_conntrack_udp_timeout 是 30 秒&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;将 DNS 查询从 UDP 升级到 TCP 将减少归因于丢弃的 UDP 数据包和 DNS 超时的尾部等待时间，通常长达 30 秒（3 次重试+ 10 秒超时）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/categories/kubrenetes/coredns/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/tags/coredns/"/>
    
      <category term="local dnscache" scheme="http://team.jiunile.com/tags/local-dnscache/"/>
    
  </entry>
  
  <entry>
    <title>Go 性能优化实战</title>
    <link href="http://team.jiunile.com//blog/2020/05/go-performance.html"/>
    <id>http://team.jiunile.com//blog/2020/05/go-performance.html</id>
    <published>2020-05-18T10:00:00.000Z</published>
    <updated>2020-09-02T03:28:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;网关服务作为统一接入服务，是大部分服务的统一入口。为了避免成功瓶颈，需要对其进行尽可能地优化。因此，特别总结一下 golang 后台服务性能优化的方式，并对网关服务进行优化。&lt;/p&gt;
&lt;p&gt;技术背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 tarsgo 框架的 http 接入服务，下游服务使用 tarsgo 协议进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能指标&quot;&gt;&lt;a href=&quot;#性能指标&quot; class=&quot;headerlink&quot; title=&quot;性能指标&quot;&gt;&lt;/a&gt;性能指标&lt;/h2&gt;&lt;p&gt;网关服务本身没有业务逻辑处理，仅作为统一入口进行请求转发，因此我们主要关注下列指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：每秒钟可以处理的请求数&lt;/li&gt;
&lt;li&gt;响应时间：从客户端发出请求，到收到回包的总耗时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定位瓶颈&quot;&gt;&lt;a href=&quot;#定位瓶颈&quot; class=&quot;headerlink&quot; title=&quot;定位瓶颈&quot;&gt;&lt;/a&gt;定位瓶颈&lt;/h2&gt;&lt;p&gt;一般后台服务的瓶颈主要为 CPU，内存，IO 操作中的一个或多个。若这三者的负载都不高，但系统吞吐量低，基本就是代码逻辑出问题了。&lt;/p&gt;
&lt;p&gt;在代码正常运行的情况下，我们要针对某个方面的高负载进行优化，才能提高系统的性能。golang 可通过 benchmark 加 pprof 来定位具体的性能瓶颈。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;benchmark-简介&quot;&gt;&lt;a href=&quot;#benchmark-简介&quot; class=&quot;headerlink&quot; title=&quot;benchmark 简介&quot;&gt;&lt;/a&gt;benchmark 简介&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -v gate_test.go -run=none -bench=. -benchtime=3s -cpuprofile cpu.prof -memprofile mem.prof&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-run 知道单次测试，一般用于代码逻辑验证&lt;/li&gt;
&lt;li&gt;-bench=. 执行所有 Benchmark，也可以通过用例函数名来指定部分测试用例&lt;/li&gt;
&lt;li&gt;-benchtime 指定测试执行时长&lt;/li&gt;
&lt;li&gt;-cpuprofile 输出 cpu 的 pprof 信息文件&lt;/li&gt;
&lt;li&gt;-memprofile 输出 heap 的 pprof 信息文件。&lt;/li&gt;
&lt;li&gt;-blockprofile 阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置&lt;/li&gt;
&lt;li&gt;-mutexprofile 互斥锁分析，报告互斥锁的竞争情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;benchmark 测试用例常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b.ReportAllocs() 输出单次循环使用的内存数量和对象 allocs 信息&lt;/li&gt;
&lt;li&gt;b.RunParallel() 使用协程并发测试&lt;/li&gt;
&lt;li&gt;b.SetBytes(n int64) 设置单次循环使用的内存数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pprof-简介&quot;&gt;&lt;a href=&quot;#pprof-简介&quot; class=&quot;headerlink&quot; title=&quot;pprof 简介&quot;&gt;&lt;/a&gt;pprof 简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生成方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runtime/pprof&lt;/code&gt;: 手动调用如&lt;code&gt;runtime.StartCPUProfile&lt;/code&gt;或者&lt;code&gt;runtime.StopCPUProfile&lt;/code&gt;等 API 来生成和写入采样文件，灵活性高。主要用于本地测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net/http/pprof&lt;/code&gt;: 通过 http 服务获取 Profile 采样文件，简单易用，适用于对应用程序的整体监控。通过 runtime/pprof 实现。主要用于服务器端测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test&lt;/code&gt;: 通过 &lt;code&gt;go test -bench . -cpuprofile cpuprofile.out&lt;/code&gt; 生成采样文件，主要用于本地基准测试。可用于重点测试某些函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查看方式&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof [options][binary] ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–text 纯文本&lt;/li&gt;
&lt;li&gt;–web 生成 svg 并用浏览器打开（如果 svg 的默认打开方式是浏览器)&lt;/li&gt;
&lt;li&gt;–svg 只生成 svg&lt;/li&gt;
&lt;li&gt;–list funcname 筛选出正则匹配 funcname 的函数的信息&lt;/li&gt;
&lt;li&gt;-http=”:port” 直接本地浏览器打开 profile 查看（包括 top，graph，火焰图等）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof -base profile1 profile2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对比查看 2 个 profile，一般用于代码修改前后对比，定位差异点。&lt;/p&gt;
&lt;p&gt;通过命令行方式查看 profile 时，可以在命令行对话中，使用下列命令，查看相关信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flat flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.95s 27.56% 27.56%      5.95s 27.56%  runtime.usleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.97s 23.02% 50.58%      5.08s 23.53%  sync.(*RWMutex).RLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.46s 20.66% 71.24%      4.46s 20.66%  sync.(*RWMutex).RUnlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.69s 12.46% 83.70%      2.69s 12.46%  runtime.pthread_cond_&lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.50s  6.95% 90.64%      1.50s  6.95%  runtime.pthread_cond_signal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lat&lt;/code&gt;: 采样时，该函数正在运行的次数*采样频率(10ms)，即得到估算的函数运行”采样时间”。这里不包括函数等待子函数返回。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat%&lt;/code&gt;: flat / 总采样时间值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum%&lt;/code&gt;: 前面所有行的 flat% 的累加值，如第三行 sum% = 71.24% = 27.56% + 50.58%&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cum&lt;/code&gt;: 采样时，该函数出现在调用堆栈的采样时间，包括函数等待子函数返回。因此 flat &amp;lt;= cum&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cum%&lt;/code&gt;: cum / 总采样时间值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;topN [-cum]&lt;/code&gt; 查看前 N 个数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list ncname&lt;/code&gt; 查看某个函数的详细信息，可以明确具体的资源（cpu，内存等）是由哪一行触发的。&lt;/p&gt;
&lt;h3 id=&quot;pprof-接入&quot;&gt;&lt;a href=&quot;#pprof-接入&quot; class=&quot;headerlink&quot; title=&quot;pprof 接入&quot;&gt;&lt;/a&gt;pprof 接入&lt;/h3&gt;&lt;p&gt;服务中 main 方法插入代码&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cfg := tars.GetServerConfig()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux := &amp;amp;tars.TarsHttpMux&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/&quot;&lt;/span&gt;, pprof.Index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/cmdline&quot;&lt;/span&gt;, pprof.Cmdline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/profile&quot;&lt;/span&gt;, pprof.Profile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/symbol&quot;&lt;/span&gt;, pprof.Symbol)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/trace&quot;&lt;/span&gt;, pprof.Trace)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tars.AddHttpServant(profMux, cfg.App+&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;+cfg.Server+&lt;span class=&quot;string&quot;&gt;&quot;.ProfObj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看服务的-pprof&quot;&gt;&lt;a href=&quot;#查看服务的-pprof&quot; class=&quot;headerlink&quot; title=&quot;查看服务的 pprof&quot;&gt;&lt;/a&gt;查看服务的 pprof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证开发机能直接访问到节点部署的 ip 和 port。&lt;/li&gt;
&lt;li&gt;查看 profile(http 地址中的 ip,port 为 ProfObj 的 ip 和 port)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载cpu profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/profile?seconds=120 &lt;span class=&quot;comment&quot;&gt;# 等待120s，不带此参数时等待30s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载heap profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载goroutine profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载block profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载mutex profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载20秒的trace记录（遇到棘手问题时，查看trace会比较容易定位)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; curl http://100.97.1.35:10078/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; go tool trace trace.out 查看&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;直接在终端中通过 pprof 命令查看&lt;/li&gt;
&lt;li&gt;sz 上面命令执行时出现的&lt;code&gt;Saved profile in /root/pprof/pprof.binary.alloc_objects.xxxxxxx.xxxx.pb.gz&lt;/code&gt;到本地 &lt;/li&gt;
&lt;li&gt;在本地环境，执行&lt;code&gt;go tool pprof -http=&amp;quot;:8081&amp;quot; pprof.binary.alloc_objects.xxxxxxx.xxxx.pb.gz&lt;/code&gt; 即可直接通过&lt;code&gt;http://localhost:8081&lt;/code&gt;页面查看。包括topN，火焰图信息等,会更方便一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GC-Trace&quot;&gt;&lt;a href=&quot;#GC-Trace&quot; class=&quot;headerlink&quot; title=&quot;GC Trace&quot;&gt;&lt;/a&gt;GC Trace&lt;/h3&gt;&lt;p&gt;golang 具备 GC 功能，而 GC 是最容易被忽视的性能影响因素。尤其是在本地使用 benchmark 测试时，由于时间较短，占用内存较少。往往不会触发 GC。而一旦线上出现 GC 问题，又不太好定位。目前常用的定位方式有两种：&lt;/p&gt;
&lt;h4 id=&quot;本地-gctrace&quot;&gt;&lt;a href=&quot;#本地-gctrace&quot; class=&quot;headerlink&quot; title=&quot;本地 gctrace&quot;&gt;&lt;/a&gt;本地 gctrace&lt;/h4&gt;&lt;p&gt;在执行程序前加 &lt;code&gt;GODEBUG=gctrace=1&lt;/code&gt;，每次 gc 时会输出一行如下内容&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc 1 @0.001s 11%: 0.007+1.5+0.004 ms clock, 0.089+1.5/2.8/0.27+0.054 ms cpu, 4-&amp;gt;4-&amp;gt;3 MB, 5 MB goal, 12 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scvg: inuse: 4, idle: 57, sys: 62, released: 57, consumed: 4 (MB)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也通过日志转为图形化：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GODEBUG=gctrace=1 godoc -index -http=:6060 2&amp;gt; stderr.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat stderr.log | gcvis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inuse：使用了多少 M 内存&lt;/li&gt;
&lt;li&gt;idle：剩下要清除的内存&lt;/li&gt;
&lt;li&gt;sys：系统映射的内存&lt;/li&gt;
&lt;li&gt;released：释放的系统内存&lt;/li&gt;
&lt;li&gt;consumed：申请的系统内存&lt;/li&gt;
&lt;li&gt;gc 1 表示第 1 次 gc&lt;/li&gt;
&lt;li&gt;@0.001s 表示程序执行的总时间&lt;/li&gt;
&lt;li&gt;11% 表示垃圾回收时间占用总的运行时间百分比&lt;/li&gt;
&lt;li&gt;0.007+1.5+0.004 ms clock 表示工作线程完成 GC 的 stop-the-world,sweeping,marking 和 waiting 的时间&lt;/li&gt;
&lt;li&gt;0.089+1.5/2.8/0.27+0.054 ms cpu 垃圾回收占用 cpu 时间&lt;/li&gt;
&lt;li&gt;4-&amp;gt;4-&amp;gt;3 MB 表示堆的大小，gc 后堆的大小，存活堆的大小&lt;/li&gt;
&lt;li&gt;5 MB goal 整体堆的大小&lt;/li&gt;
&lt;li&gt;12 P 使用的处理器数量&lt;/li&gt;
&lt;li&gt;scvg: inuse: 4, idle: 57, sys: 62, released: 57, consumed: 4 (MB) 表示系统内存回收信息&lt;/li&gt;
&lt;li&gt;采用图形化的方式查看：&lt;a href=&quot;https://github.com/davecheney/gcvis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/davecheney/gcvis&lt;/a&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GODEBUG=gctrace=1 go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -v *.go -bench=. -run=none -benchtime 3m |&amp;amp; gcvis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;线上-trace&quot;&gt;&lt;a href=&quot;#线上-trace&quot; class=&quot;headerlink&quot; title=&quot;线上 trace&quot;&gt;&lt;/a&gt;线上 trace&lt;/h4&gt;&lt;p&gt;在线上业务中添加&lt;strong&gt;net/http/pprof&lt;/strong&gt;后，可通过下列命令采集 20 秒的 trace 信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl http://ip:port/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再通过&lt;code&gt;go tool trace trace.out&lt;/code&gt; 即可在本地浏览器中查看 trace 信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_1.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View trace：查看跟踪&lt;/li&gt;
&lt;li&gt;Goroutine analysis：Goroutine 分析&lt;/li&gt;
&lt;li&gt;Network blocking profile：网络阻塞概况&lt;/li&gt;
&lt;li&gt;Synchronization blocking profile：同步阻塞概况&lt;/li&gt;
&lt;li&gt;Syscall blocking profile：系统调用阻塞概况&lt;/li&gt;
&lt;li&gt;Scheduler latency profile：调度延迟概况&lt;/li&gt;
&lt;li&gt;User defined tasks：用户自定义任务&lt;/li&gt;
&lt;li&gt;User defined regions：用户自定义区域&lt;/li&gt;
&lt;li&gt;Minimum mutator utilization：最低 Mutator 利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GC 相关的信息可以在 View trace 中看到&lt;br&gt;&lt;img src=&quot;/images/go/performance_2.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;可通过点击 heap 的色块区域，查看 heap 信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_3.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 GC 对应行的蓝色色块，查看 GC 耗时及相关回收信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_4.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过这两个信息就可以确认是否存在 GC 问题，以及造成高 GC 的可能原因。&lt;/p&gt;
&lt;h4 id=&quot;使用问题&quot;&gt;&lt;a href=&quot;#使用问题&quot; class=&quot;headerlink&quot; title=&quot;使用问题&quot;&gt;&lt;/a&gt;使用问题&lt;/h4&gt;&lt;p&gt;trace 的展示仅支持 chrome 浏览器。但是目前常用的 chrome 浏览器屏蔽了 go tool trace 使用的 HTML import 功能。即打开“view trace”时，会出现一片空白。并可以在 console 中看到警告信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTML Imports is deprecated and has now been removed as of M80. See https://www.chromestatus.com/features/5144752345317376 and https://developers.google.com/web/updates/2019/07/web-components-time-to-upgrade &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more details.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;申请 token&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.chrome.com/origintrials/#/register_trial/2431943798780067841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.chrome.com/origintrials/#/register_trial/2431943798780067841&lt;/a&gt; 然后登录&lt;/li&gt;
&lt;li&gt;web origin 处填写 &lt;a href=&quot;http://localhost:8001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8001&lt;/a&gt; 端口只能是 8000 - 8003，支持 http 和 https。（也可以填写 127.0.0.1:8001,依赖于你浏览器中显示的地址，否则对不上的话，还要手动改一下)&lt;br&gt;&lt;img src=&quot;/images/go/performance_5.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/li&gt;
&lt;li&gt;点击注册后即可看到 token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修改 trace.go&lt;/strong&gt;&lt;br&gt;编辑&lt;code&gt;${GOROOT}/src/cmd/trace/trace.go&lt;/code&gt; 文件，在文件中找到 templTrace 然后在  标签的下一行添加&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;你复制的token&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重新编译 go&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;${GOROOT}/src 目录，执行 ./all.bash&lt;/li&gt;
&lt;li&gt;若提示：&lt;code&gt;ERROR: Cannot find go1.4\bin\go Set GOROOT_BOOTSTRAP to a working Go tree &amp;gt;= Go 1.4&lt;/code&gt; 则需要先安装一个 go1.4 的版本，再通过它来编译 go。（下载链接&lt;a href=&quot;https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz）&lt;/a&gt; 在 &lt;code&gt;go1.4/src&lt;/code&gt; 下执行 &lt;code&gt;./make.bash&lt;/code&gt; . 指定 GOROOT_BOOTSTRAP 为 go1.4 的根目录。然后就可以重新编译 go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查看 trace&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool trace -http=localhost:8001 trace.out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若打开 view trace 还是空白,则检查一下浏览器地址栏中的地址，是否与注册时的一样。即注册用的 localhost 或 127.0.0.1 则地址栏中也要一样。&lt;/p&gt;
&lt;h2 id=&quot;常见性能瓶颈&quot;&gt;&lt;a href=&quot;#常见性能瓶颈&quot; class=&quot;headerlink&quot; title=&quot;常见性能瓶颈&quot;&gt;&lt;/a&gt;常见性能瓶颈&lt;/h2&gt;&lt;h3 id=&quot;业务逻辑&quot;&gt;&lt;a href=&quot;#业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;业务逻辑&quot;&gt;&lt;/a&gt;业务逻辑&lt;/h3&gt;&lt;p&gt;出现无效甚至降低性能的逻辑。常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑重复：相同的操作在不同的位置做了多次或循环跳出的条件设置不当。&lt;/li&gt;
&lt;li&gt;资源未复用：内存频繁申请和释放，数据库链接频繁建立和销毁等。&lt;/li&gt;
&lt;li&gt;无效代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存储&lt;/h3&gt;&lt;p&gt;未选择恰当的存储方式，常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临时数据存放到数据库中，导致频繁读写数据库。&lt;/li&gt;
&lt;li&gt;将复杂的树状结构的数据用 SQL 数据库存储，出现大量冗余列，并且在读写时要进行拆解和拼接。&lt;/li&gt;
&lt;li&gt;数据库表设计不当，无法有效利用索引查询，导致查询操作耗时高甚至出现大量慢查询。&lt;/li&gt;
&lt;li&gt;热点数据未使用缓存，导致数据库负载过高，响应速度下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;并发处理&quot;&gt;&lt;a href=&quot;#并发处理&quot; class=&quot;headerlink&quot; title=&quot;并发处理&quot;&gt;&lt;/a&gt;并发处理&lt;/h3&gt;&lt;p&gt;并发操作的问题主要出现在资源竞争上，常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁/活锁导致大量阻塞，性能严重下降。&lt;/li&gt;
&lt;li&gt;资源竞争激烈：大量的线程或协程抢夺一个锁。&lt;/li&gt;
&lt;li&gt;临界区过大：将不必要的操作也放入临界区，导致锁的释放速度过慢，引起其他线程或协程阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;golang-部分细节简介&quot;&gt;&lt;a href=&quot;#golang-部分细节简介&quot; class=&quot;headerlink&quot; title=&quot;golang 部分细节简介&quot;&gt;&lt;/a&gt;golang 部分细节简介&lt;/h2&gt;&lt;p&gt;在优化之前，我们需要对 golang 的实现细节有一个简单的了解，才能明白哪些地方有问题，哪些地方可以优化，以及怎么优化。以下内容的详细讲解建议查阅网上优秀的 blog。对语言的底层实现机制最好有个基本的了解，否则有时候掉到坑里都不知道为啥。&lt;/p&gt;
&lt;h3 id=&quot;协程调度&quot;&gt;&lt;a href=&quot;#协程调度&quot; class=&quot;headerlink&quot; title=&quot;协程调度&quot;&gt;&lt;/a&gt;协程调度&lt;/h3&gt;&lt;p&gt;Golang 调度是非抢占式多任务处理，由协程主动交出控制权。遇到如下条件时，才有可能交出控制权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O,select&lt;/li&gt;
&lt;li&gt;channel&lt;/li&gt;
&lt;li&gt;等待锁&lt;/li&gt;
&lt;li&gt;函数调用（是一个切换的机会，是否会切换由调度器决定）&lt;/li&gt;
&lt;li&gt;runtime.Gosched()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，若存在较长时间的 for 循环处理，并且循环内没有上述逻辑时，会阻塞住其他的协程调度。在实际编码中一定要注意。&lt;/p&gt;
&lt;h3 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h3&gt;&lt;p&gt;Go 为每个逻辑处理器（P）提供了一个称为mcache的本地内存线程缓存。每个 mcache 中持有 67 个级别的 mspan。每个 msapn 又包含两种：scan（包含指针的对象）和 noscan（不包含指针的对象）。&lt;strong&gt;在进行垃圾收集时，GC 无需遍历 noscan 对象&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/go/performance_6.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;GC-处理&quot;&gt;&lt;a href=&quot;#GC-处理&quot; class=&quot;headerlink&quot; title=&quot;GC 处理&quot;&gt;&lt;/a&gt;GC 处理&lt;/h3&gt;&lt;p&gt;GC 的工作就是确定哪些内存可以释放，它是通过扫描内存查找内存分配的指针来完成这个工作的。GC 触发时机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到达堆阈值：默认情况下，它将在堆大小加倍时运行，可通过 GOGC 来设定更高阈值（不建议变更此配置）&lt;/li&gt;
&lt;li&gt;到达时间阈值：每两分钟会强制启动一次 GC 循环&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为啥要注意 GC，是因为 GC 时出现 2 次 Stop the world，即停止所有协程，进行扫描操作。若是 GC 耗时高，则会严重影响服务器性能。&lt;br&gt;&lt;img src=&quot;/images/go/performance_7.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;变量逃逸&quot;&gt;&lt;a href=&quot;#变量逃逸&quot; class=&quot;headerlink&quot; title=&quot;变量逃逸&quot;&gt;&lt;/a&gt;变量逃逸&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意，golang 中的栈是跟函数绑定的，函数结束时栈被回收。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;变量内存回收：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果分配在栈中，则函数执行结束可自动将内存回收；&lt;/li&gt;
&lt;li&gt;如果分配在堆中，则函数执行结束可交给 GC（垃圾回收）处理；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而变量逃逸就意味着增加了堆中的对象个数，影响 GC 耗时。一般要尽量避免逃逸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃逸分析不变性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向栈对象的指针不能存在于堆中；&lt;/li&gt;
&lt;li&gt;指向栈对象的指针不能在栈对象回收后存活；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在逃逸分析过程中，凡是发现出现违反上述约定的变量，就将其移到堆中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃逸常见的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针逃逸：返回局部变量的地址（不变性 2）&lt;/li&gt;
&lt;li&gt;栈空间不足&lt;/li&gt;
&lt;li&gt;动态类型逃逸：如 fmt.Sprintf,json.Marshel 等接受变量为…interface{}函数的调用，会导致传入的变量逃逸。&lt;/li&gt;
&lt;li&gt;闭包引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;包含指针类型的底层结构&quot;&gt;&lt;a href=&quot;#包含指针类型的底层结构&quot; class=&quot;headerlink&quot; title=&quot;包含指针类型的底层结构&quot;&gt;&lt;/a&gt;包含指针类型的底层结构&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; StringHeader &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Data &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slice&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; SliceHeader &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Data &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cap  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; count     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; flags     &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B         &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; noverflow &lt;span class=&quot;keyword&quot;&gt;uint16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; hash0     &lt;span class=&quot;keyword&quot;&gt;uint32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; buckets    unsafe.Pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; oldbuckets unsafe.Pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nevacuate  &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extra *mapextra&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些是常见会包含指针的对象。尤其是 string，在后台应用中大量出现。并经常会作为 map 的 key 或 value。若数据量较大时，就会引发 GC 耗时上升。同时，我们可以注意到 string 和 slice 非常相似，从某种意义上说它们之间是可以直接互相转换的。这就可以避免 string 和[]byte 之间类型转换时，进行内存拷贝&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型转换优化&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(*&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)(unsafe.Pointer(&amp;amp;b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Str2Bytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; []&lt;span class=&quot;title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; x := (*[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;)(unsafe.Pointer(&amp;amp;s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; h := [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&amp;#123;x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(*[]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)(unsafe.Pointer(&amp;amp;h))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;性能测试方式&quot;&gt;&lt;a href=&quot;#性能测试方式&quot; class=&quot;headerlink&quot; title=&quot;性能测试方式&quot;&gt;&lt;/a&gt;性能测试方式&lt;/h2&gt;&lt;h3 id=&quot;本地测试&quot;&gt;&lt;a href=&quot;#本地测试&quot; class=&quot;headerlink&quot; title=&quot;本地测试&quot;&gt;&lt;/a&gt;本地测试&lt;/h3&gt;&lt;p&gt;将服务处理的核心逻辑，使用 go test 的 benchmark 加 pprof 来测试。建议上线前，就对整个业务逻辑的性能进行测试，提前优化瓶颈。&lt;/p&gt;
&lt;h3 id=&quot;线上测试&quot;&gt;&lt;a href=&quot;#线上测试&quot; class=&quot;headerlink&quot; title=&quot;线上测试&quot;&gt;&lt;/a&gt;线上测试&lt;/h3&gt;&lt;p&gt;一般 http 服务可以通过常见的测试工具进行压测，如 wrk，locust 等。taf 服务则需要我们自己编写一些测试脚本。同时，要注意的是，压测的目的是定位出服务的最佳性能，而不是盲目的高并发请求测试。因此，一般需要逐步提升并发请求数量，来定位出服务的最佳性能点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：由于 taf 平台具备扩容功能，因此为了更准确的测试，我们应该在测试前关闭要测试节点的自动扩容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实际项目优化&quot;&gt;&lt;a href=&quot;#实际项目优化&quot; class=&quot;headerlink&quot; title=&quot;实际项目优化&quot;&gt;&lt;/a&gt;实际项目优化&lt;/h2&gt;&lt;p&gt;为了避免影响后端服务，也为了避免后端服务影响网关自身。因此，我们需要在压测前，将对后端服务的调用屏蔽。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试准备：屏蔽远程调用：下游服务调用，健康度上报，统计上报，远程日志。以便关注网关自身性能。&lt;h3 id=&quot;QPS-现状&quot;&gt;&lt;a href=&quot;#QPS-现状&quot; class=&quot;headerlink&quot; title=&quot;QPS 现状&quot;&gt;&lt;/a&gt;QPS 现状&lt;/h3&gt;首先看下当前业务的性能指标，使用 wrk 压测网关服务&lt;br&gt;&lt;img src=&quot;/images/go/performance_8.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;可以看出，在总链接数为 70 的时候，QPS 最高，为 13245。&lt;h3 id=&quot;火焰图&quot;&gt;&lt;a href=&quot;#火焰图&quot; class=&quot;headerlink&quot; title=&quot;火焰图&quot;&gt;&lt;/a&gt;火焰图&lt;/h3&gt;&lt;img src=&quot;/images/go/performance_9.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;根据火焰图我们定位出 cpu 占比较高的几个方法为：&lt;/li&gt;
&lt;li&gt;json.Marshal&lt;/li&gt;
&lt;li&gt;json.Unmarshal&lt;/li&gt;
&lt;li&gt;rogger.Infof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了方便测试，将代码改为本地运行，并通过 benchmark 的方式来对比修改前后的差异。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于正式环境使用的 golang 版本为 1.12，因此本地测试时，也要使用同样的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;benchmark&quot;&gt;&lt;a href=&quot;#benchmark&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	50000000	      3669 ns/op	    4601 B/op	      73 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看 cpu 和 memory 的 profile，发现健康度上报的数据结构填充占比较高。这部分逻辑基于 tars 框架实现。暂时忽略，为避免影响其他测试，先注释掉。再看看 benchmark。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      3146 ns/op	    2069 B/op	      55 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优化策略&quot;&gt;&lt;a href=&quot;#优化策略&quot; class=&quot;headerlink&quot; title=&quot;优化策略&quot;&gt;&lt;/a&gt;优化策略&lt;/h2&gt;&lt;h3 id=&quot;JSON-优化&quot;&gt;&lt;a href=&quot;#JSON-优化&quot; class=&quot;headerlink&quot; title=&quot;JSON 优化&quot;&gt;&lt;/a&gt;JSON 优化&lt;/h3&gt;&lt;p&gt;先查看 json 解析的部分，看看是否有优化空间&lt;/p&gt;
&lt;h4 id=&quot;请求处理&quot;&gt;&lt;a href=&quot;#请求处理&quot; class=&quot;headerlink&quot; title=&quot;请求处理&quot;&gt;&lt;/a&gt;请求处理&lt;/h4&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//RootHandle view.ReadReq2Json readJsonReq 中进行json解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayReqBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayReqBodyHeader   &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; dataMap := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, &amp;amp;dataMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  headerMap, ok := header.(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  businessName, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;businessName&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  qua, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;qua&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sessionId, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  payload, ok := dataMap[&lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  req.Payload, ok = payload.(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数本质上将 data 解析为 model.GatewayReqBody 类型的结构体。但是这里却存在 2 个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了复杂的解析方式，先将 data 解析为 map，再通过每个字段的名字来取值，并进行类型转换。&lt;/li&gt;
&lt;li&gt;Req.Playload 解析为一个 map。但又未使用。我们看看后面这个 payload 是用来做啥。确认是否为无效代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;invokeTafServant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(resp http.ResponseWriter, gatewayHttpReq *model.GatewayHttpReq)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  payloadBytes, err := json.Marshal(gatewayHttpReq.ReqBody.Payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  commonReq.Payload = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(payloadBytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  responseData(gatewayHttpReq, StatusInternalServerError, &lt;span class=&quot;string&quot;&gt;&quot;封装json异常&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后续的使用中，我们可以看到，又将这个 payload 转为 string。因此，我们可以确定，上面的 json 解析是没有意义，同时也会浪费资源（payload 数据量一般不小）。&lt;/p&gt;
&lt;h4 id=&quot;优化方法&quot;&gt;&lt;a href=&quot;#优化方法&quot; class=&quot;headerlink&quot; title=&quot;优化方法&quot;&gt;&lt;/a&gt;优化方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;golang 自带的 json 解析性能较低，这里我们可以替换为github.com/json-iterator来提升性能&lt;/li&gt;
&lt;li&gt;在 golang 中，遇到不需要解析的 json 数据，可以将其类型声明为json.RawMessage. 即，可以将上述 2 个方法优化为&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayReqBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayReqBodyHeader &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload json.RawMessage      &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, req)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; jsonParseErr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; req.Header.Qua &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  req.Header.Qua[k] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(req.Header.QuaStr) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   req.Header.QuaStr = k + &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt; + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   req.Header.QuaStr += &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt; + k + &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt; + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;invokeTafServant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(resp http.ResponseWriter, gatewayHttpReq *model.GatewayHttpReq)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; commonReq.Payload = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(gatewayHttpReq.ReqBody.Payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这里注意！出现了 string 和[]byte 之间的类型转换.为了避免内存拷贝，这里将 string()改为上面的类型转换优化中所定义的转换函数，即 &lt;code&gt;commonReq.Payload = encode.String(gatewayHttpReq.ReqBody.Payload)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;回包处理&quot;&gt;&lt;a href=&quot;#回包处理&quot; class=&quot;headerlink&quot; title=&quot;回包处理&quot;&gt;&lt;/a&gt;回包处理&lt;/h4&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayRespBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayRespBodyHeader  &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;responseData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(gatewayReq *model.GatewayHttpReq, code &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;, message &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, payload &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, resp http.ResponseWriter)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; jsonPayload := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(payload) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  err := json.Unmarshal([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(payload), &amp;amp;jsonPayload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; body := model.GatewayRespBody&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Header: model.GatewayRespBodyHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Code:    code,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Message: message,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Payload: jsonPayload,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data, err := view.RenderResp(&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &amp;amp;body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resp.WriteHeader(http.StatusOK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; resp.Write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，这里的 jsonPayload，也是出现了不必要的 json 解析。我们可以改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayRespBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayRespBodyHeader  &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload json.RawMessage &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body := model.GatewayRespBody&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Header: model.GatewayRespBodyHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Code:    code,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Message: message,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Payload: encode.Str2Bytes(payload),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 view.RenderResp 方法中&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RenderResp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(format &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, resp &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt; == format &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; jsoniter.Marshal(resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.New(&lt;span class=&quot;string&quot;&gt;&quot;format error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-1&quot;&gt;&lt;a href=&quot;#benchmark-1&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      3326 ns/op	    2842 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然对象 alloc 减少了，但单次操作内存使用增加了，且性能下降了。这就有点奇怪了。我们来对比一下 2 个情况下的 pprof。&lt;/p&gt;
&lt;h3 id=&quot;逃逸分析及处理&quot;&gt;&lt;a href=&quot;#逃逸分析及处理&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析及处理&quot;&gt;&lt;/a&gt;逃逸分析及处理&lt;/h3&gt;&lt;h4 id=&quot;go-tool-pprof-base&quot;&gt;&lt;a href=&quot;#go-tool-pprof-base&quot; class=&quot;headerlink&quot; title=&quot;go tool pprof -base&quot;&gt;&lt;/a&gt;go tool pprof -base&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;cpu 差异&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0.09s  1.17%  1.17%      0.40s  5.20%  runtime.mallocgc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0.01s  0.13%  1.30%      0.35s  4.55%  /vendor/github.com/json-iterator/go.(*Iterator).readObjectStart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0      0%     1.30%      0.35s  4.55%  /vendor/github.com/json-iterator/go.(*twoFieldsStructDecoder).Decode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;mem 差异&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;478.96MB 20.33% 20.33%   279.94MB 11.88%  gateway.RootHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0     0% 20.33%   279.94MB 11.88%  &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;-line-arguments.BenchmarkTestHttp.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0     0% 20.33%   279.94MB 11.88%  testing.(*B).RunParallel.func1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出 RootHandle 多了 478.96M 的内存使用。通过 list RootHandle 对比 2 个情况下的内存使用。发现修改后的 RootHandle 中多出了这一行：&lt;code&gt;475.46MB 475.46MB 158: gatewayHttpReq := model.GatewayHttpReq{}&lt;/code&gt; 这一般意味着变量 gatewayHttpReq 出现了逃逸。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go build -gcflags “-m -m” gateway/*.go&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gateway/logic.go:270:26: &amp;amp;gatewayHttpReq escapes to heap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到确实出现了逃逸。这个对应的代码为&lt;code&gt;err = view.ReadReq2Json(&amp;amp;gatewayHttpReq)&lt;/code&gt;,而造成逃逸的本质是因为上面改动了函数 readJsonReq（动态类型逃逸，即函数参数为 interface 类型，无法在编译时确定具体类型的）&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, req)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，这里需要特殊处理一下，改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp model.GatewayReqBody&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err := jsoniter.Unmarshal(data, &amp;amp;tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-2&quot;&gt;&lt;a href=&quot;#benchmark-2&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      2994 ns/op	    1892 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到堆内存使用明显下降。性能也提升了。再看一下 pprof，寻找下个瓶颈。&lt;/p&gt;
&lt;h4 id=&quot;cpu-profile&quot;&gt;&lt;a href=&quot;#cpu-profile&quot; class=&quot;headerlink&quot; title=&quot;cpu profile&quot;&gt;&lt;/a&gt;cpu profile&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/go/performance_10.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;抛开 responeseData(他内部主要是日志打印占比高），占比较高的为 util.GenerateSessionId，先来看看这个怎么优化。&lt;/p&gt;
&lt;h3 id=&quot;随机字符串生成&quot;&gt;&lt;a href=&quot;#随机字符串生成&quot; class=&quot;headerlink&quot; title=&quot;随机字符串生成&quot;&gt;&lt;/a&gt;随机字符串生成&lt;/h3&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; letterRunes = []&lt;span class=&quot;keyword&quot;&gt;rune&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandStringRunes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;rune&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b[i] = letterRunes[rand.Intn(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(letterRunes))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前的生成方式使用的类型是 rune，但其实用 byte 就够了。另外，letterRunes 是 62 个字符，即最大需要 6 位的 index 就可以遍历完成了。而随机数获取的是 63 位。即每个随机数，其实可以产生 10 个随机字符。而不用每个字符都获取一次随机数。所以我们改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterBytes   = &lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxBits = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxMask = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;letterIdxBits - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxMax  = &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt; / letterIdxBits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandStringRunes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, cache, remain := n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, rand.Int63(), letterIdxMax; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; remain == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cache, remain = rand.Int63(), letterIdxMax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; idx := &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(cache &amp;amp; letterIdxMask); idx &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(letterBytes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b[i] = letterBytes[idx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cache &amp;gt;&amp;gt;= letterIdxBits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  remain--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-3&quot;&gt;&lt;a href=&quot;#benchmark-3&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	 1000000	      1487 ns/op	    1843 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;类型转换及字符串拼接&quot;&gt;&lt;a href=&quot;#类型转换及字符串拼接&quot; class=&quot;headerlink&quot; title=&quot;类型转换及字符串拼接&quot;&gt;&lt;/a&gt;类型转换及字符串拼接&lt;/h3&gt;&lt;p&gt;一般情况下，都会说将 string 和[]byte 的转换改为 unsafe；以及在字符串拼接时，用 byte.Buffer 代替 fmt.Sprintf。但是网关这里的情况比较特殊，字符串的操作基本集中在打印日志的操作。而 tars 的日志打印本身就是通过 byte.Buffer 拼接的。所以这可以避免。另外，由于日志打印量大，使用 unsafe 转换[]byte 为 string 带来的收益，往往会因为逃逸从而影响 GC，反正会影响性能。因此，不同的场景下，不能简单的套用一些优化方法。需要通过压测及结果分析来判断具体的优化策略。&lt;/p&gt;
&lt;h2 id=&quot;优化结果&quot;&gt;&lt;a href=&quot;#优化结果&quot; class=&quot;headerlink&quot; title=&quot;优化结果&quot;&gt;&lt;/a&gt;优化结果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/go/performance_11.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;可以看到优化后，最大链接数为 110，最高 QPS 为&lt;strong&gt;21153.35&lt;/strong&gt;。对比之前的&lt;strong&gt;13245&lt;/strong&gt;，大约提升 60%。&lt;/p&gt;
&lt;h2 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;p&gt;从 pprof 中可以看到日志打印，远程日志，健康上报等信息占用较多 cpu 资源，且导致多个数据逃逸（尤其是日志打印）。过多的日志基本等于没有日志。后续可考虑裁剪日志，仅保留出错时的上下文信息。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;性能查看工具 pprof,trace 及压测工具 wrk 或其他压测工具的使用要比较了解。&lt;/li&gt;
&lt;li&gt;代码逻辑层面的走读非常重要，要尽量避免无效逻辑。&lt;/li&gt;
&lt;li&gt;对于 golang 自身库存在缺陷的，可以寻找第三方库或自己改造。&lt;/li&gt;
&lt;li&gt;golang 版本尽量更新，这次的测试是在 golang1.12 下进行的。而 go1.13 甚至 go1.14 在很多地方进行了改进。比如 fmt.Sprintf，sync.Pool 等。替换成新版本应该能进一步提升性能。&lt;/li&gt;
&lt;li&gt;本地 benchmark 结果不等于线上运行结果。尤其是在使用缓存来提高处理速度时，要考虑 GC 的影响。&lt;/li&gt;
&lt;li&gt;传参数或返回值时，尽量按 golang 的设计哲学，少用指针，多用值对象，避免引起过多的变量逃逸，导致 GC 耗时暴涨。struct 的大小一般在 2K 以下的拷贝传值，比使用指针要快（可针对不同的机器压测，判断各自的阈值)。&lt;/li&gt;
&lt;li&gt;值类型在满足需要的情况下，越小越好。能用 int8，就不要用 int64。&lt;/li&gt;
&lt;li&gt;资源尽量复用,在 golang1.13 以上，可以考虑使用 sync.Pool 缓存会重复申请的内存或对象。或者自己使用并管理大块内存，用来存储小对象，避免 GC 影响（如本地缓存的场景)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐阅读: &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMTA4Njc0OQ==&amp;amp;mid=2651439020&amp;amp;idx=1&amp;amp;sn=c2094f4dccb53385dc207958e7f42f9e&amp;amp;chksm=80bb615eb7cce8481eb7a8f09d4a13e2974b3785c241dd31245647cd7540dde414d64f2b3719&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;滴滴实战分享：通过 profiling 定位 golang 性能问题 - 内存篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源：trumanyan&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;网关服务作为统一接入服务，是大部分服务的统一入口。为了避免成功瓶颈，需要对其进行尽可能地优化。因此，特别总结一下 golang 后台服务性能优化的方式，并对网关服务进行优化。&lt;/p&gt;
&lt;p&gt;技术背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 tarsgo 框架的 http 接入服务，下游服务使用 tarsgo 协议进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能指标&quot;&gt;&lt;a href=&quot;#性能指标&quot; class=&quot;headerlink&quot; title=&quot;性能指标&quot;&gt;&lt;/a&gt;性能指标&lt;/h2&gt;&lt;p&gt;网关服务本身没有业务逻辑处理，仅作为统一入口进行请求转发，因此我们主要关注下列指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：每秒钟可以处理的请求数&lt;/li&gt;
&lt;li&gt;响应时间：从客户端发出请求，到收到回包的总耗时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定位瓶颈&quot;&gt;&lt;a href=&quot;#定位瓶颈&quot; class=&quot;headerlink&quot; title=&quot;定位瓶颈&quot;&gt;&lt;/a&gt;定位瓶颈&lt;/h2&gt;&lt;p&gt;一般后台服务的瓶颈主要为 CPU，内存，IO 操作中的一个或多个。若这三者的负载都不高，但系统吞吐量低，基本就是代码逻辑出问题了。&lt;/p&gt;
&lt;p&gt;在代码正常运行的情况下，我们要针对某个方面的高负载进行优化，才能提高系统的性能。golang 可通过 benchmark 加 pprof 来定位具体的性能瓶颈。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="性能" scheme="http://team.jiunile.com/categories/golang/%E6%80%A7%E8%83%BD/"/>
    
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/tags/pprof/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="gc" scheme="http://team.jiunile.com/tags/gc/"/>
    
      <category term="benchmark" scheme="http://team.jiunile.com/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>调试golang的bug以及性能问题的实践方法</title>
    <link href="http://team.jiunile.com//blog/2020/05/go-debug-practice.html"/>
    <id>http://team.jiunile.com//blog/2020/05/go-debug-practice.html</id>
    <published>2020-05-11T10:00:00.000Z</published>
    <updated>2020-09-02T03:29:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;场景1：-如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;a href=&quot;#场景1：-如何分析程序的运行时间与CPU利用率情况？&quot; class=&quot;headerlink&quot; title=&quot;场景1： 如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;/a&gt;场景1： 如何分析程序的运行时间与CPU利用率情况？&lt;/h2&gt;&lt;h3 id=&quot;shell内置time指令&quot;&gt;&lt;a href=&quot;#shell内置time指令&quot; class=&quot;headerlink&quot; title=&quot;shell内置time指令&quot;&gt;&lt;/a&gt;shell内置time指令&lt;/h3&gt;&lt;p&gt;这个方法不算新颖，但是确很实用。 time是Unix/Linux内置多命令，使用时一般不用传过多参数，直接跟上需要调试多程序即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;&amp;#123;&amp;#123;0 0&amp;#125; 张三 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;real    0m0.843s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.216s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys 0m0.389s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是使用time对 &lt;code&gt;go run test2.go&lt;/code&gt; 对执行程序坐了性能分析，得到3个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt;：从程序开始到结束，实际度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;：程序在用户态度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys&lt;/code&gt;：程序在内核态度过的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下 &lt;code&gt;real&lt;/code&gt; &amp;gt;= &lt;code&gt;user&lt;/code&gt; + &lt;code&gt;sys&lt;/code&gt;，因为系统还有其它进程(切换其他进程中间对于本进程回有空白期)。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;usr-bin-time指令&quot;&gt;&lt;a href=&quot;#usr-bin-time指令&quot; class=&quot;headerlink&quot; title=&quot;/usr/bin/time指令&quot;&gt;&lt;/a&gt;/usr/bin/time指令&lt;/h3&gt;&lt;p&gt;这个指令比内置的time更加详细一些，使用的时候需要用绝对路径，而且要加上参数 &lt;code&gt;-v&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ /usr/bin/time -v go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Command being timed: &lt;span class=&quot;string&quot;&gt;&quot;go run test2.go&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    User time (seconds): 0.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System time (seconds): 0.06&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Percent of CPU this job got: 115%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average shared text size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average unshared data size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average stack size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average total size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Maximum resident &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; size (kbytes): 41172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average resident &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Major (requiring I/O) page faults: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Minor (reclaiming a frame) page faults: 15880&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Voluntary context switches: 897&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Involuntary context switches: 183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Swaps: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File system inputs: 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File system outputs: 2664&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Socket messages sent: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Socket messages received: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Signals delivered: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Page size (bytes): 4096&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Exit status: 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里的功能要强大多了，除了之前的信息外，还包括了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU占用率；&lt;/li&gt;
&lt;li&gt;内存使用情况；&lt;/li&gt;
&lt;li&gt;Page Fault 情况；&lt;/li&gt;
&lt;li&gt;进程切换情况；&lt;/li&gt;
&lt;li&gt;文件系统IO；&lt;/li&gt;
&lt;li&gt;Socket 使用情况；&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;场景2：-如何分析golang程序的内存使用情况？&quot;&gt;&lt;a href=&quot;#场景2：-如何分析golang程序的内存使用情况？&quot; class=&quot;headerlink&quot; title=&quot;场景2： 如何分析golang程序的内存使用情况？&quot;&gt;&lt;/a&gt;场景2： 如何分析golang程序的内存使用情况？&lt;/h2&gt;&lt;h3 id=&quot;内存占用情况查看&quot;&gt;&lt;a href=&quot;#内存占用情况查看&quot; class=&quot;headerlink&quot; title=&quot;内存占用情况查看&quot;&gt;&lt;/a&gt;内存占用情况查看&lt;/h3&gt;&lt;p&gt;我们先写一段demo例子代码&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;Start.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;force gc.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$go&lt;/span&gt; build -o snippet_mem &amp;amp;&amp;amp; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在./snippet_mem进程没有执行完，我们再开一个窗口，通过 &lt;code&gt;top&lt;/code&gt; 命令查看进程的内存占用情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$top&lt;/span&gt; -p $(pidof snippet_mem)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;得到结果如下：&lt;br&gt;&lt;img src=&quot;/images/go/godebug_1.png&quot; alt=&quot;go debug top&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看出来，没有退出的snippet_mem进程有约830m的内存被占用。&lt;/p&gt;
&lt;p&gt;直观上来说，这个程序在 &lt;code&gt;test()&lt;/code&gt; 函数执行完后，切片 &lt;code&gt;contaner&lt;/code&gt; 的内存应该被释放，不应该占用830M那么大。&lt;/p&gt;
&lt;p&gt;下面让我们使用GODEBUG来分析程序的内存使用情况。&lt;/p&gt;
&lt;h3 id=&quot;GODEBUG与gctrace&quot;&gt;&lt;a href=&quot;#GODEBUG与gctrace&quot; class=&quot;headerlink&quot; title=&quot;GODEBUG与gctrace&quot;&gt;&lt;/a&gt;GODEBUG与gctrace&lt;/h3&gt;&lt;h4 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;snippet_mem&lt;/code&gt;程序之前添加环境变量&lt;code&gt;GODEBUG=&amp;#39;gctrace=1&amp;#39;&lt;/code&gt;来跟踪打印垃圾回收器信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GODEBUG=&lt;span class=&quot;string&quot;&gt;&#39;gctrace=1&#39;&lt;/span&gt; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;gctrace=1&lt;/code&gt;会使得垃圾回收器在每次回收时汇总所回收内存的大小以及耗时，&lt;br&gt;并将这些内容汇总成单行内容打印到标准错误输出中。&lt;/p&gt;
&lt;h4 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc &lt;span class=&quot;comment&quot;&gt;# @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;含义&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc &lt;span class=&quot;comment&quot;&gt;#        GC次数的编号，每次GC时递增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;comment&quot;&gt;#s         距离程序开始执行时的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#%          GC占用的执行时间百分比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#+...+#     GC使用的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-&amp;gt;#-&amp;gt;# MB  GC开始，结束，以及当前活跃堆内存的大小，单位M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MB goal   全局堆内存大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# P         使用processor的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果每条信息最后，以&lt;code&gt;(forced)&lt;/code&gt;结尾，那么该信息是由&lt;code&gt;runtime.GC()&lt;/code&gt;调用触发&lt;/p&gt;
&lt;p&gt;我们来选择其中一行来解释一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc 17 @0.149s 1%: 0.004+36+0.003 ms clock, 0.009+0/0.051/36+0.006 ms cpu, 181-&amp;gt;181-&amp;gt;101 MB, 182 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该条信息含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gc 17&lt;/code&gt;: Gc 调试编号为17&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@0.149s&lt;/code&gt;: 此时程序已经执行了0.149s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1%&lt;/code&gt;: 0.149s中其中gc模块占用了1%的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.004+36+0.003 ms clock&lt;/code&gt;: 垃圾回收的时间，分别为STW（stop-the-world）清扫的时间+并发标记和扫描的时间+STW标记的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.009+0/0.051/36+0.006 ms cpu&lt;/code&gt;: 垃圾回收占用cpu时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;181-&amp;gt;181-&amp;gt;101 MB&lt;/code&gt;: GC开始前堆内存181M， GC结束后堆内存181M，当前活跃的堆内存101M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;182 MB goal&lt;/code&gt;: 全局堆内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 P&lt;/code&gt;: 本次GC使用了2个P(调度器中的Processer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了GC的调试信息读法后，接下来我们来分析一下本次GC的结果。&lt;/p&gt;
&lt;p&gt;我们还是执行GODEBUG调试&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GODEBUG=&lt;span class=&quot;string&quot;&gt;&#39;gctrace=1&#39;&lt;/span&gt; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:37 Start.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:37  ===&amp;gt; loop begin.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 1 @0.002s 5%: 0.14+0.45+0.002 ms clock, 0.29+0/0.042/0.33+0.005 ms cpu, 4-&amp;gt;4-&amp;gt;0 MB, 5 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 2 @0.003s 4%: 0.13+3.7+0.019 ms clock, 0.27+0/0.037/2.8+0.038 ms cpu, 4-&amp;gt;4-&amp;gt;2 MB, 5 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 3 @0.008s 3%: 0.002+1.1+0.001 ms clock, 0.005+0/0.083/1.0+0.003 ms cpu, 6-&amp;gt;6-&amp;gt;2 MB, 7 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 4 @0.010s 3%: 0.003+0.99+0.002 ms clock, 0.006+0/0.041/0.82+0.004 ms cpu, 5-&amp;gt;5-&amp;gt;2 MB, 6 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 5 @0.011s 4%: 0.079+0.80+0.003 ms clock, 0.15+0/0.046/0.51+0.006 ms cpu, 6-&amp;gt;6-&amp;gt;3 MB, 7 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 6 @0.013s 4%: 0.15+3.7+0.002 ms clock, 0.31+0/0.061/3.3+0.005 ms cpu, 8-&amp;gt;8-&amp;gt;8 MB, 9 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 7 @0.019s 3%: 0.004+2.5+0.005 ms clock, 0.008+0/0.051/2.1+0.010 ms cpu, 20-&amp;gt;20-&amp;gt;6 MB, 21 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 8 @0.023s 5%: 0.014+3.7+0.002 ms clock, 0.029+0.040/1.2/0+0.005 ms cpu, 15-&amp;gt;15-&amp;gt;8 MB, 16 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 9 @0.031s 4%: 0.003+1.6+0.001 ms clock, 0.007+0.094/0/0+0.003 ms cpu, 19-&amp;gt;19-&amp;gt;10 MB, 20 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 10 @0.034s 3%: 0.006+5.2+0.004 ms clock, 0.013+0/0.045/5.0+0.008 ms cpu, 24-&amp;gt;24-&amp;gt;13 MB, 25 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 11 @0.040s 3%: 0.12+2.6+0.002 ms clock, 0.24+0/0.043/2.5+0.004 ms cpu, 30-&amp;gt;30-&amp;gt;16 MB, 31 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 12 @0.043s 3%: 0.11+4.4+0.002 ms clock, 0.23+0/0.044/4.1+0.005 ms cpu, 38-&amp;gt;38-&amp;gt;21 MB, 39 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 13 @0.049s 3%: 0.008+10+0.040 ms clock, 0.017+0/0.045/10+0.080 ms cpu, 47-&amp;gt;47-&amp;gt;47 MB, 48 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 14 @0.070s 2%: 0.004+12+0.002 ms clock, 0.008+0/0.062/12+0.005 ms cpu, 122-&amp;gt;122-&amp;gt;41 MB, 123 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 15 @0.084s 2%: 0.11+11+0.038 ms clock, 0.22+0/0.064/3.9+0.076 ms cpu, 93-&amp;gt;93-&amp;gt;93 MB, 94 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 16 @0.122s 1%: 0.005+25+0.010 ms clock, 0.011+0/0.12/24+0.021 ms cpu, 238-&amp;gt;238-&amp;gt;80 MB, 239 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 17 @0.149s 1%: 0.004+36+0.003 ms clock, 0.009+0/0.051/36+0.006 ms cpu, 181-&amp;gt;181-&amp;gt;101 MB, 182 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 18 @0.187s 1%: 0.12+19+0.004 ms clock, 0.25+0/0.049/19+0.008 ms cpu, 227-&amp;gt;227-&amp;gt;126 MB, 228 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 19 @0.207s 1%: 0.096+27+0.004 ms clock, 0.19+0/0.077/0.73+0.009 ms cpu, 284-&amp;gt;284-&amp;gt;284 MB, 285 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 20 @0.287s 0%: 0.005+944+0.040 ms clock, 0.011+0/0.048/1.3+0.081 ms cpu, 728-&amp;gt;728-&amp;gt;444 MB, 729 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38  ===&amp;gt; loop end.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38 force gc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 21 @1.236s 0%: 0.004+0.099+0.001 ms clock, 0.008+0/0.018/0.071+0.003 ms cpu, 444-&amp;gt;444-&amp;gt;0 MB, 888 MB goal, 2 P (forced)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38 Done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 22 @122.455s 0%: 0.010+0.15+0.003 ms clock, 0.021+0/0.025/0.093+0.007 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 23 @242.543s 0%: 0.007+0.075+0.002 ms clock, 0.014+0/0.022/0.085+0.004 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 24 @362.545s 0%: 0.018+0.19+0.006 ms clock, 0.037+0/0.055/0.15+0.013 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 25 @482.548s 0%: 0.012+0.25+0.005 ms clock, 0.025+0/0.025/0.11+0.010 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 26 @602.551s 0%: 0.009+0.10+0.003 ms clock, 0.018+0/0.021/0.075+0.006 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 27 @722.554s 0%: 0.012+0.30+0.005 ms clock, 0.025+0/0.15/0.22+0.011 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 28 @842.556s 0%: 0.027+0.18+0.003 ms clock, 0.054+0/0.11/0.14+0.006 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h4&gt;&lt;p&gt;先看在&lt;code&gt;test()&lt;/code&gt;函数执行完后立即打印的&lt;code&gt;gc 21&lt;/code&gt;那行的信息。&lt;code&gt;444-&amp;gt;444-&amp;gt;0 MB, 888 MB goal&lt;/code&gt;表示垃圾回收器已经把&lt;code&gt;444M&lt;/code&gt;的内存标记为非活跃的内存。&lt;/p&gt;
&lt;p&gt;再看下一个记录&lt;code&gt;gc 22。0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal&lt;/code&gt;表示垃圾回收器中的全局堆内存大小由&lt;code&gt;888M&lt;/code&gt;下降为&lt;code&gt;4M&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在test()函数执行完后，demo程序中的切片容器所申请的堆空间都被垃圾回收器回收了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果此时在&lt;code&gt;top&lt;/code&gt;指令查询内存的时候，如果依然先死800+MB，说明&lt;strong&gt;垃圾回收器回收了应用层的内存后，（可能）并不会立即将内存归还给系统&lt;/strong&gt;。具体分析原因可见：&lt;a href=&quot;https://segmentfault.com/a/1190000022472459&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;踩坑记：go服务内存暴涨&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;runtime-ReadMemStats&quot;&gt;&lt;a href=&quot;#runtime-ReadMemStats&quot; class=&quot;headerlink&quot; title=&quot;runtime.ReadMemStats&quot;&gt;&lt;/a&gt;runtime.ReadMemStats&lt;/h3&gt;&lt;p&gt;接下来我么换另一种方式查看内存的方式 利用 runtime库里的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// demo2.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readMemStats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ms runtime.MemStats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.ReadMemStats(&amp;amp;ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&quot;&lt;/span&gt;, ms.Alloc, ms.HeapIdle, ms.HeapReleased)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( i == &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Start].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [force gc].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Done].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们， 封装了一个函数&lt;code&gt;readMemStats()&lt;/code&gt;，这里面主要是调用&lt;code&gt;runtime&lt;/code&gt;中的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法获得内存信息，然后通过&lt;code&gt;log&lt;/code&gt;打印出来。&lt;/p&gt;
&lt;p&gt;我们执行一下代码并运行:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go run demo2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; [Start].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; Alloc:71280(bytes) HeapIdle:66633728(bytes) HeapReleased:66600960(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; loop begin.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:18  ===&amp;gt; Alloc:132535744(bytes) HeapIdle:336756736(bytes) HeapReleased:155721728(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; loop end.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:598300600(bytes) HeapIdle:609181696(bytes) HeapReleased:434323456(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; [force gc].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; [Done].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:55840(bytes) HeapIdle:1207427072(bytes) HeapReleased:434266112(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:56656(bytes) HeapIdle:1207394304(bytes) HeapReleased:434266112(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:48  ===&amp;gt; Alloc:56912(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:58  ===&amp;gt; Alloc:57488(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:22:08  ===&amp;gt; Alloc:57616(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2020/03/02 18:22:18  ===&amp;gt; Alloc:57744(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(by&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，打印&lt;code&gt;[Done].&lt;/code&gt;之后那条trace信息，Alloc已经下降，即内存已被垃圾回收器回收。在&lt;code&gt;2020/03/02 18:21:38&lt;/code&gt;和&lt;code&gt;2020/03/02 18:21:48&lt;/code&gt;的两条trace信息中，HeapReleased开始上升，即垃圾回收器把内存归还给系统。&lt;/p&gt;
&lt;p&gt;另外，MemStats还可以获取其它哪些信息以及字段的含义可以参见官方文档：&lt;a href=&quot;http://golang.org/pkg/runtime/#MemStats&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://golang.org/pkg/runtime/#MemStats&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pprof工具&quot;&gt;&lt;a href=&quot;#pprof工具&quot; class=&quot;headerlink&quot; title=&quot;pprof工具&quot;&gt;&lt;/a&gt;pprof工具&lt;/h3&gt;&lt;p&gt;pprof工具支持网页上查看内存的使用情况，需要在代码中添加一个协程即可。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体添加的完整代码如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//demo3.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readMemStats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ms runtime.MemStats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.ReadMemStats(&amp;amp;ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&quot;&lt;/span&gt;, ms.Alloc, ms.HeapIdle, ms.HeapReleased)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( i == &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Println(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Start].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [force gc].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Done].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们正常运行程序，然后同时打开浏览器，&lt;/p&gt;
&lt;p&gt;输入地址：&lt;a href=&quot;http://127.0.0.1:10000/debug/pprof/heap?debug=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:10000/debug/pprof/heap?debug=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;浏览器的内容其中有一部分如下，记录了目前的内存情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# runtime.MemStats&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Alloc = 228248&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# TotalAlloc = 1293696976&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Sys = 834967896&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Lookups = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Mallocs = 2018&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Frees = 671&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapAlloc = 228248&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapSys = 804913152&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapIdle = 804102144&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapInuse = 811008&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapReleased = 108552192&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapObjects = 1347&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Stack = 360448 / 360448&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MSpan = 28288 / 32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MCache = 3472 / 16384&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# BuckHashSys = 1449617&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# GCSys = 27418976&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# OtherSys = 776551&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# NextGC = 4194304&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LastGC = 1583203571137891390&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景3-如何分析Golang程序的CPU性能情况？&quot;&gt;&lt;a href=&quot;#场景3-如何分析Golang程序的CPU性能情况？&quot; class=&quot;headerlink&quot; title=&quot;场景3: 如何分析Golang程序的CPU性能情况？&quot;&gt;&lt;/a&gt;场景3: 如何分析Golang程序的CPU性能情况？&lt;/h2&gt;&lt;h3 id=&quot;性能分析注意事项&quot;&gt;&lt;a href=&quot;#性能分析注意事项&quot; class=&quot;headerlink&quot; title=&quot;性能分析注意事项&quot;&gt;&lt;/a&gt;性能分析注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;性能分析必须在一个可重复的、稳定的环境中来进行。&lt;/li&gt;
&lt;li&gt;机器必须闲置&lt;ul&gt;
&lt;li&gt;不要在共享硬件上进行性能分析;&lt;/li&gt;
&lt;li&gt;不要在性能分析期间，在同一个机器上去浏览网页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意省电模式和过热保护，如果突然进入这些模式，会导致分析数据严重不准确&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要使用虚拟机、共享的云主机&lt;/strong&gt;，太多干扰因素，分析数据会很不一致&lt;/li&gt;
&lt;li&gt;不要在 macOS 10.11 及以前的版本运行性能分析，有 bug，之后的版本修复了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果承受得起，购买专用的性能测试分析的硬件设备，上架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭电源管理、过热管理&lt;/li&gt;
&lt;li&gt;绝不要升级，以保证测试的一致性，以及具有可比性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有这样的环境，那就一定要在多个环境中，执行多次，以取得可参考的、具有相对一致性的测试结果。&lt;/p&gt;
&lt;h3 id=&quot;CPU性能分析&quot;&gt;&lt;a href=&quot;#CPU性能分析&quot; class=&quot;headerlink&quot; title=&quot;CPU性能分析&quot;&gt;&lt;/a&gt;CPU性能分析&lt;/h3&gt;&lt;p&gt;我们来用下面的代码进行测试&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//demo4.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Println(genSomeBytes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//生成一个随机字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;genSomeBytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;bytes&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buff bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buff.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(rand.Intn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;buff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(time.Second * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面还是启动了pprof的坚挺,有关&lt;code&gt;pprof&lt;/code&gt;启动的代码如下:&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;里的流程很简单,启动一个goroutine去无限循环调用&lt;code&gt;test()&lt;/code&gt;方法,休眠1s.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test()&lt;/code&gt;的流程是生成1000个20000个字符的随机字符串.并且打印.&lt;/p&gt;
&lt;p&gt;我们将上面的代码编译成可执行的二进制文件 &lt;code&gt;demo4&lt;/code&gt;(记住这个名字,稍后我们能用到)&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build demo4.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们启动程序,程序会无限循环的打印字符串.&lt;/p&gt;
&lt;p&gt;接下来我们通过几种方式来查看进程的cpu性能情况.&lt;/p&gt;
&lt;h4 id=&quot;A-Web界面查看&quot;&gt;&lt;a href=&quot;#A-Web界面查看&quot; class=&quot;headerlink&quot; title=&quot;A. Web界面查看&quot;&gt;&lt;/a&gt;A. Web界面查看&lt;/h4&gt;&lt;p&gt;浏览器访问: &lt;a href=&quot;http://127.0.0.1:10000/debug/pprof/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:10000/debug/pprof/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们会看到如下画面&lt;br&gt;&lt;img src=&quot;/images/go/godebug_2.png&quot; alt=&quot;go pprof web&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里面能够通过pprof查看包括(阻塞信息、cpu信息、内存堆信息、锁信息、goroutine信息等等), 我们这里关心的cpu的性能的&lt;code&gt;profile&lt;/code&gt;信息.&lt;/p&gt;
&lt;p&gt;有关&lt;code&gt;profile&lt;/code&gt;下面的英文解释大致如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“CPU配置文件。您可以在秒GET参数中指定持续时间。获取概要文件后，请使用go tool pprof命令调查概要文件。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们要是想得到cpu性能,就是要获取到当前进程的&lt;code&gt;profile&lt;/code&gt;文件,这个文件默认是30s生成一个,所以你的程序要至少运行30s以上(这个参数也可以修改,稍后我们介绍)&lt;/p&gt;
&lt;p&gt;我们可以直接点击网页的&lt;code&gt;profile&lt;/code&gt;,浏览器会给我们下载一个&lt;code&gt;profile&lt;/code&gt;文件. 记住这个文件的路径, 可以拷贝到与&lt;code&gt;demo4&lt;/code&gt;所在的同一文件夹下.&lt;/p&gt;
&lt;h4 id=&quot;B-使用pprof工具查看&quot;&gt;&lt;a href=&quot;#B-使用pprof工具查看&quot; class=&quot;headerlink&quot; title=&quot;B. 使用pprof工具查看&quot;&gt;&lt;/a&gt;B. 使用pprof工具查看&lt;/h4&gt;&lt;p&gt;pprof 的格式如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof [binary] [profile]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binary&lt;/code&gt;: 必须指向生成这个性能分析数据的那个二进制可执行文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: 必须是该二进制可执行文件所生成的性能分析数据文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;binary&lt;/code&gt; 和 &lt;code&gt;profile&lt;/code&gt; &lt;strong&gt;必须严格匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们来查看一下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:18pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;help&lt;/strong&gt;可以查看一些指令,我么可以通过&lt;strong&gt;top&lt;/strong&gt;来查看cpu的性能情况.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5090ms, 81.18% of 6270ms total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped 80 nodes (cum &amp;lt;= 31.35ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing top 10 nodes out of 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1060ms 16.91% 16.91%     2170ms 34.61%  math/rand.(*lockedSource).Int63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     850ms 13.56% 30.46%      850ms 13.56%  sync.(*Mutex).Unlock (inline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     710ms 11.32% 41.79%     2950ms 47.05%  math/rand.(*Rand).Int31n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     570ms  9.09% 50.88%      990ms 15.79%  bytes.(*Buffer).Write&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     530ms  8.45% 59.33%      540ms  8.61%  syscall.Syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     370ms  5.90% 65.23%      370ms  5.90%  runtime.procyield&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     270ms  4.31% 69.54%     4490ms 71.61%  main.genSomeBytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     250ms  3.99% 73.52%     3200ms 51.04%  math/rand.(*Rand).Intn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     250ms  3.99% 77.51%      250ms  3.99%  runtime.memmove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     230ms  3.67% 81.18%      690ms 11.00%  runtime.suspendG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面有几列数据,需要说明一下.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flat：当前函数占用CPU的耗时&lt;/li&gt;
&lt;li&gt;flat%：:当前函数占用CPU的耗时百分比&lt;/li&gt;
&lt;li&gt;sun%：函数占用CPU的耗时累计百分比&lt;/li&gt;
&lt;li&gt;cum：当前函数加上调用当前函数的函数占用CPU的总耗时&lt;/li&gt;
&lt;li&gt;cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比&lt;/li&gt;
&lt;li&gt;最后一列：函数名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过结果我们可以看出, 该程序的大部分cpu性能消耗在 &lt;code&gt;main.getSoneBytes()&lt;/code&gt;方法中,其中math/rand取随机数消耗比较大.&lt;/p&gt;
&lt;h4 id=&quot;C-通过go-tool-pprof得到profile文件&quot;&gt;&lt;a href=&quot;#C-通过go-tool-pprof得到profile文件&quot; class=&quot;headerlink&quot; title=&quot;C. 通过go tool pprof得到profile文件&quot;&gt;&lt;/a&gt;C. 通过go tool pprof得到profile文件&lt;/h4&gt;&lt;p&gt;我们上面的profile文件是通过web浏览器下载的,这个profile的经过时间是30s的,默认值我们在浏览器上修改不了,如果你想得到时间更长的cpu利用率,可以通过&lt;code&gt;go tool pprof&lt;/code&gt;指令与程序交互来获取到&lt;/p&gt;
&lt;p&gt;首先,我们先启动程序&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./demo4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再打开一个终端&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里制定了生成profile文件的时间间隔60s&lt;/p&gt;
&lt;p&gt;等待60s之后, 终端就会有结果出来,我们继续使用top来查看.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fetching profile over HTTP from http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saved profile &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/itheima/pprof/pprof.demo4.samples.cpu.005.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:59pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 1mins, Total samples = 12.13s (20.22%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 9940ms, 81.95% of 12130ms total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped 110 nodes (cum &amp;lt;= 60.65ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing top 10 nodes out of 56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2350ms 19.37% 19.37%     4690ms 38.66%  math/rand.(*lockedSource).Int63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1770ms 14.59% 33.97%     1770ms 14.59%  sync.(*Mutex).Unlock (inline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1290ms 10.63% 44.60%     6040ms 49.79%  math/rand.(*Rand).Int31n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1110ms  9.15% 53.75%     1130ms  9.32%  syscall.Syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     810ms  6.68% 60.43%     1860ms 15.33%  bytes.(*Buffer).Write&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     620ms  5.11% 65.54%     6660ms 54.91%  math/rand.(*Rand).Intn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     570ms  4.70% 70.24%      570ms  4.70%  runtime.procyield&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     500ms  4.12% 74.36%     9170ms 75.60%  main.genSomeBytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     480ms  3.96% 78.32%      480ms  3.96%  runtime.memmove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     440ms  3.63% 81.95%      440ms  3.63%  math/rand.(*rngSource).Uint64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依然会得到cpu性能的结果, 我们发现这次的结果与上次30s的结果百分比类似.&lt;/p&gt;
&lt;h4 id=&quot;D-可视化查看&quot;&gt;&lt;a href=&quot;#D-可视化查看&quot; class=&quot;headerlink&quot; title=&quot;D.可视化查看&quot;&gt;&lt;/a&gt;D.可视化查看&lt;/h4&gt;&lt;p&gt;我们还是通过&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入profile文件查看,然后我们输入&lt;code&gt;web&lt;/code&gt;指令.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profileFile: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:18pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) web&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里如果报找不到&lt;code&gt;graphviz&lt;/code&gt;工具，需要安装一下。这里自行百度如何安装&lt;/p&gt;
&lt;p&gt;然后我们得到一个&lt;code&gt;svg&lt;/code&gt;的可视化文件在&lt;code&gt;/tmp&lt;/code&gt;路径下&lt;br&gt;&lt;img src=&quot;/images/go/godebug_3.png&quot; alt=&quot;go pprof web&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样我们就能比较清晰的看到函数之间的调用关系,方块越大的表示cpu的占用越大.&lt;/p&gt;
&lt;p&gt;来源：刘丹冰Aceld 简书&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景1：-如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;a href=&quot;#场景1：-如何分析程序的运行时间与CPU利用率情况？&quot; class=&quot;headerlink&quot; title=&quot;场景1： 如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;/a&gt;场景1： 如何分析程序的运行时间与CPU利用率情况？&lt;/h2&gt;&lt;h3 id=&quot;shell内置time指令&quot;&gt;&lt;a href=&quot;#shell内置time指令&quot; class=&quot;headerlink&quot; title=&quot;shell内置time指令&quot;&gt;&lt;/a&gt;shell内置time指令&lt;/h3&gt;&lt;p&gt;这个方法不算新颖，但是确很实用。 time是Unix/Linux内置多命令，使用时一般不用传过多参数，直接跟上需要调试多程序即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;&amp;#123;&amp;#123;0 0&amp;#125; 张三 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;real    0m0.843s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.216s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys 0m0.389s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是使用time对 &lt;code&gt;go run test2.go&lt;/code&gt; 对执行程序坐了性能分析，得到3个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt;：从程序开始到结束，实际度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;：程序在用户态度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys&lt;/code&gt;：程序在内核态度过的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下 &lt;code&gt;real&lt;/code&gt; &amp;gt;= &lt;code&gt;user&lt;/code&gt; + &lt;code&gt;sys&lt;/code&gt;，因为系统还有其它进程(切换其他进程中间对于本进程回有空白期)。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/categories/golang/debug/"/>
    
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/tags/pprof/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="godebug" scheme="http://team.jiunile.com/tags/godebug/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Etcd 数据备份与恢复</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-etcd-backup-restore.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-etcd-backup-restore.html</id>
    <published>2020-05-09T11:00:00.000Z</published>
    <updated>2020-05-09T07:29:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Etcd 版本：3.4.3&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kubernetes 使用 Etcd 数据库实时存储集群中的数据，可以说 Etcd 是 Kubernetes 的核心组件，犹如人类的大脑。如果 Etcd 数据损坏将导致 Kubernetes 不可用，在生产环境中 Etcd 数据是一定要做好高可用与数据备份，这里介绍下如何备份与恢复 Etcd 数据。&lt;/p&gt;
&lt;h2 id=&quot;备份-Etcd-数据&quot;&gt;&lt;a href=&quot;#备份-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;备份 Etcd 数据&quot;&gt;&lt;/a&gt;备份 Etcd 数据&lt;/h2&gt;&lt;p&gt;采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具。如果你是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。&lt;/p&gt;
&lt;p&gt;运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;–cacert：etcd CA 证书&lt;/li&gt;
&lt;li&gt;–key：etcd 客户端证书 key&lt;/li&gt;
&lt;li&gt;–cert：etcd 客户端证书 crt&lt;/li&gt;
&lt;li&gt;–endpoints：指定 ETCD 连接地址&lt;/li&gt;
&lt;li&gt;etcdctl snapshot save：etcd 数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3                                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl --endpoints=https://192.168.2.11:2379 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snapshot save /backup/etcd-snapshot.db&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;恢复-ETCD-数据&quot;&gt;&lt;a href=&quot;#恢复-ETCD-数据&quot; class=&quot;headerlink&quot; title=&quot;恢复 ETCD 数据&quot;&gt;&lt;/a&gt;恢复 ETCD 数据&lt;/h2&gt;&lt;p&gt;在 Etcd 数据损坏时，可以通过 Etcd 备份数据进行数据恢复，先暂停 Kubernetes 相关组件，然后进入 Etcd 镜像使用 etcdctl 工具执行恢复操作。&lt;/p&gt;
&lt;h3 id=&quot;暂停-Kube-Apiserver-与-Etcd-镜像&quot;&gt;&lt;a href=&quot;#暂停-Kube-Apiserver-与-Etcd-镜像&quot; class=&quot;headerlink&quot; title=&quot;暂停 Kube-Apiserver 与 Etcd 镜像&quot;&gt;&lt;/a&gt;暂停 Kube-Apiserver 与 Etcd 镜像&lt;/h3&gt;&lt;p&gt;在恢复 Etcd 数据前，需要停止 &lt;code&gt;kube-apiserver&lt;/code&gt; 与 &lt;code&gt;etcd&lt;/code&gt; 镜像，因为当这俩镜像停止后 Kubernetes 会自动重启这俩镜像，所以我们可以先暂时移除 &lt;code&gt;/etc/kubernetes/manifests&lt;/code&gt; 目录，Kubernetes 检测这个目录文件不存在时会停止 Kubernetes 系统相关镜像，使其不能重启，方便我们进行后续的操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 移除且备份 /etc/kubernetes/manifests 目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv /etc/kubernetes/manifests /etc/kubernetes/manifests.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 kube-apiserver、etcd 镜像是否停止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps|grep etcd &amp;amp;&amp;amp; docker ps|grep kube-apiserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 备份现有 Etcd 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv /var/lib/etcd /var/lib/etcd.bak&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;恢复-Etcd-数据&quot;&gt;&lt;a href=&quot;#恢复-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;恢复 Etcd 数据&quot;&gt;&lt;/a&gt;恢复 Etcd 数据&lt;/h3&gt;&lt;p&gt;运行 Etcd 镜像，然后执行数据恢复，默认会恢复到 &lt;code&gt;/default.etcd/member/&lt;/code&gt; 目录下，这里使用 &lt;code&gt;mv&lt;/code&gt; 命令在移动到挂载目录 &lt;code&gt;/var/lib/etcd/&lt;/code&gt; 下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;etcdctl snapshot restore：etcd 数据恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup        \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /var/lib/etcd:/var/lib/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0        \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl snapshot restore /backup/etcd-snapshot.db; mv /default.etcd/member/ /var/lib/etcd/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;恢复-Kube-Apiserver-与-Etcd-镜像&quot;&gt;&lt;a href=&quot;#恢复-Kube-Apiserver-与-Etcd-镜像&quot; class=&quot;headerlink&quot; title=&quot;恢复 Kube-Apiserver 与 Etcd 镜像&quot;&gt;&lt;/a&gt;恢复 Kube-Apiserver 与 Etcd 镜像&lt;/h3&gt;&lt;p&gt;将 &lt;code&gt;/etc/kubernetes/manifests&lt;/code&gt; 目录恢复，使 Kubernetes 重启 &lt;code&gt;Kube-Apiserver&lt;/code&gt; 与 &lt;code&gt;Etcd&lt;/code&gt; 镜像：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mv /etc/kubernetes/manifests.bak /etc/kubernetes/manifests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;执行-Kubectl-命令进行检测&quot;&gt;&lt;a href=&quot;#执行-Kubectl-命令进行检测&quot; class=&quot;headerlink&quot; title=&quot;执行 Kubectl 命令进行检测&quot;&gt;&lt;/a&gt;执行 Kubectl 命令进行检测&lt;/h3&gt;&lt;p&gt;执行 Kubectl 命令进行检测，查看命令是否能够正常执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考：mydlq.club&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Etcd 版本：3.4.3&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kubernetes 使用 Etcd 数据库实时存储集群中的数据，可以说 Etcd 是 Kubernetes 的核心组件，犹如人类的大脑。如果 Etcd 数据损坏将导致 Kubernetes 不可用，在生产环境中 Etcd 数据是一定要做好高可用与数据备份，这里介绍下如何备份与恢复 Etcd 数据。&lt;/p&gt;
&lt;h2 id=&quot;备份-Etcd-数据&quot;&gt;&lt;a href=&quot;#备份-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;备份 Etcd 数据&quot;&gt;&lt;/a&gt;备份 Etcd 数据&lt;/h2&gt;&lt;p&gt;采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具。如果你是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。&lt;/p&gt;
&lt;p&gt;运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;–cacert：etcd CA 证书&lt;/li&gt;
&lt;li&gt;–key：etcd 客户端证书 key&lt;/li&gt;
&lt;li&gt;–cert：etcd 客户端证书 crt&lt;/li&gt;
&lt;li&gt;–endpoints：指定 ETCD 连接地址&lt;/li&gt;
&lt;li&gt;etcdctl snapshot save：etcd 数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3                                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl --endpoints=https://192.168.2.11:2379 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snapshot save /backup/etcd-snapshot.db&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="etcd" scheme="http://team.jiunile.com/categories/kubernetes/etcd/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="etcd" scheme="http://team.jiunile.com/tags/etcd/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm 添加新 Master 节点到集群出现 ETCD 健康检查失败错误</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-kubeadm-upgrade-master-problem.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-kubeadm-upgrade-master-problem.html</id>
    <published>2020-05-09T10:00:00.000Z</published>
    <updated>2020-05-09T06:51:09.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 版本：18.06.3&lt;br&gt;Kubeadm 版本：1.17.4&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes Master 数量：3&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;Kubernetes 集群中总共有三台 Master，分别是：&lt;/p&gt;
&lt;p&gt;k8s-master-2-11、k8s-master-2-12、k8s-master-2-13&lt;/p&gt;
&lt;p&gt;对其中 k8s-master-2-11 Master 节点服务器进行了内核和软件升级操作，从而先将其暂时剔出集群，然后进行升级，完成后准备重新加入到 Kubernetes 集群，通过 Kubeadm 执行，输入下面命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm join mydlq.club:16443 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--token 6w0nwi.zag57qgfcdhi76vd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--discovery-token-ca-cert-hash sha256:efa49231e4ffd836ff996921741c98ac4c5655dc729d7c32aa48c608232f0f08 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--control-plane --certificate-key a64e9da7346153bd64dba1e5126a644a97fdb63c878bb73de07911d1add8e26b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在执行过程中，输出下面日志，提示 etcd 监控检查失败：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[control-plane] Creating static Pod manifest &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-controller-manager&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0329 00:01:51.364121   19209 manifests.go:214] the default kube-apiserver authorization-mode is &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;; using &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[control-plane] Creating static Pod manifest &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-scheduler&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0329 00:01:51.373807   19209 manifests.go:214] the default kube-apiserver authorization-mode is &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;; using &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[check-etcd] Checking that the etcd cluster is healthy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error execution phase check-etcd: etcd cluster is not healthy: failed to dial endpoint https://10.8.18.105:2379 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with maintenance client: context deadline exceeded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To see the stack trace of this error execute with --v=5 or higher&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据关键信息 &lt;code&gt;&amp;quot;error execution phase check-etcd&amp;quot;&lt;/code&gt; 可知，可能是在执行加入 &lt;code&gt;etcd&lt;/code&gt; 时候出现的错误，导致 &lt;code&gt;master&lt;/code&gt; 无法加入原先的 &lt;code&gt;kubernetes&lt;/code&gt; 集群。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h2&gt;&lt;h3 id=&quot;查看集群节点列表&quot;&gt;&lt;a href=&quot;#查看集群节点列表&quot; class=&quot;headerlink&quot; title=&quot;查看集群节点列表&quot;&gt;&lt;/a&gt;查看集群节点列表&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME              STATUS    ROLES     VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s-master-2-12    Ready    master    v1.17.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s-master-2-13    Ready    master    v1.17.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s-node-2-14      Ready    &amp;lt;none&amp;gt;    v1.17.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s-node-2-15      Ready    &amp;lt;none&amp;gt;    v1.17.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s-node-2-16      Ready    &amp;lt;none&amp;gt;    v1.17.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，k8s-master-2-11 节点确实不在节点列表中&lt;/p&gt;
&lt;h3 id=&quot;查看-Kubeadm-配置信息&quot;&gt;&lt;a href=&quot;#查看-Kubeadm-配置信息&quot; class=&quot;headerlink&quot; title=&quot;查看 Kubeadm 配置信息&quot;&gt;&lt;/a&gt;查看 Kubeadm 配置信息&lt;/h3&gt;&lt;p&gt;在看看 Kubernetes 集群中的 kubeadm 配置信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl describe configmaps kubeadm-config -n kube-system&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取到的内容如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Name:         kubeadm-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Namespace:    kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Labels:       &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Annotations:  &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClusterStatus:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiEndpoints:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  k8s-master-2-11:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    advertiseAddress: 192.168.2.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;Port: 6443&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  k8s-master-2-12:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    advertiseAddress: 192.168.2.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;Port: 6443&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  k8s-master-2-13:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    advertiseAddress: 192.168.2.13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;Port: 6443&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: kubeadm.k8s.io/v1beta2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind: ClusterStatus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可也看到 &lt;code&gt;k8s-master-2-11&lt;/code&gt; 节点信息还存在与 &lt;code&gt;kubeadm&lt;/code&gt; 配置中，说明 &lt;code&gt;etcd&lt;/code&gt; 中还存储着 &lt;code&gt;k8s-master-2-11&lt;/code&gt; 相关信息。&lt;/p&gt;
&lt;h3 id=&quot;分析问题所在及解决方案&quot;&gt;&lt;a href=&quot;#分析问题所在及解决方案&quot; class=&quot;headerlink&quot; title=&quot;分析问题所在及解决方案&quot;&gt;&lt;/a&gt;分析问题所在及解决方案&lt;/h3&gt;&lt;p&gt;因为集群是通过 &lt;code&gt;kubeadm&lt;/code&gt; 工具搭建的，且使用了 &lt;code&gt;etcd&lt;/code&gt; 镜像方式与 &lt;code&gt;master&lt;/code&gt; 节点一起，所以每个 &lt;code&gt;Master&lt;/code&gt; 节点上都会存在一个 &lt;code&gt;etcd&lt;/code&gt; 容器实例。当剔除一个 &lt;code&gt;master&lt;/code&gt; 节点时 &lt;code&gt;etcd&lt;/code&gt; 集群未删除剔除的节点的 &lt;code&gt;etcd&lt;/code&gt; 成员信息，该信息还存在 &lt;code&gt;etcd&lt;/code&gt; 集群列表中。&lt;/p&gt;
&lt;p&gt;所以，我们需要 &lt;strong&gt;进入 etcd 手动删除 etcd 成员信息&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;h3 id=&quot;获取-Etcd-镜像列表&quot;&gt;&lt;a href=&quot;#获取-Etcd-镜像列表&quot; class=&quot;headerlink&quot; title=&quot;获取 Etcd 镜像列表&quot;&gt;&lt;/a&gt;获取 Etcd 镜像列表&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system | grep etcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd-k8s-master-2-12   1/1   Running   0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;etcd-k8s-master-2-13   1/1   Running   0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;进入-Etcd-容器并删除节点信息&quot;&gt;&lt;a href=&quot;#进入-Etcd-容器并删除节点信息&quot; class=&quot;headerlink&quot; title=&quot;进入 Etcd 容器并删除节点信息&quot;&gt;&lt;/a&gt;进入 Etcd 容器并删除节点信息&lt;/h3&gt;&lt;p&gt;选择上面两个 etcd 中任意一个 pod，通过 kubectl 工具进入 pod 内部：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it etcd-k8s-master-2-12 sh -n kube-system&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入容器后，按下面步执行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; ETCDCTL_API=3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt; etcdctl=&lt;span class=&quot;string&quot;&gt;&#39;etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 etcd 集群成员列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl member list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63bfe05c4646fb08, started, k8s-master-2-11, https://192.168.2.11:2380, https://192.168.2.11:2379, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8e41efd8164c6e3d, started, k8s-master-2-12, https://192.168.2.12:2380, https://192.168.2.12:2379, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a61d0bd53c1cbcb6, started, k8s-master-2-13, https://192.168.2.13:2380, https://192.168.2.13:2379, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除 etcd 集群成员 k8s-master-2-11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl member remove 63bfe05c4646fb08&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Member 63bfe05c4646fb08 removed from cluster ed984b9o8w35&lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 再次查看 etcd 集群成员列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ etcdctl member list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8e41efd8164c6e3d, started, k8s-master-2-12, https://192.168.2.12:2380, https://192.168.2.12:2379, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a61d0bd53c1cbcb6, started, k8s-master-2-13, https://192.168.2.13:2380, https://192.168.2.13:2379, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;通过-kubeadm-命令再次尝试加入集群&quot;&gt;&lt;a href=&quot;#通过-kubeadm-命令再次尝试加入集群&quot; class=&quot;headerlink&quot; title=&quot;通过 kubeadm 命令再次尝试加入集群&quot;&gt;&lt;/a&gt;通过 kubeadm 命令再次尝试加入集群&lt;/h3&gt;&lt;p&gt;通过 &lt;code&gt;kubeadm&lt;/code&gt; 命令再次尝试将 &lt;code&gt;k8s-master-2-11&lt;/code&gt; 节点加入集群，在执行前首先进入到 &lt;code&gt;k8s-master-2-11&lt;/code&gt; 节点服务器，执行 &lt;code&gt;kubeadm&lt;/code&gt; 的清除命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm reset&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后尝试加入 kubernetes 集群：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm join mydlq.club:16443 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--token 6w0nwi.zag57qgfcdhi76vd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--discovery-token-ca-cert-hash sha256:efa49231e4ffd836ff996921741c98ac4c5655dc729d7c32aa48c608232f0f08 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--control-plane --certificate-key a64e9da7346153bd64dba1e5126a644a97fdb63c878bb73de07911d1add8e26b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考：mydlq.club&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 版本：18.06.3&lt;br&gt;Kubeadm 版本：1.17.4&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes Master 数量：3&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;Kubernetes 集群中总共有三台 Master，分别是：&lt;/p&gt;
&lt;p&gt;k8s-master-2-11、k8s-master-2-12、k8s-master-2-13&lt;/p&gt;
&lt;p&gt;对其中 k8s-master-2-11 Master 节点服务器进行了内核和软件升级操作，从而先将其暂时剔出集群，然后进行升级，完成后准备重新加入到 Kubernetes 集群，通过 Kubeadm 执行，输入下面命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubeadm join mydlq.club:16443 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--token 6w0nwi.zag57qgfcdhi76vd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--discovery-token-ca-cert-hash sha256:efa49231e4ffd836ff996921741c98ac4c5655dc729d7c32aa48c608232f0f08 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--control-plane --certificate-key a64e9da7346153bd64dba1e5126a644a97fdb63c878bb73de07911d1add8e26b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在执行过程中，输出下面日志，提示 etcd 监控检查失败：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[control-plane] Creating static Pod manifest &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-controller-manager&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0329 00:01:51.364121   19209 manifests.go:214] the default kube-apiserver authorization-mode is &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;; using &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[control-plane] Creating static Pod manifest &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;kube-scheduler&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0329 00:01:51.373807   19209 manifests.go:214] the default kube-apiserver authorization-mode is &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;; using &lt;span class=&quot;string&quot;&gt;&quot;Node,RBAC&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[check-etcd] Checking that the etcd cluster is healthy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error execution phase check-etcd: etcd cluster is not healthy: failed to dial endpoint https://10.8.18.105:2379 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;with maintenance client: context deadline exceeded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To see the stack trace of this error execute with --v=5 or higher&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据关键信息 &lt;code&gt;&amp;quot;error execution phase check-etcd&amp;quot;&lt;/code&gt; 可知，可能是在执行加入 &lt;code&gt;etcd&lt;/code&gt; 时候出现的错误，导致 &lt;code&gt;master&lt;/code&gt; 无法加入原先的 &lt;code&gt;kubernetes&lt;/code&gt; 集群。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="kubeadm" scheme="http://team.jiunile.com/categories/kubernetes/kubeadm/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="etcd" scheme="http://team.jiunile.com/tags/etcd/"/>
    
      <category term="kubeadm" scheme="http://team.jiunile.com/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 1.18+ 使用ipvs后coredns无法解析域名采坑记</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-1-18-ipvs-problem.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-1-18-ipvs-problem.html</id>
    <published>2020-05-09T04:00:00.000Z</published>
    <updated>2020-09-02T03:29:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;环境现象&quot;&gt;&lt;a href=&quot;#环境现象&quot; class=&quot;headerlink&quot; title=&quot;环境现象&quot;&gt;&lt;/a&gt;环境现象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CoreDNS 版本：1.6.7&lt;br&gt;Docker 版本：18.06.3-ce&lt;br&gt;Kubernetes 版本：1.18.1&lt;br&gt;操作系统版本：CentOS 7.x&lt;br&gt;CentOS 内核版本：3.10.0-693.2.2.el7.x86_64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h2&gt;&lt;p&gt;由于最近要向组内演示 Istio 1.5，故在云服务器上安装了kubernetes 1.18.1 (使用ipvs) 来配合 Istio 1.5 的演示，kubernetes 与 istio 安装完后一切顺利，bookinfo demo跑的也非常的顺利。但在一次重启整个集群后，一切都变的不那么美好了。istio-proxy起不来了，提示pilot not ready，更可悲的是service name 无法解析了，导致很多服务之间的调用都没法正常工作，有依赖的服务都不能正常启动了，为了更好的定位问题，于是卸载 Istio 1.5，重新回到k8s 1.18.1上，在一步步排查中发现，在pod中使用pod ip相互访问是可以的，由此判断，初步怀疑很可能是 DNS 出现了问题，后来慢慢发现 kube-proxy 中的错误，再定位到 IPVS parseIP Error 错误，再到解决问题。以下是整个问题定位分析&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题定位&quot;&gt;&lt;a href=&quot;#问题定位&quot; class=&quot;headerlink&quot; title=&quot;问题定位&quot;&gt;&lt;/a&gt;问题定位&lt;/h2&gt;&lt;p&gt;为了更好的重现问题，我重新安装了一套新的 kubernetes 1.18.1，安装完后验证一切都是ok，接下来我就重启整个集群，问题就产生了，在pod中无法解析service name了，所有的pod运行都是ok的，一切都变的”很神奇”，好吧，开启定位之旅。&lt;/p&gt;
&lt;h3 id=&quot;部署DNS调试工具&quot;&gt;&lt;a href=&quot;#部署DNS调试工具&quot; class=&quot;headerlink&quot; title=&quot;部署DNS调试工具&quot;&gt;&lt;/a&gt;部署DNS调试工具&lt;/h3&gt;&lt;p&gt;为了探针是否为 DNS 问题，这里需要提前部署用于测试 DNS 问题的 dnsutils 镜像，该镜像中包含了用于测试 DNS 问题的工具包，非常利于我们分析与发现问题。&lt;/p&gt;
&lt;p&gt;部署 ndsutils.yaml&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; dnsutils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; dnsutils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; mydlqclub/dnsutils:&lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;sleep&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;3600&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h3&gt;&lt;h4 id=&quot;1-进入-DNS-工具-Pod-的命令行&quot;&gt;&lt;a href=&quot;#1-进入-DNS-工具-Pod-的命令行&quot; class=&quot;headerlink&quot; title=&quot;1. 进入 DNS 工具 Pod 的命令行&quot;&gt;&lt;/a&gt;1. 进入 DNS 工具 Pod 的命令行&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-通过-Ping-和-Nsloopup-命令测试&quot;&gt;&lt;a href=&quot;#2-通过-Ping-和-Nsloopup-命令测试&quot; class=&quot;headerlink&quot; title=&quot;2. 通过 Ping 和 Nsloopup 命令测试&quot;&gt;&lt;/a&gt;2. 通过 Ping 和 Nsloopup 命令测试&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ping 集群外部，例如这里 ping 一下百度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ping: bad address &lt;span class=&quot;string&quot;&gt;&#39;www.baidu.com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ping 集群内部 kube-apiserver 的 Service 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping kubernetes.default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ping: bad address &lt;span class=&quot;string&quot;&gt;&#39;kubernetes.default&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 nslookup 命令查询域名信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ nslookup kubernetes.default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; connection timed out; no servers could be reached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 直接 Ping 集群内部 kube-apiserver 的 IP 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping 10.96.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.96.0.1 (10.96.0.1): 56 data bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.96.0.1: seq=0 ttl=64 time=0.096 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.96.0.1: seq=1 ttl=64 time=0.050 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.96.0.1: seq=2 ttl=64 time=0.068 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出 dnsutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以观察到两次 ping 域名都不能 ping 通，且使用 nsloopup 分析域名信息时超时。然而，使用 ping kube-apiserver 的 IP 地址 “10.96.0.1” 则可以正常通信，所以，排除网络插件（flannel、calico 等）的问题。初步判断，很可能是 CoreDNS 组件的错误引起的某些问题，所以接下来我们测试 CoreDNS 是否正常。&lt;/p&gt;
&lt;h4 id=&quot;3-检测-CoreDNS-应用是否正常运行&quot;&gt;&lt;a href=&quot;#3-检测-CoreDNS-应用是否正常运行&quot; class=&quot;headerlink&quot; title=&quot;3. 检测 CoreDNS 应用是否正常运行&quot;&gt;&lt;/a&gt;3. 检测 CoreDNS 应用是否正常运行&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; k8s-app=kube-dns -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                       READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coredns-669f77d7cc-8pkpw   1/1     Running   2          6h5m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coredns-669f77d7cc-jk9wk   1/1     Running   2          6h5m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可也看到 CoreDNS 两个 Pod 均正常启动，所以再查看两个 Pod 中的日志信息，看看有无错误日志：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(kubectl get pods --namespace=kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; k8s-app=kube-dns -o name); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; kubectl logs --namespace=kube-system &lt;span class=&quot;variable&quot;&gt;$p&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 4e235fcc3696966e76816bcd9034ebc7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 4e235fcc3696966e76816bcd9034ebc7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面信息可以观察到，日志中信息也是正常启动没有问题。再接下来，查看下 CoreDNS 的入口 Service “kube-dns” 是否存在：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kube-dns 的 IP 为 10.96.0.10，集群内的 Pod 都是通过该 IP 与 DNS 组件进行交互，查询 DNS 信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get service -n kube-system | grep kube-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kube-dns                    ClusterIP   10.96.0.10      &amp;lt;none&amp;gt;        53/UDP,53/TCP,9153/TCP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面显示 Service “kube-dns” 也存在，但是 Service 是通过 endpoints 和 Pod 进行绑定的，所以看看这个 CoreDNS 的 endpoints 是否存在，及信息是否正确：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get endpoints kube-dns -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME       ENDPOINTS                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kube-dns   10.244.0.21:53,d10.244.2.82:53,10.244.0.21:9153&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 endpoints 配置也是正常的，正确的与两个 CporeDNS Pod 进行了关联。&lt;/p&gt;
&lt;p&gt;经过上面一系列检测 CoreDNS 组件确实是正常运行。接下来，观察 CoreDNS 域名解析日志，进而确定 Pod 中的域名解析请求是否能够正常进入 CoreDNS。&lt;/p&gt;
&lt;h4 id=&quot;4-观察-CoreDNS-域名解析日志信息&quot;&gt;&lt;a href=&quot;#4-观察-CoreDNS-域名解析日志信息&quot; class=&quot;headerlink&quot; title=&quot;4. 观察 CoreDNS 域名解析日志信息&quot;&gt;&lt;/a&gt;4. 观察 CoreDNS 域名解析日志信息&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;kubectl edit&lt;/code&gt; 命令来修改存储于 Kubernetes &lt;code&gt;ConfigMap&lt;/code&gt; 中的 CoreDNS 配置参数信息，添加 &lt;code&gt;log&lt;/code&gt; 参数，让 CoreDNS 日志中显示域名解析信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CoreDNS 配置参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;errors: 输出错误信息到控制台。&lt;/li&gt;
&lt;li&gt;health：CoreDNS 进行监控检测，检测地址为 &lt;a href=&quot;http://localhost:8080/health&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/health&lt;/a&gt; 如果状态为不健康则让 Pod 进行重启。&lt;/li&gt;
&lt;li&gt;ready: 全部插件已经加载完成时，将通过 endpoints 在 8081 端口返回 HTTP 状态 200。&lt;/li&gt;
&lt;li&gt;kubernetes：CoreDNS 将根据 Kubernetes 服务和 pod 的 IP 回复 DNS 查询。&lt;/li&gt;
&lt;li&gt;prometheus：是否开启 CoreDNS Metrics 信息接口，如果配置则开启，接口地址为 &lt;a href=&quot;http://localhost:9153/metrics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:9153/metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;forward：任何不在Kubernetes 集群内的域名查询将被转发到预定义的解析器 (/etc/resolv.conf)。&lt;/li&gt;
&lt;li&gt;cache：启用缓存，30 秒 TTL。&lt;/li&gt;
&lt;li&gt;loop：检测简单的转发循环，如果找到循环则停止 CoreDNS 进程。&lt;/li&gt;
&lt;li&gt;reload：监听 CoreDNS 配置，如果配置发生变化则重新加载配置。&lt;/li&gt;
&lt;li&gt;loadbalance：DNS 负载均衡器，默认 round_robin。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 编辑 coredns 配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl edit configmap coredns -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Corefile: |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;#添加log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        health &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           lameduck 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kubernetes cluster.local &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-addr.arpa ip6.arpa &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           pods insecure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           fallthrough &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-addr.arpa ip6.arpa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ttl 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prometheus :9153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forward . /etc/resolv.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loadbalance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存更改后 CoreDNS 会自动重新加载配置信息，不过可能需要等上一两分钟才能将这些更改传播到 CoreDNS Pod。等一段时间后，再次查看 CoreDNS 日志：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(kubectl get pods --namespace=kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; k8s-app=kube-dns -o name); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; kubectl logs --namespace=kube-system &lt;span class=&quot;variable&quot;&gt;$p&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:47278 - 55171 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 4940754309314083739.5160468069505858354. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.040844011s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:32896 - 49064 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 1027842207973621585.7098421666386159336. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.044098742s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 CoreDNS 已经重新加载了配置，我们再次进入 dnsuitls Pod 中执行 ping 命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入 DNSutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils sh &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行 ping 命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出 dnsutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，再次查看 CoreDNS 的日志信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(kubectl get pods --namespace=kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; k8s-app=kube-dns -o name); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; kubectl logs --namespace=kube-system &lt;span class=&quot;variable&quot;&gt;$p&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:47278 - 55171 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 4940754309314083739.5160468069505858354. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.040844011s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:32896 - 49064 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 1027842207973621585.7098421666386159336. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.044098742s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现和之前没有执行 ping 命令时候一样，没有 DNS 域名解析的日志信息，说明 Pod 执行域名解析时，请求并没有进入 CoreDNS 中。接下来在查看 Pod 中 DNS 配置信息，进而分析问题。&lt;/p&gt;
&lt;h4 id=&quot;5-查看-Pod-中的-DNS-配置信息&quot;&gt;&lt;a href=&quot;#5-查看-Pod-中的-DNS-配置信息&quot; class=&quot;headerlink&quot; title=&quot;5. 查看 Pod 中的 DNS 配置信息&quot;&gt;&lt;/a&gt;5. 查看 Pod 中的 DNS 配置信息&lt;/h4&gt;&lt;p&gt;一般 Pod 中的 &lt;code&gt;DNS&lt;/code&gt; 策略默认为 &lt;code&gt;ClusterFirst&lt;/code&gt;，该参数起到的作用是，优先从 &lt;code&gt;Kubernetes DNS&lt;/code&gt; 插件地址读取 &lt;code&gt;DNS&lt;/code&gt; 配置。所以，我们正常创建的 Pod 中，DNS 配置 DNS 服务器地址应该指定为 Kubernetes 集群的 DNS 插件 Service 提供的虚拟 IP 地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：其中 DNS 策略（dnsPolicy）支持四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default： 从 DNS 所在节点继承 DNS 配置，即该 Pod 的 DNS 配置与宿主机完全一致。&lt;/li&gt;
&lt;li&gt;ClusterFirst：预先从 Kubenetes 的 DNS 插件中进行 DNS 解析，如果解析不成功，才会使用宿主机的 DNS 进行解析。&lt;/li&gt;
&lt;li&gt;ClusterFirstWithHostNet：Pod 是用 HOST 模式启动的（hostnetwork），用 HOST 模式表示 Pod 中的所有容器，都使用宿主机的 /etc/resolv.conf 配置进行 DNS 解析，但如果使用了 HOST 模式，还继续使用 Kubernetes 的 DNS 服务，那就将 dnsPolicy 设置为 ClusterFirstWithHostNet。&lt;/li&gt;
&lt;li&gt;None：完全忽略 kubernetes 系统提供的 DNS，以 Pod Spec 中 dnsConfig 配置为主。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了再分析原因，我们接着进入 dnsutils Pod 中，查看 Pod 中 DNS 配置文件 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 配置参数是否正确：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;resolv.conf 配置参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;search： 指明域名查询顺序。&lt;/li&gt;
&lt;li&gt;nameserver： 指定 DNS 服务器的 IP 地址，可以配置多个 nameserver。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入 dnsutils Pod 内部 sh 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils sh &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 resolv.conf 配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat /etc/resolv.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search kube-system.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出 DNSutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到 Pod 内部的 resolv.conf 内容，其中 nameserver 指定 DNS 解析服务器 IP 为 “10.96.0.10” ，这个 IP 地址正是本人 Kubernetes 集群 CoreDNS 的 Service “kube-dns” 的 cluterIP，说明当 Pod 内部进行域名解析时，确实是将查询请求发送到 Service “kube-dns” 提供的虚拟 IP 进行域名解析。&lt;/p&gt;
&lt;p&gt;那么，既然 Pod 中 DNS 配置文件没问题，且 CoreDNS 也没问题，会不会是 Pod 本身域名解析不正常呢？或者 Service “kube-dns” 是否能够正常转发域名解析请求到 CoreDNS Pod 中？&lt;/p&gt;
&lt;p&gt;当然，猜想是没有用的，进行一下测试来观察问题到底出在哪里。&lt;/p&gt;
&lt;h4 id=&quot;6-进行观察来定位问题所在&quot;&gt;&lt;a href=&quot;#6-进行观察来定位问题所在&quot; class=&quot;headerlink&quot; title=&quot;6. 进行观察来定位问题所在&quot;&gt;&lt;/a&gt;6. 进行观察来定位问题所在&lt;/h4&gt;&lt;p&gt;上面怀疑是 Pod 本身解析域名有问题，不能正常解析域名。或者 Pod 没问题，但是请求域名解析时将请求发送到 Service “kube-dns” 后不能正常转发请求到 CoreDNS Pod。 为了验证这两点，我们可以修改 Pod 中的 /etc/resolv.conf 配置来进行测试验证。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;resolv.conf&lt;/code&gt; 中 &lt;code&gt;DNS&lt;/code&gt; 解析请求地址为 &lt;code&gt;阿里云 DNS&lt;/code&gt; 服务器地址，然后执行 &lt;code&gt;ping&lt;/code&gt; 命令验证是否为 &lt;code&gt;Pod&lt;/code&gt; 解析域名是否有问题：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入 dnsutils Pod 内部 sh 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils /bin/sh -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 编辑 /etc/resolv.conf 文件，修改 nameserver 参数为阿里云提供的 DNS 服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vi /etc/resolv.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 223.5.5.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#nameserver 10.96.0.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search kube-system.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改完后再进行 ping 命令测试，看看是否能够解析 www.baidu.com 网址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING www.a.shifen.com (180.101.49.11) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 180.101.49.11 (180.101.49.11): icmp_seq=1 ttl=48 time=14.0 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 180.101.49.11 (180.101.49.11): icmp_seq=2 ttl=48 time=14.0 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出 DNSutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面可也观察到 Pod 中更换 DNS 服务器地址后，域名解析正常，说明 Pod 本身域名解析是没有问题的。&lt;/p&gt;
&lt;p&gt;接下来再修改 &lt;code&gt;resolv.conf&lt;/code&gt; 中 &lt;code&gt;DNS&lt;/code&gt; 解析请求地址为 &lt;code&gt;CoreDNS Pod&lt;/code&gt; 的 &lt;code&gt;IP&lt;/code&gt; 地址，这样让 &lt;code&gt;Pod&lt;/code&gt; 直接连接 &lt;code&gt;CoreDNS Pod&lt;/code&gt; 的 &lt;code&gt;IP&lt;/code&gt;，而不通过 &lt;code&gt;Service&lt;/code&gt; 进行转发，再进行 &lt;code&gt;ping&lt;/code&gt; 命令测试，进而判断 &lt;code&gt;Service kube-dns&lt;/code&gt; 是否能够正常转发请求到 &lt;code&gt;CoreDNS Pod&lt;/code&gt; 的问题：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 CoreDNS Pod 的 IP 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system -o wide | grep coredns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coredns-669f77d7cc-rss5f     1/1     Running   0     10.244.2.155   k8s-node-2-13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coredns-669f77d7cc-rt8l6     1/1     Running   0     10.244.1.163   k8s-node-2-12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 进入 dnsutils Pod 内部 sh 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils /bin/sh -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 编辑 /etc/resolv.conf 文件，修改 nameserver 参数为阿里云提供的 DNS 服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vi /etc/resolv.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 10.244.2.155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 10.244.1.163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#nameserver 10.96.0.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search kube-system.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改完后再进行 ping 命令测试，看看是否能够解析 www.baidu.com 网址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING www.baidu.com (39.156.66.18): 56 data bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 39.156.66.18: seq=0 ttl=127 time=6.054 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 39.156.66.18: seq=1 ttl=127 time=4.678 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出 DNSutils Pod 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 观察 CoreDNS 日志信息，查看有无域名解析相关日志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; $(kubectl get pods --namespace=kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; k8s-app=kube-dns -o name); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; kubectl logs --namespace=kube-system &lt;span class=&quot;variable&quot;&gt;$p&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:47278 - 55171 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 4940754309314083739.5160468069505858354. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.040844011s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:40261 - 21083 &lt;span class=&quot;string&quot;&gt;&quot;AAAA IN www.baidu.com.kube-system.svc.cluster.local. udp 62 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 155 0.000398875s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:40261 - 20812 &lt;span class=&quot;string&quot;&gt;&quot;A IN www.baidu.com.kube-system.svc.cluster.local. udp 62 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 155 0.000505793s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:55066 - 53460 &lt;span class=&quot;string&quot;&gt;&quot;AAAA IN www.baidu.com.svc.cluster.local. udp 50 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 143 0.000215384s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:55066 - 53239 &lt;span class=&quot;string&quot;&gt;&quot;A IN www.baidu.com.svc.cluster.local. udp 50 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 143 0.000267642s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = 6434d0912b39645ed0707a3569fd69dc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CoreDNS-1.6.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linux/amd64, go1.13.6, da7f65b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/health: Going into lameduck mode &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 127.0.0.1:32896 - 49064 &lt;span class=&quot;string&quot;&gt;&quot;HINFO IN 1027842207973621585.7098421666386159336. udp 57 false 512&quot;&lt;/span&gt; NXDOMAIN qr,rd,ra 57 0.044098742s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] plugin/reload: Running configuration MD5 = a4809ab99f6713c362194263016e6fac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] Reloading complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:40261 - 21083 &lt;span class=&quot;string&quot;&gt;&quot;AAAA IN www.baidu.com.kube-system.svc.cluster.local. udp 62 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 155 0.000217299s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:40261 - 20812 &lt;span class=&quot;string&quot;&gt;&quot;A IN www.baidu.com.kube-system.svc.cluster.local. udp 62 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 155 0.000264552s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:55066 - 53460 &lt;span class=&quot;string&quot;&gt;&quot;AAAA IN www.baidu.com.svc.cluster.local. udp 50 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 143 0.000144795s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[INFO] 10.244.1.162:55066 - 53239 &lt;span class=&quot;string&quot;&gt;&quot;A IN www.baidu.com.svc.cluster.local. udp 50 false 512&quot;&lt;/span&gt; NXDOMAIN qr,aa,rd 143 0.000221163s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经过上面两个测试，已经可以得知，如果 &lt;code&gt;Pod DNS&lt;/code&gt; 配置中直接修改 &lt;code&gt;DNS&lt;/code&gt; 服务器地址为 &lt;code&gt;CoreDNS Pod&lt;/code&gt; 的 &lt;code&gt;IP&lt;/code&gt; 地址，&lt;code&gt;DNS&lt;/code&gt; 解析确实没有问题，能够正常解析。不过，正常的情况下 Pod 中 DNS 配置的服务器地址一般是 CoreDNS 的 Service 地址，不直接绑定 Pod IP（因为 Pod 每次重启 IP 都会发生变化）。 所以问题找到了，正是在 Pod 向 CoreDNS 的 Service “kube-dns” 进行域名解析请求转发时，出现了问题，一般 &lt;code&gt;Service&lt;/code&gt; 的问题都跟 &lt;code&gt;Kube-proxy&lt;/code&gt; 组件有关，接下来观察该组件是否存在问题。&lt;/p&gt;
&lt;h4 id=&quot;7-分析-Kube-Proxy-是否存在问题&quot;&gt;&lt;a href=&quot;#7-分析-Kube-Proxy-是否存在问题&quot; class=&quot;headerlink&quot; title=&quot;7. 分析 Kube-Proxy 是否存在问题&quot;&gt;&lt;/a&gt;7. 分析 Kube-Proxy 是否存在问题&lt;/h4&gt;&lt;p&gt;观察 Kube-proxy 的日志，查看是否存在问题：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 kube-proxy Pod 列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system | grep kube-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kube-proxy-6kdj2          1/1     Running   3          9h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kube-proxy-lw2q6          1/1     Running   3          9h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kube-proxy-mftlt          1/1     Running   3          9h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 选择一个 kube-proxy Pod，查看最后 5 条日志内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl logs kube-proxy-6kdj2 --tail=5  -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E0326 15:20:23.159364  1 proxier.go:1950] Failed to list IPVS destinations, error: parseIP Error ip=[10 96 0 10 0 0 0 0 0 0 0 0 0 0 0 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E0326 15:20:23.159388  1 proxier.go:1192] Failed to sync endpoint &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; service: 10.8.0.10:53/UPD, err: parseIP Error ip=[10 96 0 16 0 0 0 0 0 0 0 0 0 0 0 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E0326 15:20:23.159479  1 proxier.go:1950] Failed to list IPVS destinations, error: parseIP Error ip=[10 96 0 10 0 0 0 0 0 0 0 0 0 0 0 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E0326 15:20:23.159501  1 proxier.go:1192] Failed to sync endpoint &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; service: 10.8.0.10:53/TCP, err: parseIP Error ip=[10 96 0 16 0 0 0 0 0 0 0 0 0 0 0 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E0326 15:20:23.159595  1 proxier.go:1950] Failed to list IPVS destinations, error: parseIP Error ip=[10 96 0 10 0 0 0 0 0 0 0 0 0 0 0 0]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 kube-proxy Pod 的日志可以看到，里面有很多 Error 级别的日志信息，根据关键字 &lt;code&gt;IPVS&lt;/code&gt;、&lt;code&gt;parseIP Error&lt;/code&gt; 可知，可能是由于 IPVS 模块对 IP 进行格式化导致出现问题。&lt;/p&gt;
&lt;p&gt;因为这个问题是升级到 kubernetes 1.18 版本才出现的，所以去 Kubernetes Github 查看相关 issues，发现有人在升级 Kubernetes 版本到 1.18 后，也遇见了相同的问题，经过 issue 中 Kubernetes 维护人员讨论，分析出原因可能为新版 Kubernetes 使用的 IPVS 模块是比较新的，需要系统内核版本支持，本人使用的是 CentOS 系统，内核版本为 3.10，里面的 IPVS 模块比较老旧，缺少新版 Kubernetes IPVS 所需的依赖。&lt;/p&gt;
&lt;p&gt;根据该 issue 讨论结果，解决该问题的办法是，更新内核为新的版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：该 issues 地址为 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/89520&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes/kubernetes/issues/89520&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h2&gt;&lt;h3 id=&quot;升级系统内核版本&quot;&gt;&lt;a href=&quot;#升级系统内核版本&quot; class=&quot;headerlink&quot; title=&quot;升级系统内核版本&quot;&gt;&lt;/a&gt;升级系统内核版本&lt;/h3&gt;&lt;p&gt;升级 Kubernetes 集群各个节点的 CentOS 系统内核版本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 载入公钥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装 ELRepo 最新版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 列出可以使用的 kernel 包版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum list available --disablerepo=* --enablerepo=elrepo-kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装指定的 kernel 版本：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install -y kernel&lt;span class=&quot;_&quot;&gt;-lt&lt;/span&gt;-4.4.222-1.el7.elrepo --enablerepo=elrepo-kernel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看系统可用内核&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat /boot/grub2/grub.cfg | grep menuentry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menuentry &lt;span class=&quot;string&quot;&gt;&#39;CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)&#39;&lt;/span&gt; --class centos （略）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menuentry &lt;span class=&quot;string&quot;&gt;&#39;CentOS Linux (4.4.222-1.el7.elrepo.x86_64) 7 (Core)&#39;&lt;/span&gt; --class centos ...（略）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置开机从新内核启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ grub2-set-default &lt;span class=&quot;string&quot;&gt;&quot;CentOS Linux (4.4.222-1.el7.elrepo.x86_64) 7 (Core)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看内核启动项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ grub2-editenv list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;saved_entry=CentOS Linux (4.4.222-1.el7.elrepo.x86_64) 7 (Core)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重启系统使内核生效，启动完成查看内核版本是否更新：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ uname -r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.4.222-1.el7.elrepo.x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试-Pod-中-DNS-是否能够正常解析&quot;&gt;&lt;a href=&quot;#测试-Pod-中-DNS-是否能够正常解析&quot; class=&quot;headerlink&quot; title=&quot;测试 Pod 中 DNS 是否能够正常解析&quot;&gt;&lt;/a&gt;测试 Pod 中 DNS 是否能够正常解析&lt;/h3&gt;&lt;p&gt;进入 Pod 内部使用 ping 命令测试 DNS 是否能正常解析：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入 dnsutils Pod 内部 sh 命令行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it dnsutils /bin/sh -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ping 集群外部，例如这里 ping 一下百度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 39.156.66.14 (39.156.66.14): icmp_seq=1 ttl=127 time=7.20 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 39.156.66.14 (39.156.66.14): icmp_seq=2 ttl=127 time=6.60 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 39.156.66.14 (39.156.66.14): icmp_seq=3 ttl=127 time=6.38 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Ping 集群内部 kube-api 的 Service 地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ping kubernetes.default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from kubernetes.default.svc.cluster.local (10.96.0.1): icmp_seq=1 ttl=64 time=0.051 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from kubernetes.default.svc.cluster.local (10.96.0.1): icmp_seq=2 ttl=64 time=0.051 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from kubernetes.default.svc.cluster.local (10.96.0.1): icmp_seq=3 ttl=64 time=0.064 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 Pod 中的域名解析已经恢复正常。&lt;/p&gt;
&lt;p&gt;参考: mydlq.club&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境现象&quot;&gt;&lt;a href=&quot;#环境现象&quot; class=&quot;headerlink&quot; title=&quot;环境现象&quot;&gt;&lt;/a&gt;环境现象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CoreDNS 版本：1.6.7&lt;br&gt;Docker 版本：18.06.3-ce&lt;br&gt;Kubernetes 版本：1.18.1&lt;br&gt;操作系统版本：CentOS 7.x&lt;br&gt;CentOS 内核版本：3.10.0-693.2.2.el7.x86_64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h2&gt;&lt;p&gt;由于最近要向组内演示 Istio 1.5，故在云服务器上安装了kubernetes 1.18.1 (使用ipvs) 来配合 Istio 1.5 的演示，kubernetes 与 istio 安装完后一切顺利，bookinfo demo跑的也非常的顺利。但在一次重启整个集群后，一切都变的不那么美好了。istio-proxy起不来了，提示pilot not ready，更可悲的是service name 无法解析了，导致很多服务之间的调用都没法正常工作，有依赖的服务都不能正常启动了，为了更好的定位问题，于是卸载 Istio 1.5，重新回到k8s 1.18.1上，在一步步排查中发现，在pod中使用pod ip相互访问是可以的，由此判断，初步怀疑很可能是 DNS 出现了问题，后来慢慢发现 kube-proxy 中的错误，再定位到 IPVS parseIP Error 错误，再到解决问题。以下是整个问题定位分析&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/categories/kubernetes/coredns/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/categories/kubernetes/coredns/ipvs/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/tags/coredns/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/tags/ipvs/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 在 aws 上的应用</title>
    <link href="http://team.jiunile.com//blog/2020/01/k8s-k8s-in-aws-arch.html"/>
    <id>http://team.jiunile.com//blog/2020/01/k8s-k8s-in-aws-arch.html</id>
    <published>2020-01-08T13:00:00.000Z</published>
    <updated>2020-09-02T02:03:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;kubernetes-in-aws-Overview（EKS）&quot;&gt;&lt;a href=&quot;#kubernetes-in-aws-Overview（EKS）&quot; class=&quot;headerlink&quot; title=&quot;kubernetes in aws Overview（EKS）&quot;&gt;&lt;/a&gt;kubernetes in aws Overview（EKS）&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/aws_eks_arch.png&quot; alt=&quot;eks_in_aws&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;上图是 kubernetes(EKS) 在 aws 上的整体情况，下面我会对每块进行展开说明&lt;/p&gt;
&lt;h2 id=&quot;分解说明&quot;&gt;&lt;a href=&quot;#分解说明&quot; class=&quot;headerlink&quot; title=&quot;分解说明&quot;&gt;&lt;/a&gt;分解说明&lt;/h2&gt;&lt;h3 id=&quot;kubernetes-or-eks&quot;&gt;&lt;a href=&quot;#kubernetes-or-eks&quot; class=&quot;headerlink&quot; title=&quot;kubernetes or eks&quot;&gt;&lt;/a&gt;kubernetes or eks&lt;/h3&gt;&lt;p&gt;kubernetes 原生支持在 aws 上使用，具体如何启用可参考&lt;a href=&quot;http://team.jiunile.com/blog/2019/03/k8s-cloud.html&quot;&gt;kuberenetes 云应用实践&lt;/a&gt;，这里不在累赘说明。既然选择在云上使用 k8s ，那就直接使用云本身提供的能力（&lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt;），就没必要自己再去适配一遍，毕竟云厂商已经提供了这样的服务，为什么不去使用呢？不过自己也可以去了解EKS为我们做了什么？怎么去管理它？&lt;/p&gt;
&lt;h4 id=&quot;EKS&quot;&gt;&lt;a href=&quot;#EKS&quot; class=&quot;headerlink&quot; title=&quot;EKS&quot;&gt;&lt;/a&gt;EKS&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt; 其实就是帮我们托管了master节点（3 master集群），其次更好的与aws资源进行了集成，帮助我们在上层更轻松的使用，&lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt; 默认会集成以下组件:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-proxy&lt;/li&gt;
&lt;li&gt;coredns&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aws/amazon-vpc-cni-k8s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;amazon-k8s-cni&lt;/a&gt; (网络插件-替代calico，下面会介绍为何使用它)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt; 后，我们就不需要在关注 k8s master 的安装以及高可用，以及怎么在云上（aws）的集成，同时在开源的 kubernetes 上做了优化。当然，你可以可以选择自建，毕竟这些你都可以搭建出来，我们在 aws 中国就是自建的，毕竟 &lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt; 在国内还未上线，但如果是在国外或者国内上线的前提下需衡量付出的时间成本是否合算？&lt;/p&gt;
&lt;h4 id=&quot;如何管理&quot;&gt;&lt;a href=&quot;#如何管理&quot; class=&quot;headerlink&quot; title=&quot;如何管理&quot;&gt;&lt;/a&gt;如何管理&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.terraform.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;terrafrom&lt;/a&gt; or &lt;a href=&quot;https://eksctl.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eksctl&lt;/a&gt;，最终我选择了后者，理由也很简单，在我看来一个就好比是”学生”，另一个则是”亲儿子”，&lt;a href=&quot;https://eksctl.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eksctl&lt;/a&gt; 由 aws 官方提供专门为 &lt;a href=&quot;https://eksworkshop.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EKS&lt;/a&gt; 提供的命令行工具，它提供了更多的参数同时管理起来也非常的方便，如果你是深度管理，则使用它，&lt;a href=&quot;https://www.terraform.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;terrafrom&lt;/a&gt; 则是大众普照中的一个，提供的参数也是有限，如果简单管理可以使用它。&lt;/p&gt;
&lt;h3 id=&quot;负载均衡器ELB&quot;&gt;&lt;a href=&quot;#负载均衡器ELB&quot; class=&quot;headerlink&quot; title=&quot;负载均衡器ELB&quot;&gt;&lt;/a&gt;负载均衡器ELB&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;aws 官方提供了三种负载均衡器，我简单成为 &lt;code&gt;clb&lt;/code&gt;、&lt;code&gt;alb&lt;/code&gt;、&lt;code&gt;nlb&lt;/code&gt;，&lt;code&gt;clb&lt;/code&gt; 即将淘汰也是最早的一代，这里主要阐述 &lt;code&gt;alb&lt;/code&gt; 7层负载  与 &lt;code&gt;nlb&lt;/code&gt; 4层负载 ，该如何选择，则取决于你的业务，他们之间的特征也很明显，如果你是需要关注 &lt;code&gt;header&lt;/code&gt; 头信息的，如 &lt;code&gt;x-forward-for&lt;/code&gt; 或 &lt;code&gt;x-forward-proto&lt;/code&gt; 等信息的则使用 &lt;code&gt;alb&lt;/code&gt;，如果不需要则使用 &lt;code&gt;nlb&lt;/code&gt; 性能高。具体想了解，可参考aws官方文档：&lt;a href=&quot;https://aws.amazon.com/cn/elasticloadbalancing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://aws.amazon.com/cn/elasticloadbalancing/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;管理&quot;&gt;&lt;a href=&quot;#管理&quot; class=&quot;headerlink&quot; title=&quot;管理&quot;&gt;&lt;/a&gt;管理&lt;/h4&gt;&lt;p&gt;同样我们也面临着管理的问题，是使用 &lt;a href=&quot;https://www.terraform.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;terrafrom&lt;/a&gt; 还是别的呢？毕竟我们使用了 k8s ，它有很好的 &lt;code&gt;ingress&lt;/code&gt; 帮我们管理着对外的访问不是么？最终，我选择了 &lt;a href=&quot;https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alb-ingress-controller&lt;/a&gt;，同样也是 aws 出品，它很好的与 ELB 进行了集成，我们只需要编写 &lt;code&gt;ingress&lt;/code&gt; 文件，加上对应的注解，就可以很方便的使用 ELB，目前支持 &lt;code&gt;alb&lt;/code&gt; 与 &lt;code&gt;nlb&lt;/code&gt; 这两个负载均衡器的使用。&lt;/p&gt;
&lt;p&gt;对 &lt;a href=&quot;https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alb-ingress-controller&lt;/a&gt; 的使用也有一定的注意，推荐是一个对外暴露服务一个 &lt;code&gt;ingress&lt;/code&gt;, &lt;strong&gt;同时注意不要人为去 aws consol 界面去修改已有通过 &lt;a href=&quot;https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alb-ingress-controller&lt;/a&gt;  创建出来的负载均衡器，如果你修改了，你会发现过一会就会还原了&lt;/strong&gt;，因为在 k8s 中的 alb 控制器会帮你复原，所以一切的变更请使用 &lt;code&gt;ingress&lt;/code&gt;, 同时还有一个不好的弊端就是在 alb/nlb 目标群组中，后端协议只能二选一，无法 http/https 同时存在，唯一的方法是使用两个 &lt;code&gt;ingress&lt;/code&gt; ，不过我们大多数后端访问都是 http 协议。&lt;/p&gt;
&lt;p&gt;详细了解可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/aws-alb-ingress-controller/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes-sigs/aws-alb-ingress-controller/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kubernetes-sigs.github.io/aws-alb-ingress-controller/guide/controller/config/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/alb-ingress.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/alb-ingress.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/china/kubernetes-ingress-aws-alb-ingress-controller/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://aws.amazon.com/cn/blogs/china/kubernetes-ingress-aws-alb-ingress-controller/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;网络插件&quot;&gt;&lt;a href=&quot;#网络插件&quot; class=&quot;headerlink&quot; title=&quot;网络插件&quot;&gt;&lt;/a&gt;网络插件&lt;/h3&gt;&lt;p&gt;同样，在网络插件上，我也面临着选择的问题，不过现在回想起来，居然选择了云，那就基本大概率上去拥抱云原生提供的插件，不是么，毕竟它和云结合的很好，这里我介绍下 &lt;a href=&quot;https://github.com/aws/amazon-vpc-cni-k8s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;amazon-k8s-cni&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aws/amazon-vpc-cni-k8s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;amazon-k8s-cni&lt;/a&gt; 我就说一件事，&lt;strong&gt;pod 与你现有的 vpc 打通&lt;/strong&gt;，但劣势也很明显，&lt;code&gt;就是 pod 的 ip 会占有你划分的 vpc ip池&lt;/code&gt;，如果你的 &lt;code&gt;subnet&lt;/code&gt; 网段规划的不好的话，你的 ip 将会很快用光，所有我建议你的 &lt;code&gt;vpc&lt;/code&gt; 网段是 &lt;code&gt;16&lt;/code&gt; 位，&lt;code&gt;subnet&lt;/code&gt; 网段是 &lt;code&gt;20&lt;/code&gt; 位的，具体不同的网段可以放多少个 pod 可以参考这边文章了解下：&lt;a href=&quot;https://www.yiibai.com/ipv4/ipv4_subnetting.html，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.yiibai.com/ipv4/ipv4_subnetting.html，&lt;/a&gt; 这里也不在累赘。 &lt;/p&gt;
&lt;p&gt;同时 &lt;a href=&quot;https://github.com/aws/amazon-vpc-cni-k8s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;amazon-k8s-cni&lt;/a&gt; 对主机类型上能起多少 pod 也是有限制的，不同的机型上启动的 pod 数量是不一样的，这里我推荐尽可能的使用中等规模的机型来取缔多个小机型。具体可参考：&lt;a href=&quot;https://github.com/aws/amazon-vpc-cni-k8s/blob/f7a7d53baf769846c20467cfa27f0172eca570c1/pkg/awsutils/vpc_ip_resource_limit.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vpc_ip_resource_limit&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;当然如果你是本地机房或者云未给提供网络插件的话，那我还是推荐你使用 &lt;a href=&quot;https://www.projectcalico.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;calico&lt;/a&gt;，毕竟它还是非常的强大！有兴趣的伙伴还是可以好好了解下。&lt;/p&gt;
&lt;h3 id=&quot;访问安全&quot;&gt;&lt;a href=&quot;#访问安全&quot; class=&quot;headerlink&quot; title=&quot;访问安全&quot;&gt;&lt;/a&gt;访问安全&lt;/h3&gt;&lt;p&gt;容器访问安全也是令我非常困扰的一个问题，aws 在资源访问方面有着非常好的权限控制 &lt;code&gt;iam role&lt;/code&gt; ，但放到 k8s 容器中，一切都变的非常不美好了， 直到最近 aws eks 推出了 &lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/iam-roles-for-service-accounts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;service account for iam role&lt;/a&gt;， 在 eks 没正式推出 &lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/iam-roles-for-service-accounts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;service account for iam role&lt;/a&gt; 之前，有两种方式可以进行访问控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;access key/secret key&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jtblin/kube2iam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kube2iam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;针对以上两个访问，都有一定的缺陷，用key来控制的问题在于本身管理key就是一件头痛的事情，key的泄漏和定期更换非常痛苦，使用 &lt;a href=&quot;https://github.com/jtblin/kube2iam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kube2iam&lt;/a&gt; 问题在于你需要保证这个插件的稳定性和性能，一旦出现问题，你会发现那就是灾难性的，而且也不易排查，毕竟多层组件就多提升了出问题的概率，毕竟还是如此重要的组件。&lt;/p&gt;
&lt;p&gt;最后，我隆重推荐大家使用 &lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/iam-roles-for-service-accounts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;service account for iam role&lt;/a&gt; ，具体教程可点击链接查看。 但对于自建的小伙们只能退而求其次 使用 key 或者 &lt;a href=&quot;https://github.com/jtblin/kube2iam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kube2iam&lt;/a&gt; 来进行管理控制了&lt;/p&gt;
&lt;h3 id=&quot;Why-kong&quot;&gt;&lt;a href=&quot;#Why-kong&quot; class=&quot;headerlink&quot; title=&quot;Why kong?&quot;&gt;&lt;/a&gt;Why kong?&lt;/h3&gt;&lt;p&gt;为什么选型 &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; ，我想它的官方文档能更好的为你阐述，我从0.9开始就使用它了，直到现在维持在0.14.1，往后引入了 &lt;code&gt;service mesh&lt;/code&gt; 的概念，选型 &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; 的理由也很简单，开源、插件丰富、易于二次开发。后面可以专门分享一下我们是如何使用  &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; 作为我们的业务网关，同时我们是如何改造 &lt;code&gt;JWT&lt;/code&gt; 插件来实现鉴授权，以及通过网关审计日志定位问题，对外核心服务进行了限流等控制。如果你的需求也是如此，让业务保持足够简单专注于业务的实现，跨语言，微服务化，但同时需要一些服务治理相关的需求，还没有上 k8s 或者还没到 &lt;a href=&quot;https://istio.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;isito&lt;/a&gt; 这种重 &lt;code&gt;service mesh&lt;/code&gt; 的地步，那  &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; 就是你最好的选择。&lt;/p&gt;
&lt;h3 id=&quot;资源池划分&quot;&gt;&lt;a href=&quot;#资源池划分&quot; class=&quot;headerlink&quot; title=&quot;资源池划分&quot;&gt;&lt;/a&gt;资源池划分&lt;/h3&gt;&lt;p&gt;在资源池划分上，我将网关和业务的池子单独分开，同时开辟了一块竞价池，原因如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网关池划分： 网关作为业务对外流量的统一入口，提现出非常重要的地步，故而单独分配了一块资源池，同时需要与负载均衡器的配置，对机器权限的控制力度也是和普通业务池是不同的。&lt;/li&gt;
&lt;li&gt;业务池划分：这个就什么好说的，用于承载你的业务，跑长期运行的服务。&lt;/li&gt;
&lt;li&gt;竞价池划分： 这里需要配合 &lt;a href=&quot;https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cluster autoscaler&lt;/a&gt; 一起使用更佳，用于跑一些离线任务，随用随起，用完即毁，方便至极。当然如何你使用的是 EKS 直接可以配合 &lt;a href=&quot;https://aws.amazon.com/cn/fargate/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fargate&lt;/a&gt; 来直接使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Cluster Autoscaler：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/cluster-autoscaler.html#ca-ng-considerations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/cluster-autoscaler.html#ca-ng-considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;未来展望&quot;&gt;&lt;a href=&quot;#未来展望&quot; class=&quot;headerlink&quot; title=&quot;未来展望&quot;&gt;&lt;/a&gt;未来展望&lt;/h3&gt;&lt;p&gt;目前，我们通过 &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; 来实现了对外流量的管理与控制，但对内部服务之间的访问控制还未开始，也缺乏一些服务治理的手段，当然，使用 &lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kong&lt;/a&gt; 也可以达到，但这样我们就会过渡依赖这个集中网关了，一旦故障，那是灾难性的，&lt;code&gt;service mesh&lt;/code&gt; 的到来正式解决此类问题，让服务治理变的更游刃有余，后面我们会上 &lt;a href=&quot;https://istio.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;isito&lt;/a&gt; 来实现诸如灰度、蓝绿发布以及对内部服务调用限流、监控等控制能力的加强。&lt;/p&gt;
&lt;h2 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.aws.amazon.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getkong.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://getkong.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eksctl.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://eksctl.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eksworkshop.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://eksworkshop.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kubernetes-in-aws-Overview（EKS）&quot;&gt;&lt;a href=&quot;#kubernetes-in-aws-Overview（EKS）&quot; class=&quot;headerlink&quot; title=&quot;kubernetes in aws Overview（EKS）&quot;&gt;&lt;/a&gt;kubernetes in aws Overview（EKS）&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/k8s/aws_eks_arch.png&quot; alt=&quot;eks_in_aws&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="cloud" scheme="http://team.jiunile.com/categories/kubernetes/cloud/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="aws" scheme="http://team.jiunile.com/tags/aws/"/>
    
      <category term="eks" scheme="http://team.jiunile.com/tags/eks/"/>
    
  </entry>
  
  <entry>
    <title>分析并解决AWS服务从ec2迁移至Kubernetes后延迟增加的问题</title>
    <link href="http://team.jiunile.com//blog/2020/01/k8s-k8s-in-aws-latency.html"/>
    <id>http://team.jiunile.com//blog/2020/01/k8s-k8s-in-aws-latency.html</id>
    <published>2020-01-06T13:00:00.000Z</published>
    <updated>2020-01-07T07:30:48.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题概要&quot;&gt;&lt;a href=&quot;#问题概要&quot; class=&quot;headerlink&quot; title=&quot;问题概要&quot;&gt;&lt;/a&gt;问题概要&lt;/h2&gt;&lt;p&gt;上周我们将一个微服务迁移到中央平台上，包括CI/CD，Kubernetes运行时，metric和其他一些程序。这次实验是为了之后一个月里大概150个微服务的迁移作准备，所有这些服务支撑着西班牙在线市场的运营。&lt;/p&gt;
&lt;p&gt;当我们将应用程序部署到Kubernetes上，并且将一些生产流量导入其中之后，事情开始有些不妙了。Kubernetes上的请求延迟比EC2上的高10倍左右。除非我们能找到解决方案，不然这会是微服务迁移的最大障碍，甚至可能彻底摧毁整个项目。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么Kubernetes上的延时比EC2高那么多？&quot;&gt;&lt;a href=&quot;#为什么Kubernetes上的延时比EC2高那么多？&quot; class=&quot;headerlink&quot; title=&quot;为什么Kubernetes上的延时比EC2高那么多？&quot;&gt;&lt;/a&gt;为什么Kubernetes上的延时比EC2高那么多？&lt;/h2&gt;&lt;p&gt;为了找到系统瓶颈，我们收集了整个请求路径的metric。架构很简单，一个API网关（Zuul）将请求路由到EC2或者Kubernetes的微服务里。在Kubernetes上，我们使用NGINX Ingress控制器，后台是常规的Deployment运行一个基于Spring的JVM应用程序。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                                  EC2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            +---------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            |  +---------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            |  |         |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       +-------&amp;gt; BACKEND |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |    |  |         |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |    |  +---------+  |                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |    +---------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             +------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Public       |      |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      -------&amp;gt; ZUUL +--+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;traffic      |      |  |              Kubernetes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             +------+  |    +-----------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |    |  +-------+      +---------+ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |    |  |       |  xx  |         | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       +-------&amp;gt; NGINX +------&amp;gt; BACKEND | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            |  |       |  xx  |         | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            |  +-------+      +---------+ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            +-----------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题看上去是后台的上游延迟（上图用xx表示）。当应用程序部署在EC2上时，响应时间大概20ms。在Kubernetes上则需要100～200ms。&lt;/p&gt;
&lt;p&gt;我们很快排除了运行时变更的影响。JVM版本是一致的。容器化的影响也被排除了，因为EC2上也是运行在容器里。也和压力无关，因为即使每秒只有1个请求仍然能看到很高的延时。也不是GC的影响。&lt;/p&gt;
&lt;p&gt;一个Kubernetes管理员问应用程序是否有外部的依赖，比如以前DNS解析曾经导致过类似的问题，这是目前为止最可能的猜想。&lt;/p&gt;
&lt;h2 id=&quot;猜想1：DNS解析&quot;&gt;&lt;a href=&quot;#猜想1：DNS解析&quot; class=&quot;headerlink&quot; title=&quot;猜想1：DNS解析&quot;&gt;&lt;/a&gt;猜想1：DNS解析&lt;/h2&gt;&lt;p&gt;每次请求里，我们的应用程序会向AWS ElasticSearch实例（域名类似 elastic.spain.adevinta.com）发送1～3次请求。我们在容器内放置了一个shell脚本可以验证这个域名从DNS解析需要多长时间。&lt;/p&gt;
&lt;p&gt;容器内的DNS查询：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@be-851c76f696-alf8z /]&lt;span class=&quot;comment&quot;&gt;# while true; do dig &quot;elastic.spain.adevinta.com&quot; | grep time; sleep 2; done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 22 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 22 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 29 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 21 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 28 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 43 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 43 msec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行着对应相同用程序的EC2实例里的同样的查询：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash-4.4&lt;span class=&quot;comment&quot;&gt;# while true; do dig &quot;elastic.spain.adevinta.com&quot; | grep time; sleep 2; done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 77 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 0 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 0 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 0 msec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;; Query time: 0 msec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大概30ms的解析时间，似乎我们的应用程序在和ElasticSearch通信时增加了DNS解析的额外消耗。&lt;/p&gt;
&lt;p&gt;但是这里有两点很奇怪：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Kubernetes里已经有很多应用程序和AWS资源通信，但是并没有这个问题。&lt;/li&gt;
&lt;li&gt;我们知道JVM实现了内存内的DNS缓存。查看这些镜像的配置，在 $JAVA_HOME/jre/lib/security/java.security里配置了TTL为 networkaddress.cache.ttl=10。JVM应该能够缓存10秒内的所有DNS查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了确认是DNS的影响，我们决定避免DNS解析并且查看问题是否会消失。首先尝试让应用程序直接和Elasticsearch的IP通信，而不是域名。这要求代码变更并且重新部署，因此我们只是简单地在 /etc/hosts文件里添加了域名和IP的映射：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;34.55.5.111 elastic.spain.adevinta.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样容器可以立刻解析IP。我们确实观察到了延时的改善，但是离我们的最终目标还是很远。即使DNS解析足够快，但是真实原因还是没有找到。&lt;/p&gt;
&lt;h2 id=&quot;网络plumbing&quot;&gt;&lt;a href=&quot;#网络plumbing&quot; class=&quot;headerlink&quot; title=&quot;网络plumbing&quot;&gt;&lt;/a&gt;网络plumbing&lt;/h2&gt;&lt;p&gt;我们决定在容器里执行 tcpdump，这样可以看到网络到底干了些什么。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@be-851c76f696-alf8z /]&lt;span class=&quot;comment&quot;&gt;# tcpdump -leni any -w capture.pcap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后发送了一些请求并且下载了capture文件（ &lt;code&gt;kubectl cpmy-service:/capture.pcap capture.pcap&lt;/code&gt;）在&lt;a href=&quot;https://wiki.wireshark.org/FrontPage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wireshark&lt;/a&gt;里查看。&lt;/p&gt;
&lt;p&gt;DNS查询看上去很正常（除了一些细节，之后会提到）但是我们的服务处理请求的时候很奇怪。下图是capture的截图，显示一个请求从开始到响应的全过程。&lt;br&gt;&lt;img src=&quot;/images/wireshark.jpg&quot; alt=&quot;Wireshark&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一列是packet序号。我用不同的颜色标示不同的TCP流。&lt;/p&gt;
&lt;p&gt;绿色的流从&lt;code&gt;packet 328&lt;/code&gt;开始，显示客户端（172.17.22.150）开启了容器（172.17.36.147）的TCP连接。最初的握手（328-330）之后，&lt;code&gt;packet 331&lt;/code&gt;开始 &lt;code&gt;HTTP GET/v1/..&lt;/code&gt;，这是对我们自己服务的入站请求。整个流程花了&lt;strong&gt;1ms&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;灰色流从&lt;code&gt;packet 339&lt;/code&gt;开始，展示了我们的服务发送一个HTTP请求给Elasticsearch实例（这里看不到TCP握手过程因为它使用了一个已有的TCP连接）。这里花了&lt;strong&gt;18ms&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至此都没有什么问题，所花的时间和预计差不多（&lt;strong&gt;～20-30ms&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;但是在这两次交互之间，紫色部分花了&lt;strong&gt;86ms&lt;/strong&gt;。这里发生了什么？在&lt;code&gt;packet 333&lt;/code&gt;， 我们的服务发送了HTTP GET到 &lt;code&gt;/latest/meta-data/iam/security-credentials&lt;/code&gt;，之后，在同一个TCP连接里，另一个GET发送到 &lt;code&gt;/latest/meta-data/iam/security-credentials/arn:..&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们发现每次请求里都会这样做。DNS解析在容器里确实有一点慢（解释很有意思，我会在另一篇文章里介绍）。但是高延迟的实际原因是每次请求里对&lt;code&gt;AWS Instance Metadata&lt;/code&gt;的查询。&lt;/p&gt;
&lt;h2 id=&quot;猜想2：AWS调用&quot;&gt;&lt;a href=&quot;#猜想2：AWS调用&quot; class=&quot;headerlink&quot; title=&quot;猜想2：AWS调用&quot;&gt;&lt;/a&gt;猜想2：AWS调用&lt;/h2&gt;&lt;p&gt;这两个endpoint都是&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#instance-metadata-security-credentials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;AWS Instance Metadata API&lt;/code&gt;&lt;/a&gt;的一部分。我们的微服务从Elasticsearch里读取时会用到这个服务。这两个调用都是基础的授权工作流。&lt;/p&gt;
&lt;p&gt;第一个请求里查询的endpoint得到和该实例相关联的IAM角色。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# curl http://169.254.169.254/latest/meta-data/iam/security-credentials/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arn:aws:iam::&amp;lt;account_id&amp;gt;:role/some_role&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二个请求查询第二个endpoint得到该实例的临时credential。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# curl http://169.254.169.254/latest/meta-data/iam/security-credentials/arn:aws:iam::&amp;lt;account_id&amp;gt;:role/some_role&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;Code&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Success&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;LastUpdated&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2012-04-26T16:39:16Z&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;Type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;AWS-HMAC&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;AccessKeyId&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ASIAIOSFODNN7EXAMPLE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;SecretAccessKey&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Token&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;token&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Expiration&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;2017-05-17T15:09:54Z&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;客户端可以在短时间内使用它们，并且需要周期性地（在 Expiration之前）去获取新的credencial。模型很简单：AWS为了安全考虑经常轮询临时密钥，但是客户端可以将密钥缓存几分钟来弥补获得新credencial所带来的性能影响。&lt;/p&gt;
&lt;p&gt;AWS Java SDK应该处理这些，但是，因为某种原因，它没有这么做。&lt;/p&gt;
&lt;p&gt;在GitHub issue里搜索后找到了&lt;a href=&quot;https://github.com/aws/aws-sdk-java/issues/1921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#1921&lt;/a&gt;，里面有我们需要的线索。&lt;/p&gt;
&lt;p&gt;AWS SDK在下面两种情况的某一种满足时就会刷新credential：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expiration在 EXPIRATION_THRESHOLD内，硬编码为15分钟。&lt;/li&gt;
&lt;li&gt;前一次刷新credential的尝试所花时间大于 REFRESH_THRESHOLD，硬编码为60分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要查看得到的证书里的实际过期时间，因此运行了两个 cURL命令调用AWS API，一次从容器里，一次从EC2实例里。从容器里获得的证书过期时间短得多，是15分钟。&lt;/p&gt;
&lt;p&gt;问题变得清晰了：我们的服务在第一个请求里会获取临时credential。因为它有15分钟的过期时间，在下一次请求里，AWS SDK会重新刷新credential。每次请求都会这样。&lt;/p&gt;
&lt;h2 id=&quot;为什么credential过期时间变短了？&quot;&gt;&lt;a href=&quot;#为什么credential过期时间变短了？&quot; class=&quot;headerlink&quot; title=&quot;为什么credential过期时间变短了？&quot;&gt;&lt;/a&gt;为什么credential过期时间变短了？&lt;/h2&gt;&lt;p&gt;AWS Intance Metadata Service设计上是在EC2实例里使用，而不是Kubernetes上。我们希望应用程序保留相同的接口。因此使用了&lt;a href=&quot;https://github.com/uswitch/kiam&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kiam&lt;/a&gt;，在每个Kubernetes节点上运行一个agent，允许用户（部署应用程序到集群里的工程师）将IAM角色关联到Pod容器上，就像它是个EC2实例一样。它会截获发送到AWS Instance Metadata服务的调用，并且使用agent提前从AWS获取并放在缓存里的内容响应。从应用程序的角度来看，和运行在EC2上没什么区别。&lt;/p&gt;
&lt;p&gt;Kiam给Pod提供的正是短期的credencial，这有道理，因为它假定Pod的平均生命周期比EC2实例要短。默认值就是15分钟。&lt;/p&gt;
&lt;p&gt;但是如果两处都使用默认值就有问题了。提供给应用程序的证书过期时间为15分钟。AWS Java SDK会强制刷新任何过期时间少于15分钟的证书。&lt;/p&gt;
&lt;p&gt;结果就是每个请求都会强制刷新临时证书，这需要两次调用AWS API，给每次请求都带来了巨大的延迟。之后我们找到了&lt;a href=&quot;https://github.com/aws/aws-sdk-java/issues/1893&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AWS Java SDK的一个功能请求&lt;/a&gt;，里面提到了同样的问题。&lt;/p&gt;
&lt;p&gt;解决办法很简单，我们重新配置了Kiam，请求更长过期时间的credencial。当这一变更生效后，请求就不用每次都调用AWS Metadata服务了，而且延迟比EC2还要小。&lt;/p&gt;
&lt;h2 id=&quot;收获&quot;&gt;&lt;a href=&quot;#收获&quot; class=&quot;headerlink&quot; title=&quot;收获&quot;&gt;&lt;/a&gt;收获&lt;/h2&gt;&lt;p&gt;从我们迁移的经验里，最经常遇到的问题不是Kubernetes的bug或者平台的问题。也不是微服务本身的问题。问题通常只是因为集成。我们将以前从来没有一起集成过的复杂系统混合在一起，并且期望它们组成单个的大系统。可移动组件越多，可能发生问题的地方就越多。&lt;/p&gt;
&lt;p&gt;在这个问题里，高延迟并不是因为bug或者Kubernetes、Kiam、AWS Java SDK或我们自己微服务本身有什么问题。它是Kiam和AWS Java SDK里两个独立的默认值组合在一起导致的问题。独立来看，两个默认值都没什么问题：AWS Java SDK强制credential刷新策略和Kiam比较低的默认过期时间。但是组合起来就导致了问题。&lt;strong&gt;两个单独看都是正确的决定合在一起并不一定是正确的&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用的是aws的eks，现在可以不用使用kiam这个插件来实现role访问aws服务，aws eks 实现了service accounts 与 role 绑定，具体参考：&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/iam-roles-for-service-accounts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/iam-roles-for-service-accounts.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：kubernetes-added-a-0-to-my-latency&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题概要&quot;&gt;&lt;a href=&quot;#问题概要&quot; class=&quot;headerlink&quot; title=&quot;问题概要&quot;&gt;&lt;/a&gt;问题概要&lt;/h2&gt;&lt;p&gt;上周我们将一个微服务迁移到中央平台上，包括CI/CD，Kubernetes运行时，metric和其他一些程序。这次实验是为了之后一个月里大概150个微服务的迁移作准备，所有这些服务支撑着西班牙在线市场的运营。&lt;/p&gt;
&lt;p&gt;当我们将应用程序部署到Kubernetes上，并且将一些生产流量导入其中之后，事情开始有些不妙了。Kubernetes上的请求延迟比EC2上的高10倍左右。除非我们能找到解决方案，不然这会是微服务迁移的最大障碍，甚至可能彻底摧毁整个项目。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="迁移" scheme="http://team.jiunile.com/tags/%E8%BF%81%E7%A7%BB/"/>
    
      <category term="延迟" scheme="http://team.jiunile.com/tags/%E5%BB%B6%E8%BF%9F/"/>
    
  </entry>
  
  <entry>
    <title>LPR是什么，央行给有放贷的人带来什么新年礼物</title>
    <link href="http://team.jiunile.com//blog/2020/01/lpr.html"/>
    <id>http://team.jiunile.com//blog/2020/01/lpr.html</id>
    <published>2020-01-06T12:00:00.000Z</published>
    <updated>2020-01-06T02:29:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;part-1&quot;&gt;&lt;a href=&quot;#part-1&quot; class=&quot;headerlink&quot; title=&quot;part 1&quot;&gt;&lt;/a&gt;part 1&lt;/h2&gt;&lt;p&gt;&lt;code&gt;每一个背负了房贷的人，绝对想不到，进入2020年头的时候，央行会送来一份大礼。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2019年12月28日，中国人民银行（央行）发布年内第30号公告。公告中的文字非常专业、晦涩，不是金融专业出身的人，会觉得云里雾里，也体会不到这则公告的史诗级作用。&lt;/p&gt;
&lt;p&gt;第一：&lt;strong&gt;从2020年1月1日开始，商业银行不得和买房人，签订参考贷款基准利率的浮动利率贷款合同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二：&lt;strong&gt;从2020年3月1日开始，商业银行必须和存量房贷的借款人，废除原有房贷合同，让借款人重新二选一，要么：固定利率；要么：「LPR利率+基点加成」模式。&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;也就是说，从今年的3月1日开始至8月份的5个月时间里，当初和买房人签订了房贷合同的银行，会联系买房人，协商废除原有的「基准利率+浮动比例」利率合同，再二选一。&lt;/p&gt;
&lt;p&gt;一定要记住，无论银行怎么巧舌如簧，口吐莲花：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;不要选择固定利率模式，选择「LPR利率+基点加成」模式！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;央行公告中说得很清楚，这种变更，一辈子只有一次机会，选错了的话，是无法更改的。&lt;/p&gt;
&lt;p&gt;不要小看两种利率模式的差别，我们可以大致估算下，在某些年份，利率差距可能达到1-5个百分点。如果房贷余额有300万元的话，每年还款差异可能达到3-15万元。&lt;/p&gt;
&lt;p&gt;在过去几年，数百万的年轻人夫妻，掏空了父母辈的钱包，背负了房贷，不敢辞职和跳槽，过上了不敢消费的佛系生活。&lt;/p&gt;
&lt;p&gt;翻阅了央行的定期报告，截止2019年8月份，个人贷款余额总量在29万亿元。你的房贷，就在其中。&lt;/p&gt;
&lt;p&gt;现在，央行要给你松绑了，卸下重担了，就看你3个月之后，要不要接收这份大礼，改变一家子的命运了。&lt;/p&gt;
&lt;h2 id=&quot;part-2&quot;&gt;&lt;a href=&quot;#part-2&quot; class=&quot;headerlink&quot; title=&quot;part 2&quot;&gt;&lt;/a&gt;part 2&lt;/h2&gt;&lt;p&gt;央行在2019年8月份，进行房贷变革的细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变革前，房贷利率=央行基准利率+浮动比例。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基准利率由央行统一公布，商业银行无权控制，只能被动跟随。如果央行加息了，或者降息了，那么在来年的固定日期1月1日，购房者的基准利率就统一改变。当前的基准利率是4.90%。&lt;/p&gt;
&lt;p&gt;商业银行能够改变的就是“浮动比例”。有些城市的银行货币宽松，鼓励首套房置业，地方政府财源依赖于土地出让金，那么可能在基准利率的基础上打折扣，但是大多数城市，是没有浮动比例，或者上浮的。&lt;/p&gt;
&lt;p&gt;对购房者而言，和银行签订的“浮动比例”一旦确认，是无法变更的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变革后，房贷利率=贷款市场报价（LPR）利率+基点加成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LPR利率，专业说法是“全国银行间同业拆借中心”，统计18家银行报出的各自的1年期和5年期以上贷款利率，剔除最低价、最高价后，计算算术平均价。&lt;/p&gt;
&lt;p&gt;说得更加直白一点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LPR利率更加市场化，在反映全社会无风险利率的程度上，更加逼真。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当经济过热时，通胀时，利率高；&lt;/p&gt;
&lt;p&gt;当经济过冷时，通缩时，利率低。&lt;/p&gt;
&lt;p&gt;这种市场化的利率，将贷款人和借款人之间的利益、风险，均衡了下。&lt;/p&gt;
&lt;p&gt;央行高屋建瓴，将1年期LPR利率，用于实体经济；将5年期LPR利率，用于了房地产市场。&lt;br&gt;&lt;img src=&quot;/images/other/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;当需要给实体经济降息时，就调低1年期LPR利率，不让漫灌的大水进入房地产行业。&lt;/p&gt;
&lt;p&gt;当需要单独对房地产调控时，只需要提高5年期LPR的利率，就不会对实体经济产生成本压力。&lt;/p&gt;
&lt;p&gt;但是从长期来看，&lt;strong&gt;5年期LPR利率，一定会向1年期LPR利率进行回归和靠拢的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2019年11月20日，央行授权全国银行间同业拆借中心公布了最新一期贷款市场报价利率（LPR）。1年期LPR利率为4.15%，5年期以上LPR利率为4.80%。同10月21日公布的上期数值相比，均下调了5个基点。&lt;/p&gt;
&lt;p&gt;特别地，5年期LPR利率4.80%，比原有的贷款基准利率4.90%，低了10个基点，也就是0.1个百分点。&lt;/p&gt;
&lt;p&gt;如果2020年1月以后买房子，签订的是变革后的房贷利率模式，未来LPR利率长期下行，那么买房人和贷款机构的房贷利率，也必然下行，这样的话，买房人承担的利率成本，和全社会的利率成本大致相当。&lt;/p&gt;
&lt;p&gt;如果是2019年8月份之前买的房子，买房人和贷款机构签订的是基准利率，或者固定利率，那么未来社会无风险利率下行后，买房人承担的压力，将前所未有的大。这批买房人，完全将自己的人生上贡给了银行帝国，和后来轻装上阵的买房者，泾渭分明，社会的不公平性就拉大了。&lt;/p&gt;
&lt;p&gt;有些人可能会说，变革前后，二种利率的差异，就在10个基点，0.1个百分点，差异不大。&lt;/p&gt;
&lt;p&gt;你要这么说，只能证明，&lt;code&gt;对我们国家未来利率下行趋势的力量，一无所知！&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-3&quot;&gt;&lt;a href=&quot;#part-3&quot; class=&quot;headerlink&quot; title=&quot;part 3&quot;&gt;&lt;/a&gt;part 3&lt;/h2&gt;&lt;p&gt;你也许会问：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;央行和放贷银行，居然给我们买房者这么好的福利，会把吃进肚子里的肉，吐了出来，它们图什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;呵呵。先让明哥笑几声。&lt;/p&gt;
&lt;p&gt;如果你能这么想，说明你真的太天真了。&lt;/p&gt;
&lt;p&gt;央行和放贷银行，给借款人松绑，绝对不是为了把吃进肚子里的肉吐出来，而是担心未来进入低利率时代以后，借款人弃房而去，那样会引发全社会系统性的大风险。&lt;/p&gt;
&lt;p&gt;因为，它们是极其专业和前瞻的机构，已经提前预测到了：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;在未来5-20年的时间长度内，中国一定会步发达国家的后尘，进入低利率，甚至是负利率时代。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是坏事吗？绝对不是，这是任何经济体发展到一定水平后，必然要进入的常态。&lt;/p&gt;
&lt;p&gt;当经济体的生产力已经充分发达，人口不再继续增长，物质充分丰富以后，一个市场的消费能力是有限的。也就是说，企业生产出来的实体商品、提供的服务和虚拟商品，终将超过该国或者全球所有人口的消费潜力。&lt;/p&gt;
&lt;p&gt;假如没有突破性的科技进展，那么企业家没有多余利润可图，将不再扩大生产，不将利润再投资，不向银行间接贷款融资，不向股票市场直接股权融资，社会的GDP原地踏步，年轻人薪资20年不上涨。&lt;/p&gt;
&lt;p&gt;这样将导致，社会上的存款资金和可投资资金，将无处可去。商业银行收储了海量的居民存款，找不到适格的企业去发放贷款，自然也赚取不了息差。&lt;/p&gt;
&lt;p&gt;整体社会的利率，将显著下行。&lt;/p&gt;
&lt;p&gt;统计过，2020年初，全球26个国家或经济体当中，有20个国家或经济体利率处于下降趋势。&lt;/p&gt;
&lt;p&gt;欧盟央行：-0.5%；&lt;/p&gt;
&lt;p&gt;日本央行：-0.1%；&lt;/p&gt;
&lt;p&gt;德国10年期国债：-0.675%。&lt;/p&gt;
&lt;p&gt;2019年8月5号，丹麦的第三大银行日德兰银行，推出了人类历史上首笔负利率按揭贷款业务，房贷利率为-0.5%。什么意思呢？&lt;/p&gt;
&lt;p&gt;如果你借丹麦这家银行100万元去买房，一年后你只需还99.5万元就可以了。&lt;/p&gt;
&lt;p&gt;这家银行向买房人发放贷款，贷款买房人，最终还的钱，比当初银行借出的钱，还要少！&lt;/p&gt;
&lt;p&gt;听起来，像不像天方夜谭？绝对不是，这在西方发达经济体之中，已经成为了常识。&lt;/p&gt;
&lt;p&gt;2019年8月6号，瑞士银行宣布对50万欧元以下的存款账户收取年费，并且不支付利息。&lt;/p&gt;
&lt;p&gt;同样地，由于欧盟组织金融体系的利率是-0.5%，这意味着，一个人在欧盟所属的银行存款1万欧元，一年后，只能取回9950欧元。&lt;br&gt;&lt;img src=&quot;/images/other/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;2019年11月21日，已经卸任了中国人民银行行长职位的周小川，在创新经济论坛上表示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中国可以尽量避免快速地进入到负利率时代。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;言下之意，我们社会可以推迟进入到负利率时代的时间长度，延迟它的到来，但是改变不了历史归途。&lt;/p&gt;
&lt;p&gt;在2017年之前的20年时间里，我们已经习惯了房价的上涨、物价的上涨，人民币购买力的贬值。其根本原因在于，我们国家依然处于发展阶段，各行各业的商品和服务，还有着巨大的空白市场去等着发掘。&lt;/p&gt;
&lt;p&gt;房贷利率5.53%、民间借贷利率10-30%、P2P网贷利率20-50%。银行理财产品收益率低于6%，都没有大妈大爷看得上。&lt;/p&gt;
&lt;p&gt;从2017年开始，高收益的幻象，逐一破灭了。房价下跌、P2P平台爆雷、上市公司多元化扩张一地鸡毛。那些追逐高收益的人，不仅没有得到高利率，连自己的本金都损失掉了。&lt;/p&gt;
&lt;p&gt;股市收益率预期降低、年轻人就业心态放平、中年人只求保住饭碗，这才是未来我国经济的「新常态」。&lt;/p&gt;
&lt;p&gt;进入低利率时代后，我们去银行存钱，不仅没有利息，还要倒付费用给银行来负责保管我们的资产数据。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;因为银行收储之后，将居民资产保管在银行内部，它放贷不出去，没有人来借款，自然赚取不了利息差带来的利润。&lt;/p&gt;
&lt;p&gt;所以，负利率时代到来以后，谁放钱在银行，谁就要支付给银行一定的费用。&lt;/p&gt;
&lt;p&gt;如果借款人发现，自己的存款没有利息，全社会的无风险利率都接近于零，企业不愿意去投资，社会GDP增速原地踏步，自己反而要承担4.9%的利率，那这种负担，绝对是压力山大，不可承受的。&lt;/p&gt;
&lt;p&gt;等到那个时候，别说奢望房价上涨成为了白日梦，每年下跌2-10%，都是很有可能的，结果还要凭空承担-4.9%的利率亏损，傻子都知道，应该抛弃房子，直接断供。&lt;/p&gt;
&lt;p&gt;如果大批量的买房人，集体断供，最终会引发什么后果呢？那就是2008年美国次贷危机的翻版，银行将倒闭，经济继续萧条，年轻人失业。那种后果不是每个社会都能承受的。&lt;/p&gt;
&lt;p&gt;对于那些在2020年，就选择了「LPR利率+基点加成」模式的买房人而言，会张灯结彩、敲锣打鼓地迎接低利率时代、甚至是负利率时代的到来。&lt;/p&gt;
&lt;p&gt;理想情况下，假如5年期LPR利率降低到了零，那么当初的买房人承担的利率就只是当初的「基点加成」，无论是上浮还是下浮，都可以认为轻如鸿毛。&lt;/p&gt;
&lt;p&gt;这个时候，原有传统模式买房人，承担的利率是4.90%，接受了新模式的买房人，几乎没有房贷利率！&lt;/p&gt;
&lt;p&gt;年化4.90%利率的差别，如果房贷余额还剩下200万，那就是年化9.8万元的差距。&lt;/p&gt;
&lt;p&gt;这钱不香吗？为什么要凭空贡献给银行呢？&lt;/p&gt;
&lt;h2 id=&quot;part-4&quot;&gt;&lt;a href=&quot;#part-4&quot; class=&quot;headerlink&quot; title=&quot;part 4&quot;&gt;&lt;/a&gt;part 4&lt;/h2&gt;&lt;p&gt;站在2020年的门槛上，央行一眼洞穿了未来20年的经济轨迹，参考了西方发达国家的成熟经验，引导各大商业银行贷款人，和借款人，重新签订锚定于LPR利率的贷款合同。&lt;/p&gt;
&lt;p&gt;这不仅是给予借款人的大红包，也是站在全社会的角度，未雨绸缪，将收益和风险，在借款人和贷款机构之间分摊，促进整个社会的稳定运行。&lt;/p&gt;
&lt;p&gt;但是，央行出台的房贷改革新政，让贷款人和借款人重新签订利率合同，充满着大量的金融术语和晦涩的概念。&lt;/p&gt;
&lt;p&gt;商业银行的目的是为了逐利。它们作为贷款人，赚取利息差，让借款人承担的利率越高，银行的利润就越高。&lt;br&gt;&lt;img src=&quot;/images/other/3.jpg&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;p&gt;收取智商税的最佳方式是，制造信息不对称，利用自己的信息优势，来收割对方。&lt;/p&gt;
&lt;p&gt;商业银行一定会巧舌如簧、口吐莲花一般，故意将两种利率模式，说得借款人如云山雾里，眼冒金星。&lt;/p&gt;
&lt;p&gt;站在银行的角度来说，它们希望借款人像无头苍蝇一样，跟着他们的节奏走，不知不觉就躺在砧板上，摆好了待宰的体位。&lt;/p&gt;
&lt;p&gt;只有明哥，惦记着你的钱包。&lt;/p&gt;
&lt;p&gt;千言万语，汇成一句话！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;从2020年3月1日开始的5个月时间里，当银行联系你重新协商房贷利率时，一定要坚持「LPR利率+基点加成」模式，并且利率一年自动更新一次。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个机会，涉及到你家庭数十万，甚至上百万的资金，是用于自己，还是贡献给银行。&lt;/p&gt;
&lt;p&gt;可千万别选错了，因为央行只给了一次机会，没有后悔药可吃！&lt;/p&gt;
&lt;p&gt;来源：明哥在路上&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;part-1&quot;&gt;&lt;a href=&quot;#part-1&quot; class=&quot;headerlink&quot; title=&quot;part 1&quot;&gt;&lt;/a&gt;part 1&lt;/h2&gt;&lt;p&gt;&lt;code&gt;每一个背负了房贷的人，绝对想不到，进入2020年头的时候，央行会送来一份大礼。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2019年12月28日，中国人民银行（央行）发布年内第30号公告。公告中的文字非常专业、晦涩，不是金融专业出身的人，会觉得云里雾里，也体会不到这则公告的史诗级作用。&lt;/p&gt;
&lt;p&gt;第一：&lt;strong&gt;从2020年1月1日开始，商业银行不得和买房人，签订参考贷款基准利率的浮动利率贷款合同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第二：&lt;strong&gt;从2020年3月1日开始，商业银行必须和存量房贷的借款人，废除原有房贷合同，让借款人重新二选一，要么：固定利率；要么：「LPR利率+基点加成」模式。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LPR" scheme="http://team.jiunile.com/categories/LPR/"/>
    
      <category term="房贷" scheme="http://team.jiunile.com/categories/LPR/%E6%88%BF%E8%B4%B7/"/>
    
    
      <category term="lpr" scheme="http://team.jiunile.com/tags/lpr/"/>
    
      <category term="房贷" scheme="http://team.jiunile.com/tags/%E6%88%BF%E8%B4%B7/"/>
    
      <category term="杂谈" scheme="http://team.jiunile.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="市场经济" scheme="http://team.jiunile.com/tags/%E5%B8%82%E5%9C%BA%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes coredns域名解析5秒记录</title>
    <link href="http://team.jiunile.com//blog/2019/12/k8s-coredns-debug.html"/>
    <id>http://team.jiunile.com//blog/2019/12/k8s-coredns-debug.html</id>
    <published>2019-12-16T12:00:00.000Z</published>
    <updated>2020-09-02T03:30:24.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期线上 &lt;code&gt;k8s&lt;/code&gt; 时不时就会出现一些内部服务间的调用超时问题，通过日志可以得知超时的原因都是出现在域名解析上，并且都是 &lt;code&gt;k8s&lt;/code&gt; 内部的域名解析超时，于是直接先将内部域名替换成 &lt;code&gt;k8s service&lt;/code&gt; 的 IP，观察一段时间发现没有超时的情况发生了，但是由于使用 &lt;code&gt;service IP&lt;/code&gt; 不是长久之计，所以还要去找解决办法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h2&gt;&lt;p&gt;一开始运维同事在调用方 pod 中使用ab工具对目标服务进行了多次压测，并没有发现有超时的请求，我介入之后分析ab这类 http 压测工具应该都会有 dns 缓存，而我们主要是要测试 dns 服务的性能，于是直接动手撸了一个压测工具只做域名解析，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; host &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connections &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; duration &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; limit &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeoutCount &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// os.Args = append(os.Args, &quot;-host&quot;, &quot;www.baidu.com&quot;, &quot;-c&quot;, &quot;200&quot;, &quot;-d&quot;, &quot;30&quot;, &quot;-l&quot;, &quot;5000&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag.StringVar(&amp;amp;host, &lt;span class=&quot;string&quot;&gt;&quot;host&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Resolve host&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag.IntVar(&amp;amp;connections, &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Connections&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag.Int64Var(&amp;amp;duration, &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Duration(s)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag.Int64Var(&amp;amp;limit, &lt;span class=&quot;string&quot;&gt;&quot;l&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Limit(ms)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag.Parse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; errCount &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pool := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, connections)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	exit := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		min &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		max &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		time.Sleep(time.Second * time.Duration(duration))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		exit &amp;lt;- &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endD:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; pool &amp;lt;- &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;lt;-pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				resolver := &amp;amp;net.Resolver&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				now := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_, err := resolver.LookupIPAddr(context.Background(), host)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				use := time.Since(now).Nanoseconds() / &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;(time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; min == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || use &amp;lt; min &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					min = use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; use &amp;gt; max &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					max = use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum += use&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; limit &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; use &amp;gt;= limit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					timeoutCount++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				atomic.AddInt64(&amp;amp;count, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					fmt.Println(err.Error())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					atomic.AddInt64(&amp;amp;errCount, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-exit:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt; endD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;request count：%d\nerror count：%d\n&quot;&lt;/span&gt;, count, errCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;request time：min(%dms) max(%dms) avg(%dms) timeout(%dn)\n&quot;&lt;/span&gt;, min, max, sum/count, timeoutCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译好&lt;a href=&quot;http://www.jiunile.com/k8s/ab-dns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;二进制&lt;/a&gt;程序直接丢到对应的 pod 容器中进行压测：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 200个并发,持续30秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./ab-dns -host &amp;#123;service&amp;#125;.&amp;#123;namespace&amp;#125; -c 200 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这次可以发现最大耗时有5s多，多次测试结果都是类似：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ./ab-dns -host s-inno-bpm.inno-ci -c 200 -d 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request count：109061&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error count：0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request time：min(1ms) max(5082ms) avg(53ms) timeout(0n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而我们内部服务间 HTTP 调用的超时一般都是设置在3s左右，以此推断出与线上的超时情况应该是同一种情况，在并发高的情况下会出现部分域名解析超时而导致 HTTP 请求失败。&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;起初一直以为是 &lt;code&gt;coredns&lt;/code&gt; 的问题，于是找运维升级了下 &lt;code&gt;coredns&lt;/code&gt; 版本再进行压测，发现问题还是存在，说明不是版本的问题，难道是 &lt;code&gt;coredns&lt;/code&gt; 本身的性能就差导致的？想想也不太可能啊，才 200 的并发就顶不住了那性能也未免太弱了吧，结合之前的压测数据，平均响应都挺正常的(53ms)，但是就有个别请求会延迟，而且都是 5 秒左右，所以就又带着k8s dns 5s的关键字去 google 搜了一下，这不搜不知道一搜吓一跳啊，原来是 k8s 里的一个大坑啊(其实和 k8s 没有太大的关系，只是 k8s 层面没有提供解决方案)。&lt;/p&gt;
&lt;h2 id=&quot;5s-超时原因&quot;&gt;&lt;a href=&quot;#5s-超时原因&quot; class=&quot;headerlink&quot; title=&quot;5s 超时原因&quot;&gt;&lt;/a&gt;5s 超时原因&lt;/h2&gt;&lt;p&gt;linux 中 &lt;code&gt;glibc&lt;/code&gt; 的 resolver 的缺省超时时间是 5s，而导致超时的原因是内核 &lt;code&gt;conntrack&lt;/code&gt; 模块的 bug。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Weave works 的工程师 Martynas Pumputis 对这个问题做了很详细的分析：&lt;a href=&quot;https://www.weave.works/blog/racy-conntrack-and-dns-lookup-timeouts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.weave.works/blog/racy-conntrack-and-dns-lookup-timeouts&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里再引用下 &lt;a href=&quot;https://imroc.io/posts/kubernetes/troubleshooting-with-kubernetes-network/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://imroc.io/posts/kubernetes/troubleshooting-with-kubernetes-network/&lt;/a&gt; 文章中的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS client (glibc 或 musl libc) 会并发请求 A 和 AAAA 记录，跟 DNS Server 通信自然会先 connect (建立 fd)，后面请求报文使用这个 fd 来发送，由于 UDP 是无状态协议， connect 时并不会发包，也就不会创建 conntrack 表项, 而并发请求的 A 和 AAAA 记录默认使用同一个 fd 发包，send 时各自发的包它们源 Port 相同(因为用的同一个 socket 发送)，当并发发包时，两个包都还没有被插入 conntrack 表项，所以 netfilter 会为它们分别创建 conntrack 表项，而集群内请求 kube-dns 或 coredns 都是访问的 CLUSTER-IP，报文最终会被 DNAT 成一个 endpoint 的 POD IP，当两个包恰好又被 DNAT 成同一个 POD IP 时，它们的五元组就相同了，在最终插入的时候后面那个包就会被丢掉，如果 dns 的 pod 副本只有一个实例的情况就很容易发生(始终被 DNAT 成同一个 POD IP)，现象就是 dns 请求超时，client 默认策略是等待 5s 自动重试，如果重试成功，我们看到的现象就是 dns 请求有 5s 的延时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;h3 id=&quot;方案（一）：使用-TCP-协议发送-DNS-请求&quot;&gt;&lt;a href=&quot;#方案（一）：使用-TCP-协议发送-DNS-请求&quot; class=&quot;headerlink&quot; title=&quot;方案（一）：使用 TCP 协议发送 DNS 请求&quot;&gt;&lt;/a&gt;方案（一）：使用 TCP 协议发送 DNS 请求&lt;/h3&gt;&lt;p&gt;通过 &lt;code&gt;resolv.conf&lt;/code&gt; 的 &lt;code&gt;use-vc&lt;/code&gt; 选项来开启 TCP 协议, 修改 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 文件，在最后加入一行文本&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameserver ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5 use-vc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经过测试，确实没有出现 5s 的超时问题了，但是部分请求耗时还是比较高，在 4s 左右，而且平均耗时比 UPD 协议的还高，效果并不好。&lt;/p&gt;
&lt;h3 id=&quot;方案（二）：避免相同五元组-DNS-请求的并发&quot;&gt;&lt;a href=&quot;#方案（二）：避免相同五元组-DNS-请求的并发&quot; class=&quot;headerlink&quot; title=&quot;方案（二）：避免相同五元组 DNS 请求的并发&quot;&gt;&lt;/a&gt;方案（二）：避免相同五元组 DNS 请求的并发&lt;/h3&gt;&lt;p&gt;通过 &lt;code&gt;resolv.conf&lt;/code&gt; 的 &lt;code&gt;single-request-reopen&lt;/code&gt; 和 &lt;code&gt;single-request&lt;/code&gt; 选项来避免：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single-request-reopen (glibc&amp;gt;=2.9) 发送 A 类型请求和 AAAA 类型请求使用不同的源端口。这样两个请求在 conntrack 表中不占用同一个表项，从而避免冲突。&lt;/li&gt;
&lt;li&gt;single-request (glibc&amp;gt;=2.10) 避免并发，改为串行发送 A 类型和 AAAA 类型请求，没有了并发，从而也避免了冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改 /etc/resolv.conf 文件，在最后加入一行文本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameserver ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5 timeout:2 single-request-reopen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过压测结果可以看到 &lt;code&gt;single-request-reopen&lt;/code&gt; 和 &lt;code&gt;single-request&lt;/code&gt; 选项确实可以显著的降低域名解析耗时。&lt;/p&gt;
&lt;h2 id=&quot;关于方案（一）和方案（二）的实施步骤和缺点&quot;&gt;&lt;a href=&quot;#关于方案（一）和方案（二）的实施步骤和缺点&quot; class=&quot;headerlink&quot; title=&quot;关于方案（一）和方案（二）的实施步骤和缺点&quot;&gt;&lt;/a&gt;关于方案（一）和方案（二）的实施步骤和缺点&lt;/h2&gt;&lt;p&gt;其实就是要给容器的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 文件添加选项，目前有两个方案比较合适：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过修改 pod 的 postStart hook 来设置&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;lifecycle:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  postStart:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    exec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; /bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; -c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/bin/echo &#39;options single-request-reopen&#39; &amp;gt;&amp;gt; /etc/resolv.conf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过修改 pod 的 template.spec.dnsConfig 来设置&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dnsConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; single-request-reopen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;注: 需要 k8s 版本&amp;gt;=1.9&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;p&gt;不支持 &lt;code&gt;alpine&lt;/code&gt; 基础镜像的容器，因为 &lt;code&gt;apline&lt;/code&gt; 底层使用的 &lt;code&gt;musl libc&lt;/code&gt; 库并不支持这些 &lt;code&gt;resolv.conf&lt;/code&gt; 选项，所以如果使用 &lt;code&gt;alpine&lt;/code&gt; 基础镜像构建的应用，还是无法规避超时的问题。&lt;/p&gt;
&lt;h2 id=&quot;方案（三）：本地-DNS-缓存&quot;&gt;&lt;a href=&quot;#方案（三）：本地-DNS-缓存&quot; class=&quot;headerlink&quot; title=&quot;方案（三）：本地 DNS 缓存&quot;&gt;&lt;/a&gt;方案（三）：本地 DNS 缓存&lt;/h2&gt;&lt;p&gt;其实 k8s 官方也意识到了这个问题比较常见，给出了 coredns 以 cache 模式作为 daemonset 部署的解决方案: &lt;a href=&quot;https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/nodelocaldns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/nodelocaldns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大概原理就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地 DNS 缓存以 DaemonSet 方式在每个节点部署一个使用 hostNetwork 的 Pod，创建一个网卡绑上本地 DNS 的 IP，本机的 Pod 的 DNS 请求路由到本地 DNS，然后取缓存或者继续使用 TCP 请求上游集群 DNS 解析 (由于使用 TCP，同一个 socket 只会做一遍三次握手，不存在并发创建 conntrack 表项，也就不会有 conntrack 冲突)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取当前 &lt;code&gt;kube-dns service&lt;/code&gt; 的 &lt;code&gt;clusterIP&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl -n kube-system get svc kube-dns -o jsonpath=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;.spec.clusterIP&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载官方提供的 yaml 模板进行关键字替换&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget -O nodelocaldns.yaml &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml&quot;&lt;/span&gt; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/__PILLAR__DNS__SERVER__/10.96.0.10/g&#39;&lt;/span&gt; nodelocaldns.yaml &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/__PILLAR__LOCAL__DNS__/169.254.20.10/g&#39;&lt;/span&gt; nodelocaldns.yaml &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#39;&lt;/span&gt; nodelocaldns.yaml &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/__PILLAR__CLUSTER__DNS__/10.96.0.10/g&#39;&lt;/span&gt; nodelocaldns.yaml &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/__PILLAR__UPSTREAM__SERVERS__/\/etc\/resolv.conf/g&#39;&lt;/span&gt; nodelocaldns.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最终 yaml 文件如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/cluster-service: &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; kube-dns-upstream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    k8s-app:&lt;/span&gt; kube-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/cluster-service: &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/name: &lt;span class=&quot;string&quot;&gt;&quot;KubeDNSUpstream&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      protocol:&lt;/span&gt; UDP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; dns-tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    k8s-app:&lt;/span&gt; kube-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ConfigMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;data:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  Corefile:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cluster.local:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cache &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                success 9984 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                denial 9984 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bind 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forward . 10.96.0.10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        health 169.254.20.10:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    in-addr.arpa:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bind 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forward . 10.96.0.10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ip6.arpa:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bind 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forward . 10.96.0.10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bind 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forward . /etc/resolv.conf &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; DaemonSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    k8s-app:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/cluster-service: &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  updateStrategy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    rollingUpdate:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      maxUnavailable:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      k8s-app:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        k8s-app:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      priorityClassName:&lt;/span&gt; system-node-critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      serviceAccountName:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      hostNetwork:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      dnsPolicy:&lt;/span&gt; Default &lt;span class=&quot;comment&quot;&gt;# Don&#39;t use cluster DNS.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      tolerations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - key:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;CriticalAddonsOnly&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          operator:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Exists&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; node-cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          image:&lt;/span&gt; k8s.gcr.io/k8s-dns-node-cache:&lt;span class=&quot;number&quot;&gt;1.15&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              cpu:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              memory:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;Mi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;-localip&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;169.254.20.10,10.96.0.10&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;-conf&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;/etc/Corefile&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;-upstreamsvc&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;string&quot;&gt;&quot;kube-dns-upstream&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              name:&lt;/span&gt; dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              protocol:&lt;/span&gt; UDP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              name:&lt;/span&gt; dns-tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              name:&lt;/span&gt; metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          livenessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              path:&lt;/span&gt; /health&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - mountPath:&lt;/span&gt; /run/xtables.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              name:&lt;/span&gt; xtables-lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - name:&lt;/span&gt; config-volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              mountPath:&lt;/span&gt; /etc/coredns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - name:&lt;/span&gt; kube-dns-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              mountPath:&lt;/span&gt; /etc/kube-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; xtables-lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            path:&lt;/span&gt; /run/xtables.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; kube-dns-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          configMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            name:&lt;/span&gt; kube-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            optional:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; config-volume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          configMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            name:&lt;/span&gt; node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            items:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              - key:&lt;/span&gt; Corefile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;                path:&lt;/span&gt; Corefile.base&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过 yaml 可以看到几个细节：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署类型是使用的 &lt;code&gt;DaemonSet&lt;/code&gt;，即在每个 &lt;code&gt;k8s node&lt;/code&gt; 节点上运行一个 dns 服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hostNetwork&lt;/code&gt; 属性为 &lt;code&gt;true&lt;/code&gt;，即直接使用 node 物理机的网卡进行端口绑定，这样在此 node 节点中的 pod 可以直接访问 dns 服务，不通过 service 进行转发，也就不会有 DNAT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dnsPolicy&lt;/code&gt; 属性为 &lt;code&gt;Default&lt;/code&gt;，不使用 &lt;code&gt;cluster DNS&lt;/code&gt;，在解析外网域名时直接使用本地的 DNS 设置&lt;/li&gt;
&lt;li&gt;绑定在 node 节点 &lt;code&gt;169.254.20.10&lt;/code&gt; 和 &lt;code&gt;10.96.0.10&lt;/code&gt; IP 上，这样节点下面的 pod 只需要将 dns 设置为&lt;code&gt;169.254.20.10&lt;/code&gt; 即可直接访问宿主机上的 dns 服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;实施&quot;&gt;&lt;a href=&quot;#实施&quot; class=&quot;headerlink&quot; title=&quot;实施&quot;&gt;&lt;/a&gt;实施&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过修改 &lt;code&gt;pod&lt;/code&gt; 的 &lt;code&gt;template.spec.dnsConfig&lt;/code&gt; 来设置，并将 &lt;code&gt;dnsPolicy&lt;/code&gt; 设置为 &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dnsConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  nameservers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      searches:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; public.svc.cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- svc.cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; ndots&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          value:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dnsPolicy:&lt;/span&gt; None&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改默认的 cluster-dns，在 node 节点上将 &lt;code&gt;/etc/systemd/system/kubelet.service.d/10-kubeadm.conf&lt;/code&gt; 文件中的 &lt;code&gt;--cluster-dns&lt;/code&gt; 参数值修改为 &lt;code&gt;169.254.20.10&lt;/code&gt;，然后重启 &lt;code&gt;kubelet&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;monkeywie.github.io&lt;/li&gt;
&lt;li&gt;imroc.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期线上 &lt;code&gt;k8s&lt;/code&gt; 时不时就会出现一些内部服务间的调用超时问题，通过日志可以得知超时的原因都是出现在域名解析上，并且都是 &lt;code&gt;k8s&lt;/code&gt; 内部的域名解析超时，于是直接先将内部域名替换成 &lt;code&gt;k8s service&lt;/code&gt; 的 IP，观察一段时间发现没有超时的情况发生了，但是由于使用 &lt;code&gt;service IP&lt;/code&gt; 不是长久之计，所以还要去找解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/categories/kubernetes/coredns/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/tags/coredns/"/>
    
      <category term="5s" scheme="http://team.jiunile.com/tags/5s/"/>
    
  </entry>
  
  <entry>
    <title>白话Kubernetes核心组件及原理</title>
    <link href="http://team.jiunile.com//blog/2019/12/k8s-k8s-intro.html"/>
    <id>http://team.jiunile.com//blog/2019/12/k8s-k8s-intro.html</id>
    <published>2019-12-06T12:00:00.000Z</published>
    <updated>2019-12-06T08:21:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Kubernetes是什么？&quot;&gt;&lt;a href=&quot;#Kubernetes是什么？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes是什么？&quot;&gt;&lt;/a&gt;Kubernetes是什么？&lt;/h2&gt;&lt;p&gt;Kubernetes其实就是一个集群，从我们此前运维的角度来理解，它就是一个集群，组合多台主机的资源（内存、CPU、磁盘等）整合成一个大的资源池并统一对外提供计算存储等能力的集群。我们找很多台主机，每台主机上面安装Kubernetes的相关程序，而不同的主机程序之间相互通信，从而完成彼此之间的协调，并且通过这些应用程序之间的协同工作，把多个主机当成一个主机来使用，形成一个集群，仅此而已，但是在kubernetes集群当中主机是分角色的，即所谓的有中心结点架构的集群系统，master/nodes模型, 由一组节点用于master不需要太多，一般高可用的话需要三个（根据集群规模来判断），nodes节点（worker节点）就是干活的，Kubernetes上提供的各种资源服务，运行在node节点上面。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;用户如何在kubernetes运行容器，逻辑过程是什么？&quot;&gt;&lt;a href=&quot;#用户如何在kubernetes运行容器，逻辑过程是什么？&quot; class=&quot;headerlink&quot; title=&quot;用户如何在kubernetes运行容器，逻辑过程是什么？&quot;&gt;&lt;/a&gt;用户如何在kubernetes运行容器，逻辑过程是什么？&lt;/h2&gt;&lt;p&gt;用户把创建启动容器的请求首先发给master，具体来说是发给了master节点上面的&lt;code&gt;API Server&lt;/code&gt;组件， &lt;code&gt;API Server&lt;/code&gt;通过调度器，按照预设的调度算法及策略，去分析各node节点上面现有的可用资源状态，然后找一个最佳适配，来运行用户所请求容器的结点，并把它调度上去（这里需要与node节点上面的&lt;code&gt;kubelet&lt;/code&gt;交互），并由这个node节点上面本地的docker或其它容器引擎负责把这个容器启动起来，要启动容器，需要有镜像，镜像在哪里呢？在仓库上面，node上面启动容器是会先检查本地是否有镜像（根据镜像拉取策略），如果没有会docker pull下来，然后再启动，kubernetes自身并没有托管自动所依赖的每一个容器镜像，而是需要到仓库中去下载的，仓库可以是私有的，也可以是公有的。&lt;/p&gt;
&lt;p&gt;集群在master节点上面提供一个&lt;code&gt;API Server&lt;/code&gt;组件，它负责接受请求，解析请求，处理请求的，至于当用户请求的是创建一个容器，最好不要运行在master节点上面，而应该运行在node节点上面，确定哪个node更合适，这个时间就需要&lt;code&gt;scheder&lt;/code&gt;调度器，它负责监控每个node节点上面总可用的计算、内存、存储等资源，并根据用户所请求创建的这个容器所需要的资源，docker容器可以做资源限制 ，但在kubernetes上面不但可以设定容器使用资源的上限（阀值），还可以设定资源使用的下限（资源请求量），调度器就是根据容器的最低需求来进行评估，哪一个节点最合适；当然了，资源的评估不只是一个维度，而是从多个维度考虑，这都是调度器&lt;code&gt;scheduler&lt;/code&gt;根据调度策略和算法需要考虑的，如果在一个node上面把容器启动起来了，我们还需要对容器中的应用程序的健康状态做监测，我们不但能根据容器中应用程序是否运行判断它的健康状况，还可以根据额外的健康状态探测方式来探测，我们叫做可用性探测机制来探测服务的可用性。如果一旦容器中的应用挂了，我们又需要确保容器中的一个容器要运行，此时怎么办？node节点之上有一个应用程序，这个应用程序就是&lt;code&gt;kebulet&lt;/code&gt;，这个应用程序确保容器始终处于健康状态，如果出现问题，它就会通知&lt;code&gt;API Server&lt;/code&gt;，然后重新调度；但是有一点，很不幸，这个node节点如果宕机了，那么此前拖管在此node上面的所有容器就挂了，我们知道kubernetes具有自愈的能力，无论是单个容器，还是node节点上面的所有容器，一旦容器不见了，是不需要人工参与的，kubernetes会使用新的个体来取代它，它会在其它node上面创建出来一模一样的容器出来。如何确保这个容器是健康的呢？以及一旦出问题就可以及时被发现呢? 其实kubernetes是通过控制器组件来负责监控它所管理的每一个容器的健康状态，一旦发现不健康了，控制器向master上面 &lt;code&gt;API server&lt;/code&gt;发请求，容器挂了一个，你帮我重新调度再启动一个，这里控制器需要在本地不停的loop循环，周期性，持续性的探测所管理的容器的健康状况，一旦不健康，或者不符合用户所定义（期望）的目标，此是调度器就会向用户期待的状态向前移，确保符合用户期望的状态；其实在kubernetes集群中我们有很多很多的控制器，假设我们有一个控制器挂了呢，用于监控容器健康的控制器不健康了，容器的健康状态就无法保证，怎么办？我们在master节点上面有一个控制器管理器，控制器管理器负责控制监控每个控制器的健康状况，控制器管理器如果出现问题怎么办，因此在这里，我们需要对控制器管理器做冗余。&lt;/p&gt;
&lt;p&gt;以上我们通过在集群上面创建一个容器的例子，讲解了&lt;code&gt;API Server&lt;/code&gt;、&lt;code&gt;scheduler&lt;/code&gt;、&lt;code&gt;控制器&lt;/code&gt;、&lt;code&gt;控制管理器&lt;/code&gt;等。&lt;/p&gt;
&lt;h2 id=&quot;什么是Pod？&quot;&gt;&lt;a href=&quot;#什么是Pod？&quot; class=&quot;headerlink&quot; title=&quot;什么是Pod？&quot;&gt;&lt;/a&gt;什么是Pod？&lt;/h2&gt;&lt;p&gt;Pod，英文意思是豆荚。大家都知道这种植物，一个豆荚中有几个豆粒。&lt;/p&gt;
&lt;p&gt;Kubernetes上面运行的最小单元是&lt;code&gt;Pod&lt;/code&gt;,  kubernetes并不直接调度容器的运行，而调度的目标是&lt;code&gt;Pod&lt;/code&gt;，&lt;code&gt;Pod&lt;/code&gt;可以理解为容器的外壳，给容器做了一层抽象的封装，因此&lt;code&gt;Pod&lt;/code&gt;成为了Kubernetes集群之上最小的调度单位（逻辑单元），&lt;code&gt;Pod&lt;/code&gt;内部主要是用来放容器的，&lt;code&gt;Pod&lt;/code&gt;有一个特点，一个&lt;code&gt;Pod&lt;/code&gt;中可以运行多个容器，多个容器共享同一个底层的网络命名空间（底层的&lt;code&gt;net&lt;/code&gt;, &lt;code&gt;uts&lt;/code&gt;, &lt;code&gt;IPC&lt;/code&gt;三个网络命名空间），另外三个命名空间相互隔离（&lt;code&gt;User&lt;/code&gt;, &lt;code&gt;mnt&lt;/code&gt;, &lt;code&gt;pid&lt;/code&gt;），这样一来，同一个&lt;code&gt;Pod&lt;/code&gt;上面的多个容器，每个容器上面跑应用程序 ，对外更像是同一台“虚拟机”，这也是kubernetes组织容器的一个非常精巧的办法，基于此我们可以构建较为精细的容器间通信，并且同一个Pod上面的容器，还共享第二种资源，叫做存储卷，存储卷不属于容器，属于&lt;code&gt;Pod&lt;/code&gt;，&lt;code&gt;Pod&lt;/code&gt;的磁盘，相同&lt;code&gt;Pod&lt;/code&gt;的容器共享。&lt;/p&gt;
&lt;p&gt;各个node节点主要是用来运行&lt;code&gt;Pod&lt;/code&gt;的，一般说来，一个&lt;code&gt;Pod&lt;/code&gt;上面只放一个容器，除非有特别紧密的关系，需要放在同一个&lt;code&gt;Pod&lt;/code&gt;上面，否则，不要放在同一&lt;code&gt;Pod&lt;/code&gt;上面；如果确实有需要，将多个容器需要放在一个&lt;code&gt;Pod&lt;/code&gt;中，通常有一个容器是主容器，其它的容器为辅助主容器，辅助容器中的应用程序主要是为了完成更多功能来辅佐主容器工作，这里我们调度器也是调度的&lt;code&gt;Pod&lt;/code&gt;, node节点上面也是&lt;code&gt;Pod&lt;/code&gt;, &lt;code&gt;Pod&lt;/code&gt;是一个原子单元，也就意味着一个&lt;code&gt;Pod&lt;/code&gt;中有一个容器，还是有多个容器，一旦被调度之后，相同&lt;code&gt;Pod&lt;/code&gt;上面的容器，只能在同一个node节点上面。&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;Pod&lt;/code&gt;时，可以直接创建，并且自主管理的，但它仍然要提交给&lt;code&gt;API Server&lt;/code&gt;，由&lt;code&gt;API Server&lt;/code&gt;接收以后，通过调度器调度到指定的Node节点上，而node节点启动此Pod，此后如果pod上面的容器出现故障，需要重要重启容器，需要&lt;code&gt;kubelet&lt;/code&gt;完成，但是node节点故障了，节点就消失了。还有一种Pod的创建方式，是通过控制器来创建的，后面为讲什么是控制器，它的作用是什么？&lt;/p&gt;
&lt;h2 id=&quot;Node节点是做什么的？&quot;&gt;&lt;a href=&quot;#Node节点是做什么的？&quot; class=&quot;headerlink&quot; title=&quot;Node节点是做什么的？&quot;&gt;&lt;/a&gt;Node节点是做什么的？&lt;/h2&gt;&lt;p&gt;刚才说了node是kubernetes集群中的工作节点，负责运行由master节点上面指派的各种任务，而最核心的任务是以Pod的形式运行容器的，理解上讲node可以是任何形式的资源设备，只要有传统意义上的内存、CPU、存储资源即可，并且可以安装上Kubernetes集群的应用程序 ，都可以做为k8s集群的一个份子来工作，它是承载资源的。&lt;/p&gt;
&lt;p&gt;这样一来终端用户不需要关心应用程序（Pod）在哪个Node节点上面，它就这样脱离了终端用户的视线，终端用户也无需关注应用程序部署在哪个node节点上面的pod，从而真正意义上实现了资源池，从而进行统一管理。&lt;/p&gt;
&lt;h2 id=&quot;什么是标签，标签选择器是做什么的？&quot;&gt;&lt;a href=&quot;#什么是标签，标签选择器是做什么的？&quot; class=&quot;headerlink&quot; title=&quot;什么是标签，标签选择器是做什么的？&quot;&gt;&lt;/a&gt;什么是标签，标签选择器是做什么的？&lt;/h2&gt;&lt;p&gt;如何让一个控制器管理指定的Pod，例如，我们创建了5个Pod，Pod中运行tomcat容器，我们让一个控制器来管理这一组Pod，为了让Pod能够实现被控制器管理识别，我们需要在Pod上面附加一些元数据（标签），用标签来识别Pod，在创建Pod的时候，或者人为的打上一个标签，让控制器能够识别出标签，进而识别出Pod。我们前面创建了5个 Pod，我们在每一个pod上面加一个标签app, 标签的值叫tomcat (&lt;code&gt;标签：值====&amp;gt; app:tomcat&lt;/code&gt;)，我们想把这一类找出来，怎么找，我们先找拥有key是app，并且值是tomcat的pod分拣出来。标签是Kubernetes大规模集群管理、分类、识别资源使用的，标签是非常非常重要的凭证，我们是如何把我们感兴趣的标签找到的呢，我们有一个标签选择器/挑选器（selector）组件，标签选择器，简单来讲就是根据标签，过滤符合条件的资源对象的机制，其实标签不只是Pod有，很多其它资源都有，因此这种选择器叫做标签选择器，而不叫pod标签选择器，Kubernetes是Restfull 风格的API，通过http或者https对外提供服务，所以所有Restfull对外提供的服务资源都称为对象，所有的对象都可以拥有标签，所有的标签都可以使用标签选择器来选择，只不过pod是其中一种比较重要的。&lt;/p&gt;
&lt;h2 id=&quot;什么是控制器，控制器是做什么的，有哪些控制器？&quot;&gt;&lt;a href=&quot;#什么是控制器，控制器是做什么的，有哪些控制器？&quot; class=&quot;headerlink&quot; title=&quot;什么是控制器，控制器是做什么的，有哪些控制器？&quot;&gt;&lt;/a&gt;什么是控制器，控制器是做什么的，有哪些控制器？&lt;/h2&gt;&lt;p&gt;我们刚才讲Pod的时候 ，讲到了创建Pod时，一种是直接创建Pod，Pod删除后，不会自动创建，还有一种创建Pod的方式，是通过控制器创建的Pod，这种&lt;code&gt;控制器管理的Pod&lt;/code&gt;， 正是控制器管理器机制的使用。在Kubernetes设计中，Pod完全可以叫做有生命周期的对象，而后由调度器将其调度至集群中的某节点，运行以后，任务终止也就被删除停掉了，但是有一些任务，比如nginx，或者运行一个tomcat，他们是做为守护进程来运行的，这种程序，我们要确保这种pod随时运行，一旦出现故障，需要第一时间发现，要么取代它，要么重启它，要么重建一个新的pod，这种靠人的右眼是无法保证的，而Kubernetes提供了具备这种工作能力的组件叫&lt;code&gt;Pod控制器&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Pod控制器最早的一种叫&lt;code&gt;ReplicationController&lt;/code&gt; (副本控制器，早期版本的控制器，也称为Pod控制器)， 当我们启动一个pod时，一个不够了，可以再启动一个副本，控制器就是控制同一类资源对象的副本，一旦副本数量少了，就会自动加一个，能够定义要求的副本数，多了就删除，精确符合人们期望的数量，它还可以实现滚动更新，它允许临时添加副本，然后把旧版本的去掉，实现滚动更新；它也允许回滚操作，后来的版本中新加了&lt;code&gt;ReplicaSetController&lt;/code&gt;（副本集控制器），而&lt;code&gt;ReplicaSetController&lt;/code&gt;也不直接使用，而是有一个声明式更新的控制器叫&lt;code&gt;Deployment&lt;/code&gt;，用它来进行管理控制， 我们使用的最多的也是&lt;code&gt;Deployment&lt;/code&gt;控制器，而&lt;code&gt;Deployment&lt;/code&gt;控制器只能管理哪些无状态的应用，哪么有状态的应用如何控制管理呢？我们使用新的控制器，叫&lt;code&gt;StatefulSet&lt;/code&gt;有状态副本集，另外如果我们需要在每个node上面运行一个Pod，而不是随意运行，我们还需要一个&lt;code&gt;DaemonSet&lt;/code&gt;，如果我们运行作业，还需要Job, 周期性作业，&lt;code&gt;Cronjob&lt;/code&gt;,  这些是常见的Pod控制器；后面的这些控制器都是实现一种特定的应用管理，比如临时运行一个容器去完成删除日志的功能，这个运行完就删除了，我们就可以使用Job控制器管理Pod, 但是如果Job没有运行完挂了，需要重新启动，如果运行完，就删除了，再比如nginx一直需要处于运行状态，就不能使用Job控制器，所以说这么多的控制器是用于确保不同类型的Pod资源，来符合用户所期望的方式来运行，像&lt;code&gt;Deployment&lt;/code&gt;控制器还支持二级控制器，叫&lt;code&gt;HPA&lt;/code&gt;，叫水平Pod，自动伸缩控制器，比如我们一个控制器控制两个副本在运行，但在资源利用率高的时候，可以自动的伸缩控制，就是使用&lt;code&gt;HPA&lt;/code&gt;进行控制，一旦利用率低了，可以自动减少，但要符合我们预期的最小值。&lt;/p&gt;
&lt;h2 id=&quot;Serveice是什么，为什么需要Service？&quot;&gt;&lt;a href=&quot;#Serveice是什么，为什么需要Service？&quot; class=&quot;headerlink&quot; title=&quot;Serveice是什么，为什么需要Service？&quot;&gt;&lt;/a&gt;Serveice是什么，为什么需要Service？&lt;/h2&gt;&lt;p&gt;到这里我们想到一个问题，Pod是由生命周期的，万一Pod所在Node节点宕机了，Pod有可能需要在其它的 Node节点上面重新创建，而重新创建完成后的pod，跟之前的不是一个，只不过是应用程序一样而已，提供相同的服务，由于每个pod中容器的IP地址就不一样，这样一来就有一个问题，我们客户端怎么去访问这些Pod呢？是利用服务发现机制，首先客户端每一次去访问服务时，客户端是不知道后端的服务是谁的（不知道pod的存在），他需要找一个地方问一句，发现一下，有没有这种服务，这些服务是Pod启动的时候注册到一个类似总线地址上，客户端直接去总线位置去问，有没有，有的话，给一个Pod地址，客户端与Pod地址进行通信；因此尽可能降低这种复杂度，Kubernetes为每一组提供相同功能的Pod和客户端之间添加了一个中间层，这个中间层是固定的，这个中间层就叫service，只要service不删除，它就是固定的，名称也是固定的，当客户端需要访问时，只需要在客户端写上service 主机名|服务器|地址即可，也不需要发现，而这个服务service 是一个调度器，不但提供一个固定稳定的访问入口，只要不删除，它就是稳定的，客户端只需要写service名称即可，服务再把请求代理到后面的pod上面，那么Pod宕机了，新创建的pod会被service立即给关联进来；还会把新加的pod作为service后面的可用资源对象之一，怎么实现的呢？我们知道 客户端与服务器通信是通过&lt;code&gt;IP：Port&lt;/code&gt;或者&lt;code&gt;域名:Port&lt;/code&gt;形式，而service与后面的pod不是依靠&lt;code&gt;IP:Port&lt;/code&gt;的形式（因为pod的主机名和IP经常要变），而是通过Pod上面固定的标签来识别，只要是相同标签的pod，不管主机名和IP怎么变，都会被service通过标签识别，service是通过标签选择器来关联pod的；这样一来，只要pod属于这个标签选择器，就能立即被service能选中，并且做为service后端组件存在，关联进来以后，再动态探测这个pod的IP地址是什么，端口是什么，并做为自己后端可调度的服务器，资源对象， 最后，客户端是通过service代理至后端pod进行通信；意味着客户端看到的地址就是service的地址，而在kubernetes集群上service可不是什么应用程序 ，也不是一个实体组件，它只不过是一个&lt;code&gt;iptables DNAT&lt;/code&gt;规则；我们创建一个&lt;code&gt;DNAT&lt;/code&gt; 规则 ，我们所有到达xxx地址的，都统统被目标地址转换成yyy地址，&lt;code&gt;DNAT&lt;/code&gt;规则只是一个规则 ，而service地址，事实上并没有配置到任何一张网卡上，是不存在的，它仅仅出在规则中，可以ping通的，并且可以做请求中转，能ping通是因为有&lt;code&gt;TCP/IP&lt;/code&gt;协议栈。这个IP地址，仅出现在规则中，更重要的是service做为Kubernetes中的对象来讲，它有名称，就相当于这个服务的名字，名称可以被解析，就是把service名称解析成IP，名称解析靠DNS，没错，我们安装完k8s后，第一件事，就是让部署一个&lt;code&gt;DNS Pod&lt;/code&gt;，以确保service被解析，这个Pod是Kubernetes自身的服务就需要的pod，所以我们称之为基础性的系统架构级的pod或对象，而且称他们叫集群的附件。&lt;/p&gt;
&lt;h2 id=&quot;集群附件DNS&quot;&gt;&lt;a href=&quot;#集群附件DNS&quot; class=&quot;headerlink&quot; title=&quot;集群附件DNS&quot;&gt;&lt;/a&gt;集群附件DNS&lt;/h2&gt;&lt;p&gt;DNS附件只是Kubernetes集群中纵多附件中的一个，并且这种DNS有一个很有意义的特点，可以动态的创建，动态的改变，动态的更新，动态的变动，比如，你更新了service名称，DNS中的记录即就会被改变，再比如我们手动修改了service IP ,他会自动触发DNS 服务中的解析记录的更改，所以以后客户端访问service时，可以直接访问服务的名称 ，而由集群中专门的DNS服务来负责解析，解析的是service的地址，不是pod地址，再由service代理访问pod，刚才也说了，这种代理是端口代理，由DNAT实现，可不能忘记service后面中两个或者多个pod，这里的DNAT就是多个目标了，多目标调度，对于linux来讲，大家知道对于iptables来讲，已经把负载均衡的功能主要交给了IPVS，因此如果service背后的同一个服务有多个Pod，并且由DNAT来实现，可能在调度效果上并不尽人意，因此在 Kubernetes 1.11版本以后，已经把iptables规则改成了IPVS规则，也就相当于，当你创建一条service规则时，就创建了一条IPVS规则 ，只不过是NAT模型的IPVS规则，因此还支持用户可以指定任意的调度算法，如轮询、加权、最小连接等，所以你就会发现LVS是我们的基础性服务，以上就是我们所讲的service组件。&lt;/p&gt;
&lt;p&gt;来源：Linux点滴运维实践&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kubernetes是什么？&quot;&gt;&lt;a href=&quot;#Kubernetes是什么？&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes是什么？&quot;&gt;&lt;/a&gt;Kubernetes是什么？&lt;/h2&gt;&lt;p&gt;Kubernetes其实就是一个集群，从我们此前运维的角度来理解，它就是一个集群，组合多台主机的资源（内存、CPU、磁盘等）整合成一个大的资源池并统一对外提供计算存储等能力的集群。我们找很多台主机，每台主机上面安装Kubernetes的相关程序，而不同的主机程序之间相互通信，从而完成彼此之间的协调，并且通过这些应用程序之间的协同工作，把多个主机当成一个主机来使用，形成一个集群，仅此而已，但是在kubernetes集群当中主机是分角色的，即所谓的有中心结点架构的集群系统，master/nodes模型, 由一组节点用于master不需要太多，一般高可用的话需要三个（根据集群规模来判断），nodes节点（worker节点）就是干活的，Kubernetes上提供的各种资源服务，运行在node节点上面。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="k8s组件" scheme="http://team.jiunile.com/tags/k8s%E7%BB%84%E4%BB%B6/"/>
    
      <category term="k8s原理" scheme="http://team.jiunile.com/tags/k8s%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes修改主机ip</title>
    <link href="http://team.jiunile.com//blog/2019/12/k8s-kubeadm-edit-hostip.html"/>
    <id>http://team.jiunile.com//blog/2019/12/k8s-kubeadm-edit-hostip.html</id>
    <published>2019-12-05T12:00:00.000Z</published>
    <updated>2020-09-02T03:31:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于外部等不确定因素印象，kubernetes集群中的主机IP修改了，会导致集群受影响，故出以下教程来保证集群的稳定性。此教程适用于kubeadm安装的kubernetes集群，使用版本kubeadm1.15+ &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;修改master主机ip&quot;&gt;&lt;a href=&quot;#修改master主机ip&quot; class=&quot;headerlink&quot; title=&quot;修改master主机ip&quot;&gt;&lt;/a&gt;修改master主机ip&lt;/h2&gt;&lt;h3 id=&quot;方式一：通过kubeadm命令进行调整&quot;&gt;&lt;a href=&quot;#方式一：通过kubeadm命令进行调整&quot; class=&quot;headerlink&quot; title=&quot;方式一：通过kubeadm命令进行调整&quot;&gt;&lt;/a&gt;方式一：通过kubeadm命令进行调整&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#kubeadm.conf 配置文件如下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apiVersion: kubeadm.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind: ClusterConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetesVersion: v1.15.3 &lt;span class=&quot;comment&quot;&gt;#--&amp;gt;这里改成你集群对应的版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新生成/etc/kubernetes目录下的conf文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init phase kubeconfig all --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#运行上述命令会影响以下文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#admin.conf	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#controller-manager.conf	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#kubelet.conf	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#scheduler.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新生成manifests目录下的yaml配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init phase control-plane all --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#运行上述命令会影响以下文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#manifests/kube-apiserver.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#manifests/kube-controller-manager.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#manifests/kube-scheduler.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新生成etcd.yaml,如果是外部etcd则略过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init phase etcd &lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#运行上述命令会影响以下文件，外部etcd则不会影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#manifests/etcd.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新生成组件配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init phase addon all --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#运行上述命令会影响以下组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#kube-proxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coredns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#备份/etc/kubernetes/pki目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp -r /etc/kubernetes/pki /etc/kubernetes/pki-old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /etc/kubernetes/pki/apiserver.*  /etc/kubernetes/pki/front-proxy-client* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /etc/kubernetes/pki/etcd/healthcheck-client* /etc/kubernetes/pki/etcd/peer* /etc/kubernetes/pki/etcd/server*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新生成证书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init phase certs all --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方式二：通过sed-命令进行调整&quot;&gt;&lt;a href=&quot;#方式二：通过sed-命令进行调整&quot; class=&quot;headerlink&quot; title=&quot;方式二：通过sed 命令进行调整&quot;&gt;&lt;/a&gt;方式二：通过sed 命令进行调整&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#修改/etc/kubernetes 目录下的配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/oldip/newip/g&#39;&lt;/span&gt; `grep &lt;span class=&quot;string&quot;&gt;&quot;oldip&quot;&lt;/span&gt; -rl /etc/kubernetes`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#修改kube-proxy configmap配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl  get cm kube-proxy -n kube-system -o yaml &amp;gt; proxy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/oldip/newip/g&#39;&lt;/span&gt; proxy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; proxy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#重新renew证书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubeadm alpha certs renew all --config=/root/kubeadm.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于外部等不确定因素印象，kubernetes集群中的主机IP修改了，会导致集群受影响，故出以下教程来保证集群的稳定性。此教程适用于kubeadm安装的kubernetes集群，使用版本kubeadm1.15+ &lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="kubeadm" scheme="http://team.jiunile.com/tags/kubeadm/"/>
    
      <category term="主机名" scheme="http://team.jiunile.com/tags/%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
    
      <category term="主机ip" scheme="http://team.jiunile.com/tags/%E4%B8%BB%E6%9C%BAip/"/>
    
  </entry>
  
</feed>
