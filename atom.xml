<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CloudNative 架构</title>
  <subtitle>CloudNative|云原生应用架构|云原生架构|容器化架构|微服务架构|平台架构|基础架构</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://team.jiunile.com/"/>
  <updated>2020-10-23T06:19:04.000Z</updated>
  <id>http://team.jiunile.com/</id>
  
  <author>
    <name>icyboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 中 Storage-driver 启用 Overlay2 并限制单个容器的磁盘空间</title>
    <link href="http://team.jiunile.com//blog/2020/10/docker-storage-driver.html"/>
    <id>http://team.jiunile.com//blog/2020/10/docker-storage-driver.html</id>
    <published>2020-10-23T12:00:00.000Z</published>
    <updated>2020-10-23T06:19:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;目前 docker 中常见的 Storage-driver 主要有 AUFS、Devicemapper 以及 Overlay2，这三种文件存储驱动这里简单介绍下。同时着重介绍 Overlay2 的使用事项。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;AUFS&quot;&gt;&lt;a href=&quot;#AUFS&quot; class=&quot;headerlink&quot; title=&quot;AUFS&quot;&gt;&lt;/a&gt;AUFS&lt;/h2&gt;&lt;h3 id=&quot;如何存储文件？&quot;&gt;&lt;a href=&quot;#如何存储文件？&quot; class=&quot;headerlink&quot; title=&quot;如何存储文件？&quot;&gt;&lt;/a&gt;如何存储文件？&lt;/h3&gt;&lt;p&gt;AUFS 使用多层目录存储，每一次目录在 Docker 中称之为层（layer），最终呈现给用户的则是一个普通的单层文件系统，我们把多层以单一层的方式呈现出来的过程叫做联合挂载。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/mnt       联合挂载点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ↓     ↓     ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff      容器层（可读写）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ↓     ↓     ↓&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff      镜像层（只读）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/var/lib/docker/aufs/diff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff 文件夹&lt;/code&gt;：存储镜像内容，每一层都存储在以镜像层 ID 命名的子文件夹中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layers 文件夹&lt;/code&gt;：存储镜像层关系的元数据，在 diff 文件夹下的每个镜像层在这里都会有一个文件，文件的内容为该层镜像的父及镜像的 ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mnt 文件夹&lt;/code&gt;：联合挂载点目录，未生成容器时，改目录未空。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;读写文件&quot;&gt;&lt;a href=&quot;#读写文件&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h3&gt;&lt;h4 id=&quot;读文件&quot;&gt;&lt;a href=&quot;#读文件&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h4&gt;&lt;p&gt;当读取的文件在容器层时，直接从容器层读取，当文件不存在容器层时，则从镜像层中读取，当文件既在镜像层又在容器层时，则从容器层读取&lt;/p&gt;
&lt;h4 id=&quot;修改或删除文件&quot;&gt;&lt;a href=&quot;#修改或删除文件&quot; class=&quot;headerlink&quot; title=&quot;修改或删除文件&quot;&gt;&lt;/a&gt;修改或删除文件&lt;/h4&gt;&lt;p&gt;当第一次修改文件时，AUFS 会触发写时复制，先从镜像层复制文件到容器层，然后在执行修改操作。当修改文件或目录时，AUFS 并不会真正从镜像中删除，而是创建一个特殊的文件或文件夹（whiteout），这种特殊的文件或文件夹会组织容器访问。&lt;/p&gt;
&lt;h3 id=&quot;优缺点&quot;&gt;&lt;a href=&quot;#优缺点&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h3&gt;&lt;p&gt;在容器密度比较高的场景下，AUFS 是非常好的选择，因为 AUFS 的容器间共享镜像层的特性使其磁盘利用率很高，容器的启动时间很短。&lt;/p&gt;
&lt;p&gt;AUFS 的写时复制策略会带来很高的性能开销，因为 AUFS 对文件的第一次更改需要将整个文件复制到读写层，当容器层数很多或文件所在目录很深时尤其明显。其次 AUFS 未能进入 Linux 内核主线。&lt;/p&gt;
&lt;h2 id=&quot;Devicemapper&quot;&gt;&lt;a href=&quot;#Devicemapper&quot; class=&quot;headerlink&quot; title=&quot;Devicemapper&quot;&gt;&lt;/a&gt;Devicemapper&lt;/h2&gt;&lt;h3 id=&quot;如何存储文件？-1&quot;&gt;&lt;a href=&quot;#如何存储文件？-1&quot; class=&quot;headerlink&quot; title=&quot;如何存储文件？&quot;&gt;&lt;/a&gt;如何存储文件？&lt;/h3&gt;&lt;p&gt;Devicemapper 使用专门的块设备来实现镜像的存储，并且像 AUFS 一样使用了写时复制的技术来保障最大程度节省存储空间，Devicemapper 的镜像分层使用快照的方式实现。&lt;/p&gt;
&lt;p&gt;Devicemapper 创建镜像的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个精简配置池，精简配置池由块设备或稀疏文件创建。&lt;/li&gt;
&lt;li&gt;接下来创建一个基础设备。&lt;/li&gt;
&lt;li&gt;每个镜像和镜像层都是基础设备的快照；在写快照支持写时复制策略，这意味着它们起始都是空的，当有数据写入时才耗费空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/sd-dm.jpg&quot; alt=&quot;device mapper&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;读写文件-1&quot;&gt;&lt;a href=&quot;#读写文件-1&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h3&gt;&lt;h4 id=&quot;读文件-1&quot;&gt;&lt;a href=&quot;#读文件-1&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/sd-dm-read.jpg&quot; alt=&quot;device mapper read&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某个进程发出读取文件的请求；由于容器只是镜像的精简快照 (thin snapshot)，它并没有这个文件。但它有指向这个文件在下面层中存储位置的指针。&lt;/li&gt;
&lt;li&gt;Devicemapper 由指针找到在镜像层号为 a005e 中的块号为 0xf33 的数据；&lt;/li&gt;
&lt;li&gt;Devicemapper 将这个位置的文件复制到容器的存储区内；&lt;/li&gt;
&lt;li&gt;Devicemapper 将数据返回给应用进程；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;写文件&quot;&gt;&lt;a href=&quot;#写文件&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h4&gt;&lt;p&gt;在 Devicemapper 中，对容器的写操作由“需要时分配”策略完成。更新已有数据由“写时复制”策略完成，这些操作都在块的层次上完成。当我们需要写数据时，则向瘦供给池（thinpool）动态申请存储空间生成读写层，然后把数据复制到读写层进行修改。Devicemapper 默认每次申请的大小是 64KB 或者 64KB 的倍数，因此每次新生成的读写层的大小都是 64KB 或者 64KB 的倍数。&lt;/p&gt;
&lt;h3 id=&quot;优缺点-1&quot;&gt;&lt;a href=&quot;#优缺点-1&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h3&gt;&lt;p&gt;Devicemapper 的写时复制策略以 64KB 作为粒度，意味着无论是对 32KB 的文件还是对 1GB 大小的文件的修改都仅复制 64KB 大小的文件。这相对于在文件层面进行的读操作具有很明显的性能优势。&lt;/p&gt;
&lt;p&gt;但是，如果容器频繁对小于 64KB 的文件进行改写，Devicemapper 的性能是低于 AUFS 的。同时 Devicemapper 不是最有效使用存储空间的 storage driver，启动 n 个相同的容器就复制了 n 份文件在内存中，这对内存的影响很大。所以 Devicemapper 并不适合容器密度高的场景。&lt;/p&gt;
&lt;h2 id=&quot;Overlay2&quot;&gt;&lt;a href=&quot;#Overlay2&quot; class=&quot;headerlink&quot; title=&quot;Overlay2&quot;&gt;&lt;/a&gt;Overlay2&lt;/h2&gt;&lt;h3 id=&quot;如何存储文件？-2&quot;&gt;&lt;a href=&quot;#如何存储文件？-2&quot; class=&quot;headerlink&quot; title=&quot;如何存储文件？&quot;&gt;&lt;/a&gt;如何存储文件？&lt;/h3&gt;&lt;p&gt;Overlay2 将一个 Linux 主机中的两个目录组合起来，一个在上，一个在下，对外提供统一的视图。这两个目录就是层 layer，将两个层组合在一起的技术被成为联合挂载（union mount）。在 Overlay2 中，上层的目录被称作 &lt;code&gt;upperdir&lt;/code&gt;，下层的，目录被称作 &lt;code&gt;lowerdir&lt;/code&gt;，对外提供的统一视图被称作 &lt;code&gt;merged&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/images/sd-ol2.jpg&quot; alt=&quot;overlay2&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意到，镜像层和容器层可以有相同的文件，这中情况下，&lt;code&gt;upperdir&lt;/code&gt; 中的文件覆盖 &lt;code&gt;lowerdir&lt;/code&gt; 中的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Overlay2 文件系统最多支持 128 个层数叠加，也就是说你的 Dockerfile 最多只能写 128 行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;读写文件-2&quot;&gt;&lt;a href=&quot;#读写文件-2&quot; class=&quot;headerlink&quot; title=&quot;读写文件&quot;&gt;&lt;/a&gt;读写文件&lt;/h3&gt;&lt;h4 id=&quot;读文件-2&quot;&gt;&lt;a href=&quot;#读文件-2&quot; class=&quot;headerlink&quot; title=&quot;读文件&quot;&gt;&lt;/a&gt;读文件&lt;/h4&gt;&lt;p&gt;要读的文件不在 container layer 中，那就从 &lt;code&gt;lowerdir&lt;/code&gt; 中读，会耗费一点性能；要读的文件之存在于 container layer 中，直接从 &lt;code&gt;upperdir&lt;/code&gt; 中读；要读的文件在container layer 和 image layer 中都存在, 从 &lt;code&gt;upperdir&lt;/code&gt; 中读文件&lt;/p&gt;
&lt;h4 id=&quot;写文件-1&quot;&gt;&lt;a href=&quot;#写文件-1&quot; class=&quot;headerlink&quot; title=&quot;写文件&quot;&gt;&lt;/a&gt;写文件&lt;/h4&gt;&lt;p&gt;在第一次修改时，文件不在 container layer(upperdir) 中，overlay driver 调用写时复制将文件从 &lt;code&gt;lowerdir&lt;/code&gt; 读到 &lt;code&gt;upperdir&lt;/code&gt; 中，然后对文件的副本做出修改。文件被删除时，和 AUFS 一样，相应的 whiteout 文件被创建在 &lt;code&gt;upperdir&lt;/code&gt;。并不删除容器层(lowerdir) 中的文件，&lt;code&gt;whiteout&lt;/code&gt; 文件屏蔽了它的存在。&lt;/p&gt;
&lt;h3 id=&quot;优缺点-2&quot;&gt;&lt;a href=&quot;#优缺点-2&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h3&gt;&lt;p&gt;Overlay2 的拷贝操作工作在文件层面上，也就是对文件的第一次修改需要复制整个文件，会带来一些性能开销，在修改大文件时尤其明显。但 Overlay2 的拷贝操作比 AUFS 还是快一点，因为 AUFS 有很多层，而 Overlay2 只有两层，所以 Overlay2 在文件的搜索方面相对于 AUFS 具有优势。Overlay2 支持页缓存的共享，这意味着多个使用同一文件的容器可以共享同一页缓存，这使得 Overlay2 具有很高的内存使用效率。&lt;/p&gt;
&lt;h2 id=&quot;如何使用-Overlay2&quot;&gt;&lt;a href=&quot;#如何使用-Overlay2&quot; class=&quot;headerlink&quot; title=&quot;如何使用 Overlay2&quot;&gt;&lt;/a&gt;如何使用 Overlay2&lt;/h2&gt;&lt;h3 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Docker 版本必须高于 17.06.02&lt;/li&gt;
&lt;li&gt;如果操作系统是 RHEL 或 CentOS，内核版本必须高于 3.10.0-514，其他 Linux 内核版本必须高于 4.0&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overlay2 最好搭配 xfs 文件系统使用，并且使用 xfs 作为底层文件系统时，d_type 必须开启&lt;/p&gt;
&lt;p&gt;验证 d_type 是否开启：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xfs_info /var/lib/docker | grep ftype&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当输出结果中有 &lt;code&gt;ftype=1&lt;/code&gt; 时，表示 d_type 已经开启。如果为 0 时，则需要重新格式化磁盘。命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkfs.xfs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; -n ftype=1 /path/to/disk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;限制单个容器可占用磁盘空间&quot;&gt;&lt;a href=&quot;#限制单个容器可占用磁盘空间&quot; class=&quot;headerlink&quot; title=&quot;限制单个容器可占用磁盘空间&quot;&gt;&lt;/a&gt;限制单个容器可占用磁盘空间&lt;/h3&gt;&lt;h4 id=&quot;开启-xfs-的-quota-特性&quot;&gt;&lt;a href=&quot;#开启-xfs-的-quota-特性&quot; class=&quot;headerlink&quot; title=&quot;开启 xfs 的 quota 特性&quot;&gt;&lt;/a&gt;开启 xfs 的 quota 特性&lt;/h4&gt;&lt;p&gt;在 &lt;code&gt;/etc/fstab&lt;/code&gt; 中设置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UUID=4cbf4a19-1fba-4027-bf92-9aa969683fa9     /var/lib/docker   xfs    defaults,pquota  0   0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;/var/lib/docker&lt;/code&gt; 卸载后重新挂载即可。&lt;/p&gt;
&lt;h4 id=&quot;配置-docker-daemon&quot;&gt;&lt;a href=&quot;#配置-docker-daemon&quot; class=&quot;headerlink&quot; title=&quot;配置 docker daemon&quot;&gt;&lt;/a&gt;配置 docker daemon&lt;/h4&gt;&lt;p&gt;&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; 配置文件如下，这里将每个容器可以使用的磁盘空间设置为1G：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;storage-driver&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;overlay2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;storage-opts&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;overlay2.override_kernel_check=true&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;overlay2.size=1G&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;写入文件测试&quot;&gt;&lt;a href=&quot;#写入文件测试&quot; class=&quot;headerlink&quot; title=&quot;写入文件测试&quot;&gt;&lt;/a&gt;写入文件测试&lt;/h4&gt;&lt;p&gt;重启docker后，启动一个容器，在容器中创建文件。&lt;/p&gt;
&lt;p&gt;先创建一个1000M的文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# dd if=/dev/zero of=/a bs=100M count=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10+0 records &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10+0 records out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后创建第二个1000M的文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# dd if=/dev/zero of=/b bs=100M count=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd: writing &lt;span class=&quot;string&quot;&gt;&#39;/b&#39;&lt;/span&gt;: No space left on device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2+0 records &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0+1 records out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到第二个 1000M 文件因为空间不足创建失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;目前 docker 中常见的 Storage-driver 主要有 AUFS、Devicemapper 以及 Overlay2，这三种文件存储驱动这里简单介绍下。同时着重介绍 Overlay2 的使用事项。&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://team.jiunile.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://team.jiunile.com/tags/docker/"/>
    
      <category term="storage-driver" scheme="http://team.jiunile.com/tags/storage-driver/"/>
    
      <category term="overlay2" scheme="http://team.jiunile.com/tags/overlay2/"/>
    
  </entry>
  
  <entry>
    <title>带你了解 Kube-proxy 工作原理</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-kube-proxy.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-kube-proxy.html</id>
    <published>2020-10-22T12:00:00.000Z</published>
    <updated>2020-10-22T07:20:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;kube-proxy介绍&quot;&gt;&lt;a href=&quot;#kube-proxy介绍&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy介绍&quot;&gt;&lt;/a&gt;kube-proxy介绍&lt;/h2&gt;&lt;h3 id=&quot;为什么需要kube-proxy&quot;&gt;&lt;a href=&quot;#为什么需要kube-proxy&quot; class=&quot;headerlink&quot; title=&quot;为什么需要kube-proxy&quot;&gt;&lt;/a&gt;为什么需要kube-proxy&lt;/h3&gt;&lt;p&gt;我们知道容器的特点是快速创建、快速销毁，Kubernetes Pod 和容器一样只具有临时的生命周期，一个 Pod 随时有可能被终止或者漂移，随着集群的状态变化而变化，一旦Pod 变化，则该 Pod 提供的服务也就无法访问，如果直接访问 Pod 则无法实现服务的连续性和高可用性，因此显然不能使用 Pod 地址作为服务暴露端口。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法和传统数据中心解决无状态服务高可用的思路完全一样，通过负载均衡和 VIP 实现后端真实服务的自动转发、故障转移。&lt;/p&gt;
&lt;p&gt;这个负载均衡在 Kubernetes 中称为 Service，VIP 即 Service ClusterIP，因此可以认为Kubernetes 的 Service 就是一个四层负载均衡，Kubernetes 对应的还有七层负载均衡 Ingress，本文仅介绍 Kubernetes Service。&lt;/p&gt;
&lt;p&gt;这个 Service 就是由 kube-proxy 实现的，ClusterIP 不会因为 Pod 状态改变而变，需要注意的是 VIP 即 ClusterIP 是个假的 IP，这个 IP 在整个集群中根本不存在，当然也就无法通过IP协议栈无法路由，底层 underlay 设备更无法感知这个 IP 的存在，因此 ClusterIP 只能是单主机（Host Only）作用域可见，这个IP在其他节点以及集群外均无法访问。&lt;/p&gt;
&lt;p&gt;Kubernetes 为了实现在集群所有的节点都能够访问 Service，kube-proxy 默认会在所有的 Node 节点都创建这个 VIP 并且实现负载，所以在部署 Kubernetes 后发现 kube-proxy 是一个 DaemonSet。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而 Service 负载之所以能够在 Node 节点上实现是因为无论 Kubernetes 使用哪个网络模型，均需要保证满足如下三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器之间要求不需要任何NAT能直接通信；&lt;/li&gt;
&lt;li&gt;容器与Node之间要求不需要任何NAT能直接通信；&lt;/li&gt;
&lt;li&gt;容器看到自身的IP和外面看到它的IP必须是一样的，即不存在IP转化的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至少第 2 点是必须满足的，有了如上几个假设，Kubernetes Service 才能在 Node 上实现，否则 Node 不通 Pod IP 也就实现不了了。&lt;/p&gt;
&lt;p&gt;有人说既然 kube-proxy 是四层负载均衡，那 kube-proxy 应该可以使用 haproxy、nginx 等作为负载后端啊？&lt;/p&gt;
&lt;p&gt;事实上确实没有问题，不过唯一需要考虑的就是性能问题，如上这些负载均衡功能都强大，但毕竟还是基于用户态转发或者反向代理实现的，性能必然不如在内核态直接转发处理好。&lt;/p&gt;
&lt;p&gt;因此 kube-proxy 默认会优先选择基于内核态的负载作为后端实现机制，目前 kube-proxy 默认是通过 iptables 实现负载的，在此之前还有一种称为 userspace 模式，其实也是基于 iptables 实现，可以认为当前的 iptables 模式是对之前 userspace 模式的优化。&lt;/p&gt;
&lt;p&gt;本节接下来将详细介绍kube-proxy iptables模式的实现原理。&lt;/p&gt;
&lt;h3 id=&quot;kube-proxy-iptables-模式实现原理&quot;&gt;&lt;a href=&quot;#kube-proxy-iptables-模式实现原理&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy iptables 模式实现原理&quot;&gt;&lt;/a&gt;kube-proxy iptables 模式实现原理&lt;/h3&gt;&lt;h4 id=&quot;ClusterIP&quot;&gt;&lt;a href=&quot;#ClusterIP&quot; class=&quot;headerlink&quot; title=&quot;ClusterIP&quot;&gt;&lt;/a&gt;ClusterIP&lt;/h4&gt;&lt;p&gt;首先创建了一个 ClusterIP 类型的 Service:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc -l owner=int32bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   ClusterIP   10.106.224.41   &amp;lt;none&amp;gt;        8080/TCP   163m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 ClusterIP 为 10.106.224.41，我们可以验证这个IP在本地是不存在的:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# ping -c 2 -w 2 10.106.224.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.106.224.41 (10.106.224.41) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 10.106.224.41 ping statistics ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 packets transmitted, 0 received, 100% packet loss, time 1025ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# ip a | grep 10.106.224.41&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;不要尝试去 ping ClusterIP，它不可能通的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时在 Node 节点 192.168.193.172 上访问该 Service 服务，首先流量到达的是 OUTPUT 链，这里我们只关心 nat 表的 OUTPUT 链：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A OUTPUT&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A OUTPUT -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该链跳转到 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 子链中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SERVICES&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.244.0.0/16 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.106.224.41/32 -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1: cluster IP&quot;&lt;/span&gt; -m tcp --dport 8080 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.106.224.41/32 -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1: cluster IP&quot;&lt;/span&gt; -m tcp --dport 8080 -j KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现与之相关的有两条规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条负责打标记 &lt;code&gt;MARK 0x4000/0x4000&lt;/code&gt;，后面会用到这个标记。&lt;/li&gt;
&lt;li&gt;第二条规则跳到 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 子链。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 子链规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SVC-RPP7DHNHMGOIIFDC&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -m statistic --mode random --probability 0.33332999982 -j KUBE-SEP-FTIQ6MSD3LWO5HZX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-SQBK6CVV7ZCKBTVI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SVC-RPP7DHNHMGOIIFDC -j KUBE-SEP-IAZPHGLZVO2SWOVD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这几条规则看起来复杂，其实实现的功能很简单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/3 的概率跳到子链 &lt;code&gt;KUBE-SEP-FTIQ6MSD3LWO5HZX&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;剩下概率的 1/2，(1 - 1/3) * 1/2 == 1/3，即 1/3 的概率跳到子链 &lt;code&gt;KUBE-SEP-SQBK6CVV7ZCKBTVI&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;剩下 1/3 的概率跳到 &lt;code&gt;KUBE-SEP-IAZPHGLZVO2SWOVD&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们查看其中一个子链 KUBE-SEP-FTIQ6马上到！3LWO5HZX规则:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SEP-FTIQ6MSD3LWO5HZX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SEP-FTIQ6MSD3LWO5HZX -p tcp -m tcp -j DNAT --to-destination 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见这条规则的目的是做了一次 DNAT，DNAT 目标为其中一个 Endpoint，即 Pod 服务。&lt;/p&gt;
&lt;p&gt;由此可见子链 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 的功能就是按照概率均等的原则DNAT 到其中一个 Endpoint IP，即 Pod IP，假设为 10.244.1.2，&lt;/p&gt;
&lt;p&gt;此时相当于:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.106.224.41:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxX -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着来到 POSTROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A POSTROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes postrouting rules&quot;&lt;/span&gt; -j KUBE-POSTROUTING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-POSTROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service traffic requiring SNAT&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两条规则只做一件事就是只要标记了 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包就一律做 MASQUERADE（SNAT)，由于 10.244.1.2 默认是从 flannel.1 转发出去的，因此会把源IP改为 flannel.1 的IP &lt;code&gt;10.244.0.0&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.106.224.41:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.172:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  SNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是常规的走 Vxlan 隧道转发流程了，这里不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;NodePort&quot;&gt;&lt;a href=&quot;#NodePort&quot; class=&quot;headerlink&quot; title=&quot;NodePort&quot;&gt;&lt;/a&gt;NodePort&lt;/h4&gt;&lt;p&gt;接下来研究下 NodePort 过程，首先创建如下 Service:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc -l owner=int32bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   NodePort   10.106.224.41   &amp;lt;none&amp;gt;        8080:30419/TCP   3h30m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 Service 的 NodePort 端口为 30419。&lt;/p&gt;
&lt;p&gt;假设有一个外部IP 192.168.193.197，通过 &lt;code&gt;192.168.193.172:30419&lt;/code&gt; 访问服务。&lt;/p&gt;
&lt;p&gt;首先到达 PREROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A PREROUTING&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A PREROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-SERVICES&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODEPORTS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PREROUTING 的规则非常简单，凡是发给自己的包，则交给子链 &lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 处理。注意前面省略了判断 ClusterIP 的部分规则。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KUBE-NODEPORTS&lt;/code&gt; 规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t nat | grep -- &#39;-A KUBE-NODEPORTS&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1:&quot;&lt;/span&gt; -m tcp --dport 30419 -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODEPORTS -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;default/kubernetes-bootcamp-v1:&quot;&lt;/span&gt; -m tcp --dport 30419 -j KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个规则首先给包打上标记 &lt;code&gt;0x4000/0x4000&lt;/code&gt;，然后交给子链 &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 处理， &lt;code&gt;KUBE-SVC-RPP7DHNHMGOIIFDC&lt;/code&gt; 刚刚已经见面过了，其功能就是按照概率均等的原则 DNAT 到其中一个 Endpoint IP，即 Pod IP，假设为10.244.1.2。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:30419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时发现 10.244.1.2 不是自己的IP，于是经过路由判断目标为 10.244.1.2 需要从 flannel.1 发出去。&lt;/p&gt;
&lt;p&gt;接着到了 &lt;code&gt;FORWARD&lt;/code&gt; 链，&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t filter | grep -- &#39;-A FORWARD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A FORWARD -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes forwarding rules&quot;&lt;/span&gt; -j KUBE-FORWARD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables-save -t filter | grep -- &#39;-A KUBE-FORWARD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-FORWARD -m conntrack --ctstate INVALID -j DROP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-FORWARD -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes forwarding rules&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;FORWARD 表在这里只是判断下，只允许打了标记 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包才允许转发。&lt;/p&gt;
&lt;p&gt;最后来到 &lt;code&gt;POSTROUTING&lt;/code&gt; 链，这里和 ClusterIP 就完全一样了，在 &lt;code&gt;KUBE-POSTROUTING&lt;/code&gt; 中做一次 &lt;code&gt;MASQUERADE&lt;/code&gt;(SNAT)，最后结果:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:30419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |  SNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.1.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;kube-proxy-使用-iptables-存在的问题&quot;&gt;&lt;a href=&quot;#kube-proxy-使用-iptables-存在的问题&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy 使用 iptables 存在的问题&quot;&gt;&lt;/a&gt;kube-proxy 使用 iptables 存在的问题&lt;/h3&gt;&lt;p&gt;我们发现基于 iptables 模式的 kube-proxy ClusterIP 和 NodePort 都是基于 iptables 规则实现的，我们至少发现存在如下几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iptables 规则复杂零乱，真要出现什么问题，排查 iptables 规则必然得掉层皮。 &lt;code&gt;LOG+TRACE&lt;/code&gt; 大法也不好使。&lt;/li&gt;
&lt;li&gt;iptables 规则多了之后性能下降，这是因为 iptables 规则是基于链表实现，查找复杂度为 O(n)，当规模非常大时，查找和处理的开销就特别大。据&lt;a href=&quot;https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方说法&lt;/a&gt;，当节点到达5000 个时，假设有 2000 个 NodePort Service，每个 Service 有 10 个 Pod，那么在每个 Node 节点中至少有 20000 条规则，内核根本支撑不住，iptables 将成为最主要的性能瓶颈。&lt;/li&gt;
&lt;li&gt;iptables 主要是专门用来做主机防火墙的，而不是专长做负载均衡的。虽然通过 iptables 的 &lt;code&gt;statistic&lt;/code&gt; 模块以及 DNAT 能够实现最简单的只支持概率轮询的负载均衡，但是往往我们还需要更多更灵活的算法，比如基于最少连接算法、源地址 HASH 算法等。而同样基于 netfilter 的 ipvs 却是专门做负载均衡的，配置简单，基于散列查找 O(1) 复杂度性能好，支持数十种调度算法。因此显然 ipvs 比 iptables 更适合做 kube-proxy 的后端，毕竟专业的人做专业的事，物尽其美。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文接下来将介绍 kube-proxy 的 ipvs 实现，由于本人之前也是对 ipvs 很陌生，没有用过，专门学习了下 ipvs，因此在第二章简易介绍了下 ipvs，如果已经很熟悉 ipvs 了，可以直接跳过，这一章和 Kubernetes 几乎没有任何关系。&lt;/p&gt;
&lt;h2 id=&quot;IPVS-简易入门&quot;&gt;&lt;a href=&quot;#IPVS-简易入门&quot; class=&quot;headerlink&quot; title=&quot;IPVS 简易入门&quot;&gt;&lt;/a&gt;IPVS 简易入门&lt;/h2&gt;&lt;h3 id=&quot;IPVS-简介&quot;&gt;&lt;a href=&quot;#IPVS-简介&quot; class=&quot;headerlink&quot; title=&quot;IPVS 简介&quot;&gt;&lt;/a&gt;IPVS 简介&lt;/h3&gt;&lt;p&gt;我们接触比较多的是应用层负载均衡，比如 haproxy、nginx、F5 等，这些负载均衡工作在用户态，因此会有对应的进程和监听 socket，一般能同时支持 4 层负载和 7 层负载，使用起来也比较方便。&lt;/p&gt;
&lt;p&gt;LVS 是国内章文嵩博士开发并贡献给社区的（&lt;a href=&quot;http://jm.taobao.org/2016/06/02/zhangwensong-and-load-balance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;章文嵩博士和他背后的负载均衡帝国&lt;/a&gt;)，主要由 ipvs 和 ipvsadm 组成，ipvs 是工作在内核态的 4 层负载均衡，和 iptables 一样都是基于内核底层 netfilter 实现，netfilter 主要通过各个链的钩子实现包处理和转发。ipvsadm 和 ipvs 的关系，就好比 netfilter 和 iptables 的关系，它运行在用户态，提供简单的 CLI 接口进行 ipvs 配置。&lt;/p&gt;
&lt;p&gt;由于 ipvs 工作在内核态，直接基于内核处理包转发，所以最大的特点就是性能非常好。又由于它工作在 4 层，因此不会处理应用层数据，经常有人问 ipvs 能不能做 SSL 证书卸载、或者修改 HTTP 头部数据，显然这些都不可能做的。&lt;/p&gt;
&lt;p&gt;我们知道应用层负载均衡大多数都是基于反向代理实现负载的，工作在应用层，当用户的包到达负载均衡监听器 listening 后，基于一定的算法从后端服务列表中选择其中一个后端服务进行转发。当然中间可能还会有一些额外操作，最常见的如 SSL 证书卸载。&lt;/p&gt;
&lt;p&gt;而 ipvs 工作在内核态，只处理四层协议，因此只能基于路由或者 NAT 进行数据转发，可以把 ipvs 当作一个特殊的路由器网关，这个网关可以根据一定的算法自动选择下一跳，或者把 ipvs 当作一个多重 DNAT，按照一定的算法把 ip 包的目标地址 DNAT 到其中真实服务的目标 IP。针对如上两种情况分别对应 ipvs 的两种模式–网关模式和 NAT 模式，另外 ipip 模式则是对网关模式的扩展，本文下面会针对这几种模式的实现原理进行详细介绍。&lt;/p&gt;
&lt;h3 id=&quot;IPVS-用法&quot;&gt;&lt;a href=&quot;#IPVS-用法&quot; class=&quot;headerlink&quot; title=&quot;IPVS 用法&quot;&gt;&lt;/a&gt;IPVS 用法&lt;/h3&gt;&lt;p&gt;ipvsadm 命令行用法和 iptables 命令行用法非常相似，毕竟是兄弟，比如 &lt;code&gt;-L&lt;/code&gt; 列举， &lt;code&gt;-A&lt;/code&gt; 添加， &lt;code&gt;-D&lt;/code&gt; 删除。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.172:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是其实 ipvsadm 相对 iptables 命令简直太简单了，因为没有像 iptables 那样存在各种table，table 嵌套各种链，链里串着一堆规则，ipvsadm 就只有两个核心实体，分别为service 和 server，service 就是一个负载均衡实例，而 server 就是后端 member，ipvs术语中叫做 real server，简称 RS。&lt;/p&gt;
&lt;p&gt;如下命令创建一个 service 实例 &lt;code&gt;172.17.0.1:32016&lt;/code&gt;， -t 指定监听的为 TCP 端口， -s 指定算法为轮询算法 rr(Round Robin)，ipvs 支持简单轮询(rr)、加权轮询(wrr)、最少连接(lc)、源地址或者目标地址散列(sh、dh)等 10 种调度算法。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 172.17.0.1:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后把 10.244.1.2:8080、10.244.1.3:8080、10.244.3.2:8080 添加到 service 后端 member 中。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 172.17.0.1:32016 -r 10.244.3.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;-t&lt;/code&gt; 指定 service 实例， &lt;code&gt;-r&lt;/code&gt; 指定 server 地址， &lt;code&gt;-w&lt;/code&gt; 指定权值， &lt;code&gt;-m&lt;/code&gt; 即前面说的转发模式，其中 &lt;code&gt;-m&lt;/code&gt; 表示为 &lt;code&gt;masquerading&lt;/code&gt;，即 NAT 模式， &lt;code&gt;-g&lt;/code&gt; 为 &lt;code&gt;gatewaying&lt;/code&gt;，即直连路由模式， &lt;code&gt;-i&lt;/code&gt; 为 ipip，即 &lt;code&gt;IPIP&lt;/code&gt; 隧道模式。&lt;/p&gt;
&lt;p&gt;与 iptables-save、iptables-restore 对应的工具 ipvs 也有 ipvsadm-save、ipvsadm-restore。&lt;/p&gt;
&lt;h3 id=&quot;NAT-network-access-translation-模式&quot;&gt;&lt;a href=&quot;#NAT-network-access-translation-模式&quot; class=&quot;headerlink&quot; title=&quot;NAT(network access translation) 模式&quot;&gt;&lt;/a&gt;NAT(network access translation) 模式&lt;/h3&gt;&lt;p&gt;​NAT 模式由字面意思理解就是通过 NAT 实现的，但究竟是如何 NAT 转发的，我们通过实验环境验证下。&lt;/p&gt;
&lt;p&gt;现环境中 LB 节点 IP 为 192.168.193.197，三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了模拟 LB 节点 IP 和 RS 不在同一个网络的情况，在 LB 节点中添加一个虚拟 IP 地址:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip addr add 10.222.0.1/24 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建负载均衡 Service 并把 RS 添加到 Service 中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 10.222.0.1:8080 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.194:30620 -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.226:30620 -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.222.0.1:8080 -r 192.168.193.172:30620 -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是，和应用层负载均衡如 haproxy、nginx 不一样的是，haproxy、nginx进程是运行在用户态，因此会创建 socket，本地会监听端口，而 &lt;strong&gt;ipvs 的负载是直接运行在内核态的，因此不会出现监听端口&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# netstat -lnpt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Active Internet connections (only servers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      674/systemd-resolve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      950/sshd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcp6       0      0 :::22                   :::*                    LISTEN      950/sshd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可见并没有监听 10.222.0.1:8080 Socket&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Client 节点IP为 192.168.193.226，为了和 LB 节点的虚拟 IP 10.222.0.1通，我们手动添加静态路由如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip r add 10.222.0.1 via 192.168.193.197 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时 Client 节点能够 ping 通 LB 节点 VIP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# ping -c 2 -w 2 10.222.0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PING 10.222.0.1 (10.222.0.1) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.222.0.1: icmp_seq=1 ttl=64 time=0.345 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64 bytes from 10.222.0.1: icmp_seq=2 ttl=64 time=0.249 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 10.222.0.1 ping statistics ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 packets transmitted, 2 received, 0% packet loss, time 1022ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rtt min/avg/max/mdev = 0.249/0.297/0.345/0.048 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 Client 节点到 VIP 的链路没有问题，那是否能够访问我们的 Service 呢？&lt;/p&gt;
&lt;p&gt;我们验证下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 2001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;非常意外的结果是并不通。&lt;/p&gt;
&lt;p&gt;在 RS 节点抓包如下:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-1.png&quot; alt=&quot;tcpdump ipvs&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现数据包的源 IP 为 Client IP，目标 IP 为 RS IP，换句话说，LB 节点 IPVS 只做了 DNAT，把目标 IP 改成 RS IP了，而没有修改源 IP。此时虽然 RS 和 Client 在同一个子网，链路连通性没有问题，&lt;strong&gt;但是由于 Client 节点发出去的包的目标 IP 和收到的包源 IP 不一致，因此会被直接丢弃，相当于给张三发信，李四回的信，显然不受信任&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;既然 IPVS 没有给我们做 SNAT，那自然想到的是我们手动做 SNAT，在 LB 节点添加如下 iptables 规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -m ipvs  --vaddr 10.222.0.1 --vport 8080 -j LOG --log-prefix &lt;span class=&quot;string&quot;&gt;&#39;[int32bit ipvs]&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -m ipvs  --vaddr 10.222.0.1 --vport 8080 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查 Service 是否可以访问:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 2001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;服务依然不通。并且在 LB 节点的 iptables 日志为空:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:~&lt;span class=&quot;comment&quot;&gt;# cat /var/log/syslog | grep &#39;int32bit ipvs&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-197:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也就是说，ipvs 的包根本不会经过 iptables nat 表 POSTROUTING 链？&lt;/p&gt;
&lt;p&gt;那 mangle 表呢？我们打开 LOG 查看下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t mangle -A POSTROUTING -m ipvs --vaddr 10.222.0.1 --vport 8080 -j LOG --log-prefix &lt;span class=&quot;string&quot;&gt;&quot;[int32bit ipvs]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时查看日志如下：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-iptables_ipvs.png&quot; alt=&quot;iptables_ipvs&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现在 mangle 表中可以看到 DNAT 后的包。&lt;/p&gt;
&lt;p&gt;只是 mangle 表的 POSTROUTING 并不支持 NAT 功能:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-dmesg_log.png&quot; alt=&quot;dmesg_log&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比 Kubernetes 配置发现需要设置如下系统参数:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.vs.conntrack=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次验证&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 15:28:06 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-g9bkx | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终于通了，查看 RS 抓包：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_5.png&quot; alt=&quot;tcpdump_5&quot;&gt;&lt;/p&gt;
&lt;p&gt;如期望，修改了源 IP 为 LB IP。&lt;/p&gt;
&lt;p&gt;原来需要配置 net.ipv4.vs.conntrack = 1 参数，这个问题折腾了一个晚上，不得不说目前 ipvs 的文档都太老了。&lt;/p&gt;
&lt;p&gt;前面是通过手动 iptables 实现 SNAT 的，性能可能会有损耗，于是如下开源项目通过修改 lvs 直接做 SNAT:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小米运维部在 LVS 的 FULLNAT 基础上，增加了 SNAT 网关功能，参考 &lt;a href=&quot;https://github.com/xiaomi-sa/dsnat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xiaomi-sa/dsnat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jlijian3/lvs-snat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lvs-snat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 SNAT 的办法，是否还有其他办法呢？想想我们最初的问题，Client 节点发出去的包的目标 IP 和收到的包源 IP 不一致导致包被丢弃，那解决问题的办法就是把包重新引到 LB 节点上，只需要在所有的 RS 节点增加如下路由即可:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip r add 192.168.193.226 via 192.168.193.197 dev ens5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时我们再次检查我们的 Service 是否可连接:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i -m 2 --retry 1 -sSL 10.222.0.1:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 03:21:47 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-4v9z4 | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果没有问题。&lt;/p&gt;
&lt;p&gt;不过我们是通过手动添加 Client IP 到所有 RS 的明细路由实现的，如果 Client 不固定，这种方案仍然不太可行，所以通常做法是干脆把所有 RS 默认路由指向 LB 节点，即把LB 节点当作所有 RS 的默认网关。&lt;/p&gt;
&lt;p&gt;由此可知，用户通过 LB 地址访问服务，LB 节点 IPVS 会把用户的目标 IP 由 LB IP 改为 RS IP，源 IP 不变，包不经过 iptables 的 OUTPUT 直接到达 POSTROUTING 转发出去，包回来的时候也必须先到 LB 节点，LB 节点把目标 IP 再改成用户的源 IP，最后转发给用户。&lt;/p&gt;
&lt;p&gt;显然这种模式来回都需要经过 LB 节点，因此又称为双臂模式。&lt;/p&gt;
&lt;h3 id=&quot;网关-Gatewaying-模式&quot;&gt;&lt;a href=&quot;#网关-Gatewaying-模式&quot; class=&quot;headerlink&quot; title=&quot;网关(Gatewaying)模式&quot;&gt;&lt;/a&gt;网关(Gatewaying)模式&lt;/h3&gt;&lt;p&gt;网关模式（Gatewaying）又称为直连路由模式（Direct Routing）、透传模式，&lt;strong&gt;所谓透传即 LB 节点不会修改数据包的源 IP、端口以及目标 IP、端口&lt;/strong&gt;，LB 节点做的仅仅是路由转发出去，可以把 LB 节点看作一个特殊的路由器网关，而 RS 节点则是网关的下一跳，这就相当于对于同一个目标地址，会有多个下一跳，这个路由器网关的特殊之处在于能够根据一定的算法选择其中一个 RS 作为下一跳，达到负载均衡和冗余的效果。&lt;/p&gt;
&lt;p&gt;既然是通过直连路由的方式转发，那显然 LB 节点必须与所有的 RS 节点在同一个子网，不能跨子网，否则路由不可达。换句话说，&lt;strong&gt;这种模式只支持内部负载均衡(Internal LoadBalancer)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外如前面所述，LB 节点不会修改源端口和目标端口，因此这种模式也无法支持端口映射，换句话说 &lt;strong&gt;LB 节点监听的端口和所有 RS 节点监听的端口必须一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在假设有LB节点IP为 192.168.193.197，有三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建负载均衡Service并把RS添加到Service中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.197:30620 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.194:30620 -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.226:30620 -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.197:30620 -r 192.168.193.172:30620 -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到我们的 Service 监听的端口 30620 和 RS 的端口是一样的，并且通过 &lt;code&gt;-g&lt;/code&gt; 参数指定为直连路由模式(网关模式)。&lt;/p&gt;
&lt;p&gt;Client 节点 IP 为 192.168.193.226，我们验证 Service 是否可连接：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 5 -sSL 192.168.193.197:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl: (28) Connection timed out after 5001 milliseconds&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现并不通，在其中一个 RS 节点 192.168.193.172 上抓包:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_1.png&quot; alt=&quot;tcpdump_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如前面所说，LB 是通过路由转发的，根据路由的原理，源 MAC 地址修改为 LB 的MAC 地址，而目标 MAC 地址修改为 RS MAC 地址，相当于 RS 是 LB 的下一跳。&lt;/p&gt;
&lt;p&gt;并且源 IP 和目标 IP 都不会修改。问题就来了，我们 Client 期望访问的是 RS，但 RS 收到的目标 IP 却是 LB 的 IP，发现这个目标 IP 并不是自己的 IP，因此不会通过 INPUT链转发到用户空间，这时要不直接丢弃这个包，要不根据路由再次转发到其他地方，总之两种情况都不是我们期望的结果。&lt;/p&gt;
&lt;p&gt;那怎么办呢？为了让 RS 接收这个包，必须得让 R S有这个目标 IP 才行。于是不妨在 lo上添加个虚拟 IP，IP 地址伪装成 LB IP 192.168.193.197:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ifconfig lo:0 192.168.193.197/32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题又来了，这就相当于有两个相同的 IP，IP 重复了怎么办？办法是隐藏这个虚拟网卡，不让它回复 ARP，其他主机的 neigh 也就不可能知道有这么个网卡的存在了，参考 &lt;a href=&quot;http://kb.linuxvirtualserver.org/wiki/Using_arp_announce/arp_ignore_to_disable_ARP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using arp announce/arp ignore to disable ARP&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.lo.arp_ignore=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.lo.arp_announce=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时再次从客户端curl:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -m 2 --retry 1 -sSL 192.168.193.197:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-4v9z4 | v=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;终于通了。&lt;/p&gt;
&lt;p&gt;我们从前面的抓包中知道，源 IP 为 Client IP 192.168.193.226，因此直接回包给 Client即可，不可能也不需要再回到 LB 节点了，即 A-&amp;gt;B,B-&amp;gt;C，C-&amp;gt;A，流量方向是三角形状的，因此这种模式又称为三角模式。&lt;/p&gt;
&lt;p&gt;我们从原理中不难得出如下结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client、LB 以及所有的 RS 必须在同一个子网。&lt;/li&gt;
&lt;li&gt;LB 节点直接通过路由转发，因此性能非常高。&lt;/li&gt;
&lt;li&gt;不能做端口映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ipip-隧道模式&quot;&gt;&lt;a href=&quot;#ipip-隧道模式&quot; class=&quot;headerlink&quot; title=&quot;ipip 隧道模式&quot;&gt;&lt;/a&gt;ipip 隧道模式&lt;/h3&gt;&lt;p&gt;前面介绍了网关直连路由模式，要求所有的节点在同一个子网，而 ipip 隧道模式则主要解决这种限制，LB 节点 IP 和 RS 可以不在同一个子网，此时需要通过 ipip 隧道进行传输。&lt;/p&gt;
&lt;p&gt;现在假设有 LB 节点 IP为 &lt;code&gt;192.168.193.77/25&lt;/code&gt;，在该节点上增加一个VIP地址:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip addr add 192.168.193.48/25 dev eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有三个 RS 节点如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.193.172:30620&lt;/li&gt;
&lt;li&gt;192.168.193.194:30620&lt;/li&gt;
&lt;li&gt;192.168.193.226:30620&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上三个 RS 节点子网掩码均为 255.255.255.128，即 25 位子网，显然和 VIP 192.168.193.48/25 不在同一个子网。&lt;/p&gt;
&lt;p&gt;创建负载均衡 Service 并把 RS 添加到 Service 中:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm -A -t 192.168.193.48:30620 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.194:30620 -i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.226:30620 -i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.48:30620 -r 192.168.193.172:30620 -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意到我们的 Service 监听的端口 30620 和 RS 的端口是一样的，并且通过 -i 参数指定为 ipip 隧道模式。&lt;/p&gt;
&lt;p&gt;在所有的 RS 节点上加载 ipip 模块以及添加 VIP (和直连路由类型）:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;modprobe ipip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ifconfig tunl0  192.168.193.48/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.tunl0.arp_ignore=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysctl net.ipv4.conf.tunl0.arp_announce=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Client节点IP为192.168.193.226/25，我们验证 Service 是否可连接：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;# curl -i -sSL 192.168.193.48:30620&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 27 Nov 2019 07:05:40 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-v1-c5ccf9784-dgn74 | v=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-226:~&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Service 可访问，我们在 RS 节点上抓包如下：&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-tcpdump_3.png&quot; alt=&quot;tcpdump_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们发现和直连路由一样，源 IP 和目标 IP 没有修改。&lt;/p&gt;
&lt;p&gt;所以 IPIP 模式和网关 (Gatewaying) 模式原理基本一样，唯一不同的是网关 (Gatewaying) 模式要求所有的 RS 节点和 LB 节点在同一个子网，而 IPIP 模式则可以支持跨子网的情况，为了解决跨子网通信问题，使用了 ipip 隧道进行数据传输。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;ipvs 是一个内核态的四层负载均衡，支持 NAT、Gateway 以及 IPIP 隧道模式，Gateway 模式性能最好，但 LB 和 RS 不能跨子网，IPIP 性能次之，通过 ipip 隧道解决跨网段传输问题，因此能够支持跨子网。而 NAT 模式没有限制，这也是唯一一种支持端口映射的模式。&lt;/p&gt;
&lt;p&gt;我们不难猜想，由于 Kubernetes Service 需要使用端口映射功能，因此 kube-proxy 必然只能使用 ipvs 的 NAT 模式。&lt;/p&gt;
&lt;h2 id=&quot;kube-proxy-使用-ipvs-模式&quot;&gt;&lt;a href=&quot;#kube-proxy-使用-ipvs-模式&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy 使用 ipvs 模式&quot;&gt;&lt;/a&gt;kube-proxy 使用 ipvs 模式&lt;/h2&gt;&lt;h3 id=&quot;配置-kube-proxy-使用-ipvs-模式&quot;&gt;&lt;a href=&quot;#配置-kube-proxy-使用-ipvs-模式&quot; class=&quot;headerlink&quot; title=&quot;配置 kube-proxy 使用 ipvs 模式&quot;&gt;&lt;/a&gt;配置 kube-proxy 使用 ipvs 模式&lt;/h3&gt;&lt;p&gt;使用 kubeadm 安装 Kubernetes 可参考文档 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/pkg/proxy/ipvs/README.md#cluster-created-by-kubeadm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cluster Created by Kubeadm&lt;/a&gt;，不过这个文档的安装配置有问题 &lt;a href=&quot;https://github.com/kubernetes/kubeadm/issues/1182&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubeadm #1182&lt;/a&gt;，如下官方配置不生效:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kubeProxy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  config:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    featureGates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      SupportIPVSProxyMode:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    mode:&lt;/span&gt; ipvs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要修改为如下配置:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubeproxy.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeProxyConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;mode:&lt;/span&gt; ipvs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过如下命令确认 kube-proxy 是否修改为 ipvs:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get configmaps kube-proxy -n kube-system -o yaml | awk &#39;/mode/&amp;#123;print $2&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipvs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Service-ClusterIP-原理&quot;&gt;&lt;a href=&quot;#Service-ClusterIP-原理&quot; class=&quot;headerlink&quot; title=&quot;Service ClusterIP 原理&quot;&gt;&lt;/a&gt;Service ClusterIP 原理&lt;/h3&gt;&lt;p&gt;创建一个 ClusterIP 类似的 Service 如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# kubectl get svc | grep kubernetes-bootcamp-v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   ClusterIP   10.96.54.11   &amp;lt;none&amp;gt;        8080/TCP   2m11s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ClusterIP 10.96.54.11 为我们查看 ipvs 配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ipvsadm -S -n | grep 10.96.54.11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A -t 10.96.54.11:8080 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 10.96.54.11:8080 -r 10.244.2.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 ipvs 的 LB IP 为 ClusterIP，算法为 rr，RS 为 Pod 的 IP。&lt;/p&gt;
&lt;p&gt;另外我们发现使用的模式为 NAT 模式，这是显然的，因为除了 NAT 模式支持端口映射，其他两种均不支持端口映射，所以必须选择 NAT 模式。&lt;/p&gt;
&lt;p&gt;由前面的理论知识，ipvs 的 VIP 必须在本地存在，我们可以验证:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ip addr show kube-ipvs0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4: kube-ipvs0: &amp;lt;BROADCAST,NOARP&amp;gt; mtu 1500 qdisc noop state DOWN group default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    link/ether 46:6b:9e:af:b0:60 brd ff:ff:ff:ff:ff:ff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.0.1/32 brd 10.96.0.1 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.0.10/32 brd 10.96.0.10 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inet 10.96.54.11/32 brd 10.96.54.11 scope global kube-ipvs0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ethtool -i kube-ipvs0 | grep driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver: dummy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见 kube-proxy 首先会创建一个 dummy 虚拟网卡 kube-ipvs0，然后把所有的 Service IP 添加到 kube-ipvs0 中。&lt;/p&gt;
&lt;p&gt;我们知道基于 iptables 的 Service，ClusterIP 是一个虚拟的 IP，因此这个 IP 是 ping 不通的，但 ipvs 中这个 IP 是在每个节点上真实存在的，因此可以 ping 通:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-ping_cluster_ip.png&quot; alt=&quot;ping_cluster_ip&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然由于这个 IP 就是配置在本地虚拟网卡上，所以对诊断问题没有一点用处的。&lt;/p&gt;
&lt;p&gt;我们接下来研究下 ClusterIP 如何传递的。&lt;/p&gt;
&lt;p&gt;当我们通过如下命令连接服务时:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时由于 10.96.54.11 就在本地，所以会以这个 IP 作为出口地址，即源 IP 和目标 IP 都是 10.96.54.11，此时相当于:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 xxxx 为随机端口。&lt;/p&gt;
&lt;p&gt;然后经过 ipvs，ipvs 会从 RS ip 列中选择其中一个 Pod ip 作为目标 IP，假设为10.244.2.2:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | IPVS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们从 iptables LOG 可以验证:&lt;br&gt;&lt;img src=&quot;/images/k8s/kp-iptables_log_1.png&quot; alt=&quot;iptables_log_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们查看 OUTPUT 安全组规则如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A OUTPUT -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES ! &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 10.244.0.0/16 -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;Kubernetes service cluster ip + port for masquerade purpose&quot;&lt;/span&gt; -m &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 ipset 集合 &lt;code&gt;KUBE-CLUSTER-IP&lt;/code&gt; 保存着所有的 ClusterIP 以及监听端口。&lt;/p&gt;
&lt;p&gt;如上规则的意思就是除了 Pod 以外访问ClusterIP的包都打上 &lt;code&gt;0x4000/0x4000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;到了 POSTROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes postrouting rules&quot;&lt;/span&gt; -j KUBE-POSTROUTING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-POSTROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service traffic requiring SNAT&quot;&lt;/span&gt; -m mark --mark 0x4000/0x4000 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上规则的意思就是只要匹配 &lt;code&gt;mark 0x4000/0x4000&lt;/code&gt; 的包都做 SNAT，由于 10.244.2.2 是从 flannel.1 出去的，因此源 ip 会改成 flannel.1 的 ip &lt;code&gt;10.244.0.0&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.96.54.11:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | IPVS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.96.54.11:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 | MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0:xxxx -&amp;gt; 10.244.2.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后通过 Vxlan 隧道发到 Pod 的 Node上，转发给 Pod 的 veth，回包通过路由到达源Node 节点，源 Node 节点通过之前的 MASQUERADE 再把目标IP还原为 10.96.54.11。&lt;/p&gt;
&lt;h3 id=&quot;NodeIP-实现原理&quot;&gt;&lt;a href=&quot;#NodeIP-实现原理&quot; class=&quot;headerlink&quot; title=&quot;NodeIP 实现原理&quot;&gt;&lt;/a&gt;NodeIP 实现原理&lt;/h3&gt;&lt;p&gt;查看 Service 如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@ip-192-168-193-172:~&lt;span class=&quot;comment&quot;&gt;# kubectl get svc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                     TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes               ClusterIP   10.96.0.1     &amp;lt;none&amp;gt;        443/TCP          30h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubernetes-bootcamp-v1   NodePort    10.96.54.11   &amp;lt;none&amp;gt;        8080:32016/TCP   8h&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Service kubernetes-bootcamp-v1 的 NodePort 为 32016。&lt;/p&gt;
&lt;p&gt;现在假设集群外的一个 IP 192.168.193.197 访问 192.168.193.172:32016:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:32016&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最先到达 PREROUTING 链:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-A PREROUTING -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;kubernetes service portals&quot;&lt;/span&gt; -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-NODE-PORT -p tcp -m comment --comment &lt;span class=&quot;string&quot;&gt;&quot;Kubernetes nodeport TCP port for masquerade purpose&quot;&lt;/span&gt; -m &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; --match-set KUBE-NODE-PORT-TCP dst -j KUBE-MARK-MASQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上 4 条规则看起来复杂，其实就做一件事，如果目标地址为 NodeIP，则把包标记 &lt;code&gt;0x4000 / 0x4000&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们查看 ipvs:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ipvsadm -S -n | grep 32016&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-A -t 192.168.193.172:32016 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.1.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.1.3:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t 192.168.193.172:32016 -r 10.244.3.2:8080 -m -w 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们发现和 ClusterIP 实现原理非常相似，ipvs Service 的 VIP 为 Node IP，端口为NodePort。ipvs 会选择其中一个 Pod IP 作为 DNAT 目标，这里假设为 10.244.3.2：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxxx -&amp;gt; 192.168.193.172:32016&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     | DNAT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.193.197:xxx  --&amp;gt; 10.244.3.2:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;剩下的到了 POSTROUTING 链就和 Service ClusterIP 完全一样了，只要匹配 &lt;code&gt;0x4000/0x4000&lt;/code&gt; 的包就会做SNAT。&lt;/p&gt;
&lt;h3 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;Kubernetes 的 ClusterIP 和 NodePort 都是通过 ipvs service 实现的，Pod 当作 ipvs service 的 server，通过 NAT MQSQ 实现转发。&lt;/p&gt;
&lt;p&gt;简单来说 kube-proxy 主要在所有的 Node 节点做如下三件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有 dummy 类型虚拟网卡，则创建一个，默认名称为 &lt;code&gt;kube-ipvs0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;把 Kubernetes ClusterIP 地址添加到 &lt;code&gt;kube-ipvs0&lt;/code&gt;，同时添加到 ipset 中。&lt;/li&gt;
&lt;li&gt;创建 ipvs service，ipvs service 地址为 ClusterIP 以及 Cluster Port，ipvs server 为所有的 Endpoint 地址，即 Pod IP 及端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 ipvs 作为 kube-proxy 后端，不仅提高了转发性能，结合 ipset 还使 iptables 规则变得更“干净”清楚，从此再也不怕 iptables。&lt;/p&gt;
&lt;p&gt;更多关于 kube-proxy ipvs 参考 &lt;a href=&quot;https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IPVS-Based In-Cluster Load Balancing Deep Dive&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结-2&quot;&gt;&lt;a href=&quot;#总结-2&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文首先介绍了 kube-proxy 的功能以及 kube-proxy 基于 iptables 的实现原理，然后简单介绍了 ipvs，了解了 ipvs 支持的三种转发模式，最后介绍了 kube-proxy 基于 ipvs 的实现原理。&lt;/p&gt;
&lt;p&gt;ipvs 是专门设计用来做内核态四层负载均衡的，由于使用了 hash 表的数据结构，因此相比 iptables 来说性能会更好。基于 ipvs 实现 Service 转发，Kubernetes 几乎能够具备无限的水平扩展能力。随着 Kubernetes 的部署规模越来越大，应用越来越广泛，ipvs必然会取代 iptables 成为 Kubernetes Service 的默认实现后端。&lt;/p&gt;
&lt;p&gt;本文作者：int32bit&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kube-proxy介绍&quot;&gt;&lt;a href=&quot;#kube-proxy介绍&quot; class=&quot;headerlink&quot; title=&quot;kube-proxy介绍&quot;&gt;&lt;/a&gt;kube-proxy介绍&lt;/h2&gt;&lt;h3 id=&quot;为什么需要kube-proxy&quot;&gt;&lt;a href=&quot;#为什么需要kube-proxy&quot; class=&quot;headerlink&quot; title=&quot;为什么需要kube-proxy&quot;&gt;&lt;/a&gt;为什么需要kube-proxy&lt;/h3&gt;&lt;p&gt;我们知道容器的特点是快速创建、快速销毁，Kubernetes Pod 和容器一样只具有临时的生命周期，一个 Pod 随时有可能被终止或者漂移，随着集群的状态变化而变化，一旦Pod 变化，则该 Pod 提供的服务也就无法访问，如果直接访问 Pod 则无法实现服务的连续性和高可用性，因此显然不能使用 Pod 地址作为服务暴露端口。&lt;/p&gt;
&lt;p&gt;解决这个问题的办法和传统数据中心解决无状态服务高可用的思路完全一样，通过负载均衡和 VIP 实现后端真实服务的自动转发、故障转移。&lt;/p&gt;
&lt;p&gt;这个负载均衡在 Kubernetes 中称为 Service，VIP 即 Service ClusterIP，因此可以认为Kubernetes 的 Service 就是一个四层负载均衡，Kubernetes 对应的还有七层负载均衡 Ingress，本文仅介绍 Kubernetes Service。&lt;/p&gt;
&lt;p&gt;这个 Service 就是由 kube-proxy 实现的，ClusterIP 不会因为 Pod 状态改变而变，需要注意的是 VIP 即 ClusterIP 是个假的 IP，这个 IP 在整个集群中根本不存在，当然也就无法通过IP协议栈无法路由，底层 underlay 设备更无法感知这个 IP 的存在，因此 ClusterIP 只能是单主机（Host Only）作用域可见，这个IP在其他节点以及集群外均无法访问。&lt;/p&gt;
&lt;p&gt;Kubernetes 为了实现在集群所有的节点都能够访问 Service，kube-proxy 默认会在所有的 Node 节点都创建这个 VIP 并且实现负载，所以在部署 Kubernetes 后发现 kube-proxy 是一个 DaemonSet。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kubrenetes/kube-proxy/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/tags/ipvs/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/tags/kube-proxy/"/>
    
  </entry>
  
  <entry>
    <title>使用 eBPF 调试生产环境的 Go 程序</title>
    <link href="http://team.jiunile.com//blog/2020/10/go-debug-with-bpf.html"/>
    <id>http://team.jiunile.com//blog/2020/10/go-debug-with-bpf.html</id>
    <published>2020-10-21T12:00:00.000Z</published>
    <updated>2020-10-21T07:26:26.000Z</updated>
    
    <content type="html">&lt;p&gt;不用重新编译/部署线上程序而是借助 eBPF 即可实现对程序进行调试，接下来我们会用一个系列文章介绍我们是怎么做的，这是开篇。本篇描述了如何使用 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gobpf&lt;/a&gt; 和 uprobe 来构建一个跟踪 Go 程序函数入口参数变化的应用。这里介绍的技术可以扩展到其它编译型语言，如 C++, Rust 等等。本系列文章后续将会讨论如何使用 eBPF 来跟踪 HTTP/gRPC 数据和 SSL 等等。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当调试程序时，我们一般对捕获程序的运行时状态非常感兴趣。因为这可以让我们检查程序在干什么，并能让我们确定 bug 出现在程序的哪一块。观察运行时状态的一个简单方式是使用调试器。比如针对 Go 程序，我们可以使用 Delve 和 gdb。&lt;/p&gt;
&lt;p&gt;Delve 和 gdb 在开发环境中做调试表现没得说，但是我们一般不会在线上使用此类工具。它们的长处同时也是它们的短处，因为调试器会导致线上程序中断，甚至如果在调试过程中不小心改错某个变量的值而导致线上程序出现异常。&lt;/p&gt;
&lt;p&gt;为了让线上调试过程的侵入和影响更小，我们将会探索使用增强版的 BPF (&lt;a href=&quot;https://ebpf.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eBPF&lt;/a&gt;, Linux 4.x+ 内核可用）和更高级的 Go 库 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gobpf&lt;/a&gt; 来达成目标。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是-eBPF&quot;&gt;&lt;a href=&quot;#什么是-eBPF&quot; class=&quot;headerlink&quot; title=&quot;什么是 eBPF&quot;&gt;&lt;/a&gt;什么是 eBPF&lt;/h2&gt;&lt;p&gt;扩展型 BPF(eBPF) 是一项在 Linux 4.x+ 内核可用的技术。你可以把它看作一个轻量级的沙箱 VM, 它运行在 Linux 内核中并且提供了针对内核内存的可信访问。&lt;/p&gt;
&lt;p&gt;就像下面要说的，eBPF 允许内核运行 BPF 字节码。虽然可用的前端（这里指的是编译器前端）语言多样，但通常都是 C 语言的真子集。通常 C 代码先通过 Clang 被编译为 BPF 字节码，然后字节被验证以确保可以安全执行。这些严格的验证保证了机器码不会有意或无意地危及 Linux 内核，同时也确保了 BPF 探针在每次被触发时将会执行有限数目的指令。这些保证确保了 eBPF 可以被用于性能敏感的应用中，比如包过滤，网络监控等等。&lt;/p&gt;
&lt;p&gt;从功能上说，eBPF 允许你针对某些事件（如定时器事件，网络事件或是函数调用事件）运行受限的 C 代码。当因为一个函数调用事件被触发时，我们把这些 eBPF 代码叫做探针。这些探针既可以针对内核函数调用事件被触发（这时叫 kprobe, k 即 kernelspace), 也可以针对用户空间的函数调用事件被触发（这时叫 uprobe, u 即 userspace). 本篇文章讲解如何通过 uprobe 实现函数参数的动态追踪。&lt;/p&gt;
&lt;h2 id=&quot;Uprobes&quot;&gt;&lt;a href=&quot;#Uprobes&quot; class=&quot;headerlink&quot; title=&quot;Uprobes&quot;&gt;&lt;/a&gt;Uprobes&lt;/h2&gt;&lt;p&gt;Uprobes 允许我们通过插入一个 debug trap 指令（在 x86 上就是 &lt;code&gt;int3&lt;/code&gt;) 触发一个软中断从而实现对运行在用户空间的程序进行拦截。这也是调试器的工作原理。uprobe 运行过程本质上与其它 BPF 程序一样，可以总结为下面图示：&lt;br&gt;&lt;img src=&quot;/images/go/bpf-tracing.jpg&quot; alt=&quot;用于跟踪的 BPF（来自 Brendan Gregg)&quot;&gt;&lt;/p&gt;
&lt;p&gt;编译和验证过的 BPF 程序作为 uprobe 的一部分被执行，同时执行结果写入到一个 buffer 中。&lt;/p&gt;
&lt;p&gt;下面让我们研究下 uprobes 如何起作用的。为了演示部署 uprobes 并捕获函数参数，我们会用到这个简单的 demo 应用。该 demo 相关部分下面介绍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; 方法是一个简单的 HTTP server, 它暴露了一个监听 /e 端点的 GET 接口，该接口通过迭代逼近计算自然常数 &lt;code&gt;e&lt;/code&gt;（也叫欧拉数）. &lt;code&gt;computeE&lt;/code&gt; 方法有一个参数 iters, 它指定了逼近时的迭代次数。迭代次数越多，结果越精确，当然耗费 CPU 也越多。迭代逼近算法不是我们本次关注重点，感兴趣的可以自己研究下。我们仅对追踪调用 &lt;code&gt;computeE&lt;/code&gt; 方法时的参数感兴趣。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;computeE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(iterations &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;float64&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res := &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fact := &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); i &amp;lt; iterations; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fact *= &lt;span class=&quot;keyword&quot;&gt;float64&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / fact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/e&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ... 省略代码用于从 get 请求中解析 iters 参数，若为空则使用默认值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;e = %0.4f\n&quot;&lt;/span&gt;, computeE(iters))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 启动 server...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了进行后面的实验以及为最后采用 gdb 验证修改生效，我们采用如下指令编译该代码：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build  -gcflags &lt;span class=&quot;string&quot;&gt;&quot;-N -l&quot;&lt;/span&gt; app.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了理解 uprobe 如何工作的，我们看看可执行文件中要追踪的符号。既然 uprobes 通过插入一个 debug trap 指令到可执行文件来实现，我们先要确定要追踪的函数地址是什么。Go 程序在 Linux 上的二进制采用 ELF 格式存储 debug 信息，该信息甚至在优化过的二进制中也是存在的，除非 debug 数据被裁剪掉了。我们可以使用命令 &lt;code&gt;objdump&lt;/code&gt; 来检查二进制文件中的符号：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行下面命令之前需要你先将上面 go 程序编译为名为 app 的二进制文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# objdump --syms 可以从可执行程序中导出全部符号，然后通过 grep 查找 computeE.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 具体输出可能与你机器上不同，这没什么问题。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ objdump --syms app | grep computeE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000x6600e0 g     F .text  000000000000004b             main.computeE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上述输出可以看到，&lt;code&gt;computeE&lt;/code&gt; 方法的入口地址为 &lt;code&gt;0x0x6600e0&lt;/code&gt;. 为了看一下这个地址附近的指令，我们可以通过 &lt;code&gt;objdump&lt;/code&gt; 来反汇编该二进制文件（通过命令行选项 &lt;code&gt;-d&lt;/code&gt;). 反汇编代码如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ objdump &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; app | grep -A 1 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000x6600e0 &amp;lt;main.computeE&amp;gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0x6600e0:       48 8b 44 24 08          mov    0x8(%rsp),%rax&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面汇编代码可以看到当 &lt;code&gt;computeE&lt;/code&gt; 方法被调用时会执行哪些指令。第一条指令是 &lt;code&gt;mov 0x8(%rsp),%rax&lt;/code&gt;, 该指令将寄存器 &lt;code&gt;rsp&lt;/code&gt; 保存的地址（栈指针寄存器保存的是 &lt;code&gt;computeE&lt;/code&gt; 方法的入口地址）相对偏移量为 &lt;code&gt;0x8&lt;/code&gt; 处的内容移动到寄存器 &lt;code&gt;rax&lt;/code&gt; 中。这个被移动的值即为 &lt;code&gt;computeE&lt;/code&gt; 方法的入参 &lt;code&gt;iterations&lt;/code&gt; 的值。Go 程序的参数通过栈来传递。&lt;/p&gt;
&lt;p&gt;好了，记住上面提到的信息，我们来看看如何实现针对 &lt;code&gt;computeE&lt;/code&gt; 方法的参数追踪。&lt;/p&gt;
&lt;h2 id=&quot;构建追踪程序&quot;&gt;&lt;a href=&quot;#构建追踪程序&quot; class=&quot;headerlink&quot; title=&quot;构建追踪程序&quot;&gt;&lt;/a&gt;构建追踪程序&lt;/h2&gt;&lt;p&gt;我们给这个追踪程序起个名叫 Tracer. 为了捕获前面提到的事件，我们需要注册一个 uprobe 函数，并且还得有个用户态函数负责去读 uprobe 的输出，具体如下图所示：&lt;br&gt;&lt;img src=&quot;/images/go/app-tracer.png&quot; alt=&quot;app-tracer&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们编写一个叫做 &lt;code&gt;tracer&lt;/code&gt; 的应用，由它负责注册 BPF 代码，同时读取这些 BPF 代码的输出。如上图所示，uprobe 将会简单地输出到一个 &lt;code&gt;perf-buffer&lt;/code&gt; 中，该结构体是用于 perf 事件的 linux 内核数据结构。&lt;/p&gt;
&lt;p&gt;万事俱备，我们来看看当我们增加一个 uprobe 时会发生哪些事情。下面的图显示了 Linux 内核如何使用一个 uprobe 来修改一个已有的二进制程序。前文提到的软中断 &lt;code&gt;int3&lt;/code&gt; 作为第一条指令被插入到 &lt;code&gt;main.computeE&lt;/code&gt; 方法中。这条指令将会在执行时触发一个软中断，从而允许 Linux 内核来执行 BPF 代码。然后我们把 &lt;code&gt;computeE&lt;/code&gt; 每次被调用时的参数输出到 perf-buffer 中，这些值会被我们编写的 &lt;code&gt;tracer&lt;/code&gt; 应用异步地读取。&lt;br&gt;&lt;img src=&quot;/images/go/app-trace.png&quot; alt=&quot;app-trace&quot;&gt;&lt;/p&gt;
&lt;p&gt;就我们这个需求来说，相应的 BPF 代码很简单，C 代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;uapi/linux/ptrace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BPF_PERF_OUTPUT(trace);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 该函数将会被注册，以便每次 main.computeE 被调用时该函数也会被调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;computeECalled&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pt_regs *ctx)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// main.computeE 的入参保存在了 ax 寄存器里。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; val = ctx-&amp;gt;ax;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace.perf_submit(ctx, &amp;amp;val, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(val));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们注册上面代码以便 &lt;code&gt;main.computeE&lt;/code&gt; 方法被调用它们也会被执行。这些代码被执行时，我们仅仅读取函数参数然后写到 perf-buffer 中。实现这个功能需要很多样板代码，为了方便示意这里都省掉了，完整的例子见 &lt;a href=&quot;https://github.com/pixie-labs/pixie/blob/main/demos/simple-gotracing/trace_example/trace.go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;好了，我们现在有个针对 &lt;code&gt;main.computeE&lt;/code&gt; 的功能齐全的端到端参数追踪器了！执行结果见下面动图：&lt;br&gt;&lt;img src=&quot;/images/go/e2e-demo.gif&quot; alt=&quot;End-to-End demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;上述动图执行步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 localhost:9090 启动待追踪程序 &lt;code&gt;./app&lt;/code&gt;, 此时我们可以用 curl 访问该应用了，具体命令为 &lt;code&gt;curl http://localhost:9090/e?iters=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动 trace 应用，注意指定参数 &lt;code&gt;sudo ./trace --binary ../app/app&lt;/code&gt;, 参数是第一步中待追踪程序对应的二进制文件的路径。&lt;/li&gt;
&lt;li&gt;不停的执行 curl 命令，使其 iters 参数取值不同，则会看到 trace 应用输出你指定的 iters 值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有个有意思的事情，我们真的可以通过 GDB 看到针对二进制文件的修改。下面我们 dump 出 &lt;code&gt;0x0x6600e0&lt;/code&gt; 处的指令，在我们运行 &lt;code&gt;trace&lt;/code&gt; 之前是这样的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gdb ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb) display /4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1: x/4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e0 &amp;lt;main.computeE&amp;gt;:    sub    &lt;span class=&quot;variable&quot;&gt;$0x20&lt;/span&gt;,%rsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e4 &amp;lt;main.computeE+4&amp;gt;:  mov    %rbp,0x18(%rsp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e9 &amp;lt;main.computeE+9&amp;gt;:  lea    0x18(%rsp),%rbp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600ee &amp;lt;main.computeE+14&amp;gt;: xorps  %xmm0,%xmm0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在我们运行 &lt;code&gt;trace&lt;/code&gt; 之后，再次查看：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gdb ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(gdb) display /4i 0x65fecf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2: x/4i 0x6600e0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e0 &amp;lt;main.computeE&amp;gt;:    int3   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e1 &amp;lt;main.computeE+1&amp;gt;:  sub    &lt;span class=&quot;variable&quot;&gt;$0x20&lt;/span&gt;,%esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e4 &amp;lt;main.computeE+4&amp;gt;:  mov    %rbp,0x18(%rsp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   0x6600e9 &amp;lt;main.computeE+9&amp;gt;:  lea    0x18(%rsp),%rbp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？&lt;code&gt;0x6600e0&lt;/code&gt; 插入了 &lt;code&gt;int3&lt;/code&gt; 指令。&lt;/p&gt;
&lt;p&gt;尽管我们为这个特定的示例硬编码了跟踪程序，但是可以使这个过程通用化。Go 的许多特性，比如嵌套的指针、接口、通道等，使得这个过程具有挑战性，但解决这些问题可实现现有系统中无法使用的另一种检测模式。而且，由于这个过程是在二进制层面工作的，所以它可以用于其他语言编译的二进制文件 (c++、Rust 等）。我们只需要考虑他们各自 ABI 的差异。&lt;/p&gt;
&lt;h2 id=&quot;接下来？&quot;&gt;&lt;a href=&quot;#接下来？&quot; class=&quot;headerlink&quot; title=&quot;接下来？&quot;&gt;&lt;/a&gt;接下来？&lt;/h2&gt;&lt;p&gt;使用 uprobes 进行 BPF 跟踪具有其自身的优点和缺点。当我们需要对二进制状态进行观察时，使用 BPF 是有益的，即使在附加调试器将会有问题或有害的环境中运行（例如，生产二进制文件）。最大的缺点是，即使是很小的应用程序状态的跟踪也需要去编写代码。虽然 BPF 代码是相对容易的，但它的编写和维护是复杂的。如果没有实际的高级工具，就不太可能将其用于通用调试。&lt;/p&gt;
&lt;h2 id=&quot;番外&quot;&gt;&lt;a href=&quot;#番外&quot; class=&quot;headerlink&quot; title=&quot;番外&quot;&gt;&lt;/a&gt;番外&lt;/h2&gt;&lt;h3 id=&quot;安装-BCC&quot;&gt;&lt;a href=&quot;#安装-BCC&quot; class=&quot;headerlink&quot; title=&quot;安装 BCC&quot;&gt;&lt;/a&gt;安装 BCC&lt;/h3&gt;&lt;p&gt;编译前文提到的 &lt;code&gt;trace&lt;/code&gt; 应用之前需要安装 bcc. 以 Ubuntu 16.04 为例（其它系统请参考 &lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/INSTALL.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;):&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;deb https://repo.iovisor.org/apt/&lt;span class=&quot;variable&quot;&gt;$(lsb_release -cs)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$(lsb_release -cs)&lt;/span&gt; main&quot;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/iovisor.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果安装速度慢，而且你设置了 &lt;code&gt;http_proxy/https_proxy&lt;/code&gt;, 请编辑 &lt;code&gt;/etc/sudoers&lt;/code&gt; 新增一行 &lt;code&gt;Defaults env_keep = &amp;quot;http_proxy https_proxy&amp;quot;&lt;/code&gt;, 这样速度至少会有百倍提升。&lt;/p&gt;
&lt;h3 id=&quot;too-many-arguments-编译错误&quot;&gt;&lt;a href=&quot;#too-many-arguments-编译错误&quot; class=&quot;headerlink&quot; title=&quot;too many arguments 编译错误&quot;&gt;&lt;/a&gt;too many arguments 编译错误&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# github.com/iovisor/gobpf/bcc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../../../../go/pkg/mod/github.com/iovisor/gobpf@v0.0.0-20200614202714&lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt;6b321d32103/bcc/module.go:98:40: too many arguments &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; call to _Cfunc_bpf_module_create_c_from_string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        have (*_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, number, **_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;__Bool, nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        want (*_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, **_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;__Bool)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../../../../go/pkg/mod/github.com/iovisor/gobpf@v0.0.0-20200614202714&lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt;6b321d32103/bcc/module.go:230:28: too many arguments &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; call to _C2func_bcc_func_load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        have (unsafe.Pointer, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_struct_bpf_insn, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        want (unsafe.Pointer, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_struct_bpf_insn, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_int, *_C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_char, _C&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;_uint)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原因为 &lt;a href=&quot;https://github.com/iovisor/gobpf/commit/3ecafd366e4b239946d03c17f5a4beb5aef4935e#diff-f11d8f44bec322f0ba3a2ee148c82966&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这一行&lt;/a&gt; 增加的特性 Update bcc_func_load to libbcc 0.11 with hardware offload support, 以及 &lt;a href=&quot;https://github.com/iovisor/gobpf/commit/cda73bdde3bf14fc898d07b8936073e1aa197708&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这一行&lt;/a&gt; 增加的特性 bcc: update bpf_module_create_c_from_string for bcc 0.11.0 (fixes #202).&lt;/p&gt;
&lt;p&gt;我没有深究具体是什么导致的（初步怀疑是系统版本）, 如果你急着看结果，可以根据上面报错地址知道到 &lt;code&gt;module.go&lt;/code&gt; 文件，把涉及的两个函数的最后一个 &lt;code&gt;nil&lt;/code&gt; 参数去掉就可以顺利编译了。&lt;/p&gt;
&lt;p&gt;本文翻译自：Debugging Go in prod using eBPF 作者：Zain Asgar&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;不用重新编译/部署线上程序而是借助 eBPF 即可实现对程序进行调试，接下来我们会用一个系列文章介绍我们是怎么做的，这是开篇。本篇描述了如何使用 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot;&gt;gobpf&lt;/a&gt; 和 uprobe 来构建一个跟踪 Go 程序函数入口参数变化的应用。这里介绍的技术可以扩展到其它编译型语言，如 C++, Rust 等等。本系列文章后续将会讨论如何使用 eBPF 来跟踪 HTTP/gRPC 数据和 SSL 等等。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当调试程序时，我们一般对捕获程序的运行时状态非常感兴趣。因为这可以让我们检查程序在干什么，并能让我们确定 bug 出现在程序的哪一块。观察运行时状态的一个简单方式是使用调试器。比如针对 Go 程序，我们可以使用 Delve 和 gdb。&lt;/p&gt;
&lt;p&gt;Delve 和 gdb 在开发环境中做调试表现没得说，但是我们一般不会在线上使用此类工具。它们的长处同时也是它们的短处，因为调试器会导致线上程序中断，甚至如果在调试过程中不小心改错某个变量的值而导致线上程序出现异常。&lt;/p&gt;
&lt;p&gt;为了让线上调试过程的侵入和影响更小，我们将会探索使用增强版的 BPF (&lt;a href=&quot;https://ebpf.io/&quot;&gt;eBPF&lt;/a&gt;, Linux 4.x+ 内核可用）和更高级的 Go 库 &lt;a href=&quot;https://github.com/iovisor/gobpf&quot;&gt;gobpf&lt;/a&gt; 来达成目标。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/categories/golang/debug/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/tags/debug/"/>
    
      <category term="ebpf" scheme="http://team.jiunile.com/tags/ebpf/"/>
    
  </entry>
  
  <entry>
    <title>（译）深入理解 Kubernetes 网络模型 - 自己实现 kube-proxy 的功能</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-node-proxy.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-node-proxy.html</id>
    <published>2020-10-19T12:00:00.000Z</published>
    <updated>2020-10-20T02:31:24.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;背景知识&lt;/li&gt;
&lt;li&gt;节点代理模型&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;实现：通过 userspace socket 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 iptables 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 ipvs/ipset 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 bpf 实现 proxy&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;li&gt;附录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubernetes 中有几种类型的代理。其中有 &lt;strong&gt;node proxier&lt;/strong&gt; 或 &lt;code&gt;kube-proxy&lt;/code&gt;，它在每个节点上反映 Kubernetes API 中定义的服务，可以跨一组后端执行简单的 TCP/UDP/SCTP 流转发 [1]。&lt;/p&gt;
&lt;p&gt;为了更好地理解节点代理模型，在这篇文章中，我们将用不同的方法设计和实现我们自己版本的 &lt;code&gt;kube-proxy&lt;/code&gt;; 尽管这些只是 &lt;code&gt;toy-proxy&lt;/code&gt;，但从&lt;strong&gt;透明流量拦截、转发、负载均衡&lt;/strong&gt;等方面来说，它们的工作方式与 K8S 集群中运行的普通 &lt;code&gt;kube-proxy&lt;/code&gt; 基本相同。&lt;/p&gt;
&lt;p&gt;通过我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序，非 K8S 节点（不在 K8S 集群中）上的应用程序（无论是宿主本地应用程序，还是在 VM/容器中运行的应用程序）也可以通过 &lt;strong&gt;ClusterIP&lt;/strong&gt; 访问 K8S 服务 – &lt;strong&gt;注意，在 kubernetes 的设计中，ClusterIP 只能在 K8S 集群节点中访问。（在某种意义上，我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序将非 K8S 节点变成了 K8S 节点。)&lt;/strong&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;p&gt;了解 Linux 内核中的流量拦截和代理需要具备以下背景知识。&lt;/p&gt;
&lt;h3 id=&quot;Netfilter&quot;&gt;&lt;a href=&quot;#Netfilter&quot; class=&quot;headerlink&quot; title=&quot;Netfilter&quot;&gt;&lt;/a&gt;Netfilter&lt;/h3&gt;&lt;p&gt;Netfilter 是 Linux 内核内部的&lt;strong&gt;包过滤和处理框架&lt;/strong&gt;。如果您不熟悉 Iptables 和 Netfilter 体系结构，请参阅 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/a-deep-dive-into-iptables-and-netfilter-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Deep Dive into Iptables and Netfilter Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机上的&lt;strong&gt;所有数据包&lt;/strong&gt;都将通过 netfilter 框架&lt;/li&gt;
&lt;li&gt;在 netfilter 框架中有&lt;strong&gt; 5 个钩子&lt;/strong&gt;点：&lt;code&gt;PRE_ROUTING&lt;/code&gt;, &lt;code&gt;INPUT&lt;/code&gt;, &lt;code&gt;FORWARD&lt;/code&gt;, &lt;code&gt;OUTPUT&lt;/code&gt;, &lt;code&gt;POST_ROUTING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令行工具 &lt;code&gt;iptables&lt;/code&gt; 可用于&lt;strong&gt;动态地将规则插入到钩子点中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以通过组合各种 &lt;code&gt;iptables&lt;/code&gt; 规则来操作数据包（接受/重定向/删除/修改，等等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_hooks.png&quot; alt=&quot;The 5 hook points in netfilter framework&quot;&gt;&lt;br&gt;此外，这 5 个钩子点还可以与内核的其他网络设施，如内核路由子系统进行协同工作。&lt;/p&gt;
&lt;p&gt;此外，在每个钩子点中，规则被组织到具有预定义优先级的不同链中。为了按目的管理链，链被进一步组织到表中。现在有 5 个表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: 做正常的过滤，如接受，拒绝/删，跳&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nat&lt;/code&gt;: 网络地址转换，包括 SNAT（源 nat) 和 DNAT（目的 nat)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangle&lt;/code&gt;: 修改包属性，例如 TTL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt;: 最早的处理点，连接跟踪前的特殊处理 (conntrack 或 CT，也包含在上图中，但这不是链）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security&lt;/code&gt;: 本文未涉及&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将表/链添加到上图中，我们可以得到更详细的视图：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_hooks-and-tables.png&quot; alt=&quot;iptables table/chains inside hook points&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;VIP-与负载均衡-LB&quot;&gt;&lt;a href=&quot;#VIP-与负载均衡-LB&quot; class=&quot;headerlink&quot; title=&quot;VIP 与负载均衡 (LB)&quot;&gt;&lt;/a&gt;VIP 与负载均衡 (LB)&lt;/h3&gt;&lt;p&gt;虚拟 IP (IP) 将所有后端 IP 隐藏给客户端/用户，因此客户端/用户总是与 VIP 的后端服务通信，而不需要关心 VIP 后面有多少实例。&lt;/p&gt;
&lt;p&gt;VIP 总是伴随着负载均衡，因为它需要在不同的后端之间分配流量。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_vip-and-lb.png&quot; alt=&quot;VIP and load balancing&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Cross-host-网络模型&quot;&gt;&lt;a href=&quot;#Cross-host-网络模型&quot; class=&quot;headerlink&quot; title=&quot;Cross-host 网络模型&quot;&gt;&lt;/a&gt;Cross-host 网络模型&lt;/h3&gt;&lt;p&gt;主机 A 上的实例（容器、VM 等）如何与主机 B 上的另一个实例通信？有很多解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接路由：BGP 等&lt;/li&gt;
&lt;li&gt;隧道：VxLAN, IPIP, GRE 等&lt;/li&gt;
&lt;li&gt;NAT: 例如 docker 的桥接网络模式&lt;/li&gt;
&lt;li&gt;其它方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;节点代理模型&quot;&gt;&lt;a href=&quot;#节点代理模型&quot; class=&quot;headerlink&quot; title=&quot;节点代理模型&quot;&gt;&lt;/a&gt;节点代理模型&lt;/h2&gt;&lt;p&gt;在 kubernetes 中，您可以将应用程序定义为 &lt;code&gt;Service&lt;/code&gt;。&lt;code&gt;Service&lt;/code&gt; 是一种抽象，它定义了一组 Pods 的逻辑集和访问它们的策略。&lt;/p&gt;
&lt;h3 id=&quot;Service-类型&quot;&gt;&lt;a href=&quot;#Service-类型&quot; class=&quot;headerlink&quot; title=&quot;Service 类型&quot;&gt;&lt;/a&gt;Service 类型&lt;/h3&gt;&lt;p&gt;K8S 中定义了 4 种 &lt;code&gt;Service&lt;/code&gt; 类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClusterIP&lt;/code&gt;: 通过 VIP 访问 Service，但该 VIP 只能在此集群内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NodePort&lt;/code&gt;: 通过 NodeIP:NodePort 访问 Service，这意味着该端口将保留在集群内的所有节点上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExternalIP&lt;/code&gt;: 与 &lt;code&gt;ClusterIP&lt;/code&gt; 相同，但是这个 VIP 可以从这个集群之外访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoadBalancer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章将关注 &lt;code&gt;ClusterIP&lt;/code&gt;，但是其他三种类型在流量拦截和转发方面的底层实现非常相似。&lt;/p&gt;
&lt;h3 id=&quot;节点代理&quot;&gt;&lt;a href=&quot;#节点代理&quot; class=&quot;headerlink&quot; title=&quot;节点代理&quot;&gt;&lt;/a&gt;节点代理&lt;/h3&gt;&lt;p&gt;一个 Service 有一个 VIP （本文中的 &lt;code&gt;ClusterIP&lt;/code&gt;) 和多个端点（后端 pods)。每个 pod 或节点都可以通过 VIP 直接访问应用程序。要做到这一点，节点代理程序需要在每个节点上运行，它应该能够透明地拦截到任何 &lt;code&gt;ClusterIP:Port&lt;/code&gt;[注解 1] 的流量，并将它们重定向到一个或多个后端 pods。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_k8s-proxier-model.png&quot; alt=&quot;Kubernetes proxier model&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注解 1&lt;/p&gt;
&lt;p&gt;对 &lt;code&gt;ClusterIP&lt;/code&gt; 的一个常见误解是，&lt;code&gt;ClusterIP&lt;/code&gt; 是可访问的——它们不是通过定义访问的。如果 ping 一个 &lt;code&gt;ClusterIP&lt;/code&gt;，可能会发现它不可访问。&lt;/p&gt;
&lt;p&gt;根据定义，&lt;strong&gt;&lt;protocol,clusterip,port&gt;&lt;/protocol,clusterip,port&gt;&lt;/strong&gt; 元组独特地定义了一个服务（因此也定义了一个拦截规则）。例如，如果一个服务被定义为 &lt;code&gt;&amp;lt;tcp,10.7.0.100,80&amp;gt;&lt;/code&gt;，那么代理只处理 &lt;code&gt;tcp:10.7.0.100:80&lt;/code&gt; 的流量，其他流量，例如。&lt;code&gt;tcp:10.7.0.100:8080&lt;/code&gt;, &lt;code&gt;udp:10.7.0.100:80&lt;/code&gt; 将不会被代理。因此，也无法访问 ClusterIP (ICMP 流量）。&lt;/p&gt;
&lt;p&gt;但是，如果您使用的是带有 IPVS 模式的 &lt;code&gt;kube-proxy&lt;/code&gt;，那么确实可以通过 ping 访问&lt;code&gt;ClusterIP&lt;/code&gt;。这是因为 IPVS 模式实现比定义所需要的做得更多。您将在下面几节中看到不同之处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;节点代理的角色：反向代理&quot;&gt;&lt;a href=&quot;#节点代理的角色：反向代理&quot; class=&quot;headerlink&quot; title=&quot;节点代理的角色：反向代理&quot;&gt;&lt;/a&gt;节点代理的角色：反向代理&lt;/h3&gt;&lt;p&gt;想想节点代理的作用，在 K8S 网络模型中，它实际上是一个反向代理，也就是说，在每个节点上，它将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有后端 Pods 隐藏到客户端&lt;/li&gt;
&lt;li&gt;过滤所有出口流量（对后端的请求）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 ingress traffic，它什么也不做。&lt;/p&gt;
&lt;h3 id=&quot;性能问题&quot;&gt;&lt;a href=&quot;#性能问题&quot; class=&quot;headerlink&quot; title=&quot;性能问题&quot;&gt;&lt;/a&gt;性能问题&lt;/h3&gt;&lt;p&gt;如果我们在主机上有一个应用程序，并且在 K8S 集群中有 1K 个服务，那么我们永远无法猜测该应用程序在下一时刻将访问哪个服务（这里忽略网络策略）。因此，为了让应用程序能够访问所有服务，我们必须为节点上的所有服务应用所有代理规则。将这个想法推广到整个集群，这意味着：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有服务的代理规则应该应用于整个集群中的所有节点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在某种意义上，这是一个完全分布式的代理模型，因为任何节点都拥有集群的所有规则。&lt;/p&gt;
&lt;p&gt;当集群变大时，这会导致严重的性能问题，因为每个节点上可能有数十万条规则 [6,7]。&lt;/p&gt;
&lt;h2 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h2&gt;&lt;h3 id=&quot;集群拓扑和测试环境&quot;&gt;&lt;a href=&quot;#集群拓扑和测试环境&quot; class=&quot;headerlink&quot; title=&quot;集群拓扑和测试环境&quot;&gt;&lt;/a&gt;集群拓扑和测试环境&lt;/h3&gt;&lt;p&gt;我们将使用以下环境进行测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个 k8s 集群&lt;ul&gt;
&lt;li&gt;一个 master 节点&lt;/li&gt;
&lt;li&gt;一个 node 节点&lt;/li&gt;
&lt;li&gt;网络解决方案：直接路由 (PodIP 可直接路由）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个非 k8s 节点，但是它可以到达工作节点和 Pod（得益于直接路由网络方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_test-env.png&quot; alt=&quot;test env&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们将在工作节点上部署 Pods，并从 test 节点通过 &lt;code&gt;ClusterIP&lt;/code&gt; 访问 Pods 中的应用程序。&lt;/p&gt;
&lt;h3 id=&quot;创建一个-Service&quot;&gt;&lt;a href=&quot;#创建一个-Service&quot; class=&quot;headerlink&quot; title=&quot;创建一个 Service&quot;&gt;&lt;/a&gt;创建一个 Service&lt;/h3&gt;&lt;p&gt;创建一个简单的 &lt;code&gt;Statefulset&lt;/code&gt;，其中包括一个 &lt;code&gt;Service&lt;/code&gt;，该 &lt;code&gt;Service&lt;/code&gt; 将有一个或多个后端 Pods:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# see appendix for webapp.yaml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; webapp.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get svc -o wide webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE     SELECTOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp   ClusterIP   10.7.111.132   &amp;lt;none&amp;gt;        80/TCP    2m11s   app=webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod -o wide | grep webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-0    2/2     Running   0    2m12s 10.5.41.204    node1    &amp;lt;none&amp;gt;  &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;应用程序在带有 tcp 协议的 80 端口上运行。&lt;/p&gt;
&lt;h3 id=&quot;可达性测试&quot;&gt;&lt;a href=&quot;#可达性测试&quot; class=&quot;headerlink&quot; title=&quot;可达性测试&quot;&gt;&lt;/a&gt;可达性测试&lt;/h3&gt;&lt;p&gt;首先访问 PodIP+Port:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功的！然后用 &lt;code&gt;ClusterIP&lt;/code&gt; 替换 PodIP 再试一次：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl 10.7.111.132:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正如所料，它是不可访问的！&lt;/p&gt;
&lt;p&gt;在下一节中，我们将研究如何使用不同的方法使 &lt;code&gt;ClusterIP&lt;/code&gt; 可访问。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-userspace-socket-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-userspace-socket-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 userspace socket 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 userspace socket 实现 proxy&lt;/h2&gt;&lt;h3 id=&quot;中间人模型&quot;&gt;&lt;a href=&quot;#中间人模型&quot; class=&quot;headerlink&quot; title=&quot;中间人模型&quot;&gt;&lt;/a&gt;中间人模型&lt;/h3&gt;&lt;p&gt;最容易理解的实现是在此主机上的通信路径中插入我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 作为中间人：对于从本地客户端到 ClusterIP:Port 的每个连接，&lt;strong&gt;我们拦截该连接并将其分割为两个单独的连接&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地客户端和 &lt;code&gt;toy-proxy&lt;/code&gt; 之间的连接&lt;/li&gt;
&lt;li&gt;连接 &lt;code&gt;toy-proxy&lt;/code&gt; 和后端 pods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现此目的的最简单方法是在用户空间中实现它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;监听资源&lt;/code&gt;: 启动一个守护进程，监听 K8S apiserver、监视服务 (ClusterIP) 和端点 (Pod) 的变化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代理通信&lt;/code&gt;: 对于从本地客户端到服务 (ClusterIP) 的每个连接请求，通过充当中间人来拦截请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;动态应用代理规则&lt;/code&gt;: 对于任何 Service/Endpoint 更新，相应地更改 &lt;code&gt;toy-proxy&lt;/code&gt; 连接设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于我们上面的测试应用 &lt;code&gt;webapp&lt;/code&gt;，数据流程如下图：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_userspace-proxier.png&quot; alt=&quot;userspace-proxier&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;POC-实现&quot;&gt;&lt;a href=&quot;#POC-实现&quot; class=&quot;headerlink&quot; title=&quot;POC 实现&quot;&gt;&lt;/a&gt;POC 实现&lt;/h3&gt;&lt;p&gt;让我们来看看上图的概念验证实现。&lt;/p&gt;
&lt;h4 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h4&gt;&lt;p&gt;以下代码省略了一些错误处理代码，便于阅读：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	clusterIP := &lt;span class=&quot;string&quot;&gt;&quot;10.7.111.132&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	podIP := &lt;span class=&quot;string&quot;&gt;&quot;10.5.41.204&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	port := &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	proto := &lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addRedirectRules(clusterIP, port, proto)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createProxy(podIP, port, proto)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addRedirectRules&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(clusterIP &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, port &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, proto &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p := strconv.Itoa(port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd := exec.Command(&lt;span class=&quot;string&quot;&gt;&quot;iptables&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-t&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;nat&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-A&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;OUTPUT&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-p&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;-d&quot;&lt;/span&gt;, clusterIP, &lt;span class=&quot;string&quot;&gt;&quot;--dport&quot;&lt;/span&gt;, p, &lt;span class=&quot;string&quot;&gt;&quot;-j&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;REDIRECT&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;--to-port&quot;&lt;/span&gt;, p)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cmd.Run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createProxy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(podIP &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, port &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, proto &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	host := &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener, err := net.Listen(proto, net.JoinHostPort(host, strconv.Itoa(port)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		inConn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		outConn, err := net.Dial(proto, net.JoinHostPort(podIP, strconv.Itoa(port)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(in, out *net.TCPConn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			wg.Add(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Proxying %v &amp;lt;-&amp;gt; %v &amp;lt;-&amp;gt; %v &amp;lt;-&amp;gt; %v\n&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				in.RemoteAddr(), in.LocalAddr(), out.LocalAddr(), out.RemoteAddr())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; copyBytes(in, out, &amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; copyBytes(out, in, &amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;(inConn.(*net.TCPConn), outConn.(*net.TCPConn))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copyBytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dst, src *net.TCPConn, wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _, err := io.Copy(dst, src); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !strings.HasSuffix(err.Error(), &lt;span class=&quot;string&quot;&gt;&quot;use of closed network connection&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;io.Copy error: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dst.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	src.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;一些解释&quot;&gt;&lt;a href=&quot;#一些解释&quot; class=&quot;headerlink&quot; title=&quot;一些解释&quot;&gt;&lt;/a&gt;一些解释&lt;/h4&gt;&lt;h5 id=&quot;traffic-拦截&quot;&gt;&lt;a href=&quot;#traffic-拦截&quot; class=&quot;headerlink&quot; title=&quot;traffic 拦截&quot;&gt;&lt;/a&gt;traffic 拦截&lt;/h5&gt;&lt;p&gt;我们想拦截所有发往 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 的流量，但是在这个节点上任何设备都没有配置&lt;code&gt;ClusterIP&lt;/code&gt;，因此我们无法执行诸如 listen（ClusterIP，Port）之类的操作，那么我们如何才能拦截呢？答案是：使用&lt;code&gt;iptables/netfilter&lt;/code&gt; 提供的 &lt;code&gt;REDIRECT&lt;/code&gt; 能力。&lt;/p&gt;
&lt;p&gt;以下命令会将所有发往 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 的流量定向到 &lt;code&gt;localhost:Port&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo iptables -t nat -A OUTPUT -p tcp &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j REDIRECT --to-port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你现在不能理解这一点，不要害怕。稍后我们将讨论这个问题。&lt;/p&gt;
&lt;p&gt;通过下面命令的输出来验证这一点：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REDIRECT   tcp  --  0.0.0.0/0   10.7.111.132         tcp dpt:80 redir ports 80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在代码中，函数 &lt;code&gt;addRedirectRules()&lt;/code&gt; 包装了上述过程。&lt;/p&gt;
&lt;h5 id=&quot;创建-proxy&quot;&gt;&lt;a href=&quot;#创建-proxy&quot; class=&quot;headerlink&quot; title=&quot;创建 proxy&quot;&gt;&lt;/a&gt;创建 proxy&lt;/h5&gt;&lt;p&gt;函数 &lt;code&gt;createProxy()&lt;/code&gt; 创建用户空间代理，并执行双向转发。&lt;/p&gt;
&lt;h4 id=&quot;可达性测试-1&quot;&gt;&lt;a href=&quot;#可达性测试-1&quot; class=&quot;headerlink&quot; title=&quot;可达性测试&quot;&gt;&lt;/a&gt;可达性测试&lt;/h4&gt;&lt;p&gt;编译代码并执行二进制文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build toy-proxy-userspace.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ./toy-proxy-userspace&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在测试访问：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功！我们的代理传达的信息是：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ./toy-proxy-userspace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating proxy between &amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 127.0.0.1:80 &amp;lt;-&amp;gt; &amp;lt;host ip&amp;gt;:40194 &amp;lt;-&amp;gt; 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表示，对于原 &lt;code&gt;&amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 10.7.111.132:80&lt;/code&gt; 的连接请求，将其拆分为两个连接：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;host ip&amp;gt;:53912 &amp;lt;-&amp;gt; 127.0.0.1:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;host ip&amp;gt;:40194 &amp;lt;-&amp;gt; 10.5.41.204:80&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除这条规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    REDIRECT   tcp  --  0.0.0.0/0   10.7.111.132         tcp dpt:80 redir ports 80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables -t nat -D OUTPUT &amp;lt;num&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者删除（刷新）所有规则，如果你把 iptabels 弄的一团糟的情况下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -F &lt;span class=&quot;comment&quot;&gt;# delete all rules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -X &lt;span class=&quot;comment&quot;&gt;# delete all custom chains&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;改进&quot;&gt;&lt;a href=&quot;#改进&quot; class=&quot;headerlink&quot; title=&quot;改进&quot;&gt;&lt;/a&gt;改进&lt;/h4&gt;&lt;p&gt;在这个 &lt;code&gt;toy-proxy&lt;/code&gt; 实现中，我们拦截了 &lt;code&gt;ClusterIP:80&lt;/code&gt; 到 &lt;code&gt;localhost:80&lt;/code&gt;，但是如果该主机上的本机应用程序也想使用 &lt;code&gt;localhost:80&lt;/code&gt; 怎么办？此外，如果多个服务都公开 80 端口会怎样？显然，我们需要区分这些应用程序或服务。解决这个问题的正确方法是：为每个代理分配一个未使用的临时端口 TmpPort，拦截 &lt;code&gt;ClusterIP:Port&lt;/code&gt; 到 &lt;code&gt;local:TmpPort&lt;/code&gt;。例如，app1 使用 10001, app2 使用 10002。&lt;/p&gt;
&lt;p&gt;其次，上面的代码只处理一个后端，如果有多个后端 pods 怎么办？因此，我们需要通过负载均衡算法将请求分发到不同的后端 pods。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_userspace-proxier-2.png&quot; alt=&quot;userspace-proxier-2&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;优缺点&quot;&gt;&lt;a href=&quot;#优缺点&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h4&gt;&lt;p&gt;这种方法非常容易理解和实现，但是，它的性能会很差，因为它必须在两端以及内核和用户空间内存之间复制字节。&lt;/p&gt;
&lt;p&gt;我们没有在这上面花太多时间，如果您感兴趣，可以在这里查看用户空间 &lt;code&gt;kube-proxy&lt;/code&gt; 的简单实现。&lt;/p&gt;
&lt;p&gt;接下来，让我们看看实现这个任务的另一种方法。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-iptables-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-iptables-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 iptables 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 iptables 实现 proxy&lt;/h2&gt;&lt;p&gt;用户空间代理程序的主要瓶颈来自内核-用户空间切换和数据复制。&lt;strong&gt;如果我们可以完全在内核空间中实现代理&lt;/strong&gt;，它将在性能上大大提高，从而击败用户空间的代理。&lt;code&gt;iptables&lt;/code&gt; 可用于实现这一目标。&lt;/p&gt;
&lt;p&gt;在开始之前，让我们首先弄清楚在执行 &lt;code&gt;curl ClusterIP:Port&lt;/code&gt; 时的流量路径，然后研究如何使用 &lt;code&gt;iptables&lt;/code&gt; 规则使其可访问。&lt;/p&gt;
&lt;h3 id=&quot;Host-gt-ClusterIP-（单一后端）&quot;&gt;&lt;a href=&quot;#Host-gt-ClusterIP-（单一后端）&quot; class=&quot;headerlink&quot; title=&quot;Host -&amp;gt; ClusterIP （单一后端）&quot;&gt;&lt;/a&gt;Host -&amp;gt; ClusterIP （单一后端）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ClusterIP&lt;/code&gt; 不存在于任何网络设备上，所以为了让我们的数据包最终到达后端 Pod，我们需要将 &lt;code&gt;ClusterIP&lt;/code&gt; 转换为 PodIP（可路由），即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件：匹配 &lt;code&gt;dst=ClusterIP,proto=tcp,dport=80&lt;/code&gt; 的数据包&lt;/li&gt;
&lt;li&gt;操作：将数据包的 IP 报头中的 &lt;code&gt;dst=ClusterIP&lt;/code&gt; 替换为 &lt;code&gt;dst=PodIP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用网络术语来说，这是一个网络地址转换 (NAT) 过程。&lt;/p&gt;
&lt;h4 id=&quot;在哪里做-DNAT&quot;&gt;&lt;a href=&quot;#在哪里做-DNAT&quot; class=&quot;headerlink&quot; title=&quot;在哪里做 DNAT&quot;&gt;&lt;/a&gt;在哪里做 DNAT&lt;/h4&gt;&lt;p&gt;通过 curl 查看出口数据包路径（下图展示了数据流向过程）：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-dnat.png&quot; alt=&quot;host-to-clusterip-dnat&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;curl process&amp;gt; -&amp;gt; raw -&amp;gt; CT -&amp;gt; mangle -&amp;gt; dnat -&amp;gt; filter -&amp;gt; security -&amp;gt; snat -&amp;gt; &amp;lt;ROUTING&amp;gt; -&amp;gt; mangle -&amp;gt; snat -&amp;gt; NIC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很明显，在 OUTPUT 钩中只有一个 dnat（链），我们可以在其中进行 DNAT。&lt;/p&gt;
&lt;p&gt;让我们看看我们将如何进行黑客入侵。&lt;/p&gt;
&lt;h4 id=&quot;检查当前的-NAT-规则&quot;&gt;&lt;a href=&quot;#检查当前的-NAT-规则&quot; class=&quot;headerlink&quot; title=&quot;检查当前的 NAT 规则&quot;&gt;&lt;/a&gt;检查当前的 NAT 规则&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NAT&lt;/code&gt; 规则被组织到 &lt;code&gt;nat&lt;/code&gt; 表中。检查 &lt;code&gt;nat&lt;/code&gt; 表中的当前规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -t &amp;lt;table&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -L list rules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -n numeric output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain PREROUTING (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain INPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DOCKER     all  --  0.0.0.0/0    !127.0.0.0/8   ADDRTYPE match dst-type LOCAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain POSTROUTING (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出显示除了与 DOCKER 相关的规则外，没有其他规则。这些 DOCKER 规则是 DOCKER 在安装时插入的，但它们不会影响我们在这篇文章中的实验。所以我们忽略它们。&lt;/p&gt;
&lt;h4 id=&quot;增加-DNAT-规则&quot;&gt;&lt;a href=&quot;#增加-DNAT-规则&quot; class=&quot;headerlink&quot; title=&quot;增加 DNAT 规则&quot;&gt;&lt;/a&gt;增加 DNAT 规则&lt;/h4&gt;&lt;p&gt;为了便于查看，我们不会用 go 代码包装 &lt;code&gt;iptables&lt;/code&gt; 命令，而是直接显示命令本身。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;确认目前无法访问 ClusterIP:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^C&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在添加我们的出口 NAT 规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat ENV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLUSTER_IP=10.7.111.132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POD_IP=10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PORT=80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PROTO=tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -p               &amp;lt;protocol&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -A               add rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --dport          &amp;lt;dst port&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -d               &amp;lt;dst ip&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -j               jump to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --to-destination &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查规则表：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0   10.7.111.132   tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到规则已经被添加。&lt;/p&gt;
&lt;h4 id=&quot;测试可达性&quot;&gt;&lt;a href=&quot;#测试可达性&quot; class=&quot;headerlink&quot; title=&quot;测试可达性&quot;&gt;&lt;/a&gt;测试可达性&lt;/h4&gt;&lt;p&gt;现在再一次访问：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就是这样！访问成功。&lt;/p&gt;
&lt;p&gt;但是等等！我们期望出口的交通应该是正确的，但我们没有添加任何 NAT 规则的入口路径，怎么可能交通是正常的两个方向？事实证明，当你为一个方向添加一个 NAT 规则时，Linux 内核会自动为另一个方向添加保留规则！这与 conntrack (CT，连接跟踪）模块协同工作。&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-dnat-ct.png&quot; alt=&quot;host-to-clusterip-dnat-ct&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;清理&quot;&gt;&lt;a href=&quot;#清理&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h4&gt;&lt;p&gt;删除这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    DNAT       tcp  --  0.0.0.0/0   10.7.111.132   tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iptables -t &amp;lt;table&amp;gt; -D &amp;lt;chain&amp;gt; &amp;lt;num&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Host-gt-ClusterIP-（多个后端）&quot;&gt;&lt;a href=&quot;#Host-gt-ClusterIP-（多个后端）&quot; class=&quot;headerlink&quot; title=&quot;Host -&amp;gt; ClusterIP （多个后端）&quot;&gt;&lt;/a&gt;Host -&amp;gt; ClusterIP （多个后端）&lt;/h3&gt;&lt;p&gt;在上一节中，我们展示了如何使用一个后端 Pod 执行 NAT。现在让我们看看多后端情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;伸缩-webapp&quot;&gt;&lt;a href=&quot;#伸缩-webapp&quot; class=&quot;headerlink&quot; title=&quot;伸缩 webapp&quot;&gt;&lt;/a&gt;伸缩 webapp&lt;/h4&gt;&lt;p&gt;首先扩大我们的服务到 2 个后端 pods:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl scale sts webapp --replicas=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;statefulset.apps/webapp scaled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod -o wide | grep webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-0   2/2     Running   0   1h24m   10.5.41.204    node1    &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webapp-1   2/2     Running   0   11s     10.5.41.5      node1    &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;通过负载平衡添加-DNAT-规则&quot;&gt;&lt;a href=&quot;#通过负载平衡添加-DNAT-规则&quot; class=&quot;headerlink&quot; title=&quot;通过负载平衡添加 DNAT 规则&quot;&gt;&lt;/a&gt;通过负载平衡添加 DNAT 规则&lt;/h4&gt;&lt;p&gt;我们需要 &lt;code&gt;iptables&lt;/code&gt; 中的 &lt;code&gt;statistic&lt;/code&gt; 模块以概率的方式将请求分发到后端 Pods，这样才能达到负载均衡的效果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -m &amp;lt;module&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -m statistic --mode random --probability 0.5  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -A OUTPUT -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -m statistic --mode random --probability 1.0  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的命令指定在两个 Pods 之间随机分配请求，每个都有 50% 的概率。&lt;/p&gt;
&lt;p&gt;现在检查这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target  prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;      destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 0.50000000000 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 1.00000000000 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_host-to-clusterip-lb-ct.png&quot; alt=&quot;host-to-clusterip-lb-ct&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h4&gt;&lt;p&gt;现在，我们来验证下负载均衡是否生效。我们发出 8 个 请求，并捕获到这个主机通信的真实 PodIPs:&lt;/p&gt;
&lt;p&gt;在测试节点上打开一个 shell:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;1..8&amp;#125;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; sleep 1; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试节点上的另一个 shell 窗口：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tcpdump -nn -i eth0 port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; | grep &lt;span class=&quot;string&quot;&gt;&quot;GET /&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48306 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48308 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48310 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48312 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48314 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48316 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48318 &amp;gt; 10.5.41.5.80:   ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.21.0.7.48320 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 Pod1 中有 4 次，在 Pod2 中有 4 次，每个 pod 有 50%，这正是我们所期望的。&lt;/p&gt;
&lt;h4 id=&quot;清理-1&quot;&gt;&lt;a href=&quot;#清理-1&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -L -n --line-numbers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num  target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2    DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 0.50000000000 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3    DNAT    tcp  --  0.0.0.0/0   10.7.111.132  tcp dpt:80 statistic mode random probability 1.00000000000 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ iptables -t nat -D OUTPUT 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pod-app-A-gt-ClusterIP-app-B&quot;&gt;&lt;a href=&quot;#Pod-app-A-gt-ClusterIP-app-B&quot; class=&quot;headerlink&quot; title=&quot;Pod (app A) -&amp;gt; ClusterIP (app B)&quot;&gt;&lt;/a&gt;Pod (app A) -&amp;gt; ClusterIP (app B)&lt;/h3&gt;&lt;p&gt;如果想通过 hostA 上的 &lt;code&gt;Pod A&lt;/code&gt; 通过 &lt;code&gt;ClusterIP&lt;/code&gt; 访问 &lt;code&gt;Pod B&lt;/code&gt;, B 的 Pod 驻留在 hostB 上，我们应该做什么？&lt;/p&gt;
&lt;p&gt;实际上，这与 &lt;code&gt;Host -&amp;gt; ClusterIP&lt;/code&gt; 情况非常相似，但是有一点需要注意：在执行 NAT 之后，源节点 (hostA) 需要将包发送到目的地 Pod 所在的正确目的地节点 (hostB)。根据不同的跨主机网络解决方案，这有很大不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于直接路由的情况下，主机只是发送数据包。对应的有这些解决方案&lt;ul&gt;
&lt;li&gt;calico + bird&lt;/li&gt;
&lt;li&gt;cilium + kube-router(Cilium BGP 的默认解决方案） &lt;/li&gt;
&lt;li&gt;cilium + bird（实际上这只是我们的测试环境网络解决方案）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于隧道的情况，每个主机上必须有一个代理，它在 DNAT 之后执行 encap，在 SNAT 之前执行 decap。这些解决方案包括：&lt;ul&gt;
&lt;li&gt;calico + VxLAN 模式&lt;/li&gt;
&lt;li&gt;flannel + IPIP 模式&lt;/li&gt;
&lt;li&gt;flannel + VxLAN 模式&lt;/li&gt;
&lt;li&gt;cilium + VxLAN 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;像 aws 的 ENI 模式：类似于直接路由，但不需要 BGP 代理&lt;ul&gt;
&lt;li&gt;cilium + ENI 模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了隧道的情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/proxy/proxy_tunneling.png&quot; alt=&quot;tunneling&quot;&gt;&lt;/p&gt;
&lt;p&gt;代理与隧道相关的职责包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步所有节点之间的隧道信息&lt;/strong&gt;，例如描述哪个实例在哪个节点上的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 DNAT 之后对 pod 流量执行封装&lt;/strong&gt;: 对于所有的出口流量，例如来自 hostA 的&lt;code&gt;dst=&amp;lt;PodIP&amp;gt;&lt;/code&gt;，其中 PodIP 在 hostB 上，通过添加另一个头来封装数据包，例如 VxLAN 头，其中封装头有 &lt;code&gt;src=hostA_IP,dst=hostB_IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 SNAT 之前对 Pod 流量执行解封装&lt;/strong&gt;: 解封装每个入口封装的数据包：删除外层（例如 VxLAN 标头）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时，主机需要决定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些数据包应该交给解码器 (pod 流量），哪些不应该（例如主机流量）&lt;/li&gt;
&lt;li&gt;哪些包应该封装 (pod 流量），哪些不应该（例如主机流量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;重新构造-iptables-规则&quot;&gt;&lt;a href=&quot;#重新构造-iptables-规则&quot; class=&quot;headerlink&quot; title=&quot;重新构造 iptables 规则&quot;&gt;&lt;/a&gt;重新构造 iptables 规则&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当您有大量的 Service 时，每个节点上的 iptables 规则将相当复杂，因此您需要进行一些结构化工作来组织这些规则。&lt;/p&gt;
&lt;p&gt;在本节中，我们将在 nat 表中创建几个专用的 iptables 链，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SERVICES&lt;/code&gt;: 拦截 nat 表的输出链中所有到此链的出口流量，如果它们被指定为 ClusterIP，则执行 DNAT&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt;: 如果 &lt;code&gt;dst&lt;/code&gt;、&lt;code&gt;proto&lt;/code&gt; 和 &lt;code&gt;port&lt;/code&gt; 匹配，则拦截该链 &lt;code&gt;KUBE-SERVICES&lt;/code&gt; 中的所有流量&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SEP-WEBAPP1&lt;/code&gt;: 拦截 50%的流量在 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt; 到这里&lt;/li&gt;
&lt;li&gt;链 &lt;code&gt;KUBE-SEP-WEBAPP2&lt;/code&gt;: 拦截 50%的流量在 &lt;code&gt;KUBE-SVC-WEBAPP&lt;/code&gt; 到这里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNAT 路径现在为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OUTPUT -&amp;gt; KUBE-SERVICES -&amp;gt; KUBE-SVC-WEBAPP --&amp;gt; KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                          \--&amp;gt; KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你有多个 Service，DNAT 路径如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OUTPUT -&amp;gt; KUBE-SERVICES -&amp;gt; KUBE-SVC-A --&amp;gt; KUBE-SEP-A1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |              \--&amp;gt; KUBE-SEP-A2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |--&amp;gt; KUBE-SVC-B --&amp;gt; KUBE-SEP-B1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |              \--&amp;gt; KUBE-SEP-B2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      |--&amp;gt; KUBE-SVC-C --&amp;gt; KUBE-SEP-C1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     \--&amp;gt; KUBE-SEP-C2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;iptables 命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat add-dnat-structured.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ../ENV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE_SVCS=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SERVICES&quot;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;# chain that serves as kubernetes service portal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SVC_WEBAPP=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SVC-WEBAPP&quot;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# chain that serves as DNAT entrypoint for webapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WEBAPP_EP1=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SEP-WEBAPP1&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# chain that performs dnat to pod1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WEBAPP_EP2=&lt;span class=&quot;string&quot;&gt;&quot;KUBE-SEP-WEBAPP2&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# chain that performs dnat to pod2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# OUTPUT -&amp;gt; KUBE-SERVICES&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A OUTPUT -p all &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -j &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# KUBE-SERVICES -&amp;gt; KUBE-SVC-WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$KUBE_SVCS&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt; --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# KUBE-SVC-WEBAPP -&amp;gt; KUBE-SEP-WEBAPP*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -N &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -j DNAT --to-destination &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 0.5  -j &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo iptables -t nat -A &lt;span class=&quot;variable&quot;&gt;$SVC_WEBAPP&lt;/span&gt; -p &lt;span class=&quot;variable&quot;&gt;$PROTO&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 1.0  -j &lt;span class=&quot;variable&quot;&gt;$WEBAPP_EP2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在测试我们设计：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./add-dnat-structured.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ KUBE_SVCS=KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ SVC_WEBAPP=KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ WEBAPP_EP1=KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ WEBAPP_EP2=KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A OUTPUT -p all &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -j KUBE-SERVICES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SERVICES -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 10.7.111.132 --dport 80 -j KUBE-SVC-WEBAPP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -N KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SEP-WEBAPP1 -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport 80 -j DNAT --to-destination 10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SEP-WEBAPP2 -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 --dport 80 -j DNAT --to-destination 10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SVC-WEBAPP -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 0.5 -j KUBE-SEP-WEBAPP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo iptables -t nat -A KUBE-SVC-WEBAPP -p tcp &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 0.0.0.0/0 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 0.0.0.0/0 -m statistic --mode random --probability 1.0 -j KUBE-SEP-WEBAPP2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;检查这些规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo iptables -t nat -L -n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-WEBAPP1 (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:10.5.41.204:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-WEBAPP2 (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:10.5.41.5:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SERVICES (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SVC-WEBAPP  tcp  --  0.0.0.0/0            10.7.111.132         tcp dpt:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SVC-WEBAPP (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-WEBAPP1  tcp  --  0.0.0.0/0            0.0.0.0/0            statistic mode random probability 0.50000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-WEBAPP2  tcp  --  0.0.0.0/0            0.0.0.0/0            statistic mode random probability 1.00000000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功！&lt;/p&gt;
&lt;p&gt;如果您将上面的输出与普通的 &lt;code&gt;kube-proxy&lt;/code&gt; 规则进行比较，这两个规则是非常相似的，下面是从启用 &lt;code&gt;kube-proxy&lt;/code&gt; 的节点提取的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Chain OUTPUT (policy ACCEPT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target         prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SERVICES (2 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target                     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SVC-YK2SNH4V42VSDWIJ  tcp  --  0.0.0.0/0            10.7.22.18           /* default/nginx:web cluster IP */ tcp dpt:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SVC-YK2SNH4V42VSDWIJ (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target                     prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-GL2BLSI2B4ICU6WH  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ statistic mode random probability 0.33332999982&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KUBE-SEP-AIRRSG3CIF42U3PX  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-GL2BLSI2B4ICU6WH (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target          prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT            tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ tcp to:10.244.3.181:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chain KUBE-SEP-AIRRSG3CIF42U3PX (1 references)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target          prot opt &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;               destination&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNAT            tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx:web */ tcp to:10.244.3.182:80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;进一步重新构造-iptables-规则&quot;&gt;&lt;a href=&quot;#进一步重新构造-iptables-规则&quot; class=&quot;headerlink&quot; title=&quot;进一步重新构造 iptables 规则&quot;&gt;&lt;/a&gt;进一步重新构造 iptables 规则&lt;/h3&gt;&lt;p&gt;TODO: 为来自集群外部的流量添加规则。&lt;/p&gt;
&lt;h2 id=&quot;实现：通过-ipvs-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-ipvs-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 ipvs 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 ipvs 实现 proxy&lt;/h2&gt;&lt;p&gt;虽然基于 iptables 的代理在性能上优于基于用户空间的代理，但在集群服务过多的情况下也会导致性能严重下降 [6,7]。&lt;/p&gt;
&lt;p&gt;本质上，这是因为 iptables 判决是基于链的，它是一个复杂度为 O(n) 的线性算法。iptables 的一个好的替代方案是 IPVS——内核中的 L4 负载均衡器，它在底层使用 ipset（哈希实现），因此复杂度为 O(1)。&lt;/p&gt;
&lt;p&gt;让我们看看如何使用 ipvs 实现相同的目标。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在继续之前，请确保删除了在上一节中添加的所有规则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装-IPVS&quot;&gt;&lt;a href=&quot;#安装-IPVS&quot; class=&quot;headerlink&quot; title=&quot;安装 IPVS&quot;&gt;&lt;/a&gt;安装 IPVS&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install -y ipvsadm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -l  list load balancing status&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -n  numeric output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -ln&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Prot LocalAddress:Port Scheduler Flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认无规则&lt;/p&gt;
&lt;h4 id=&quot;增加虚拟-真正的-services&quot;&gt;&lt;a href=&quot;#增加虚拟-真正的-services&quot; class=&quot;headerlink&quot; title=&quot;增加虚拟/真正的 services&quot;&gt;&lt;/a&gt;增加虚拟/真正的 services&lt;/h4&gt;&lt;p&gt;使用 ipvs 实现负载均衡：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -A/--add-service           add service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -t/--tcp-service &amp;lt;address&amp;gt; VIP + Port&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -s &amp;lt;method&amp;gt;                scheduling-method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -r/--real-server &amp;lt;address&amp;gt; real backend IP + Port&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -m                         masquerading (NAT)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -A -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -r &lt;span class=&quot;variable&quot;&gt;$POD1_IP&lt;/span&gt; -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; -t &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; -r &lt;span class=&quot;variable&quot;&gt;$POD2_IP&lt;/span&gt; -m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者使用我的脚本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./ipvs-add-server.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding virtual server CLUSTER_IP:PORT=10.7.111.132:80 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding real servers ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再次检查状态：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ipvsadm -ln&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Prot LocalAddress:Port Scheduler Flags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TCP  10.7.111.132:80 rr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; 10.5.41.5:80                 Masq    1      0          0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&amp;gt; 10.5.41.204:80               Masq    1      0          0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一些解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于所有发往 &lt;code&gt;10.7.111.132:80&lt;/code&gt; 的流量，将负载均衡到 &lt;code&gt;10.5.41.5:80&lt;/code&gt; 和&lt;code&gt;10.5.41.204:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用轮询 (rr) 算法实现负载均衡&lt;/li&gt;
&lt;li&gt;两个后端，每个后端的权重为 1（各 50％）&lt;/li&gt;
&lt;li&gt;使用 MASQ（增强型 SNAT）在 VIP 和 RealIP 之间进行流量转发&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;验证-1&quot;&gt;&lt;a href=&quot;#验证-1&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;1..8&amp;#125;; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null; sleep 1; &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tcpdump -nn -i eth0 port &lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt; | grep &lt;span class=&quot;string&quot;&gt;&quot;HTTP: GET&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49556 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49558 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49560 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49562 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49566 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49568 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49570 &amp;gt; 10.5.41.204.80: ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IP 10.21.0.7.49572 &amp;gt; 10.5.41.5.80  : ... HTTP: GET / HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完美！&lt;/p&gt;
&lt;h3 id=&quot;清理-2&quot;&gt;&lt;a href=&quot;#清理-2&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./ipvs-del-server.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleting real servers ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.7.111.132:80 -&amp;gt; 10.5.41.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleting virtual server CLUSTER_IP:PORT=10.7.111.132:80 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Done&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现：通过-bpf-实现-proxy&quot;&gt;&lt;a href=&quot;#实现：通过-bpf-实现-proxy&quot; class=&quot;headerlink&quot; title=&quot;实现：通过 bpf 实现 proxy&quot;&gt;&lt;/a&gt;实现：通过 bpf 实现 proxy&lt;/h2&gt;&lt;p&gt;这也是一个 &lt;code&gt;O(1)&lt;/code&gt; 代理，但是与 IPVS 相比具有更高的性能。&lt;/p&gt;
&lt;p&gt;让我们看看如何在不到 100 行 C 代码中使用 eBPF 实现代理功能。&lt;/p&gt;
&lt;h3 id=&quot;先决条件&quot;&gt;&lt;a href=&quot;#先决条件&quot; class=&quot;headerlink&quot; title=&quot;先决条件&quot;&gt;&lt;/a&gt;先决条件&lt;/h3&gt;&lt;p&gt;如果你有足够的时间和兴趣来阅读 eBPF/BPF，可以考虑阅读 &lt;a href=&quot;https://docs.cilium.io/en/v1.6/bpf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cilium: BPF and XDP Reference Guide&lt;/a&gt;，它对开发人员来说是一个完美的 BPF 文档。&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;让我们看看出口部分的基本概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于所有流量，匹配 &lt;code&gt;dst=CLUSTER_IP &amp;amp;&amp;amp; proto==TCP &amp;amp;&amp;amp; dport==80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更改目标 IP: &lt;code&gt;CLUSTER_IP -&amp;gt; POD_IP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新 IP 和 TCP 报头中的校验和文件（否则我们的数据包将被丢弃）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__section(&lt;span class=&quot;string&quot;&gt;&quot;egress&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tc_egress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __sk_buff *skb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 cluster_ip = &lt;span class=&quot;number&quot;&gt;0x846F070A&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10.7.111.132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 pod_ip = &lt;span class=&quot;number&quot;&gt;0x0529050A&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 10.5.41.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l3_off = ETH_HLEN;    &lt;span class=&quot;comment&quot;&gt;// IP header offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l4_off = l3_off + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// TCP header offset: l3_off + sizeof(struct iphdr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __be32 sum;                     &lt;span class=&quot;comment&quot;&gt;// IP checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data_end = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data_end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data_end &amp;lt; data + l4_off) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// not our packet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ip4 = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)(data + l3_off);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip4-&amp;gt;daddr != cluster_ip || ip4-&amp;gt;protocol != IPPROTO_TCP &lt;span class=&quot;comment&quot;&gt;/* || tcp-&amp;gt;dport == 80 */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// DNAT: cluster_ip -&amp;gt; pod_ip, then update L3 and L4 checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = csum_diff((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;ip4-&amp;gt;daddr, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;pod_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    skb_store_bytes(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, daddr), (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;pod_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l3_csum_replace(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l4_csum_replace(skb, l4_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, BPF_F_PSEUDO_HDR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于入口部分，非常类似于出口代码：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__section(&lt;span class=&quot;string&quot;&gt;&quot;ingress&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tc_ingress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __sk_buff *skb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 cluster_ip = &lt;span class=&quot;number&quot;&gt;0x846F070A&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10.7.111.132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __be32 pod_ip = &lt;span class=&quot;number&quot;&gt;0x0529050A&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 10.5.41.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l3_off = ETH_HLEN;    &lt;span class=&quot;comment&quot;&gt;// IP header offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l4_off = l3_off + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// TCP header offset: l3_off + sizeof(struct iphdr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __be32 sum;                     &lt;span class=&quot;comment&quot;&gt;// IP checksum&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *data_end = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)skb-&amp;gt;data_end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data_end &amp;lt; data + l4_off) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// not our packet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ip4 = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)(data + l3_off);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ip4-&amp;gt;saddr != pod_ip || ip4-&amp;gt;protocol != IPPROTO_TCP &lt;span class=&quot;comment&quot;&gt;/* || tcp-&amp;gt;dport == 80 */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// SNAT: pod_ip -&amp;gt; cluster_ip, then update L3 and L4 header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum = csum_diff((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;ip4-&amp;gt;saddr, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;cluster_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    skb_store_bytes(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, saddr), (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;cluster_ip, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l3_csum_replace(skb, l3_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l4_csum_replace(skb, l4_off + offsetof(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr, check), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, sum, BPF_F_PSEUDO_HDR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TC_ACT_OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __license[] __section(&lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt;) = &lt;span class=&quot;string&quot;&gt;&quot;GPL&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;编译并加载到内核中&quot;&gt;&lt;a href=&quot;#编译并加载到内核中&quot; class=&quot;headerlink&quot; title=&quot;编译并加载到内核中&quot;&gt;&lt;/a&gt;编译并加载到内核中&lt;/h3&gt;&lt;p&gt;现在使用我的小脚本编译和加载到内核：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./compile-and-load.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo tc filter show dev eth0 egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0 handle 0x1 toy-proxy-bpf.o:[egress] direct-action not_&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;_hw id 18 tag f5f39a21730006aa jited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;++ sudo tc filter show dev eth0 ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter protocol all pref 49152 bpf chain 0 handle 0x1 toy-proxy-bpf.o:[ingress] direct-action not_&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;_hw id 19 tag b41159c5873bcbc9 jited&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;脚本是这样的：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat compile-and-load.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NIC=eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# compile c code into bpf code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clang -O2 -Wall -c toy-proxy-bpf.c -target bpf -o toy-proxy-bpf.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add tc queuing discipline (egress and ingress buffer)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc qdisc del dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc qdisc add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# load bpf code into the tc egress and ingress hook respectively&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; egress bpf da obj toy-proxy-bpf.o sec egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter add dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; ingress bpf da obj toy-proxy-bpf.o sec ingress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# show info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter show dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; egress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo tc filter show dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; ingress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;验证-2&quot;&gt;&lt;a href=&quot;#验证-2&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl &lt;span class=&quot;variable&quot;&gt;$CLUSTER_IP&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$PORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完美！&lt;/p&gt;
&lt;h3 id=&quot;清理-3&quot;&gt;&lt;a href=&quot;#清理-3&quot; class=&quot;headerlink&quot; title=&quot;清理&quot;&gt;&lt;/a&gt;清理&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo tc qdisc del dev &lt;span class=&quot;variable&quot;&gt;$NIC&lt;/span&gt; clsact 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在这篇文章中，我们用不同的方法手工实现了 &lt;code&gt;kube-proxy&lt;/code&gt; 的核心功能。希望您现在对 kubernetes 节点代理有了更好的理解，以及关于网络的其他一些配置。&lt;/p&gt;
&lt;p&gt;在这篇文章中使用的代码和脚本：&lt;a href=&quot;https://github.com/icyxp/icyxp.github.io/tree/master/images/k8s/proxy/code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes Doc: CLI - kube-proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0011-ipvs-proxier.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/enhancements: enhancements/0011-ipvs-proxier.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes Doc: Service types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/proxies/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proxies in Kubernetes - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@benmeier_/a-quick-minimal-ipvs-load-balancer-demo-d5cc42d0deb4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A minimal IPVS Load Balancer demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1BaIAywY2qqeHtyGZtlyAp89JIZs59MZLKcFLxKE6LyM/edit#slide=id.p3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scaling Kubernetes to Support 50,000 Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37230013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;华为云在 K8S 大规模场景下的 Service 性能优化实践&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;p&gt;webapp.yaml:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  serviceName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;webapp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# affinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#   nodeAffinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#     requiredDuringSchedulingIgnoredDuringExecution:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#       nodeSelectorTerms:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#       - matchExpressions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#         - key: kubernetes.io/hostname&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           operator: In&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           values:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#           - node1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      tolerations:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - effect:&lt;/span&gt; NoSchedule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        key:&lt;/span&gt; smoke&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        operator:&lt;/span&gt; Equal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        value:&lt;/span&gt; test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; webapp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; nginx-slim:&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          name:&lt;/span&gt; web&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;翻译自：Cracking kubernetes node proxy 作者：ArthurChiao&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;背景知识&lt;/li&gt;
&lt;li&gt;节点代理模型&lt;/li&gt;
&lt;li&gt;测试环境&lt;/li&gt;
&lt;li&gt;实现：通过 userspace socket 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 iptables 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 ipvs/ipset 实现 proxy&lt;/li&gt;
&lt;li&gt;实现：通过 bpf 实现 proxy&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;li&gt;附录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubernetes 中有几种类型的代理。其中有 &lt;strong&gt;node proxier&lt;/strong&gt; 或 &lt;code&gt;kube-proxy&lt;/code&gt;，它在每个节点上反映 Kubernetes API 中定义的服务，可以跨一组后端执行简单的 TCP/UDP/SCTP 流转发 [1]。&lt;/p&gt;
&lt;p&gt;为了更好地理解节点代理模型，在这篇文章中，我们将用不同的方法设计和实现我们自己版本的 &lt;code&gt;kube-proxy&lt;/code&gt;; 尽管这些只是 &lt;code&gt;toy-proxy&lt;/code&gt;，但从&lt;strong&gt;透明流量拦截、转发、负载均衡&lt;/strong&gt;等方面来说，它们的工作方式与 K8S 集群中运行的普通 &lt;code&gt;kube-proxy&lt;/code&gt; 基本相同。&lt;/p&gt;
&lt;p&gt;通过我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序，非 K8S 节点（不在 K8S 集群中）上的应用程序（无论是宿主本地应用程序，还是在 VM/容器中运行的应用程序）也可以通过 &lt;strong&gt;ClusterIP&lt;/strong&gt; 访问 K8S 服务 – &lt;strong&gt;注意，在 kubernetes 的设计中，ClusterIP 只能在 K8S 集群节点中访问。（在某种意义上，我们的 &lt;code&gt;toy-proxy&lt;/code&gt; 程序将非 K8S 节点变成了 K8S 节点。)&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="kube-proxy" scheme="http://team.jiunile.com/categories/kubernetes/kube-proxy/"/>
    
      <category term="网络" scheme="http://team.jiunile.com/categories/kubernetes/kube-proxy/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iptables" scheme="http://team.jiunile.com/tags/iptables/"/>
    
      <category term="ipvs" scheme="http://team.jiunile.com/tags/ipvs/"/>
    
      <category term="bpf" scheme="http://team.jiunile.com/tags/bpf/"/>
    
      <category term="netfilter" scheme="http://team.jiunile.com/tags/netfilter/"/>
    
      <category term="proxy" scheme="http://team.jiunile.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes CPUThrottlingHigh 告警解析</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-cpu-alert.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-cpu-alert.html</id>
    <published>2020-10-13T12:00:00.000Z</published>
    <updated>2020-10-13T05:42:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用Kubernetes的过程中，我们看到过这样一个告警信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[K8S]告警主题: CPUThrottlingHigh&lt;br&gt;告警级别: warning&lt;br&gt;告警类型: CPUThrottlingHigh&lt;br&gt;故障实例: xxxx&lt;br&gt;告警详情: 27% throttling of CPU in namespace kube-system for container kube-proxy in pod kube-proxy-9pj9j.&lt;br&gt;触发时间: 2020-05-08 17:34:17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个告警信息说明 &lt;code&gt;kube-proxy&lt;/code&gt; 容器被 &lt;code&gt;throttling&lt;/code&gt; 了，然而查看该容器的资源使用历史信息，发现该容器以及容器所在的节点的 CPU 资源使用率都不高：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/m-1.png&quot; alt=&quot;告警期间容器所在节点CPU使用率&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/m-2.png&quot; alt=&quot;告警期间kube-proxy的资源使用率&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过我们的分析，发现该告警实际上是和 Kubernetes 对于 CPU 资源的限制和管控机制有关。Kubernetes 依赖于容器的 &lt;code&gt;runtime&lt;/code&gt; 进行 CPU 资源的调度，而容器 &lt;code&gt;runtime&lt;/code&gt; 以 Docker 为例，是借助于 &lt;code&gt;cgroup&lt;/code&gt; 和 &lt;code&gt;CFS&lt;/code&gt; 调度机制进行资源管控。本文基于这个告警案例，首先分析了 &lt;code&gt;CFS&lt;/code&gt; 的基本原理，然后对于 Kubernetes 借助 &lt;code&gt;CFS&lt;/code&gt; 进行 CPU 资源的调度和管控方法进行了介绍，最后使用一个例子来分析 &lt;code&gt;CFS&lt;/code&gt; 的一些调度特性来解释这个告警的 &lt;code&gt;root cause&lt;/code&gt; 和解决方案。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;CFS-基本原理&quot;&gt;&lt;a href=&quot;#CFS-基本原理&quot; class=&quot;headerlink&quot; title=&quot;CFS 基本原理&quot;&gt;&lt;/a&gt;CFS 基本原理&lt;/h2&gt;&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;p&gt;Linux 在 2.6.23 之后开始引入 CFS 逐步替代O1调度器作为新的进程调度器，正如它名字所描述的，&lt;a href=&quot;https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS(Completely Fair Scheduler) 调度器&lt;/a&gt;追求的是对所有进程的全面公平，实际上它的做法就是在一个特定的调度周期内，保证所有待调度的进程都能被执行一遍，主要和当前已经占用的 CPU 时间经权重除权之后的值(vruntime，见下面公式)来决定本轮调度周期内所能占用的 CPU 时间，vruntime 越少，本轮能占用的 CPU时间越多；总体而言，CFS 就是通过保证各个进程 vruntime 的大小尽量一致来达到公平调度的效果：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;进程的运行时间计算公式为:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;进程运行时间 = 调度周期 * 进程权重 / 所有进程权重之和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vruntime = 进程运行时间 * NICE_0_LOAD / 进程权重 = (调度周期 * 进程权重 / 所有进程总权重) * NICE_0_LOAD / 进程权重 = 调度周期 * NICE_0_LOAD / 所有进程总权重&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面两个公式，可以看到 vruntime 不是进程实际占用 CPU 的时间，而是剔除权重影响之后的 CPU 时间，这样所有进程在被调度决策的时候的依据是一致的，而实际占用 CPU 时间是经进程优先级权重放大的。这种方式使得系统的调度粒度更小来，更加适合高负载和多交互的场景。&lt;/p&gt;
&lt;h3 id=&quot;Kernel-配置&quot;&gt;&lt;a href=&quot;#Kernel-配置&quot; class=&quot;headerlink&quot; title=&quot;Kernel 配置&quot;&gt;&lt;/a&gt;Kernel 配置&lt;/h3&gt;&lt;p&gt;在kernel文件系统中，可以通过调整如下几个参数来改变CFS的一些行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_min_granularity_ns&lt;/code&gt;，表示进程最少运行时间，防止频繁的切换，对于交互系统&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_nr_migrate&lt;/code&gt;，在多 CPU 情况下进行负载均衡时，一次最多移动多少个进程到另一个 CPU 上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_wakeup_granularity_ns&lt;/code&gt;，表示进程被唤醒后至少应该运行的时间，这个数值越小，那么发生抢占的概率也就越高&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/sys/kernel/sched_latency_ns&lt;/code&gt;，表示一个运行队列所有进程运行一次的时间长度(&lt;strong&gt;正常情况下的队列调度周期，P&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sched_nr_latency&lt;/code&gt;，这个参数是内核内部参数，无法直接设置，是通过&lt;code&gt;sched_latency_ns/sched_min_granularity_ns&lt;/code&gt; 这个公式计算出来的；在实际运行中，如果队列排队进程数 &lt;code&gt;nr_running &amp;gt; sched_nr_latency&lt;/code&gt;，则调度周期就不是&lt;code&gt;sched_latency_ns&lt;/code&gt;，而是 &lt;code&gt;P = sched_min_granularity_ns * nr_running&lt;/code&gt;，如果 &lt;code&gt;nr_running &amp;lt;= sched_nr_latency&lt;/code&gt;，则 &lt;code&gt;P = sched_latency_ns&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在阿里云的Kubernetes节点上，这些参数配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_nr_migrate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_wakeup_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@iZxxxxxxxxxxxxxxxxxxxxZ ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 24000000 / 10000000 = 2.4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在阿里云普通的虚拟机上的参数如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@prod-tomcat-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@prod-tomcat-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 15000000 / 3000000 = 5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而在普通的CentOS Linux release 7.5.1804 (Core) 上的参数如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_min_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_nr_migrate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_wakeup_granularity_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-01 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/sys/kernel/sched_latency_ns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以算出来 &lt;code&gt;sched_nr_latency = sched_latency_ns / sched_min_granularity_ns = 24000000 / 3000000 = 8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，阿里云的 Kubernetes 节点设置了更长的最小执行时间，在进程队列稍有等待(2.4) 的时候就开始保证每个进程的最小运行时间不少于 10 毫秒。&lt;/p&gt;
&lt;h3 id=&quot;运行和观察&quot;&gt;&lt;a href=&quot;#运行和观察&quot; class=&quot;headerlink&quot; title=&quot;运行和观察&quot;&gt;&lt;/a&gt;运行和观察&lt;/h3&gt;&lt;p&gt;部署这样一个 yaml POD：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;64Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;250m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;128Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;500m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;while true; do sleep 10; done&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  restartPolicy:&lt;/span&gt; Always&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到该容器内部的进程对应的CPU调度信息变化如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229360324.308323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             0.179610&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            31.190620&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229480327.896307&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             0.149504&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            33.325310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@k8s-node-04 ~]&lt;span class=&quot;comment&quot;&gt;# cat /proc/121133/sched&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh (121133, &lt;span class=&quot;comment&quot;&gt;#threads: 1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.exec_start                                :   20229520328.862396&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.vruntime                                  :             1.531536&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.sum_&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;_runtime                          :            34.053116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.nr_migrations                             :                   18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_switches                                  :                   95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_voluntary_switches                        :                   94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_involuntary_switches                      :                    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;se.load.weight                               :                 1024&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;policy                                       :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prio                                         :                  120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clock-delta                                  :                   34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm-&amp;gt;numa_scan_seq                            :                    0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_migrations, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 0, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 0, 1, 1, 0, -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numa_faults_memory, 1, 1, 0, 0, -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 sum_exec_runtime 表示实际运行的物理时间。&lt;/p&gt;
&lt;h2 id=&quot;Kubernetes-借助-CFS-进行-CPU-管理&quot;&gt;&lt;a href=&quot;#Kubernetes-借助-CFS-进行-CPU-管理&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 借助 CFS 进行 CPU 管理&quot;&gt;&lt;/a&gt;Kubernetes 借助 CFS 进行 CPU 管理&lt;/h2&gt;&lt;h3 id=&quot;CFS-进行-CPU-资源限流-throtting-的原理&quot;&gt;&lt;a href=&quot;#CFS-进行-CPU-资源限流-throtting-的原理&quot; class=&quot;headerlink&quot; title=&quot;CFS 进行 CPU 资源限流(throtting) 的原理&quot;&gt;&lt;/a&gt;CFS 进行 CPU 资源限流(throtting) 的原理&lt;/h3&gt;&lt;p&gt;Kubernetes 的资源定义：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;64Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;250m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  limits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    memory:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;128Mi&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;500m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如里面的 CPU 需求，会被翻译成容器 runtime 的运行时参数，并最终变成 cgroups 和CFS 的参数配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.shares&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_quota_us&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_period_us&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一个默认的参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /proc/sys/kernel/&lt;span class=&quot;built_in&quot;&gt;sched&lt;/span&gt;_latency_ns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以在这个节点上，正常压力下，系统的 CFS 调度周期是 24ms，CFS 重分配周期是 100ms，而该 POD 在一个重分配周期最多占用 50ms 的时间，在有压力的情况下，POD 可以占据的 CPU share 比例是 256。&lt;/p&gt;
&lt;p&gt;下面一个例子可以说明不同资源需求的 POD 容器是如何在 CFS 的调度下占用 CPU 资源的：&lt;br&gt;&lt;img src=&quot;/images/k8s/m-3.png&quot; alt=&quot;CPU资源配置和CFS调度&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，有如下系统配置情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFS 调度周期为 10ms，正常负载情况下，进程 ready 队列里面的进程在每 10ms 的间隔内都会保证被执行一次&lt;/li&gt;
&lt;li&gt;CFS 重分配周期为 100ms，用于保证一个进程的 limits 设置会被反映在每 100ms 的重分配周期内可以占用的 CPU 时间数，在多核系统中，limit 最大值可以是 CFS重分配周期*CPU核数&lt;/li&gt;
&lt;li&gt;该执行进程队列只有进程A和进程B两个进程&lt;/li&gt;
&lt;li&gt;进程A和B定义的 CPU share 占用都一样，所以在系统资源紧张的时候可以保证A和B进程都可以占用可用 CPU 资源的一半&lt;/li&gt;
&lt;li&gt;定义的 CFS 重分配周期都是 100ms&lt;/li&gt;
&lt;li&gt;进程A在 100ms 内最多占用 50ms，进程B在 100ms 内最多占用 20ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在一个 CFS 重分配周期(相当于10个 CFS 调度周期)内，进程队列的执行情况如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在前面的4个 CFS 调度周期内，进程A和B由于 share 值是一样的，所以每个 CFS 调度内(10ms)，进程A和B都会占用 5ms&lt;/li&gt;
&lt;li&gt;在第4个 CFS 调度周期结束的时候，在本 CFS 重分配周期内，进程B已经占用了 20ms，在剩下的8个 CFS 调度周期即 80ms 内，进程B都会被限流，一直到下一个 CFS 重分配周期内，进程B才可以继续占用 CPU&lt;/li&gt;
&lt;li&gt;在第5-7这3个 CFS 调度周期内，由于进程B被限流，所以进程A可以完全拥有这3个 CFS 调度的 CPU 资源，占用 30ms 的执行时间，这样在本 CFS 重分配周期内，进程A已经占用了50ms 的 CPU 时间，在后面剩下的3个 CFS 调度周期即后面的 30ms 内，进程A也会被限流，一直到下一个 CFS 重分配周期内，进程A才可以继续占用 CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果进程被限流了，可以在如下的路径看到：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /sys/fs/cgroup/cpu/kubepods/pod5326d6f4-789d-11ea-b093-fa163e23cb69/69336c973f9f414c3f9fdfbd90200b7083b35f4d54ce302a4f5&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;330f2889846/cpu.stat &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_periods 14001693&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nr_throttled 2160435&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;throttled_time 570069950532853&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;本文开头问题的原因分析&quot;&gt;&lt;a href=&quot;#本文开头问题的原因分析&quot; class=&quot;headerlink&quot; title=&quot;本文开头问题的原因分析&quot;&gt;&lt;/a&gt;本文开头问题的原因分析&lt;/h3&gt;&lt;p&gt;根据 3.1 描述的原理，很容易理解本文开通的告警信息的出现，是由于在某些特定的 CFS 重分配周期内，&lt;code&gt;kube-proxy&lt;/code&gt; 的 CPU 占用率超过了给它分配的 limits ，而参看 &lt;code&gt;kube-proxy daemonset&lt;/code&gt; 的配置，确实它的 limits 配置只有 200ms，这就意味着在默认的100ms 的 CFS 重调度周期内，它只能占用 20ms，所以在特定繁忙场景会有问题&lt;br&gt;&lt;img src=&quot;/images/k8s/m-4.png&quot; alt=&quot;resource limit&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.shares &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_period_us &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat cpu.cfs_quota_us &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：这里 cpu.shares 的计算方法如下：200x1024/1000~=204&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而这个问题的解决方案就是将 CPU limits 提高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Zalando 公司有一个分享《&lt;a href=&quot;https://www.youtube.com/watch?v=eBChCFD9hfs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimizing Kubernetes Resource Requests/Limits for Cost-Efficiency and Latency / Henning Jacobs&lt;/a&gt;》很好的讲述了 CPU 资源管理的问题，可以参考，这个演讲的PPT在这里可以找到。&lt;/p&gt;
&lt;p&gt;更具体问题分析和讨论还可以参考如下文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-monitoring/kubernetes-mixin/issues/108&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CPUThrottlingHigh false positives #108&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/67577&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS quotas can lead to unnecessary throttling #67577&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS Bandwidth Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overly aggressive CFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中《&lt;a href=&quot;https://gist.github.com/bobrik/2030ff040fad360327a5fab7a09c4ff1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Overly aggressive CFS&lt;/a&gt;》里面还有几个小实验可以帮助大家更好的认识到CFS 进行 CPU m资源管控的特点：&lt;br&gt;&lt;img src=&quot;/images/k8s/m-5.png&quot; alt=&quot;cfs demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文作者：cloudvtech&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在使用Kubernetes的过程中，我们看到过这样一个告警信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[K8S]告警主题: CPUThrottlingHigh&lt;br&gt;告警级别: warning&lt;br&gt;告警类型: CPUThrottlingHigh&lt;br&gt;故障实例: xxxx&lt;br&gt;告警详情: 27% throttling of CPU in namespace kube-system for container kube-proxy in pod kube-proxy-9pj9j.&lt;br&gt;触发时间: 2020-05-08 17:34:17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个告警信息说明 &lt;code&gt;kube-proxy&lt;/code&gt; 容器被 &lt;code&gt;throttling&lt;/code&gt; 了，然而查看该容器的资源使用历史信息，发现该容器以及容器所在的节点的 CPU 资源使用率都不高：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/m-1.png&quot; alt=&quot;告警期间容器所在节点CPU使用率&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/k8s/m-2.png&quot; alt=&quot;告警期间kube-proxy的资源使用率&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过我们的分析，发现该告警实际上是和 Kubernetes 对于 CPU 资源的限制和管控机制有关。Kubernetes 依赖于容器的 &lt;code&gt;runtime&lt;/code&gt; 进行 CPU 资源的调度，而容器 &lt;code&gt;runtime&lt;/code&gt; 以 Docker 为例，是借助于 &lt;code&gt;cgroup&lt;/code&gt; 和 &lt;code&gt;CFS&lt;/code&gt; 调度机制进行资源管控。本文基于这个告警案例，首先分析了 &lt;code&gt;CFS&lt;/code&gt; 的基本原理，然后对于 Kubernetes 借助 &lt;code&gt;CFS&lt;/code&gt; 进行 CPU 资源的调度和管控方法进行了介绍，最后使用一个例子来分析 &lt;code&gt;CFS&lt;/code&gt; 的一些调度特性来解释这个告警的 &lt;code&gt;root cause&lt;/code&gt; 和解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="告警" scheme="http://team.jiunile.com/categories/kubernetes/%E5%91%8A%E8%AD%A6/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="告警" scheme="http://team.jiunile.com/tags/%E5%91%8A%E8%AD%A6/"/>
    
      <category term="cpu throttling" scheme="http://team.jiunile.com/tags/cpu-throttling/"/>
    
      <category term="cfs" scheme="http://team.jiunile.com/tags/cfs/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上Go服务内存占用率过高问题排查</title>
    <link href="http://team.jiunile.com//blog/2020/10/go-debug-memory2.html"/>
    <id>http://team.jiunile.com//blog/2020/10/go-debug-memory2.html</id>
    <published>2020-10-12T12:00:00.000Z</published>
    <updated>2020-10-12T02:25:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;某线上埋点上报机器偶尔触发内存占用过多的报警。ssh到机器top发现主要内存被埋点服务占用。之前重启过几次，但是过段时间仍然会发生内存占用过多的警报。下面是报警详情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[P1][PROBLEM][ali-e-xxx-service03.bj][][ all(#3) mem.memfree.percent 4.19575&lt;5][o3&gt;2019-10-28 10:20:00]&lt;/5][o3&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题推断&quot;&gt;&lt;a href=&quot;#问题推断&quot; class=&quot;headerlink&quot; title=&quot;问题推断&quot;&gt;&lt;/a&gt;问题推断&lt;/h2&gt;&lt;p&gt;埋点服务主要接收客户端压缩过的上报请求，并对请求数据做解压，投递到kafka，逻辑功能相对简单。初步怀疑是某些资源没有释放导致的内存泄露或Groutine泄露。&lt;/p&gt;
&lt;h2 id=&quot;问题排查&quot;&gt;&lt;a href=&quot;#问题排查&quot; class=&quot;headerlink&quot; title=&quot;问题排查&quot;&gt;&lt;/a&gt;问题排查&lt;/h2&gt;&lt;p&gt;由于代码不是由我们业务方维护的，首先向相关部门索要了代码权限。阅读了一下源码，所有资源释放都是由defer进行操作的，并没有发现很明显的资源未释放的情况。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-修改线上环境配置，打开trace端口&quot;&gt;&lt;a href=&quot;#1-修改线上环境配置，打开trace端口&quot; class=&quot;headerlink&quot; title=&quot;1. 修改线上环境配置，打开trace端口&quot;&gt;&lt;/a&gt;1. 修改线上环境配置，打开trace端口&lt;/h3&gt;&lt;p&gt;在调试分析问题之前，熟悉go的同学都知道 Golang 提供了非常方便的性能诊断工具 &lt;code&gt;go tool trace&lt;/code&gt;;  &lt;code&gt;go tool trace&lt;/code&gt; 是 Golang 中的性能大杀器， 能揭露运行中的所有的运行时事件和内存占用等。 它是 Go 生态系统中用于诊断性能问题时（如延迟，并行化和竞争异常）最有用的工具之一。 更多 go tool 工具可查看&lt;a href=&quot;http://team.jiunile.com/blog/2020/09/go-pprof.html&quot;&gt;如何使用 go pprof 定位内存泄漏&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于都是采用公司的基础库，基础库专门对 &lt;code&gt;go trace&lt;/code&gt; 做了封装。只需要在线上机器修改config 文件，将 trace 信息发送到配置文件中的指定端口就可以使用 &lt;code&gt;go tool&lt;/code&gt; 进行分析了。&lt;/p&gt;
&lt;p&gt;然后我在本地进行使用 &lt;code&gt;go tool&lt;/code&gt; 工具发现网络不通，排查了一下发现 trace 端口没有绑定到0.0.0.0上。随即用 proxy 工具将 9900 端口反向代理到 9999 端口，然后使用 &lt;code&gt;go tool&lt;/code&gt; 对正常状态的内存占用做了一个内存火焰图。如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/flame-graph.jpg&quot; alt=&quot;go 火焰图&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-问题复现&quot;&gt;&lt;a href=&quot;#2-问题复现&quot; class=&quot;headerlink&quot; title=&quot;2. 问题复现&quot;&gt;&lt;/a&gt;2. 问题复现&lt;/h3&gt;&lt;p&gt;过了几天后又收到了服务器警报，由于 qps 上升，这次比前几次来的都早一些。接到警报后立即对内存做了一个 top&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof -alloc_space http://&amp;#123;addr&amp;#125;/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing top 20 nodes out of 55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2.76GB 59.76% 59.76%     2.76GB 59.76%  compress/flate.NewReader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.45GB  9.73% 69.49%      0.45GB  9.73%  net/http.newBufioWriterSize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.29GB  6.33% 75.82%     3.05GB 66.09%  compress/gzip.(*Reader).Reset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.25GB  5.35% 81.17%     0.25GB  5.35%  net/http.newBufioReader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.13GB  2.85% 84.01%     0.13GB  2.85%  runtime.rawstringtmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.11GB  2.31% 86.32%     0.11GB  2.31%  bytes.makeSlice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0.10GB  2.26% 88.58%     0.10GB  2.26%  runtime.hashGrow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每一行表示一个函数的信息。前两列表示函数使用内存以及百分比；第三列是当前所有函数累加使用 Memory 的比例；第四列和第五列代表这个函数以及子函数运行所占用的 Memory 和比例（也被称为累加值 cumulative），应该大于等于前两列的值；最后一列就是函数的名字。如果应用程序有性能问题，上面这些信息应该能告诉我们内存都花费在哪些函数的执行上了，另外 pprof 的 CPU 时间分析也类似。&lt;/p&gt;
&lt;p&gt;pprof 不仅能打印出最耗内存的的地方(top)，还能列出函数代码以及对应的取样数据(list)、汇编代码以及对应的取样数据(disasm)，而且能以各种样式进行输出，比如 svg、gv、callgrind、png、gif 等等。&lt;/p&gt;
&lt;p&gt;可以看到的是大部分内存都被这些 Reader 占用了.&lt;/p&gt;
&lt;h3 id=&quot;3-带着问题重新阅读代码&quot;&gt;&lt;a href=&quot;#3-带着问题重新阅读代码&quot; class=&quot;headerlink&quot; title=&quot;3.带着问题重新阅读代码&quot;&gt;&lt;/a&gt;3.带着问题重新阅读代码&lt;/h3&gt;&lt;p&gt;前面我们进行了占用的初步分析，找到了内存占用多的 Fcuntion 是 &lt;code&gt;flate.NewReader&lt;/code&gt;, &lt;code&gt;Package flate&lt;/code&gt; 实现了 &lt;code&gt;RFC 1951&lt;/code&gt; 中描述的 &lt;code&gt;DEFLATE&lt;/code&gt; 压缩数据格式, gzip 包实现了对基于 &lt;code&gt;DEFLATE&lt;/code&gt; 的文件格式的访问。所以我们带着问题我们再次定位到相关源码实现，下面是一些关键定义:&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Gzip GzipPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetReader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(src io.Reader)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(*gzip.Reader, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Gzip.GetReader(src)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PutReader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(reader *gzip.Reader)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Gzip.PutReader(reader)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GzipPool manages a pool of gzip.Writer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The pool uses sync.Pool internally.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GzipPool &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readers sync.Pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    writers sync.Pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里用到了 &lt;code&gt;sync.Pool&lt;/code&gt; 来优化 GC, 为了验证内存都在 pool 上，我们又使用 &lt;code&gt;go tool&lt;/code&gt; 提供的 web 工具对查看了一下 pool 的内存占用，果然大部分占用都在 pool 上。&lt;/p&gt;
&lt;h3 id=&quot;什么是-sync-Pool&quot;&gt;&lt;a href=&quot;#什么是-sync-Pool&quot; class=&quot;headerlink&quot; title=&quot;什么是 sync.Pool?&quot;&gt;&lt;/a&gt;什么是 sync.Pool?&lt;/h3&gt;&lt;p&gt;sync包提供了基础的golang并发编程工具。根据官方文档的描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pool’s purpose is to cache allocated but unused items for later reuse, relieving pressure on the garbage collector. That is, it makes it easy to build efficient, thread-safe free lists. However, it is not suitable for all free lists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们通常用 golang 来构建高并发场景下的应用，但是由于 golang 内建的 GC 机制会影响应用的性能，为了减少 GC，golang 提供了对象重用的机制，也就是 &lt;code&gt;sync.Pool&lt;/code&gt; 对象池。 &lt;code&gt;sync.Pool&lt;/code&gt; 是可伸缩的，并发安全的。其大小仅受限于内存的大小，可以被看作是一个存放可重用对象的值的容器。 设计的目的是存放已经分配的但是暂时不用的对象，在需要用到的时候直接从 pool 中取。看到这里相信许多熟悉 GC 的同学心里已经有答案的猜测了:  或许和 GC 有关。&lt;/p&gt;
&lt;h3 id=&quot;So，Golang-的-GC-触发时机是什么？&quot;&gt;&lt;a href=&quot;#So，Golang-的-GC-触发时机是什么？&quot; class=&quot;headerlink&quot; title=&quot;So，Golang 的 GC 触发时机是什么？&quot;&gt;&lt;/a&gt;So，Golang 的 GC 触发时机是什么？&lt;/h3&gt;&lt;p&gt;Golang GC1.13 版本的 GC 实现是三色标记并配合写屏障和辅助 GC。触发条件主要有两个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;超过内存大小阈值&lt;/li&gt;
&lt;li&gt;达到定时时间&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;阈值是由一个 &lt;code&gt;gcpercent&lt;/code&gt; 的变量控制的,当新分配的内存占已在使用中的内存的比例超过 &lt;code&gt;gcprecent&lt;/code&gt; 时就会触发。比如一次回收完毕后，内存的使用量为 5M，那么下次回收的时机则是内存分配达到 10M 的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。如果一直达不到内存大小的阈值呢？这个时候 GC 就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次 GC 保证资源的回收。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们当内存占用慢慢升高的时候，gc 触发次数会减少并且趋近于 2min，没有 gc 就不会对 pool 中对象进行回收，导致内存占用率逐渐升高。&lt;/p&gt;
&lt;h3 id=&quot;主动触发GC进行验证&quot;&gt;&lt;a href=&quot;#主动触发GC进行验证&quot; class=&quot;headerlink&quot; title=&quot;主动触发GC进行验证&quot;&gt;&lt;/a&gt;主动触发GC进行验证&lt;/h3&gt;&lt;p&gt;修改代码，限制 rlimit，并使用一个 goroutine 每 30s 主动调用 gc，然后进行测试后上线。观测线上接口耗时并未发生明显变化，系统运行正常，内存占用报警再也没有被触发过。&lt;/p&gt;
&lt;h2 id=&quot;问题总结&quot;&gt;&lt;a href=&quot;#问题总结&quot; class=&quot;headerlink&quot; title=&quot;问题总结&quot;&gt;&lt;/a&gt;问题总结&lt;/h2&gt;&lt;p&gt;刚开始对偶尔触发的内存报警并没有过多的在意，有许多侥幸心理，但问题总归是客观存在的，及时发现问题，定时总结才能不断进步成长，尽量避免一有问题就重启，防止成为SRB(Service ReBoot Boy😁).&lt;/p&gt;
&lt;p&gt;本文作者：保护我方李元芳&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;某线上埋点上报机器偶尔触发内存占用过多的报警。ssh到机器top发现主要内存被埋点服务占用。之前重启过几次，但是过段时间仍然会发生内存占用过多的警报。下面是报警详情。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[P1][PROBLEM][ali-e-xxx-service03.bj][][ all(#3) mem.memfree.percent 4.19575&lt;5][O3 &gt;2019-10-28 10:20:00]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题推断&quot;&gt;&lt;a href=&quot;#问题推断&quot; class=&quot;headerlink&quot; title=&quot;问题推断&quot;&gt;&lt;/a&gt;问题推断&lt;/h2&gt;&lt;p&gt;埋点服务主要接收客户端压缩过的上报请求，并对请求数据做解压，投递到kafka，逻辑功能相对简单。初步怀疑是某些资源没有释放导致的内存泄露或Groutine泄露。&lt;/p&gt;
&lt;h2 id=&quot;问题排查&quot;&gt;&lt;a href=&quot;#问题排查&quot; class=&quot;headerlink&quot; title=&quot;问题排查&quot;&gt;&lt;/a&gt;问题排查&lt;/h2&gt;&lt;p&gt;由于代码不是由我们业务方维护的，首先向相关部门索要了代码权限。阅读了一下源码，所有资源释放都是由defer进行操作的，并没有发现很明显的资源未释放的情况。&lt;br&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="故障分析" scheme="http://team.jiunile.com/categories/golang/%E6%95%85%E9%9A%9C%E5%88%86%E6%9E%90/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="内存泄漏" scheme="http://team.jiunile.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
      <category term="sync.pool" scheme="http://team.jiunile.com/tags/sync-pool/"/>
    
      <category term="gc" scheme="http://team.jiunile.com/tags/gc/"/>
    
  </entry>
  
  <entry>
    <title>带你认识Kubernetes 网络插件Flannel与Calico</title>
    <link href="http://team.jiunile.com//blog/2020/10/k8s-cni.html"/>
    <id>http://team.jiunile.com//blog/2020/10/k8s-cni.html</id>
    <published>2020-10-09T12:00:00.000Z</published>
    <updated>2020-10-09T08:17:27.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;容器的网络解决方案有很多种，每支持一种网络实现就进行一次适配显然是不现实的，而 CNI 就是为了兼容多种网络方案而发明的。CNI 是 Container Network Interface 的缩写，是一个标准的通用的接口，用于连接容器管理系统和网络插件。&lt;/p&gt;
&lt;p&gt;简单来说，容器 runtime 为容器提供 network namespace，网络插件负责将 network interface 插入该 network namespace 中并且在宿主机做一些必要的配置，最后对 namespace 中的 interface 进行 IP 和路由的配置。&lt;/p&gt;
&lt;p&gt;所以网络插件的主要工作就在于为容器提供网络环境，包括为 pod 设置 ip 地址、配置路由保证集群内网络的通畅。目前比较流行的网络插件是 Flannel 和 Calico。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Flannel&quot;&gt;&lt;a href=&quot;#Flannel&quot; class=&quot;headerlink&quot; title=&quot;Flannel&quot;&gt;&lt;/a&gt;Flannel&lt;/h2&gt;&lt;p&gt;Flannel 主要提供的是集群内的 Overlay 网络，支持三种后端实现，分别是：UDP 模式、VXLAN 模式、host-gw 模式。&lt;/p&gt;
&lt;h3 id=&quot;UDP模式&quot;&gt;&lt;a href=&quot;#UDP模式&quot; class=&quot;headerlink&quot; title=&quot;UDP模式&quot;&gt;&lt;/a&gt;UDP模式&lt;/h3&gt;&lt;p&gt;UDP 模式，是 Flannel 项目最早支持的一种方式，却也是性能最差的一种方式。这种模式提供的是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。工作原理如下图所示。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-udp.jpg&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;node1 上的 pod1 请求 node2 上的 pod2 时，流量的走向如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod1 里的进程发起请求，发出 IP 包&lt;/li&gt;
&lt;li&gt;IP 包根据 pod1 里的 veth 设备对，进入到 cni0 网桥&lt;/li&gt;
&lt;li&gt;由于 IP 包的目的 ip 不在 node1 上，根据 flannel 在节点上创建出来的路由规则，进入到 flannel0 中&lt;/li&gt;
&lt;li&gt;此时 flanneld 进程会收到这个包，flanneld 判断该包应该在哪台 node 上，然后将其封装在一个 UDP 包中&lt;/li&gt;
&lt;li&gt;最后通过 node1 上的网关，发送给 node2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;flannel0 是一个 TUN 设备（Tunnel 设备）。在 Linux 中，TUN 设备是一种工作在三层（Network Layer）的虚拟网络设备。TUN 设备的功能：在操作系统内核和用户应用程序之间传递 IP 包。&lt;/p&gt;
&lt;p&gt;可以看到，这种模式性能差的原因在于，整个包的 UDP 封装过程是 flanneld 程序做的，也就是用户态，而这就带来了一次内核态向用户态的转换，以及一次用户态向内核态的转换。在上下文切换和用户态操作的代价其实是比较高的，而 UDP 模式因为封包拆包带来了额外的性能消耗。&lt;/p&gt;
&lt;h3 id=&quot;VXLAN-模式&quot;&gt;&lt;a href=&quot;#VXLAN-模式&quot; class=&quot;headerlink&quot; title=&quot;VXLAN 模式&quot;&gt;&lt;/a&gt;VXLAN 模式&lt;/h3&gt;&lt;p&gt;VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。通过利用 Linux 内核的这种特性，也可以实现在内核态的封装和解封装的能力，从而构建出覆盖网络。其工作原理如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-vxlan.jpg&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;VXLAN 模式的 flannel 会在节点上创建一个叫 flannel.1 的 VTEP (VXLAN Tunnel End Point，虚拟隧道端点) 设备，跟 UDP 模式一样，该设备将二层数据帧封装在 UDP 包里，再转发出去，而与 UDP 模式不一样的是，整个封装的过程是在内核态完成的。&lt;/p&gt;
&lt;p&gt;node1 上的 pod1 请求 node2 上的 pod2 时，流量的走向如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod1 里的进程发起请求，发出 IP 包&lt;/li&gt;
&lt;li&gt;IP 包根据 pod1 里的 veth 设备对，进入到 cni0 网桥&lt;/li&gt;
&lt;li&gt;由于 IP 包的目的 ip 不在 node1 上，根据 flannel 在节点上创建出来的路由规则，进入到 flannel.1 中&lt;/li&gt;
&lt;li&gt;flannel.1 将原始 IP 包加上一个目的 MAC 地址，封装成一个二层数据帧；然后内核将数据帧封装进一个 UDP 包里&lt;/li&gt;
&lt;li&gt;最后通过 node1 上的网关，发送给 node2&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;抓包验证&quot;&gt;&lt;a href=&quot;#抓包验证&quot; class=&quot;headerlink&quot; title=&quot;抓包验证&quot;&gt;&lt;/a&gt;抓包验证&lt;/h4&gt;&lt;p&gt;在 node1 上部署一个 nginx pod1，node2 上部署一个 nginx pod2。然后在 pod1 的容器中 curl pod2 容器的 80 端口。&lt;/p&gt;
&lt;p&gt;集群网络环境如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node1 网卡 ens33：192.168.50.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod1 veth：10.244.0.7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node1 cni0：10.244.0.1/24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node1 flannel.1：10.244.0.0/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 网卡 ens33：192.168.50.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod2 veth：10.244.1.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 cni0：10.244.1.1/24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 flannel.1：10.244.1.0/32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;node1 上的路由信息如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ ip route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default via 192.168.50.1 dev ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.50.0/24 dev ens33 proto kernel scope link src 192.168.50.10 metric 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;node1 的网卡 ens33 的抓包情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-tcpdump.png&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;只能看到源 ip 为 node1 ip、目的 ip 为 node2 ip 的 UDP 包。由于 flannel.1 进行了一层 UDP 封包，这里我们在 Wireshark 中设置一下将 UDP 包解析为 VxLAN 格式（端口为 8472），设置过程为 Analyze-&amp;gt;Decode As：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-tcpdump2.png&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后再来看一下 node1 网卡上收到的包：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-tcpdump3.png&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到源 ip 为 pod1 ip、目的 ip 为 pod2 ip，并且该 IP 包被封装在 UDP 包中。&lt;/p&gt;
&lt;h3 id=&quot;host-gw-模式&quot;&gt;&lt;a href=&quot;#host-gw-模式&quot; class=&quot;headerlink&quot; title=&quot;host-gw 模式&quot;&gt;&lt;/a&gt;host-gw 模式&lt;/h3&gt;&lt;p&gt;最后一种 host-gw 模式是一种纯三层网络方案。其工作原理为将每个 Flannel 子网的“下一跳”设置成了该子网对应的宿主机的 IP 地址，这台主机会充当这条容器通信路径里的“网关”。这样 IP 包就能通过二层网络达到目的主机，而正是因为这一点，host-gw 模式要求集群宿主机之间的网络是二层连通的，如下图所示。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-flannel-host-gw.jpg&quot; alt=&quot;cni flannel&quot;&gt;&lt;/p&gt;
&lt;p&gt;宿主机上的路由信息是 flanneld 设置的，因为 flannel 子网和主机的信息保存在 etcd 中，所以 flanneld 只需要 watch 这些数据的变化，实时更新路由表即可。在这种模式下，容器通信的过程就免除了额外的封包和解包带来的性能损耗。&lt;/p&gt;
&lt;p&gt;node1 上的 pod1 请求 node2 上的 pod2 时，流量的走向如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod1 里的进程发起请求，发出 IP 包，从网络层进入链路层封装成帧&lt;/li&gt;
&lt;li&gt;根据主机上的路由规则，数据帧从 Node 1 通过宿主机的二层网络到达 Node 2 上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Calico&quot;&gt;&lt;a href=&quot;#Calico&quot; class=&quot;headerlink&quot; title=&quot;Calico&quot;&gt;&lt;/a&gt;Calico&lt;/h2&gt;&lt;p&gt;Calico 没有使用 CNI 的网桥模式，而是将节点当成边界路由器，组成了一个全连通的网络，通过 BGP 协议交换路由。所以，Calico 的 CNI 插件还需要在宿主机上为每个容器的 Veth Pair 设备配置一条路由规则，用于接收传入的 IP 包。&lt;/p&gt;
&lt;p&gt;Calico 的组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CNI 插件：Calico 与 Kubernetes 对接的部分&lt;/li&gt;
&lt;li&gt;Felix：负责在宿主机上插入路由规则（即：写入 Linux 内核的 FIB 转发信息库），以及维护 Calico 所需的网络设备等工作。&lt;/li&gt;
&lt;li&gt;BIRD (BGP Route Reflector)：是 BGP 的客户端，专门负责在集群里分发路由规则信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三个组件都是通过一个 DaemonSet 安装的。CNI 插件是通过 initContainer 安装的；而 Felix 和 BIRD 是同一个 pod 的两个 container。&lt;/p&gt;
&lt;h3 id=&quot;BGP-工作原理&quot;&gt;&lt;a href=&quot;#BGP-工作原理&quot; class=&quot;headerlink&quot; title=&quot;BGP 工作原理&quot;&gt;&lt;/a&gt;BGP 工作原理&lt;/h3&gt;&lt;p&gt;Calico 采用的 BGP，就是在大规模网络中实现节点路由信息共享的一种协议。全称是 Border Gateway Protocol，即：边界网关协议。它是一个 Linux 内核原生就支持的、专门用在大规模数据中心里维护不同的 “自治系统” 之间路由信息的、无中心的路由协议。&lt;/p&gt;
&lt;p&gt;由于没有使用 CNI 的网桥，Calico 的 CNI 插件需要为每个容器设置一个 Veth Pair 设备，然后把其中的一端放置在宿主机上，还需要在宿主机上为每个容器的 Veth Pair 设备配置一条路由规则，用于接收传入的 IP 包。如下图所示：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-calico-bgp.jpg&quot; alt=&quot;cni calico&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以使用 calicoctl 查看 node1 的节点连接情况：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~ calicoctl get no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~ calicoctl node status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Calico process is running.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPv4 BGP status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+-------------------+-------+------------+-------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| PEER ADDRESS  |     PEER TYPE     | STATE |   SINCE    |    INFO     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+-------------------+-------+------------+-------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 192.168.50.11 | node-to-node mesh | up    | 2020-09-28 | Established |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 192.168.50.12 | node-to-node mesh | up    | 2020-09-28 | Established |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------+-------------------+-------+------------+-------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPv6 BGP status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;No IPv6 peers found.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到整个 calico 集群上有 3 个节点，node1 和另外两个节点处于连接状态，模式为 “Node-to-Node Mesh”。再看下 node1 上的路由信息如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~ ip route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default via 192.168.50.1 dev ens33 proto static metric 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.104.0/26 via 192.168.50.11 dev ens33 proto bird&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.135.0/26 via 192.168.50.12 dev ens33 proto bird&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.166.128 dev cali717821d73f3 scope link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blackhole 10.244.166.128/26 proto bird&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.50.0/24 dev ens33 proto kernel scope link src 192.168.50.10 metric 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，第 2 条的路由规则表明 10.244.104.0/26 网段的数据包通过 bird 协议由 ens33 设备发往网关 192.168.50.11。这也就定义了目的 ip 为 node2 上 pod 请求的走向。第 3 条路由规则与之类似。&lt;/p&gt;
&lt;h4 id=&quot;抓包验证-1&quot;&gt;&lt;a href=&quot;#抓包验证-1&quot; class=&quot;headerlink&quot; title=&quot;抓包验证&quot;&gt;&lt;/a&gt;抓包验证&lt;/h4&gt;&lt;p&gt;与上面一样，从 node1 上的 pod1 发送一个 http 请求到 node2 上的 pod2。&lt;/p&gt;
&lt;p&gt;集群网络环境如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node1 网卡 ens33：192.168.50.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod1 ip：10.244.166.128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 网卡 ens33：192.168.50.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod2 ip：10.244.104.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;node1 的网卡 ens33 的抓包情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-calico-tcpdump.png&quot; alt=&quot;cni calico&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;IPIP-模式&quot;&gt;&lt;a href=&quot;#IPIP-模式&quot; class=&quot;headerlink&quot; title=&quot;IPIP 模式&quot;&gt;&lt;/a&gt;IPIP 模式&lt;/h3&gt;&lt;p&gt;IPIP 模式为了解决两个 node 不在一个子网的问题。只要将名为 calico-node 的 daemonset 的环境变量 CALICO_IPV4POOL_IPIP 设置为 “Always” 即可。如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- name: CALICO_IPV4POOL_IPIP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: &lt;span class=&quot;string&quot;&gt;&quot;Off&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IPIP 模式的 calico 使用了 tunl0 设备，这是一个 IP 隧道设备。IP 包进入 tunl0 后，内核会将原始 IP 包直接封装在宿主机的 IP 包中；封装后的 IP 包的目的地址为下一跳地址，即 node2 的 IP 地址。由于宿主机之间已经使用路由器配置了三层转发，所以这个 IP 包在离开 node 1 之后，就可以经过路由器，最终发送到 node 2 上。如下图所示。&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-calico-ipip.jpg&quot; alt=&quot;cni calico&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于 IPIP 模式的 Calico 额外多出了封包和拆包的过程，集群的网络性能受到了影响，所以在集群的二层网络通的情况下，建议不要使用 IPIP 模式。&lt;/p&gt;
&lt;p&gt;看下 node1 上的路由信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~ ip route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default via 192.168.50.1 dev ens33 proto static metric 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.104.0/26 via 192.168.50.11 dev tunl0 proto bird onlink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.135.0/26 via 192.168.50.12 dev tunl0 proto bird onlink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blackhole 10.244.166.128/26 proto bird&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10.244.166.129 dev calif3c799362a5 scope link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.50.0/24 dev ens33 proto kernel scope link src 192.168.50.10 metric 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，与之前不一样的是，目的 IP 为 node2 上的 Pod 的数据包是经由 tunl0 发送到网关 192.168.50.11。&lt;/p&gt;
&lt;h4 id=&quot;抓包验证-2&quot;&gt;&lt;a href=&quot;#抓包验证-2&quot; class=&quot;headerlink&quot; title=&quot;抓包验证&quot;&gt;&lt;/a&gt;抓包验证&lt;/h4&gt;&lt;p&gt;从 node1 上的 pod1 发送一个 http 请求到 node2 上的 pod2。&lt;/p&gt;
&lt;p&gt;集群网络环境如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node1 网卡 ens33：192.168.50.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node1 tunl0：10.244.166.128/32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod1 ip：10.244.166.129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 网卡 ens33：192.168.50.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod2 ip：10.244.104.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node2 tunl0：10.244.104.0/32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;tunl0 设备的抓包情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-calico-ipip-tcpdump.jpg&quot; alt=&quot;cni calico&quot;&gt;&lt;/p&gt;
&lt;p&gt;node1 网卡 ens33 的抓包情况：&lt;br&gt;&lt;img src=&quot;/images/k8s/cni-calico-ipip-tcpdump2.jpg&quot; alt=&quot;cni calico&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，IP 包在 tunl0 设备中被封装进了另一个 IP 包，其目的 IP 为 node2 的 IP，源 IP 为 node1 的 IP。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Kubernetes 的集群网络插件实现方案有很多种，本文主要分析了社区比较常见的两种 Flannel 和 Calico 的工作原理，针对集群内不同节点的 pod 间通信的场景，抓包分析了网络包的走向。&lt;/p&gt;
&lt;p&gt;Flannel 主要提供了 Overlay 的网络方案，UDP 模式由于其封包拆包的过程涉及了多次上下文的切换，导致性能很差，逐渐被社区抛弃；VXLAN 模式的封包拆包过程均在内核态，性能要比 UDP 好很多，也是最经常使用的模式；host-gw 模式不涉及封包拆包，所以性能相对较高，但要求节点间二层互通。&lt;/p&gt;
&lt;p&gt;Calico 主要采用了 BGP 协议交换路由，没有采用 cni0 网桥，当二层网络不通的时候，可以采用 IPIP 模式，但由于涉及到封包拆包的过程，性能相对较弱，与 Flannel 的 VXLAN 模式相当。&lt;/p&gt;
&lt;p&gt;本文作者：海的澜色 来自CS实验室&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;容器的网络解决方案有很多种，每支持一种网络实现就进行一次适配显然是不现实的，而 CNI 就是为了兼容多种网络方案而发明的。CNI 是 Container Network Interface 的缩写，是一个标准的通用的接口，用于连接容器管理系统和网络插件。&lt;/p&gt;
&lt;p&gt;简单来说，容器 runtime 为容器提供 network namespace，网络插件负责将 network interface 插入该 network namespace 中并且在宿主机做一些必要的配置，最后对 namespace 中的 interface 进行 IP 和路由的配置。&lt;/p&gt;
&lt;p&gt;所以网络插件的主要工作就在于为容器提供网络环境，包括为 pod 设置 ip 地址、配置路由保证集群内网络的通畅。目前比较流行的网络插件是 Flannel 和 Calico。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="cni" scheme="http://team.jiunile.com/categories/kubernetes/cni/"/>
    
      <category term="网络插件" scheme="http://team.jiunile.com/categories/kubernetes/cni/%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="calico" scheme="http://team.jiunile.com/tags/calico/"/>
    
      <category term="cni" scheme="http://team.jiunile.com/tags/cni/"/>
    
      <category term="flannel" scheme="http://team.jiunile.com/tags/flannel/"/>
    
      <category term="网络插件" scheme="http://team.jiunile.com/tags/%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>如何使用go pprof定位内存泄露</title>
    <link href="http://team.jiunile.com//blog/2020/09/go-pprof.html"/>
    <id>http://team.jiunile.com//blog/2020/09/go-pprof.html</id>
    <published>2020-09-30T12:00:00.000Z</published>
    <updated>2020-09-30T02:59:33.000Z</updated>
    
    <content type="html">&lt;p&gt;最近解决了我们项目中的一个内存泄露问题，事实再次证明 pprof 是一个好工具，但掌握好工具的正确用法，才能发挥好工具的威力，不然就算你手里有屠龙刀，也成不了天下第一，本文就是带你用 pprof 定位内存泄露问题。&lt;/p&gt;
&lt;p&gt;关于Go的内存泄露有这么一句话不知道你听过没有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10次内存泄露，有9次是 goroutine 泄露。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我所解决的问题，也是 goroutine 泄露导致的内存泄露，所以&lt;strong&gt;这篇文章主要介绍Go程序的goroutine 泄露，掌握了如何定位和解决 goroutine 泄露，就掌握了内存泄露的大部分场景&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文草稿最初数据都是生产坏境数据，为了防止敏感内容泄露，全部替换成了demo数据，demo的数据比生产环境数据简单多了，更适合入门理解，有助于掌握 pprof。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;go-pprof基本知识&quot;&gt;&lt;a href=&quot;#go-pprof基本知识&quot; class=&quot;headerlink&quot; title=&quot;go pprof基本知识&quot;&gt;&lt;/a&gt;go pprof基本知识&lt;/h2&gt;&lt;p&gt;定位 goroutine 泄露会使用到 pprof，pprof 是Go的性能工具，在开始介绍内存泄露前，先简单介绍下 pprof 的基本使用，更详细的使用给大家推荐了资料。&lt;/p&gt;
&lt;h3 id=&quot;什么是pprof&quot;&gt;&lt;a href=&quot;#什么是pprof&quot; class=&quot;headerlink&quot; title=&quot;什么是pprof&quot;&gt;&lt;/a&gt;什么是pprof&lt;/h3&gt;&lt;p&gt;pprof 是Go的性能分析工具，在程序运行过程中，可以记录程序的运行信息，可以是CPU使用情况、内存使用情况、goroutine 运行情况等，当需要性能调优或者定位Bug时候，这些记录的信息是相当重要。&lt;/p&gt;
&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;p&gt;使用 pprof 有多种方式，Go已经现成封装好了1个：&lt;code&gt;net/http/pprof&lt;/code&gt;，使用简单的几行命令，就可以开启 pprof，记录运行信息，并且提供了Web服务，能够通过浏览器和命令行2种方式获取运行数据。&lt;/p&gt;
&lt;p&gt;看个最简单的 pprof 的 demo 例子：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启pprof，监听请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ip := &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:6060&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(ip, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;start pprof failed on %s\n&quot;&lt;/span&gt;, ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;浏览器方式&quot;&gt;&lt;a href=&quot;#浏览器方式&quot; class=&quot;headerlink&quot; title=&quot;浏览器方式&quot;&gt;&lt;/a&gt;浏览器方式&lt;/h3&gt;&lt;p&gt;将上述的go pprof例子运行起来后通过浏览器访问：&lt;br&gt;&lt;img src=&quot;/images/go/pprof_1.png&quot; alt=&quot;go pprof&quot;&gt;&lt;br&gt;输入网址 &lt;code&gt;http://ip:port/debug/pprof/&lt;/code&gt; 打开pprof主页，从上到下依次是5类profile信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;block&lt;/strong&gt;：goroutine 的阻塞信息，本例就截取自一个 goroutine 阻塞的 demo，但 block 为0，没掌握 block 的用法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;goroutine&lt;/strong&gt;：所有 goroutine 的信息，下面的 &lt;code&gt;full goroutine stack dump&lt;/code&gt; 是输出所有 goroutine 的调用栈，是 goroutine 的 debug=2 ，后面会详细介绍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;heap&lt;/strong&gt;：堆内存的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mutex&lt;/strong&gt;：锁的信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;threadcreate&lt;/strong&gt;：线程信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这篇文章我们主要关注 goroutine 和 heap ，这两个都会打印调用栈信息，goroutine 里面还会包含 goroutine 的数量信息，heap 则是内存分配信息，本文用不到的地方就不展示了，最后推荐几篇文章大家去看。&lt;/p&gt;
&lt;h3 id=&quot;命令行方式&quot;&gt;&lt;a href=&quot;#命令行方式&quot; class=&quot;headerlink&quot; title=&quot;命令行方式&quot;&gt;&lt;/a&gt;命令行方式&lt;/h3&gt;&lt;p&gt;当连接在服务器终端上的时候，是没有浏览器可以使用的，Go提供了命令行的方式，能够获取以上5类信息，这种方式用起来更方便。&lt;/p&gt;
&lt;p&gt;使用命令 &lt;code&gt;go tool pprof url&lt;/code&gt; 可以获取指定的 profile 文件，此命令会发起 http 请求，然后下载数据到本地，之后进入交互式模式，就像 gdb 一样，可以使用命令查看运行信息，以下是5类请求的方式：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载cpu profile，默认从当前开始收集30s的cpu使用情况，需要等待30s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/profile   &lt;span class=&quot;comment&quot;&gt;# 30-second CPU profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/profile?seconds=120     &lt;span class=&quot;comment&quot;&gt;# wait 120s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载heap profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/heap      &lt;span class=&quot;comment&quot;&gt;# heap profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载goroutine profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/goroutine &lt;span class=&quot;comment&quot;&gt;# goroutine profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载block profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/block     &lt;span class=&quot;comment&quot;&gt;# goroutine blocking profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载mutex profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/mutex&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的 pprof/demo.go 太简单了，如果去获取内存 profile，几乎获取不到什么，换一个Demo进行内存 profile 的展示：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 展示内存增长和pprof，并不是泄露&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 运行一段时间：fatal error: runtime: out of memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ip := &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:6060&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(ip, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;start pprof failed on %s\n&quot;&lt;/span&gt;, ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os.Exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tick := time.Tick(time.Second / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tick &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(buf, &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这个demo会不断的申请内存，把它编译运行起来，然后执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof http://localhost:6060/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fetching profile over HTTP from http://localhost:6060/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saved profile &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/pprof/pprof.demo.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz       //&amp;lt;--- 下载到的内存profile文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo // 程序名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build ID: a9069a125ee9c0df3713b2149ca859e8d4d11d5a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: inuse_space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 8:55pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;  // 使用&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;打印所有可用命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Commands:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    callgrind        Outputs a graph &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; callgrind format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    comments         Output all profile comments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    disasm           Output assembly listings annotated with samples&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dot              Outputs a graph &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; DOT format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eog              Visualize graph through eog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    evince           Visualize graph through evince&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gif              Outputs a graph image &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; GIF format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gv               Visualize graph through gv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kcachegrind      Visualize report &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; KCachegrind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list             Output annotated &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;functions&lt;/span&gt; matching regexp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pdf              Outputs a graph &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PDF format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    peek             Output callers/callees of &lt;span class=&quot;built_in&quot;&gt;functions&lt;/span&gt; matching regexp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    png              Outputs a graph image &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PNG format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proto            Outputs the profile &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; compressed protobuf format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ps               Outputs a graph &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; PS format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raw              Outputs a text representation of the raw profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    svg              Outputs a graph &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; SVG format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tags             Outputs all tags &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text             Outputs top entries &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; text form&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top              Outputs top entries &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; text form&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    topproto         Outputs top entries &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; compressed protobuf format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traces           Outputs all profile samples &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; text form&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree             Outputs a text rendering of call graph&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    web              Visualize graph through web browser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    weblist          Display annotated &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; a web browser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o/options        List options and their current values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quit/&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;/^D     Exit pprof&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上信息我们只关注2个地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载得到的文件：&lt;code&gt;/home/ubuntu/pprof/pprof.demo.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz&lt;/code&gt;，这其中包含了程序名 &lt;code&gt;demo&lt;/code&gt;，profile 类型 &lt;code&gt;alloc&lt;/code&gt; 已分配的内存，&lt;code&gt;inuse&lt;/code&gt; 代表使用中的内存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; 可以获取帮助，最先会列出支持的命令，想掌握 pprof，要多看看，多尝试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于命令，本文只会用到3个，我认为也是最常用的：&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;list&lt;/code&gt;、&lt;code&gt;traces&lt;/code&gt;，分别介绍一下。&lt;/p&gt;
&lt;h4 id=&quot;top&quot;&gt;&lt;a href=&quot;#top&quot; class=&quot;headerlink&quot; title=&quot;top&quot;&gt;&lt;/a&gt;top&lt;/h4&gt;&lt;p&gt;按指标大小列出前10个函数，比如内存是按内存占用多少，CPU是按执行时间多少。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 814.62MB, 100% of 814.62MB total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  814.62MB   100%   100%   814.62MB   100%  main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%   814.62MB   100%  runtime.main&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;top会列出5个统计数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;flat&lt;/strong&gt;: 本函数占用的内存量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flat%&lt;/strong&gt;: 本函数内存占使用中内存总量的百分比。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sum%&lt;/strong&gt;: 前面每一行 flat 百分比的和，比如第2行虽然的100% 是 100% + 0%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cum&lt;/strong&gt;: 是累计量，加入main函数调用了函数f，函数f占用的内存量，也会记进来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cum%&lt;/strong&gt;: 是累计量占总量的百分比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h4&gt;&lt;p&gt;查看某个函数的代码，以及该函数每行代码的指标信息，如果函数名不明确，会进行模糊匹配，比如 &lt;code&gt;list main&lt;/code&gt; 会列出 &lt;code&gt;main.main&lt;/code&gt; 和 &lt;code&gt;runtime.main&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) list main.main  // 精确列出函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total: 814.62MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROUTINE ======================== main.main &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/heap/demo2.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  814.62MB   814.62MB (flat, cum)   100% of Total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     20:    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     21:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     22:    tick := time.Tick(time.Second / 100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     23:    var buf []byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     24:    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; range tick &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  814.62MB   814.62MB     25:        buf = append(buf, make([]byte, 1024*1024)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     26:    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     27:&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     28:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) list main  // 匹配所有函数名带main的函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total: 814.62MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROUTINE ======================== main.main &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/heap/demo2.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  814.62MB   814.62MB (flat, cum)   100% of Total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     20:    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     21:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..... // 省略几行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     28:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROUTINE ======================== runtime.main &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /usr/lib/go-1.10/src/runtime/proc.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0   814.62MB (flat, cum)   100% of Total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .    193:        // A program compiled with -buildmode=c-archive or c-shared&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..... // 省略几行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到在 &lt;code&gt;main.main&lt;/code&gt; 中的第25行占用了814.62MB内存，左右2个数据分别是 flat 和cum，含义和 top 中解释的一样。&lt;/p&gt;
&lt;h4 id=&quot;traces&quot;&gt;&lt;a href=&quot;#traces&quot; class=&quot;headerlink&quot; title=&quot;traces&quot;&gt;&lt;/a&gt;traces&lt;/h4&gt;&lt;p&gt;打印所有调用栈，以及调用栈的指标信息。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) traces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: inuse_space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 7:08pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------+-------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     bytes:  813.46MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  813.46MB   main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             runtime.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------+-------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     bytes:  650.77MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0   main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             runtime.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....... // 省略几十行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每个 &lt;code&gt;- - - - -&lt;/code&gt; 隔开的是一个调用栈，能看到 &lt;code&gt;runtime.main&lt;/code&gt; 调用了 &lt;code&gt;main.main&lt;/code&gt;，并且 &lt;code&gt;main.main&lt;/code&gt; 中占用了813.46MB内存。&lt;/p&gt;
&lt;p&gt;其他的 profile 操作和内存是类似的，这里就不展示了。&lt;/p&gt;
&lt;p&gt;这里只是简单介绍本文用到的 pprof 的功能，pprof 功能很强大，也经常和 benchmark 结合起来，但这不是本文的重点，所以就不多介绍了，为大家推荐几篇文章，一定要好好研读、实践：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go官方博客关于pprof的介绍，很详细，也包含样例，可以实操：&lt;a href=&quot;https://blog.golang.org/profiling-go-programs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Profiling Go Programs&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;煎鱼的这篇文章也很适合入门： &lt;a href=&quot;https://github.com/EDDYCJY/blog/blob/master/golang/2018-09-15-Golang%20%E5%A4%A7%E6%9D%80%E5%99%A8%E4%B9%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90%20PProf.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Golang 大杀器之性能剖析 PProf&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;什么是内存泄露&quot;&gt;&lt;a href=&quot;#什么是内存泄露&quot; class=&quot;headerlink&quot; title=&quot;什么是内存泄露&quot;&gt;&lt;/a&gt;什么是内存泄露&lt;/h2&gt;&lt;p&gt;内存泄露指的是程序运行过程中已不再使用的内存，没有被释放掉，导致这些内存无法被使用，直到程序结束这些内存才被释放的问题。&lt;/p&gt;
&lt;p&gt;Go虽然有 GC 来回收不再使用的堆内存，减轻了开发人员对内存的管理负担，但这并不意味着Go程序不再有内存泄露问题。在Go程序中，如果没有Go语言的编程思维，也不遵守良好的编程实践，就可能埋下隐患，造成内存泄露问题。&lt;/p&gt;
&lt;h2 id=&quot;怎么发现内存泄露&quot;&gt;&lt;a href=&quot;#怎么发现内存泄露&quot; class=&quot;headerlink&quot; title=&quot;怎么发现内存泄露&quot;&gt;&lt;/a&gt;怎么发现内存泄露&lt;/h2&gt;&lt;p&gt;在Go中发现内存泄露有2种方法，一个是通用的监控工具，另一个是 go pprof：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;监控工具&lt;/strong&gt;：固定周期对进程的内存占用情况进行采样，数据可视化后，根据内存占用走势（持续上升），很容易发现是否发生内存泄露。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;go pprof&lt;/strong&gt;：适合没有监控工具的情况，使用Go提供的 pprof 工具判断是否发生内存泄露。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这2种方式分别介绍一下。&lt;/p&gt;
&lt;h3 id=&quot;监控工具查看进程内在占用情况&quot;&gt;&lt;a href=&quot;#监控工具查看进程内在占用情况&quot; class=&quot;headerlink&quot; title=&quot;监控工具查看进程内在占用情况&quot;&gt;&lt;/a&gt;监控工具查看进程内在占用情况&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;如果使用云平台部署Go程序&lt;/strong&gt;，云平台都提供了内存查看的工具，可以查看OS的内存占用情况和某个进程的内存占用情况，比如阿里云，我们在1个云主机上只部署了1个Go服务，所以OS的内存占用情况，基本是也反映了进程内存占用情况，OS内存占用情况如下，可以看到&lt;strong&gt;随着时间的推进，内存的占用率在不断的提高，这是内存泄露的最明显现象&lt;/strong&gt;：&lt;br&gt;&lt;img src=&quot;/images/go/pprof_2.png&quot; alt=&quot;go pprof&quot;&gt;&lt;br&gt;&lt;strong&gt;如果没有云平台这种内存监控工具，可以制作一个简单的内存记录工具&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1、建立一个脚本 &lt;code&gt;prog_mem.sh&lt;/code&gt;，获取进程占用的物理内存情况，脚本内容如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prog_name=&lt;span class=&quot;string&quot;&gt;&quot;your_programe_name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prog_mem=$(pidstat  -r -u -h -C &lt;span class=&quot;variable&quot;&gt;$prog_name&lt;/span&gt; |awk &lt;span class=&quot;string&quot;&gt;&#39;NR==4&amp;#123;print $12&amp;#125;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time=$(date &lt;span class=&quot;string&quot;&gt;&quot;+%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$time&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;\tmemory(Byte)\t&quot;&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;$prog_mem&lt;/span&gt; &amp;gt;&amp;gt;/root/prog_mem.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、然后使用 &lt;code&gt;crontab&lt;/code&gt; 建立定时任务，每分钟记录1次。使用 &lt;code&gt;crontab -e&lt;/code&gt; 编辑crontab 配置，在最后增加1行&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*/1 * * * * /root/prog_mem.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;脚本输出的内容保存在 &lt;code&gt;prog_mem.log&lt;/code&gt;，只要大体浏览一下就可以发现内存的增长情况，判断是否存在内存泄露。如果需要可视化，可以直接黏贴 &lt;code&gt;prog_mem.log&lt;/code&gt; 内容到 Excel 等表格工具，绘制内存占用图。&lt;br&gt;&lt;img src=&quot;/images/go/pprof_3.png&quot; alt=&quot;go pprof&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;go-pprof发现存在内存问题&quot;&gt;&lt;a href=&quot;#go-pprof发现存在内存问题&quot; class=&quot;headerlink&quot; title=&quot;go pprof发现存在内存问题&quot;&gt;&lt;/a&gt;go pprof发现存在内存问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有情提醒：如果对 pprof 不了解，可以先看 go pprof 基本知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你 Google 或者百度，Go程序内存泄露的文章，它总会告诉你使用 &lt;strong&gt;pprof heap&lt;/strong&gt;，能够生成漂亮的调用路径图，火焰图等等，然后你根据调用路径就能定位内存泄露问题，我最初也是对此深信不疑，尝试了若干天后，只是发现内存泄露跟某种场景有关，根本找不到内存泄露的根源，&lt;strong&gt;如果哪位朋友用heap就能定位内存泄露的线上问题，麻烦介绍下&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;后来读了 Dave 的《High Performance Go Workshop》，刷新了对 heap 的认识，内存pprof 的简要内容如下：&lt;br&gt;&lt;img src=&quot;/images/go/pprof_4.png&quot; alt=&quot;go pprof&quot;&gt;&lt;br&gt;Dave讲了以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;内存 profiling 记录的是堆内存分配的情况，以及调用栈信息&lt;/strong&gt;，并不是进程完整的内存情况，猜测这也是在 go pprof 中称为 heap 而不是 memory 的原因。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈内存的分配是在调用栈结束后会被释放的内存，所以并不在内存 profile 中&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;内存 profiling 是基于抽样的，默认是每1000次堆内存分配，执行1次 profile 记录。&lt;/li&gt;
&lt;li&gt;因为内存 profiling 是基于抽样和它跟踪的是已分配的内存，而不是使用中的内存，（比如有些内存已经分配，看似使用，但实际以及不使用的内存，比如内存泄露的那部分），所以&lt;strong&gt;不能使用内存 profiling 衡量程序总体的内存使用情况&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dave 个人观点：使用内存 profiling 不能够发现内存泄露&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于目前对 heap 的认知，我有2个观点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;heap 能帮助我们发现内存问题，但不一定能发现内存泄露问题&lt;/strong&gt;，这个看法与 Dave 是类似的。heap 记录了内存分配的情况，我们能通过 heap 观察内存的变化，增长与减少，内存主要被哪些代码占用了，程序存在内存问题，这只能说明内存有使用不合理的地方，但并不能说明这是内存泄露。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;heap 在帮助定位内存泄露原因上贡献的力量微乎其微&lt;/strong&gt;。如第一条所言，能通过 heap 找到占用内存多的位置，但这个位置通常不一定是内存泄露，就算是内存泄露，也只是内存泄露的结果，并不是真正导致内存泄露的根源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，我介绍怎么用 heap 发现问题，然后再解释为什么 heap 几乎不能定位内存泄露的根因。&lt;/p&gt;
&lt;h4 id=&quot;怎么用heap发现内存问题&quot;&gt;&lt;a href=&quot;#怎么用heap发现内存问题&quot; class=&quot;headerlink&quot; title=&quot;怎么用heap发现内存问题&quot;&gt;&lt;/a&gt;怎么用heap发现内存问题&lt;/h4&gt;&lt;p&gt;使用 pprof 的 heap 能够获取程序运行时的内存信息，在程序平稳运行的情况下，每个一段时间使用 heap 获取内存的 profile ，&lt;strong&gt;然后使用 &lt;code&gt;base&lt;/code&gt; 能够对比两个 profile 文件的差别，就像 &lt;code&gt;diff&lt;/code&gt; 命令一样显示出增加和减少的变化&lt;/strong&gt;，使用一个简单的demo来说明 heap 和 base 的使用，依然使用demo2进行展示。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 展示内存增长和pprof，并不是泄露&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 运行一段时间：fatal error: runtime: out of memory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ip := &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:6060&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(ip, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;start pprof failed on %s\n&quot;&lt;/span&gt;, ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os.Exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tick := time.Tick(time.Second / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tick &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(buf, &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将上面代码运行起来，执行以下命令获取 profile 文件，Ctrl-D 退出，1分钟后再获取1次。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我已经获取到了两个 profile 文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pprof.demo2.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pprof.demo2.alloc_objects.alloc_space.inuse_objects.inuse_space.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;base&lt;/code&gt; 把001文件作为基准，然后用002和001对比，先执行 &lt;code&gt;top&lt;/code&gt; 看 &lt;code&gt;top&lt;/code&gt; 的对比，然后执行 &lt;code&gt;list main&lt;/code&gt; 列出 &lt;code&gt;main&lt;/code&gt; 函数的内存对比，结果如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof -base pprof.demo2.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz pprof.demo2.alloc_objects.alloc_space.inuse_objects.inuse_space.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: inuse_space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 14, 2019 at 2:33pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 970.34MB, 32.30% of 3003.99MB total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  970.34MB 32.30% 32.30%   970.34MB 32.30%  main.main   // 看这&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0% 32.30%   970.34MB 32.30%  runtime.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) list main.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total: 2.93GB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROUTINE ======================== main.main &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/heap/demo2.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  970.34MB   970.34MB (flat, cum) 32.30% of Total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     20:    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     21:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     22:    tick := time.Tick(time.Second / 100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     23:    var buf []byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     24:    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; range tick &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  970.34MB   970.34MB     25:        buf = append(buf, make([]byte, 1024*1024)...) // 看这&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     26:    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     27:&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     28:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt; 列出了 &lt;code&gt;main.main&lt;/code&gt; 和 &lt;code&gt;runtime.main&lt;/code&gt;，&lt;code&gt;main.main&lt;/code&gt; 就是我们编写的 main函数，&lt;code&gt;runtime.main&lt;/code&gt; 是 runtime 包中的 main 函数，也就是所有 main 函数的入口，这里不多介绍了，有兴趣可以看之前的调度器文章&lt;a href=&quot;http://lessisbetter.site/2019/03/26/golang-scheduler-2-macro-view/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Go调度器系列（2）宏观看调度器》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt; 显示 &lt;code&gt;main.main&lt;/code&gt; 第2次内存占用，比第1次内存占用多了970.34MB。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list main.main&lt;/code&gt; 告诉了我们增长的内存都在这一行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buf = append(buf, make([]byte, 1024*1024)...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;001和002 profile 的文件不进去看了，你本地测试下计算差值，绝对是刚才对比出的970.34MB。&lt;/p&gt;
&lt;h4 id=&quot;heap“不能”定位内存泄露&quot;&gt;&lt;a href=&quot;#heap“不能”定位内存泄露&quot; class=&quot;headerlink&quot; title=&quot;heap“不能”定位内存泄露&quot;&gt;&lt;/a&gt;heap“不能”定位内存泄露&lt;/h4&gt;&lt;p&gt;heap 能显示内存的分配情况，以及哪行代码占用了多少内存，我们能轻易的找到占用内存最多的地方，如果这个地方的数值还在不断怎大，基本可以认定这里就是内存泄露的位置。&lt;/p&gt;
&lt;p&gt;曾想按图索骥，从内存泄露的位置，根据调用栈向上查找，总能找到内存泄露的原因，这种方案看起来是不错的，但实施起来却找不到内存泄露的原因，结果是事半功倍。&lt;/p&gt;
&lt;p&gt;原因在于一个Go程序，其中有大量的 goroutine，这其中的调用关系也许有点复杂，也许内存泄露是在某个三方包里。举个栗子，比如下面这幅图，每个椭圆代表1个 goroutine，其中的数字为编号，箭头代表调用关系。heap profile 显示 g111（最下方标红节点）这个协程的代码出现了泄露，任何一个从 g101 到 g111 的调用路径都可能造成了 g111 的内存泄露，有2类可能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该 goroutine 只调用了少数几次，但消耗了大量的内存，说明每个 goroutine 调用都消耗了不少内存，&lt;strong&gt;内存泄露的原因基本就在该协程内部&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;该 goroutine 的调用次数非常多，虽然每个协程调用过程中消耗的内存不多，但该调用路径上，协程数量巨大，造成消耗大量的内存，并且这些 goroutine 由于某种原因无法退出，占用的内存不会释放，&lt;strong&gt;内存泄露的原因在到 g111 调用路径上某段代码实现有问题，造成创建了大量的 g111&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第2种情况，就是 goroutine 泄露，这是通过 heap 无法发现的，所以 heap 在定位内存泄露这件事上，发挥的作用不大&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/go/pprof_5.png&quot; alt=&quot;go pprof&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;goroutine-泄露怎么导致内存泄露&quot;&gt;&lt;a href=&quot;#goroutine-泄露怎么导致内存泄露&quot; class=&quot;headerlink&quot; title=&quot;goroutine 泄露怎么导致内存泄露&quot;&gt;&lt;/a&gt;goroutine 泄露怎么导致内存泄露&lt;/h2&gt;&lt;h3 id=&quot;什么是-goroutine-泄露&quot;&gt;&lt;a href=&quot;#什么是-goroutine-泄露&quot; class=&quot;headerlink&quot; title=&quot;什么是 goroutine 泄露&quot;&gt;&lt;/a&gt;什么是 goroutine 泄露&lt;/h3&gt;&lt;p&gt;如果你启动了1个 goroutine，但并没有符合预期的退出，直到程序结束，此 goroutine 才退出，这种情况就是 goroutine 泄露。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提前思考：什么会导致 goroutine 无法退出/阻塞？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;goroutine-泄露怎么导致内存泄露-1&quot;&gt;&lt;a href=&quot;#goroutine-泄露怎么导致内存泄露-1&quot; class=&quot;headerlink&quot; title=&quot;goroutine 泄露怎么导致内存泄露&quot;&gt;&lt;/a&gt;goroutine 泄露怎么导致内存泄露&lt;/h3&gt;&lt;p&gt;每个 goroutine 占用 2KB 内存，泄露1百万 goroutine 至少泄露 &lt;code&gt;2KB * 1000000 = 2GB&lt;/code&gt; 内存，为什么说至少呢？&lt;/p&gt;
&lt;p&gt;goroutine 执行过程中还存在一些变量，如果这些变量指向堆内存中的内存，GC会认为这些内存仍在使用，不会对其进行回收，这些内存谁都无法使用，造成了内存泄露。&lt;/p&gt;
&lt;p&gt;所以 goroutine 泄露有2种方式造成内存泄露：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;goroutine 本身的栈所占用的空间造成内存泄露。&lt;/li&gt;
&lt;li&gt;goroutine 中的变量所占用的堆内存导致堆内存泄露，这一部分是能通过 heap profile 体现出来的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dave 在文章中也提到了，如果不知道何时停止一个 goroutine ，这个 goroutine 就是潜在的内存泄露：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html#know_when_to_stop_a_goroutine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7.1.1 Know when to stop a goroutine&lt;/a&gt;&lt;br&gt;If you don’t know the answer, that’s a potential memory leak as the goroutine will pin its stack’s memory on the heap, as well as any heap allocated variables reachable from the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;怎么确定是goroutine泄露引发的内存泄露&quot;&gt;&lt;a href=&quot;#怎么确定是goroutine泄露引发的内存泄露&quot; class=&quot;headerlink&quot; title=&quot;怎么确定是goroutine泄露引发的内存泄露&quot;&gt;&lt;/a&gt;怎么确定是goroutine泄露引发的内存泄露&lt;/h3&gt;&lt;p&gt;掌握了前面的 pprof 命令行的基本用法，很快就可以确认是否是 goroutine 泄露导致内存泄露。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;判断依据：在节点正常运行的情况下，隔一段时间获取 goroutine 的数量，如果后面获取的那次，某些 goroutine 比前一次多，如果多获取几次，是持续增长的，就极有可能是goroutine 泄露。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goroutine 导致内存泄露的 demo：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// goroutine泄露导致内存泄露&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 开启pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ip := &lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:6060&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := http.ListenAndServe(ip, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fmt.Printf(&lt;span class=&quot;string&quot;&gt;&quot;start pprof failed on %s\n&quot;&lt;/span&gt;, ip)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os.Exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outCh := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 死代码，永不读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;-outCh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 每s起100个goroutine，goroutine会阻塞，不释放内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tick := time.Tick(time.Second / &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; tick &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alloc1(outCh)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alloc1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(outCh &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; alloc2(outCh)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alloc2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(outCh &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;alloc-fm exit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 分配内存，借用一下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _ = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;alloc done&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outCh &amp;lt;- &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 53行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译并运行以上代码，然后使用 &lt;code&gt;go tool pprof&lt;/code&gt; 获取 gorourine 的 profile 文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:6060/debug/pprof/goroutine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;已经通过 pprof 命令获取了2个 goroutine 的 profile 文件:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/ubuntu/pprof/pprof.leak_demo.goroutine.001.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/ubuntu/pprof/pprof.leak_demo.goroutine.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同 heap 一样，我们可以使用 &lt;code&gt;base&lt;/code&gt; 对比2个 goroutine profile 文件：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$go&lt;/span&gt; tool pprof -base pprof.leak_demo.goroutine.001.pb.gz pprof.leak_demo.goroutine.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: leak_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 2:44pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 20312, 100% of 20312 total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     20312   100%   100%      20312   100%  runtime.gopark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  main.alloc2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  main.alloc2.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.chansend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.chansend1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.goparkunlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到运行到 &lt;code&gt;runtime.gopark&lt;/code&gt; 的 goroutine 数量增加了20312个。再通过002文件，看一眼执行到 &lt;code&gt;gopark&lt;/code&gt; 的 goroutine 数量，即挂起的 goroutine 数量：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof pprof.leak_demo.goroutine.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: leak_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 2:47pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 24330, 100% of 24331 total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped 32 nodes (cum &amp;lt;= 121)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     24330   100%   100%      24330   100%  runtime.gopark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      24326   100%  main.alloc2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      24326   100%  main.alloc2.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      24326   100%  runtime.chansend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      24326   100%  runtime.chansend1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      24327   100%  runtime.goparkunlock&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显示有24330个 goroutine 被挂起，这不是 goroutine 泄露这是啥？已经能确定八九成goroutine 泄露了。&lt;/p&gt;
&lt;p&gt;是什么导致如此多的 goroutine 被挂起而无法退出？接下来就看怎么定位 goroutine 泄露。&lt;/p&gt;
&lt;h2 id=&quot;定位goroutine泄露的2种方法&quot;&gt;&lt;a href=&quot;#定位goroutine泄露的2种方法&quot; class=&quot;headerlink&quot; title=&quot;定位goroutine泄露的2种方法&quot;&gt;&lt;/a&gt;定位goroutine泄露的2种方法&lt;/h2&gt;&lt;p&gt;使用 pprof 有2种方式，一种是web网页，一种是 &lt;code&gt;go tool pprof&lt;/code&gt; 命令行交互，这两种方法查看 goroutine 都支持，但有轻微不同，也有各自的优缺点。&lt;/p&gt;
&lt;p&gt;我们先看Web的方式，再看命令行交互的方式，这两种都很好使用，结合起来用也不错。&lt;/p&gt;
&lt;h3 id=&quot;Web可视化查看&quot;&gt;&lt;a href=&quot;#Web可视化查看&quot; class=&quot;headerlink&quot; title=&quot;Web可视化查看&quot;&gt;&lt;/a&gt;Web可视化查看&lt;/h3&gt;&lt;p&gt;Web方式适合web服务器的端口能访问的情况，使用起来方便，有2种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;查看某条调用路径上，当前阻塞在此 goroutine 的数量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看所有 goroutine 的运行栈（调用路径），可以&lt;strong&gt;显示阻塞在此的时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h4&gt;&lt;p&gt;url请求中设置debug=1：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://ip:port/debug/pprof/goroutine?debug=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;效果如下：&lt;br&gt;&lt;img src=&quot;/images/go/pprof_6.png&quot; alt=&quot;go pprof&quot;&gt;&lt;/p&gt;
&lt;p&gt;看起来密密麻麻的，其实简单又十分有用，看上图标出来的部分，手机上图看起来可能不方便，那就放大图片，或直接看下面各字段的含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;goroutine profile: total 32023&lt;/code&gt;：32023 是 &lt;strong&gt;goroutine 的总数量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;32015 @ 0x42e15a 0x42e20e 0x40534b 0x4050e5 ...&lt;/code&gt;：32015 代表当前有32015 个 goroutine 运行这个调用栈，并且停在相同位置，@后面的十六进制，现在用不到这个数据，所以暂不深究了&lt;/li&gt;
&lt;li&gt;下面是当前 goroutine 的&lt;strong&gt;调用栈&lt;/strong&gt;，列出了&lt;strong&gt;函数和所在文件的行数，这个行数对定位很有帮助&lt;/strong&gt;，如下：&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;32015 @ 0x42e15a 0x42e20e 0x40534b 0x4050e5 0x6d8559 0x6d831b 0x45abe1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#    0x6d8558    main.alloc2.func1+0xf8    /home/ubuntu/heap/leak_demo.go:53&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#    0x6d831a    main.alloc2+0x2a    /home/ubuntu/heap/leak_demo.go:54&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据上面的提示，就能判断32015个 goroutine 运行到 &lt;code&gt;leak_demo.go&lt;/code&gt; 的53行：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alloc2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(outCh &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;alloc-fm exit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 分配内存，假用一下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buf := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _ = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;alloc done&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outCh &amp;lt;- &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 53行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;阻塞的原因是 outCh 这个写操作无法完成，outCh 是无缓冲的通道，并且由于以下代码是死代码，所以 goroutine 始终没有从 outCh 读数据，造成 outCh 阻塞，进而造成无数个alloc2 的 goroutine 阻塞，形成内存泄露：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;-outCh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;方式二&quot;&gt;&lt;a href=&quot;#方式二&quot; class=&quot;headerlink&quot; title=&quot;方式二&quot;&gt;&lt;/a&gt;方式二&lt;/h4&gt;&lt;p&gt;url 请求中设置 debug=2 ：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://ip:port/debug/pprof/goroutine?debug=2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/pprof_7.png&quot; alt=&quot;go pprof&quot;&gt;&lt;/p&gt;
&lt;p&gt;第2种方式和第1种方式是互补的，它可以看到每个 goroutine 的信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;goroutine 20 [chan send, 2 minutes]&lt;/code&gt;：20 是 goroutine id，[]中是当前goroutine 的状态，阻塞在写 channel ，并且阻塞了2分钟，长时间运行的系统，你能看到阻塞时间更长的情况。&lt;/li&gt;
&lt;li&gt;同时，也可以看到调用栈，看当前执行停到哪了：&lt;code&gt;leak_demo.go&lt;/code&gt; 的53行&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;goroutine 20 [chan send, 2 minutes]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.alloc2.func1(0xc42015e060)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /home/ubuntu/heap/leak_demo.go:53 +0xf9  // 这&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main.alloc2(0xc42015e060)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /home/ubuntu/heap/leak_demo.go:54 +0x2b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;created by main.alloc1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /home/ubuntu/heap/leak_demo.go:42 +0x3f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;命令行交互式方法&quot;&gt;&lt;a href=&quot;#命令行交互式方法&quot; class=&quot;headerlink&quot; title=&quot;命令行交互式方法&quot;&gt;&lt;/a&gt;命令行交互式方法&lt;/h3&gt;&lt;p&gt;Web的方法是简单粗暴，无需登录服务器，浏览器打开看看就行了。但就像前面提的，没有浏览器可访问时，命令行交互式才是最佳的方式，并且也是手到擒来，感觉比Web一样方便。&lt;/p&gt;
&lt;p&gt;命令行交互式只有1种获取 goroutine profile 的方法，不像Web网页分 &lt;code&gt;debug=1&lt;/code&gt; 和&lt;code&gt;debug=2&lt;/code&gt; 2种方式，并将 profile 文件保存到本地：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 注意命令没有`debug=1`，debug=1，加debug有些版本的go不支持&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof http://0.0.0.0:6060/debug/pprof/goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fetching profile over HTTP from http://localhost:6061/debug/pprof/goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saved profile &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/pprof/pprof.leak_demo.goroutine.001.pb.gz  // profile文件保存位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: leak_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 2:44pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令行只需要掌握3个命令就好了，上面介绍过了，详细的倒回去看 &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;traces&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;top&lt;/strong&gt;：显示正运行到某个函数 goroutine 的数量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;traces&lt;/strong&gt;：显示所有 goroutine 的调用栈&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;list&lt;/strong&gt;：列出代码详细的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们依然使用 &lt;code&gt;leak_demo.go&lt;/code&gt; 这个demo&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$  go tool pprof -base pprof.leak_demo.goroutine.001.pb.gz pprof.leak_demo.goroutine.002.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: leak_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 2:44pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 20312, 100% of 20312 total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     20312   100%   100%      20312   100%  runtime.gopark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  main.alloc2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  main.alloc2.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.chansend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.chansend1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0     0%   100%      20312   100%  runtime.goparkunlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) traces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: leak_demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: May 16, 2019 at 2:44pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------+-------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     20312   runtime.gopark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             runtime.goparkunlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             runtime.chansend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             runtime.chansend1 // channel发送&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             main.alloc2.func1 // alloc2中的匿名函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             main.alloc2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------+-------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;top 命令在怎么确定是 goroutine 泄露引发的内存泄露介绍过了，直接看 traces 命令，traces 能列出002中比001中多的那些 goroutine 的调用栈，这里只有1个调用栈，有20312个 goroutine 都执行这个调用路径，可以看到 alloc2 中的匿名函数 &lt;code&gt;alloc2.func1&lt;/code&gt; 调用了写 channel 的操作，然后阻塞挂起了 goroutine，使用 list 列出 &lt;code&gt;alloc2.func1&lt;/code&gt; 的代码，显示有20312个 goroutine 阻塞在53行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) list main.alloc2.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total: 20312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ROUTINE ======================== main.alloc2.func1 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/ubuntu/heap/leak_demo.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         0      20312 (flat, cum)   100% of Total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     48:        // 分配内存，假用一下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     49:        buf := make([]byte, 1024*1024*10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     50:        _ = len(buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     51:        fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;alloc done&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     52:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .      20312     53:        outCh &amp;lt;- 0  // 看这&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     54:    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     55:&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         .          .     56:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;友情提醒：使用list命令的前提是程序的源码在当前机器，不然可没法列出源码&lt;/strong&gt;。服务器上，通常没有源码，那我们咋办呢？刚才介绍了Web查看的方式，那里会列出代码行数，我们可以使用 &lt;code&gt;wget&lt;/code&gt; 下载网页：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://localhost:6060/debug/pprof/goroutine?debug=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下载网页后，使用编辑器打开文件，使用关键字 &lt;code&gt;main.alloc2.func1&lt;/code&gt; 进行搜索，找到与当前相同的调用栈，就可以看到该 goroutine 阻塞在哪一行了，不要忘记使用 &lt;code&gt;debug=2&lt;/code&gt; 还可以看到阻塞了多久和原因，Web方式中已经介绍了，此处省略代码几十行。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;h3 id=&quot;goroutine-泄露的本质&quot;&gt;&lt;a href=&quot;#goroutine-泄露的本质&quot; class=&quot;headerlink&quot; title=&quot;goroutine 泄露的本质&quot;&gt;&lt;/a&gt;goroutine 泄露的本质&lt;/h3&gt;&lt;p&gt;goroutine 泄露的本质是 channel 阻塞，无法继续向下执行，导致此 goroutine 关联的内存都无法释放，进一步造成内存泄露。&lt;/p&gt;
&lt;h3 id=&quot;goroutine-泄露的发现和定位&quot;&gt;&lt;a href=&quot;#goroutine-泄露的发现和定位&quot; class=&quot;headerlink&quot; title=&quot;goroutine 泄露的发现和定位&quot;&gt;&lt;/a&gt;goroutine 泄露的发现和定位&lt;/h3&gt;&lt;p&gt;利用好 go pprof 获取 goroutine profile 文件，然后利用3个命令 &lt;code&gt;top&lt;/code&gt;、&lt;code&gt;traces&lt;/code&gt;、&lt;code&gt;list&lt;/code&gt; 定位内存泄露的原因。&lt;/p&gt;
&lt;h3 id=&quot;goroutine-泄露的场景&quot;&gt;&lt;a href=&quot;#goroutine-泄露的场景&quot; class=&quot;headerlink&quot; title=&quot;goroutine 泄露的场景&quot;&gt;&lt;/a&gt;goroutine 泄露的场景&lt;/h3&gt;&lt;p&gt;泄露的场景不仅限于以下两类，但因channel相关的泄露是最多的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;channel 的读或者写：&lt;ol&gt;
&lt;li&gt;无缓冲 channel 的阻塞通常是写操作因为没有读而阻塞&lt;/li&gt;
&lt;li&gt;有缓冲的 channel 因为缓冲区满了，写操作阻塞&lt;/li&gt;
&lt;li&gt;期待从 channel 读数据，结果没有 goroutine 写&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;select 操作，select 里也是 channel 操作，如果所有 case 上的操作阻塞，goroutine 也无法继续执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;编码-goroutine-泄露的建议&quot;&gt;&lt;a href=&quot;#编码-goroutine-泄露的建议&quot; class=&quot;headerlink&quot; title=&quot;编码 goroutine 泄露的建议&quot;&gt;&lt;/a&gt;编码 goroutine 泄露的建议&lt;/h3&gt;&lt;p&gt;为避免 goroutine 泄露造成内存泄露，启动 goroutine 前要思考清楚：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;goroutine 如何退出？&lt;/li&gt;
&lt;li&gt;是否会有阻塞造成无法退出？如果有，那么这个路径是否会创建大量的 goroutine？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文作者：大彬&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近解决了我们项目中的一个内存泄露问题，事实再次证明 pprof 是一个好工具，但掌握好工具的正确用法，才能发挥好工具的威力，不然就算你手里有屠龙刀，也成不了天下第一，本文就是带你用 pprof 定位内存泄露问题。&lt;/p&gt;
&lt;p&gt;关于Go的内存泄露有这么一句话不知道你听过没有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10次内存泄露，有9次是 goroutine 泄露。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我所解决的问题，也是 goroutine 泄露导致的内存泄露，所以&lt;strong&gt;这篇文章主要介绍Go程序的goroutine 泄露，掌握了如何定位和解决 goroutine 泄露，就掌握了内存泄露的大部分场景&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文草稿最初数据都是生产坏境数据，为了防止敏感内容泄露，全部替换成了demo数据，demo的数据比生产环境数据简单多了，更适合入门理解，有助于掌握 pprof。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/categories/golang/pprof/"/>
    
    
      <category term="goroutine" scheme="http://team.jiunile.com/tags/goroutine/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/tags/pprof/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="内存泄漏" scheme="http://team.jiunile.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes hostpath和local volume区别</title>
    <link href="http://team.jiunile.com//blog/2020/09/k8s-local-volume.html"/>
    <id>http://team.jiunile.com//blog/2020/09/k8s-local-volume.html</id>
    <published>2020-09-16T12:00:00.000Z</published>
    <updated>2020-09-16T09:45:48.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;很多人对hostPath volume和local persistent volume的使用场景还存在很多困惑。下面对着两种volume的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，并简单介绍&lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt;如何帮助administrator进行local persistent volume的生命周期管理的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hostPath-volume存在的问题&quot;&gt;&lt;a href=&quot;#hostPath-volume存在的问题&quot; class=&quot;headerlink&quot; title=&quot;hostPath volume存在的问题&quot;&gt;&lt;/a&gt;hostPath volume存在的问题&lt;/h2&gt;&lt;p&gt;过去我们经常会通过hostPath volume让Pod能够使用本地存储，将Node文件系统中的文件或者目录挂载到容器内，但是hostPath volume的使用是很难受的，并不适合在生产环境中使用。&lt;/p&gt;
&lt;p&gt;我们先看看hostPath Type有哪些类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;行为&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DirectoryOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FileOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 Kubelet 相同的组和所有权。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Socket&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的 UNIX 套接字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CharDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的字符设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BlockDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的块设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看起来支持这么多type还是挺好的，但为什么说不适合在生产环境中使用呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于集群内每个节点的差异化，要使用 &lt;code&gt;hostPath Volume&lt;/code&gt;，我们需要通过&lt;code&gt;NodeSelector&lt;/code&gt; 等方式进行精确调度，这种事情多了，你就会不耐烦了。&lt;/li&gt;
&lt;li&gt;注意 &lt;code&gt;DirectoryOrCreate&lt;/code&gt; 和 &lt;code&gt;FileOrCreate&lt;/code&gt; 两种类型的 &lt;code&gt;hostPath&lt;/code&gt;，当Node上没有对应的 &lt;code&gt;File/Directory&lt;/code&gt; 时，你需要保证kubelet有在 &lt;code&gt;Node上Create File/Directory&lt;/code&gt; 的权限。&lt;/li&gt;
&lt;li&gt;另外，如果 Node 上的文件或目录是由 root 创建的，挂载到容器内之后，你通常还要保证容器内进程有权限对该文件或者目录进行写入，比如你需要以 root 用户启动进程并运行于 privileged 容器，或者你需要事先修改好 Node 上的文件权限配置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scheduler&lt;/code&gt; 并不会考虑 &lt;code&gt;hostPath volume&lt;/code&gt; 的大小，&lt;code&gt;hostPath&lt;/code&gt; 也不能申明需要的 &lt;code&gt;storage size&lt;/code&gt;，这样调度时存储的考虑，就需要人为检查并保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;local-persistent-volume工作机制&quot;&gt;&lt;a href=&quot;#local-persistent-volume工作机制&quot; class=&quot;headerlink&quot; title=&quot;local persistent volume工作机制&quot;&gt;&lt;/a&gt;local persistent volume工作机制&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Local persistent volume&lt;/code&gt; 就是用来解决 &lt;code&gt;hostPath volume&lt;/code&gt; 面临的 &lt;strong&gt;portability, disk accounting, and scheduling&lt;/strong&gt; 的缺陷。&lt;code&gt;PV Controller&lt;/code&gt; 和 &lt;code&gt;Scheduler&lt;/code&gt; 会对 &lt;code&gt;local PV&lt;/code&gt; 做特殊的逻辑处理，以实现 Pod 使用本地存储时发生Pod &lt;code&gt;re-schedule&lt;/code&gt; 的情况下能再次调度到 &lt;code&gt;local volume&lt;/code&gt; 所在的 Node。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;local pv&lt;/code&gt; 在生产中使用，也是需要谨慎的，毕竟它本质上还是使用的是节点上的本地存储，如果没有相应的存储副本机制，那意味着一旦节点或者磁盘异常，使用该volume的Pod也会异常，甚至出现数据丢失，除非你明确知道这个风险不会对你的应用造成很大影响或者允许数据丢失。&lt;/p&gt;
&lt;p&gt;那么通常什么情况会使用Local PV呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如节点上的目录数据是从远程的网络存储上挂载或者预先读取到本地的，为了能加速Pod读取这些数据的速度，相当于起Cache作用，这种情况下因为只读，不存在惧怕数据丢失。这种AI训练中存在需要重复利用并且训练数据巨大的时候可能会采取的方式。&lt;/li&gt;
&lt;li&gt;如果本地节点上目录/磁盘实际是具有副本/分片机制的分布式存储(比如gluster, ceph等)挂载过来的，这种情况也可以使用&lt;code&gt;local pv&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Local volume&lt;/code&gt; 允许挂载本地的 disk, partition, directory 到容器内某个挂载点。在 Kuberentes 1.11 仍然仅支持 &lt;code&gt;local pv&lt;/code&gt; 的 &lt;code&gt;static provision&lt;/code&gt;，不支持&lt;code&gt;dynamic provision&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 使用 &lt;code&gt;PersistentVolume&lt;/code&gt; 的 &lt;code&gt;.spec.nodeAffinityfield&lt;/code&gt; 来描述&lt;code&gt;local volume&lt;/code&gt; 与 Node 的绑定关系。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;volumeBindingMode: WaitForFirstConsumer&lt;/code&gt; 的 &lt;code&gt;local-storage StorageClass&lt;/code&gt; 来实现 PVC 的延迟绑定，使得 &lt;code&gt;PV Controller&lt;/code&gt; 并不会立刻为 PVC 做 Bound，而是等待某个需要使用该 &lt;code&gt;local pv&lt;/code&gt; 的 Pod 完成调度后，才去做 Bound。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是定义local pv的Sample：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; PersistentVolume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; example-pv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  capacity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    storage:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;Gi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# volumeMode field requires BlockVolume Alpha feature gate to be enabled.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumeMode:&lt;/span&gt; Filesystem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  accessModes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; ReadWriteOnce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  persistentVolumeReclaimPolicy:&lt;/span&gt; Retain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  storageClassName:&lt;/span&gt; local-storage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  local:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    path:&lt;/span&gt; /mnt/disks/ssd1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  nodeAffinity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    required:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      nodeSelectorTerms:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - matchExpressions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - key:&lt;/span&gt; kubernetes.io/hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          operator:&lt;/span&gt; In&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          values:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; example-node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的&lt;code&gt;local-storage storageClass&lt;/code&gt;定义如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StorageClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; storage.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; local-storage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;provisioner:&lt;/span&gt; kubernetes.io/&lt;span class=&quot;literal&quot;&gt;no&lt;/span&gt;-provisioner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;volumeBindingMode:&lt;/span&gt; WaitForFirstConsumer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用local-persistent-volume注意事项&quot;&gt;&lt;a href=&quot;#使用local-persistent-volume注意事项&quot; class=&quot;headerlink&quot; title=&quot;使用local persistent volume注意事项&quot;&gt;&lt;/a&gt;使用local persistent volume注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;local pv&lt;/code&gt; 时必须定义 &lt;code&gt;nodeAffinity&lt;/code&gt;，Kubernetes Scheduler 需要使用PV 的 &lt;code&gt;nodeAffinity&lt;/code&gt; 描述信息来保证 Pod 能够调度到有对应 &lt;code&gt;local volume&lt;/code&gt; 的Node 上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumeMode&lt;/code&gt; 可以是 &lt;code&gt;FileSystem（Default）&lt;/code&gt;和 Block，并且需要 &lt;code&gt;enable BlockVolume Alpha feature gate&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 &lt;code&gt;local PV&lt;/code&gt; 之前，你需要先保证有对应的 &lt;code&gt;storageClass&lt;/code&gt; 已经创建。并且该&lt;code&gt;storageClass&lt;/code&gt; 的 &lt;code&gt;volumeBindingMode&lt;/code&gt; 必须是 &lt;code&gt;WaitForFirstConsumer&lt;/code&gt; 以标识延迟 &lt;code&gt;Volume Binding&lt;/code&gt; 。&lt;code&gt;WaitForFirstConsumer&lt;/code&gt; 可以保证正常的 Pod 调度要求（resource requirements, node selectors, Pod affinity, and Pod anti-affinity等），又能保证 Pod 需要的 &lt;code&gt;Local PV&lt;/code&gt; 的 &lt;code&gt;nodeAffinity&lt;/code&gt; 得到满足，实际上，一共有以下两种 &lt;code&gt;volumeBindingMode&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// VolumeBindingImmediate indicates that PersistentVolumeClaims should be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// immediately provisioned and bound.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VolumeBindingImmediate VolumeBindingMode = &lt;span class=&quot;string&quot;&gt;&quot;Immediate&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// VolumeBindingWaitForFirstConsumer indicates that PersistentVolumeClaims&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// should not be provisioned and bound until the first Pod is created that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// references the PeristentVolumeClaim.  The volume provisioning and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// binding will occur during Pod scheduing.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VolumeBindingWaitForFirstConsumer VolumeBindingMode = &lt;span class=&quot;string&quot;&gt;&quot;WaitForFirstConsumer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;节点上 &lt;code&gt;local volume&lt;/code&gt; 的初始化需要我们人为去完成（比如 &lt;code&gt;local disk&lt;/code&gt; 需要 pre-partitioned, formatted, and mounted. 共享存储对应的 Directories 也需要 pre-created），并且人工创建这个 &lt;code&gt;local PV&lt;/code&gt;，当 Pod 结束，我们还需要手动的清理 &lt;code&gt;local volume&lt;/code&gt;，然后手动删除该 &lt;code&gt;local PV&lt;/code&gt; 对象。因此，&lt;code&gt;persistentVolumeReclaimPolicy&lt;/code&gt; 只能是 &lt;code&gt;Retain&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;local-volume-manager&quot;&gt;&lt;a href=&quot;#local-volume-manager&quot; class=&quot;headerlink&quot; title=&quot;local volume manager&quot;&gt;&lt;/a&gt;local volume manager&lt;/h2&gt;&lt;p&gt;上面这么多事情需要人为的去做预处理的工作，我们必须要有解决方案帮我们自动完成 &lt;code&gt;local volume&lt;/code&gt; 的 create 和 cleanup 的工作。官方给出了一个简单的 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; ，注意它仍然只是一个 &lt;code&gt;static provisioner&lt;/code&gt;，目前主要帮我们做两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local volume manager&lt;/code&gt; 监控配置好的 discovery directory 的新的挂载点，并为每个挂载点根据对应的 storageClassName, path, nodeAffinity, and capacity 创建&lt;code&gt;PersistentVolume object&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当Pod结束并删除了使用 &lt;code&gt;local volume&lt;/code&gt; 的 PVC，&lt;code&gt;local volume manager&lt;/code&gt; 将自动清理该 local mount 上的所有文件, 然后删除对应的 &lt;code&gt;PersistentVolume object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，除了需要人为的完成 &lt;code&gt;local volume&lt;/code&gt; 的 mount 操作，&lt;code&gt;local PV&lt;/code&gt; 的生命周期管理就全部交给 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; 了。下面我们专门介绍下这个 &lt;code&gt;Static Local Volume Provisioner&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;后面我会单独写一个博文对 &lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;local volume manager&lt;/a&gt; 进行深度剖析。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文对 &lt;code&gt;hostPath volume&lt;/code&gt; 不能在生产环境中很好使用的原因进行了阐述，然后对 &lt;code&gt;local persistent volume&lt;/code&gt; 的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，最后简单介绍了 &lt;code&gt;local volume manager&lt;/code&gt; 如何帮助 administrator 进行 &lt;code&gt;local persistent volume&lt;/code&gt; 的生命周期管理的。&lt;/p&gt;
&lt;p&gt;来源：oschina&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多人对hostPath volume和local persistent volume的使用场景还存在很多困惑。下面对着两种volume的使用场景、基本的工作机制进行了分析，介绍了使用时的注意事项，并简单介绍&lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/local-volume&quot;&gt;local volume manager&lt;/a&gt;如何帮助administrator进行local persistent volume的生命周期管理的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hostPath-volume存在的问题&quot;&gt;&lt;a href=&quot;#hostPath-volume存在的问题&quot; class=&quot;headerlink&quot; title=&quot;hostPath volume存在的问题&quot;&gt;&lt;/a&gt;hostPath volume存在的问题&lt;/h2&gt;&lt;p&gt;过去我们经常会通过hostPath volume让Pod能够使用本地存储，将Node文件系统中的文件或者目录挂载到容器内，但是hostPath volume的使用是很难受的，并不适合在生产环境中使用。&lt;/p&gt;
&lt;p&gt;我们先看看hostPath Type有哪些类型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;取值&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;行为&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DirectoryOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FileOrCreate&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 Kubelet 相同的组和所有权。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Socket&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的 UNIX 套接字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CharDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的字符设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BlockDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在给定路径上必须存在的块设备。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;看起来支持这么多type还是挺好的，但为什么说不适合在生产环境中使用呢？&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="volume" scheme="http://team.jiunile.com/categories/kubrenetes/volume/"/>
    
      <category term="pv" scheme="http://team.jiunile.com/categories/kubrenetes/volume/pv/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="local volume" scheme="http://team.jiunile.com/tags/local-volume/"/>
    
      <category term="hostpath volume" scheme="http://team.jiunile.com/tags/hostpath-volume/"/>
    
      <category term="pv" scheme="http://team.jiunile.com/tags/pv/"/>
    
  </entry>
  
  <entry>
    <title>Go Singleflight导致死锁问题分析</title>
    <link href="http://team.jiunile.com//blog/2020/09/go-singleflight-deadlock.html"/>
    <id>http://team.jiunile.com//blog/2020/09/go-singleflight-deadlock.html</id>
    <published>2020-09-14T12:00:00.000Z</published>
    <updated>2020-09-16T05:45:23.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;思路排查&quot;&gt;&lt;a href=&quot;#思路排查&quot; class=&quot;headerlink&quot; title=&quot;思路排查&quot;&gt;&lt;/a&gt;思路排查&lt;/h2&gt;&lt;h3 id=&quot;Dump-堆栈很重要&quot;&gt;&lt;a href=&quot;#Dump-堆栈很重要&quot; class=&quot;headerlink&quot; title=&quot;Dump 堆栈很重要&quot;&gt;&lt;/a&gt;Dump 堆栈很重要&lt;/h3&gt;&lt;p&gt;线上某个环境发现 S3 上传请求卡住，请求不返回，卡了30分钟，长时间没有发现有效日志。一般来讲，死锁问题还是好排查的，因为现场一般都在。类似于 c 程序，遇到死锁问题都会用 pstack 看一把。golang 死锁排查思路也类似（golang 不适合使用 pstack，因为 golang 调度的是协程，pstack 只能看到线程栈），我们其实是需要知道 S3 程序里 goroutine 的栈状态。golang 遇到这个问题我们有两个办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法一：条件允许的话，gcore 出一个堆栈，这个是最有效的方法，因为是把整个 golang 程序的内存镜像 dump 出来，然后用 dlv 分析&lt;/li&gt;
&lt;li&gt;方法二：如果你提前开启 net/pprof 库的引用，开启了 debug 接口，那么就可以调用 curl 接口，通过 http 接口获取进程的状态信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意到，golang 程序和 c 程序还是有点区别，goroutine 非常多，成百上千个 goroutine 是常态，甚至上万个也不稀奇。所以我们一般无法在终端上直接看完所有的栈，一般都是把所有的 goroutine 栈 dump 到文件，然用 vi 打开慢慢分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试这个 core 文件，意图从堆栈里找到些东西，由于堆栈太多了，所以就使用 &lt;code&gt;gorouties -t -u&lt;/code&gt; 这个命令，并且把输出 dump 到文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl xxx/debug/pprof/goroutine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;关键思路&quot;&gt;&lt;a href=&quot;#关键思路&quot; class=&quot;headerlink&quot; title=&quot;关键思路&quot;&gt;&lt;/a&gt;关键思路&lt;/h3&gt;&lt;p&gt;成千上万个 goroutine ，直接显示到终端是不合适的，我们 dump 到文件 test.txt，然后分析 test.txt 这个文件。&lt;strong&gt;去查找发现了一些可疑堆栈，那么什么是可疑堆栈？重点关注加锁等待的堆栈，关键字是 &lt;code&gt;runtime_notifyListWait&lt;/code&gt; 、&lt;code&gt;semaphore&lt;/code&gt; 、&lt;code&gt;sync.(*Cond).Wait&lt;/code&gt; 、&lt;code&gt;Acquire&lt;/code&gt;  这些阻塞场景才会用到的，如果业务堆栈上出现这个加锁调用，就非常可疑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;留意阻塞关键字 &lt;code&gt;runtime_notifyListWait&lt;/code&gt; 、&lt;code&gt;semaphore&lt;/code&gt; 、&lt;code&gt;sync.(*Cond).Wait&lt;/code&gt; 、&lt;code&gt;Acquire&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;业务堆栈（非 runtime 的一些内部堆栈）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/go/singleflight01.png&quot; alt=&quot;singleflight-heap&quot;&gt;&lt;/p&gt;
&lt;p&gt;统计分析发现，有 11 个这个堆栈都在这同一个地方，都是在等同一把锁 &lt;code&gt;blockingKeyCountLimit.lock&lt;/code&gt;，所以基本确认了阻塞的位置，就是这个地方阻塞到了所有的请求，但是这把锁我们使用 defer 释放的，使用姿势如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// do someting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lock.Acquire(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; lock.Release(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 以下为锁内操作；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;blockingKeyCountLimit 是我们封装针对 key 操作流控的组件。举个例子，如果 limit == 1，key为 “test” 在 g1 上 Acquire 成功，g2 acquire(“test”) 就会等待，这个可以算是我们优化的一个逻辑。如果 limit == 2，那么就允许两个人加锁到，后面的人都等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从代码来看，函数退出一定会释放的，但是偏偏现在锁就卡在这个地方，所以就非常奇怪。我们先找哪个 goroutine 占着这把锁不释放，看看能不能搞清楚怎样导致这里抢不到锁的原因。&lt;/p&gt;
&lt;p&gt;通过审查业务代码分析，发现可能的源头函数（这个函数是向后端请求的函数）：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;api.(*Client).getBytesNolc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;确认是 &lt;code&gt;getBytesNolc&lt;/code&gt; 这个函数执行的操作，那么大概率就是卡在这个地方了。用这个 &lt;code&gt;getBytesNolc&lt;/code&gt; 字符串搜索堆栈，找下是哪个堆栈 ？搜索到这个堆栈 &lt;code&gt;goroutine 19458&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;/images/go/singleflight02.png&quot; alt=&quot;singleflight-heap&quot;&gt;&lt;/p&gt;
&lt;p&gt;大概率就是第 1 个堆栈了，也就是其他的 11 个 goroutine 都在等这 &lt;code&gt;goroutine 19458&lt;/code&gt;  来放锁，仔细看这个堆栈。那么为啥这个堆栈不放锁呢？这里有个细节要注意下，这里是卡到 &lt;code&gt;gihub.com/golang/groupcache/singleflight/singleflight.go:48&lt;/code&gt; 这一行：&lt;br&gt;&lt;img src=&quot;/images/go/singleflight03.png&quot; alt=&quot;singleflight&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一个开源库，singleflight 实现了缓存防击穿的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单介绍下 &lt;code&gt;singleflight&lt;/code&gt; 的功能，这是一个非常有效的工具。在缓存大量失效的场景，如果针对同一个 key ，其实只需要有一个人穿透到后端请求数据，其他人等待他完成，然后取缓存结果即可。这个就是 &lt;code&gt;singleflight&lt;/code&gt; 实现的功能。具体实现就是：来了请求之后，把 key 插入到 map 里，后面的请求如果发现同名 key 在 map 里面，那么就等待它完成就好；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;截屏显示卡到 &lt;code&gt;c.wg.Wait()&lt;/code&gt; 这一行，那么说明 map 里面肯定有已经存在的 key，说明 &lt;code&gt;goroutine 19458&lt;/code&gt; 不是第一个人？但是外面还有一个 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 的互斥呢，按道理其他的人也进不来（因为 limit == 1），这里这么讲来肯定要是源头才对？&lt;/p&gt;
&lt;h3 id=&quot;思路整理&quot;&gt;&lt;a href=&quot;#思路整理&quot; class=&quot;headerlink&quot; title=&quot;思路整理&quot;&gt;&lt;/a&gt;思路整理&lt;/h3&gt;&lt;p&gt;伪代码显示如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;xxx&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 大部分协程都卡在这里（11个）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这个锁的效果主要是流控，limit 值初始化赋值，可以是 1，也可以是其他；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// locker 为 blockingKeyCountLimit 类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limitLocker.Acquire( key )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; limitLocker.Release( key )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getBytesNolc( key , ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBytesNolc&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 下面就是 singleflight.Group 的用法，防穿透&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 同一时间只允许一个人去后端更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret, err = x.Group.Do(id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 去服务后台获取，更新数据；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;图示显示当前的现状：&lt;br&gt;&lt;img src=&quot;/images/go/singleflight04.png&quot; alt=&quot;singleflight&quot;&gt;&lt;/p&gt;
&lt;p&gt;现状小结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大量的协程都在等 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 这把锁释放；&lt;/li&gt;
&lt;li&gt;协程 &lt;code&gt;goroutine 19458&lt;/code&gt; 持有 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 这把锁；&lt;/li&gt;
&lt;li&gt;协程 &lt;code&gt;goroutine 19458&lt;/code&gt;  却在等一个相同 key 名字的任务的完成（ &lt;code&gt;singleflight&lt;/code&gt; 一个防击穿的库，同一时间相同 key 只允许放到一个后端去执行），却永远没等到，协程因此呈现死锁；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前的疑问就是第一个 key 的任务为啥永远完不成，堆栈也找不到了，去哪里了？&lt;/p&gt;
&lt;h3 id=&quot;发现蛛丝马迹&quot;&gt;&lt;a href=&quot;#发现蛛丝马迹&quot; class=&quot;headerlink&quot; title=&quot;发现蛛丝马迹&quot;&gt;&lt;/a&gt;发现蛛丝马迹&lt;/h3&gt;&lt;p&gt;我们再仔细审一下 &lt;code&gt;singleflight&lt;/code&gt; 的代码：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(g *Group)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, fn &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;) &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; g.m == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g.m = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]*call)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果找到同名 key 已经存在；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c, ok := g.m[key]; ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 等待者走到这个分支：等待第一个人执行完成，最后直接返回它的结果就行了；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.val, c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果同名 key 不存在（第一个人走到这个分支）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(call)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// map 里放置 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.m[key] = c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 执行任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.val, c.err = fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 唤醒所有的等待者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 删除 map 里的 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(g.m, key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g.mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.val, c.err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现有个线索，我们的 S3 服务程序一个 http 请求对应一个协程处理，为了提高服务端进程的可用性，在框架里会捕捉 &lt;code&gt;panic&lt;/code&gt;，这样确保单个协程处理不会影响到其他的请求。基于这个前提，我们假设：如果 &lt;code&gt;fn()&lt;/code&gt; 执行异常，&lt;code&gt;panic&lt;/code&gt; 掉了，那么就不会走 &lt;code&gt;delete(g.m, key)&lt;/code&gt; 的代码，那么 key 就永远都残留在 map 里面，而进程却又还活着。恍然大悟。&lt;/p&gt;
&lt;h3 id=&quot;完整的推理流程&quot;&gt;&lt;a href=&quot;#完整的推理流程&quot; class=&quot;headerlink&quot; title=&quot;完整的推理流程&quot;&gt;&lt;/a&gt;完整的推理流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;第一个协程 g1 来了，加了 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 锁，然后准备穿透到后端，调用函数 &lt;code&gt;getBytesNolc&lt;/code&gt; 获取数据，并走进了 &lt;code&gt;singlelight&lt;/code&gt; ，添加了一个 key：x， 准备干活；&lt;ol&gt;
&lt;li&gt;干活发生了一些不可预期的异常（后面发现是配置的异常），nil 指针引用之类的， &lt;code&gt;panic&lt;/code&gt; 堆栈了，&lt;code&gt;panic&lt;/code&gt; 导致后面 &lt;code&gt;delete key&lt;/code&gt; 操作没有执行&lt;/li&gt;
&lt;li&gt;虽然 g1 现在 &lt;code&gt;panic&lt;/code&gt; 了，但是由于在函数 &lt;code&gt;func xxx&lt;/code&gt; 里面 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 是 defer 执行的，所以这把锁还是，但是 &lt;code&gt;singlelight&lt;/code&gt; 的 key 还存在，于是残留在 map 里面&lt;/li&gt;
&lt;li&gt;但是由于我们服务程序为了高可用是 &lt;code&gt;recover&lt;/code&gt; 了 &lt;code&gt;panic&lt;/code&gt; 的，单个请求的失败不会导致整个进程挂掉，所以进程还是好好的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;第二个 &lt;code&gt;goroutine 19458&lt;/code&gt; 协程来了，&lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 加锁，然后走到 &lt;code&gt;singlelight&lt;/code&gt; 的时候，发现有 &lt;code&gt;key: x&lt;/code&gt; 了，于是就等待&lt;ol&gt;
&lt;li&gt;并且等待的是一个永远得不到的锁，因为 g1 早就没了；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后续的 11 个 协程来了，于是被 &lt;code&gt;blockingKeyCountLimit&lt;/code&gt; 阻塞住，并且永远不能释放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实锤：后续基于这个猜想，再去搜索一遍日志，发现确实是有一条 panic 相关的日志。这个时间点后面的请求全部被卡住。&lt;/p&gt;
&lt;h2 id=&quot;思考总结&quot;&gt;&lt;a href=&quot;#思考总结&quot; class=&quot;headerlink&quot; title=&quot;思考总结&quot;&gt;&lt;/a&gt;思考总结&lt;/h2&gt;&lt;p&gt;一般来讲 c 语言写程序容易出现死锁问题，因为各种异常逻辑可能会导致忘记放锁，从而导致抢一个永远都不可能得到的锁。&lt;strong&gt;golang 为了解决这个问题，一般是用 defer 机制来实现，使用姿势如下&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mtx.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; mtx.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 临界区 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;golang 的 defer 机制是一个经过经验沉淀下来的有效功能&lt;/strong&gt;。我们必须要合理使用。defer 实现原理是和所在函数绑定，保证函数 return 的时候一定能调用到（ panic 退出也能），所以 golang 加锁放锁的有效实践是写在相邻的两行。&lt;/p&gt;
&lt;p&gt;其实思考下，&lt;strong&gt;&lt;code&gt;singleflight&lt;/code&gt; 作为一个通用开源库，其实可以把 &lt;code&gt;delete map key&lt;/code&gt; 放到 defer 里，这样就能保证 map 里面的 key 一定是可以被清理的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还有一点，&lt;strong&gt;其实 golang 是不提倡异常-捕捉这样的方式编程&lt;/strong&gt;，&lt;code&gt;panic&lt;/code&gt; 一般不让随便用，如果真是严重的问题，挂掉就挂掉，这个估计还好一些。当然这是要看场景的，还是有一些特殊场景的，毕竟 golang 都已经提供了 &lt;code&gt;panic-recover&lt;/code&gt; 这样的一个手段，就说明还是有需求。这个就跟 unsafe 库一样，你只有明确知道自己的行为影响，才去使用这个工具，否则别用。&lt;/p&gt;
&lt;p&gt;来源：奇伢云存储&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;思路排查&quot;&gt;&lt;a href=&quot;#思路排查&quot; class=&quot;headerlink&quot; title=&quot;思路排查&quot;&gt;&lt;/a&gt;思路排查&lt;/h2&gt;&lt;h3 id=&quot;Dump-堆栈很重要&quot;&gt;&lt;a href=&quot;#Dump-堆栈很重要&quot; class=&quot;headerlink&quot; title=&quot;Dump 堆栈很重要&quot;&gt;&lt;/a&gt;Dump 堆栈很重要&lt;/h3&gt;&lt;p&gt;线上某个环境发现 S3 上传请求卡住，请求不返回，卡了30分钟，长时间没有发现有效日志。一般来讲，死锁问题还是好排查的，因为现场一般都在。类似于 c 程序，遇到死锁问题都会用 pstack 看一把。golang 死锁排查思路也类似（golang 不适合使用 pstack，因为 golang 调度的是协程，pstack 只能看到线程栈），我们其实是需要知道 S3 程序里 goroutine 的栈状态。golang 遇到这个问题我们有两个办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法一：条件允许的话，gcore 出一个堆栈，这个是最有效的方法，因为是把整个 golang 程序的内存镜像 dump 出来，然后用 dlv 分析&lt;/li&gt;
&lt;li&gt;方法二：如果你提前开启 net/pprof 库的引用，开启了 debug 接口，那么就可以调用 curl 接口，通过 http 接口获取进程的状态信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意到，golang 程序和 c 程序还是有点区别，goroutine 非常多，成百上千个 goroutine 是常态，甚至上万个也不稀奇。所以我们一般无法在终端上直接看完所有的栈，一般都是把所有的 goroutine 栈 dump 到文件，然用 vi 打开慢慢分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试这个 core 文件，意图从堆栈里找到些东西，由于堆栈太多了，所以就使用 &lt;code&gt;gorouties -t -u&lt;/code&gt; 这个命令，并且把输出 dump 到文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl xxx/debug/pprof/goroutine&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="http://team.jiunile.com/categories/go/"/>
    
      <category term="singleflight" scheme="http://team.jiunile.com/categories/go/singleflight/"/>
    
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="singleflight" scheme="http://team.jiunile.com/tags/singleflight/"/>
    
      <category term="死锁" scheme="http://team.jiunile.com/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Istio 实战系列(1) - 应用容器对 Envoy Sidecar 的启动依赖问题</title>
    <link href="http://team.jiunile.com//blog/2020/09/istio-depend-sidecar.html"/>
    <id>http://team.jiunile.com//blog/2020/09/istio-depend-sidecar.html</id>
    <published>2020-09-10T12:00:00.000Z</published>
    <updated>2020-09-10T03:14:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;典型案例：某运维同学反馈：昨天晚上 &lt;code&gt;Istio&lt;/code&gt; 环境中应用的心跳检测报 &lt;code&gt;connect reset&lt;/code&gt;，然后服务重启了。怀疑是 &lt;code&gt;Istio&lt;/code&gt; 环境中网络不稳定导致了服务重启。&lt;/p&gt;
&lt;p&gt;该问题的表现是安装了 &lt;code&gt;sidecar proxy&lt;/code&gt; 的应用，在启动后的一小段时间内无法通过网络访问 pod 外部的其他服务，例如外部的 HTTP，MySQL，Redis等服务。如果应用没有对依赖服务的异常进行容错处理，该问题还常常会导致应用启动失败。&lt;/p&gt;
&lt;p&gt;下面我们以该问题导致的一个典型故障的分析过程为例，对该问题的原因进行说明。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;故障分析&quot;&gt;&lt;a href=&quot;#故障分析&quot; class=&quot;headerlink&quot; title=&quot;故障分析&quot;&gt;&lt;/a&gt;故障分析&lt;/h2&gt;&lt;p&gt;根据运维同学的反馈，该 pod 曾多次重启。因此我们先用 &lt;code&gt;kubectl logs --previous&lt;/code&gt; 命令查询 awesome-app 容器最后一次重启前的日志，以从日志中查找其重启的原因。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl logs --previous awesome-app-cd1234567-gzgwg -c awesome-app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从日志中查询到了其重启前最后的错误信息如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logging system failed to initialize using configuration from &lt;span class=&quot;string&quot;&gt;&#39;http://log-config-server:12345/******/logback-spring.xml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.net.ConnectException: Connection refused (Connection refused)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.PlainSocketImpl.socketConnect(Native Method)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从错误信息可以得知，应用进程在启动时试图通过 HTTP 协议从配置中心拉取 logback 的配置信息，但该操作由于网络异常失败了，导致应用进程启动失败，最终导致容器重启。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是什么导致了网络异常呢？&lt;/strong&gt;我们再用 &lt;code&gt;Kubectl get pod&lt;/code&gt; 命令查询 Pod 的运行状态，尝试找到更多的线索：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get pod awesome-app-cd1234567-gzgwg  -o yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令输出的 pod 详细内容如下，该 yaml 片段省略了其他无关的细节，只显示了 lastState 和 state 部分的容器状态信息。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;containerStatuses:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lastState:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      terminated:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        exitCode:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        finishedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        reason:&lt;/span&gt; Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ready:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    restartCount:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    state:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      running:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - containerID:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lastState:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; istio-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ready:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    restartCount:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    state:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      running:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        startedAt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-09&lt;/span&gt;&lt;span class=&quot;bullet&quot;&gt;-01&lt;/span&gt;T13:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostIP:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.161&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从该输出可以看到 pod 中的应用容器 awesome-app 重启了两次。整理该 pod 中 awesome-app 应用容器和 istio-proxy sidecar 容器的启动和终止的时间顺序，可以得到下面的时间线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2020-09-01T13:16:20Z istio-proxy 启动&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:22Z awesome-app 上一次启动时间&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:23Z awesome-app 上一次异常退出时间&lt;/li&gt;
&lt;li&gt;2020-09-01T13:16:36Z awesome-app 最后一次启动，以后就一直正常运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到在 &lt;code&gt;istio-proxy&lt;/code&gt; 启动2秒后，awesome-app 启动，并于1秒后异常退出。结合前面的日志信息，我们知道这次启动失败的直接原因是应用访问配置中心失败导致。在 &lt;code&gt;istio-proxy&lt;/code&gt; 启动16秒后，awesome-app 再次启动，这次启动成功，之后一直正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istio-proxy&lt;/code&gt; 启动和 awesome-app 上一次异常退出的时间间隔很短，只有2秒钟，因此我们基本可以判断此时 &lt;code&gt;istio-proxy&lt;/code&gt; 尚未启动初始化完成，导致 awesome-app 不能通过&lt;code&gt;istio-proxy&lt;/code&gt; 连接到外部服务，导致其启动失败。待 awesome-app 于 2020-09-01T13:16:36Z 再次启动时，由于 &lt;code&gt;istio-proxy&lt;/code&gt; 已经启动了较长时间，完成了从 pilot 获取动态配置的过程，因此 awesome-app 向 pod 外部的网络访问就正常了。&lt;/p&gt;
&lt;p&gt;如下图所示，Envoy 启动后会通过 xDS 协议向 pilot 请求服务和路由配置信息，Pilot 收到请求后会根据 Envoy 所在的节点（pod或者VM）组装配置信息，包括 &lt;code&gt;Listener&lt;/code&gt;、&lt;code&gt;Route&lt;/code&gt;、&lt;code&gt;Cluster&lt;/code&gt; 等，然后再通过 xDS 协议下发给 Envoy。根据 Mesh 的规模和网络情况，该配置下发过程需要数秒到数十秒的时间。由于初始化容器已经在 pod 中创建了 Iptables rule 规则，因此这段时间内应用向外发送的网络流量会被重定向到 Envoy ，而此时 Envoy 中尚没有对这些网络请求进行处理的监听器和路由规则，无法对此进行处理，导致网络请求失败。（关于 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化过程和 &lt;code&gt;Istio&lt;/code&gt; 流量管理原理的更多内容，可以参考 &lt;a href=&quot;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Istio流量管理实现机制深度解析-基于1.4.0更新&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/istio/istio-1.png&quot; alt=&quot;Envory sidecar初始化&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;h3 id=&quot;在应用启动命令中判断-Envoy-初始化状态&quot;&gt;&lt;a href=&quot;#在应用启动命令中判断-Envoy-初始化状态&quot; class=&quot;headerlink&quot; title=&quot;在应用启动命令中判断 Envoy 初始化状态&quot;&gt;&lt;/a&gt;在应用启动命令中判断 Envoy 初始化状态&lt;/h3&gt;&lt;p&gt;从前面的分析可以得知，该问题的根本原因是由于应用进程对 &lt;code&gt;Envoy sidecar&lt;/code&gt; 配置初始化的依赖导致的。因此最直接的解决思路就是：在应用进程启动时判断 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的初始化状态，待其初始化完成后再启动应用进程。&lt;/p&gt;
&lt;p&gt;Envoy 的健康检查接口 &lt;code&gt;localhost:15020/healthz/ready&lt;/code&gt; 会在 xDS 配置初始化完成后才返回 200，否则将返回 503，因此可以根据该接口判断 Envoy 的配置初始化状态，待其完成后再启动应用容器。我们可以在应用容器的启动命令中加入调用 Envoy 健康检查的脚本，如下面的配置片段所示。在其他应用中使用时，将 &lt;code&gt;start-awesome-app-cmd&lt;/code&gt; 改为容器中的应用启动命令即可。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; awesome-app-deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; awesome-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        args:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;while [[ \&quot;$(curl -s -o /dev/null -w &#39;&#39;&lt;span class=&quot;template-variable&quot;&gt;%&amp;#123;http_code&amp;#125;&lt;/span&gt;&#39;&#39; localhost:15020/healthz/ready)\&quot; != &#39;200&#39; ]]; do echo Waiting for Sidecar;sleep 1; done; echo Sidecar available; start-awesome-app-cmd&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 应用容器。&lt;/li&gt;
&lt;li&gt;应用容器启动脚本中通过 &lt;code&gt;curl get localhost:15020/healthz/ready&lt;/code&gt; 查询 &lt;code&gt;Envoy sidcar&lt;/code&gt; 状态，由于此时 &lt;code&gt;Envoy sidecar&lt;/code&gt; 尚未就绪，因此该脚本会不断重试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Envoy sidecar&lt;/code&gt; 通过 xDS 连接 Pilot，进行配置初始化。&lt;/li&gt;
&lt;li&gt;应用容器启动脚本通过 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的健康检查接口判断其初始化已经完成，启动应用进程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该方案虽然可以规避依赖顺序的问题，但需要对应用容器的启动脚本进行修改，对 Envoy 的健康状态进行判断。更理想的方案应该是应用对 &lt;code&gt;Envoy sidecar&lt;/code&gt; 不感知。&lt;/p&gt;
&lt;h3 id=&quot;通过-pod-容器启动顺序进行控制&quot;&gt;&lt;a href=&quot;#通过-pod-容器启动顺序进行控制&quot; class=&quot;headerlink&quot; title=&quot;通过 pod 容器启动顺序进行控制&quot;&gt;&lt;/a&gt;通过 pod 容器启动顺序进行控制&lt;/h3&gt;&lt;p&gt;通过阅读 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/537a602195efdc04cdf2cb0368792afad082d9fd/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L827-L830&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes源码&lt;/a&gt; ，我们可以发现当 pod 中有多个容器时，&lt;code&gt;Kubernetes&lt;/code&gt; 会在一个线程中依次启动这些容器，如下面的代码片段所示：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Step 7: start containers in podContainerChanges.ContainersToStart.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, idx := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; podContainerChanges.ContainersToStart &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  start(&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;, containerStartSpec(&amp;amp;pod.Spec.Containers[idx]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此我们可以在向 pod 中注入 &lt;code&gt;Envoy sidecar&lt;/code&gt; 时将 &lt;code&gt;Envoy sidecar&lt;/code&gt; 放到应用容器之前，这样 &lt;code&gt;Kubernetes&lt;/code&gt; 会先启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;，再启动应用容器。但是还有一个问题，Envoy 启动后我们并不能立即启动应用容器，还需要等待 xDS 配置初始化完成。这时我们就可以采用容器的 &lt;a href=&quot;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postStart lifecycle hook&lt;/a&gt; 来达成该目的。&lt;code&gt;Kubernetes&lt;/code&gt; 会在启动容器后调用该容器的 &lt;code&gt;postStart hook&lt;/code&gt;，&lt;code&gt;postStart hook&lt;/code&gt; 会阻塞 pod 中的下一个容器的启动，直到 &lt;code&gt;postStart hook&lt;/code&gt; 执行完成。因此如果在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的 &lt;code&gt;postStart hook&lt;/code&gt; 中对 Envoy 的配置初始化状态进行判断，待完成初始化后再返回，就可以保证 &lt;code&gt;Kubernetes&lt;/code&gt; 在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 配置初始化完成后再启动应用容器。该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 执行 &lt;code&gt;postStart hook&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postStart hook&lt;/code&gt; 通过 Envoy 健康检查接口判断其配置初始化状态，直到 Envoy 启动完成 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动应用容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Istio&lt;/code&gt; 已经在 1.7 中合入了该修复方案，参见 &lt;a href=&quot;https://github.com/istio/istio/pull/24737&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Allow users to delay application start until proxy is ready&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;插入 &lt;code&gt;sidecar&lt;/code&gt; 后的 pod spec 如下面的 yaml 片段所示。&lt;code&gt;postStart hook&lt;/code&gt; 配置的 &lt;code&gt;pilot-agent wait&lt;/code&gt; 命令会持续调用 &lt;code&gt;Envoy&lt;/code&gt; 的健康检查接口 ‘/healthz/ready’ 检查其状态，直到 Envoy 完成配置初始化。这篇文章 &lt;a href=&quot;https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Delaying application start until sidecar is ready&lt;/a&gt; 中介绍了更多关于该方案的细节。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sidecar-starts-first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; istio-proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    lifecycle:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      postStart:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        exec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; pilot-agent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; wait&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; my-application&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该方案在不对应用进行修改的情况下比较完美地解决了应用容器和 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化的依赖问题。但是该解决方案对 &lt;code&gt;Kubernetes&lt;/code&gt; 有两个隐式依赖条件：&lt;code&gt;Kubernetes&lt;/code&gt; 在一个线程中按定义顺序依次启动 pod 中的多个容器，以及前一个容器的 &lt;code&gt;postStart hook&lt;/code&gt; 执行完毕后再启动下一个容器。这两个前提条件在目前的 &lt;code&gt;Kuberenetes&lt;/code&gt; 代码实现中是满足的，但由于这并不是 &lt;code&gt;Kubernetes&lt;/code&gt; 的 API 规范，因此该前提在将来 &lt;code&gt;Kubernetes&lt;/code&gt; 升级后很可能被打破，导致该问题再次出现。&lt;/p&gt;
&lt;h3 id=&quot;Kubernetes-支持定义-pod-中容器之间的依赖关系&quot;&gt;&lt;a href=&quot;#Kubernetes-支持定义-pod-中容器之间的依赖关系&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 支持定义 pod 中容器之间的依赖关系&quot;&gt;&lt;/a&gt;Kubernetes 支持定义 pod 中容器之间的依赖关系&lt;/h3&gt;&lt;p&gt;为了彻底解决该问题，避免 &lt;code&gt;Kubernetes&lt;/code&gt; 代码变动后该问题再次出现，更合理的方式应该是由 &lt;code&gt;Kubernetes&lt;/code&gt; 支持显式定义 pod 中一个容器的启动依赖于另一个容器的健康状态。目前 &lt;code&gt;Kubernetes&lt;/code&gt; 中已经有一个 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/65502&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue Support startup dependencies between containers on the same Pod&lt;/a&gt; 对该问题进行跟踪处理。如果 &lt;code&gt;Kubernetes&lt;/code&gt; 支持了该特性，则该流程的执行顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动 &lt;code&gt;Envoy sidecar&lt;/code&gt; 容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 通过 &lt;code&gt;Envoy sidecar&lt;/code&gt; 容器的 readiness probe 检查其状态，直到 readiness probe 反馈 &lt;code&gt;Envoy sidecar&lt;/code&gt; 已经 ready，即已经初始化完毕。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 启动应用容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解耦应用服务之间的启动依赖关系&quot;&gt;&lt;a href=&quot;#解耦应用服务之间的启动依赖关系&quot; class=&quot;headerlink&quot; title=&quot;解耦应用服务之间的启动依赖关系&quot;&gt;&lt;/a&gt;解耦应用服务之间的启动依赖关系&lt;/h3&gt;&lt;p&gt;以上几个解决方案的思路都是控制 pod 中容器的启动顺序，在 &lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化完成后再启动应用容器，以确保应用容器启动时能够通过网络正常访问其他服务。但这些方案只是『头痛医头，脚痛医脚』,是治标不治本的方法。因为即使 pod 中对外的网络访问没有问题，应用容器依赖的其他服务也可能由于尚未启动，或者某些问题而不能在此时正常提供服务。要彻底解决该问题，我们需要解耦应用服务之间的启动依赖关系，使应用容器的启动不再强依赖其他服务。&lt;/p&gt;
&lt;p&gt;在一个微服务系统中，原单体应用中的各个业务模块被拆分为多个独立进程（服务）。这些服务的启动顺序是随机的，并且服务之间通过不可靠的网络进行通信。微服务多进程部署、跨进程网络通信的特定决定了服务之间的调用出现异常是一个常见的情况。为了应对微服务的该特点，微服务的一个基本的设计原则是 &lt;strong&gt;“design for failure”&lt;/strong&gt;，即需要以优雅的方式应对可能出现的各种异常情况。当在微服务进程中不能访问一个依赖的外部服务时，需要通过重试、降级、超时、断路等策略对异常进行容错处理，以尽可能保证系统的正常运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Envoy sidecar&lt;/code&gt; 初始化期间网络暂时不能访问的情况只是放大了微服务系统未能正确处理服务依赖的问题，即使解决了 &lt;code&gt;Envoy sidecar&lt;/code&gt; 的依赖顺序，该问题依然存在。例如在本案例中，配置中心也是一个独立的微服务，当一个依赖配置中心的微服务启动时，配置中心有可能尚未启动，或者尚未初始化完成。在这种情况下，如果在代码中没有对该异常情况进行处理，也会导致依赖配置中心的微服务启动失败。在一个更为复杂的系统中，多个微服务进程之间可能存在网状依赖关系，如果没有按照 &lt;strong&gt;“design for failure”&lt;/strong&gt; 的原则对微服务进行容错处理，那么只是将整个系统启动起来就将是一个巨大的挑战。对于本例而言，可以采用一个类似这样的简单容错策略：先用一个缺省的 logback 配置启动应用进程，并在启动后对配置中心进行重试，待连接上配置中心后，再使用配置中心下发的配置对 logback 进行设置。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;应用容器对 &lt;code&gt;Envoy Sidecar&lt;/code&gt; 启动依赖问题的典型表现是应用容器在刚启动的一小段时间内调用外部服务失败。原因是此时 &lt;code&gt;Envoy sidecar&lt;/code&gt; 尚未完成 xDS 配置的初始化，因此不能为应用容器转发网络请求。该调用失败可能导致应用容器不能正常启动。此问题的根本原因是微服务应用中对依赖服务的调用失败没有进行合理的容错处理。&lt;/p&gt;
&lt;p&gt;对于遗留系统，为了尽量避免对应用的影响，我们可以通过在应用启动命令中判断 &lt;code&gt;Envoy&lt;/code&gt; 初始化状态的方案，或者升级到 &lt;code&gt;Istio 1.7&lt;/code&gt; 来缓解该问题。但为了彻底解决服务依赖导致的错误，建议参考 &lt;strong&gt;“design for failure”&lt;/strong&gt; 的设计原则，解耦微服务之间的强依赖关系，在出现暂时不能访问一个依赖的外部服务的情况时，通过重试、降级、超时、断路等策略进行处理，以尽可能保证系统的正常运行。&lt;/p&gt;
&lt;p&gt;来源：mp.weixin.qq.com/s/iXU2LH90_ZA3VeN7xORmBw&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障现象&quot; class=&quot;headerlink&quot; title=&quot;故障现象&quot;&gt;&lt;/a&gt;故障现象&lt;/h2&gt;&lt;p&gt;典型案例：某运维同学反馈：昨天晚上 &lt;code&gt;Istio&lt;/code&gt; 环境中应用的心跳检测报 &lt;code&gt;connect reset&lt;/code&gt;，然后服务重启了。怀疑是 &lt;code&gt;Istio&lt;/code&gt; 环境中网络不稳定导致了服务重启。&lt;/p&gt;
&lt;p&gt;该问题的表现是安装了 &lt;code&gt;sidecar proxy&lt;/code&gt; 的应用，在启动后的一小段时间内无法通过网络访问 pod 外部的其他服务，例如外部的 HTTP，MySQL，Redis等服务。如果应用没有对依赖服务的异常进行容错处理，该问题还常常会导致应用启动失败。&lt;/p&gt;
&lt;p&gt;下面我们以该问题导致的一个典型故障的分析过程为例，对该问题的原因进行说明。&lt;br&gt;
    
    </summary>
    
      <category term="istio" scheme="http://team.jiunile.com/categories/istio/"/>
    
    
      <category term="istio" scheme="http://team.jiunile.com/tags/istio/"/>
    
      <category term="sidecar" scheme="http://team.jiunile.com/tags/sidecar/"/>
    
      <category term="istio-proxy" scheme="http://team.jiunile.com/tags/istio-proxy/"/>
    
      <category term="启动依赖" scheme="http://team.jiunile.com/tags/%E5%90%AF%E5%8A%A8%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes securityContext</title>
    <link href="http://team.jiunile.com//blog/2020/09/k8s-securitycontext.html"/>
    <id>http://team.jiunile.com//blog/2020/09/k8s-securitycontext.html</id>
    <published>2020-09-09T12:00:00.000Z</published>
    <updated>2020-09-09T10:25:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;kubernetes 中的 &lt;code&gt;securityContext&lt;/code&gt; 是什么？在什么场景下来使用？第一感觉反正是和安全相关的东西，来自官方定义如下：&lt;/p&gt;
&lt;p&gt;安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。 安全上下文包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制（Discretionary Access Control）：基于 用户 ID（UID）和组 ID（GID）. 来判定对对象（例如文件）的访问权限&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安全性增强的 Linux（SELinux）&lt;/a&gt;： 为对象赋予安全性标签。&lt;/li&gt;
&lt;li&gt;以特权模式或者非特权模式运行。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 权能&lt;/a&gt;: 为进程赋予 root 用户的部分特权而非全部特权。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tutorials/clusters/apparmor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppArmor&lt;/a&gt;：使用程序文件来限制单个程序的权限。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Seccomp&lt;/a&gt;：限制一个进程访问文件描述符的权限。&lt;/li&gt;
&lt;li&gt;AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 &lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;no_new_privs&lt;/a&gt; 标志。 当容器以特权模式运行或者具有 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 权能时，AllowPrivilegeEscalation 总是为 &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;readOnlyRootFilesystem：以只读方式加载容器的根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上条目不是安全上下文设置的完整列表 – 请参阅 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#securitycontext-v1-core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SecurityContext&lt;/a&gt; 了解其完整列表。&lt;/p&gt;
&lt;p&gt;关于在 Linux 系统中的安全机制的更多信息，可参阅 &lt;a href=&quot;https://www.linux.com/learn/overview-linux-kernel-security-features&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux 内核安全性能力概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上面的定义有些似懂非懂，能不能更加直白的描述下呢？好吧，下面来给大家来一些实际的应用场景来讲解下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Security-Context-应用场景&quot;&gt;&lt;a href=&quot;#Security-Context-应用场景&quot; class=&quot;headerlink&quot; title=&quot;Security Context 应用场景&quot;&gt;&lt;/a&gt;Security Context 应用场景&lt;/h2&gt;&lt;h3 id=&quot;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot;&gt;&lt;a href=&quot;#场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot; class=&quot;headerlink&quot; title=&quot;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&quot;&gt;&lt;/a&gt;场景一：我有个镜像，已非root用户运行，同时我需要挂载一块磁盘，需要将对应权限改成当前运行的用户&lt;/h3&gt;&lt;p&gt;有了上面的场景，那我们如何来进行设定呢？假设运行用户对应的 uid为999 gid为999&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      runAsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      fsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 1h&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; sc-vol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        mountPath:&lt;/span&gt; /data/demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumeClaimTemplates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; sc-vol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        accessModes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;          -&lt;/span&gt; ReadWriteOnce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            storage:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;Gi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        storageClassName:&lt;/span&gt; gp2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有两个 &lt;code&gt;securityContext&lt;/code&gt; 设定，一个是针对 pod 级别的，另外一个则是针对 container 级别的，那两者的优先级如何定义呢？规则就是：&lt;strong&gt;container中的会覆写pod中的定义&lt;/strong&gt;。了解了优先级后，来讲解下 runAsUser、runAsGroup、fsGroup 这三个参数的意义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runAsUser&lt;/code&gt; 字段指定 Pod 中的所有容器内的进程都使用 用户ID 1000 来运行。&lt;code&gt;但这里 sc-demo 容器进行了覆写，如果 sc-demo 容器内的进行使用用户 ID 为999来运行&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runAsGroup&lt;/code&gt; 字段指定所有容器中的进程都以主 组ID 999 来运行。 如果忽略此字段，则容器的 主组ID 将是 root（0）。 当 &lt;code&gt;runAsGroup&lt;/code&gt; 被设置时，所有创建的文件也会划归为 用户1000 和 组999。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fsGroup&lt;/code&gt; 由于 &lt;code&gt;fsGroup&lt;/code&gt; 被设置，容器中所有进程也会是附 组ID 0 (root) 的一部分。 卷 &lt;code&gt;/data/demo&lt;/code&gt; 及在该卷中创建的任何文件的属主都会是 组ID 0 (root)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器中查看&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid=999(xx) gid=999(xx) groups=999(xx),0(root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; /data/demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxrwsr-x 3 xx root  4096 Sep  8 17:51 &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为 Pod 配置卷访问权限和属主变更策略&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FEATURE STATE: Kubernetes v1.18 [alpha]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下，Kubernetes 在挂载一个卷时，会递归地更改每个卷中的内容的属主和访问权限，使之与 Pod 的 &lt;code&gt;securityContext&lt;/code&gt; 中指定的 &lt;code&gt;fsGroup&lt;/code&gt; 匹配。 对于较大的数据卷，检查和变更属主与访问权限可能会花费很长时间，降低 Pod 启动速度。 你可以在 &lt;code&gt;securityContext&lt;/code&gt; 中使用 &lt;code&gt;fsGroupChangePolicy&lt;/code&gt; 字段来控制 Kubernetes 检查和管理卷属主和访问权限的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fsGroupChangePolicy&lt;/strong&gt; - &lt;code&gt;fsGroupChangePolicy&lt;/code&gt; 定义在卷被暴露给 Pod 内部之前对其 内容的属主和访问许可进行变更的行为。此字段仅适用于那些支持使用 &lt;code&gt;fsGroup&lt;/code&gt; 来 控制属主与访问权限的卷类型。此字段的取值可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OnRootMismatch&lt;/code&gt;：只有根目录的属主与访问权限与卷所期望的权限不一致时，才改变其中内容的属主和访问权限。这一设置有助于缩短更改卷的属主与访问权限所需要的时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Always&lt;/code&gt;：在挂载卷时总是更改卷中内容的属主和访问权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  runAsUser:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  runAsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  fsGroup:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  fsGroupChangePolicy:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;OnRootMismatch&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个 Alpha 阶段的功能特性。要使用此特性，需要在 kube-apiserver、kube-controller-manager 和 kubelet 上启用 ConfigurableFSGroupPolicy &lt;a href=&quot;https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;特性门控&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot;&gt;&lt;a href=&quot;#场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot; class=&quot;headerlink&quot; title=&quot;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&quot;&gt;&lt;/a&gt;场景二：我需要对启动的容器使用sysctl修改内核参数，比如es这类容器镜像。&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; StatefulSet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; sc-demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 1h&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;给予 &lt;code&gt;privileged: true&lt;/code&gt; 是一个比较粗的权限，一般不建议如此，可以为权限定义更细粒度的权限，类似需要在容器中使用 &lt;code&gt;perf&lt;/code&gt; 命令，则可以进行如下定义：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    capabilities:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        add:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;SYS_ADMIN&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体 &lt;code&gt;capabilities&lt;/code&gt; 的使用规则可参考：&lt;a href=&quot;http://team.jiunile.com/blog/2019/12/capabilities.html&quot;&gt;在 Kubernetes 中配置 Container Capabilities&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;场景三：我需要对启动的容器赋予SELinux标签&quot;&gt;&lt;a href=&quot;#场景三：我需要对启动的容器赋予SELinux标签&quot; class=&quot;headerlink&quot; title=&quot;场景三：我需要对启动的容器赋予SELinux标签&quot;&gt;&lt;/a&gt;场景三：我需要对启动的容器赋予SELinux标签&lt;/h3&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  seLinuxOptions:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    level:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;s0:c123,c456&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;要指定 SELinux，需要在宿主操作系统中装载 SELinux 安全性模块。&lt;code&gt;seLinuxOptions&lt;/code&gt; 字段的取值是一个 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#selinuxoptions-v1-core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SELinuxOptions&lt;/a&gt; 对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kubernetes.io/zh/docs/tasks/configure-pod-container/security-context/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;kubernetes 中的 &lt;code&gt;securityContext&lt;/code&gt; 是什么？在什么场景下来使用？第一感觉反正是和安全相关的东西，来自官方定义如下：&lt;/p&gt;
&lt;p&gt;安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置。 安全上下文包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主访问控制（Discretionary Access Control）：基于 用户 ID（UID）和组 ID（GID）. 来判定对对象（例如文件）的访问权限&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux&quot;&gt;安全性增强的 Linux（SELinux）&lt;/a&gt;： 为对象赋予安全性标签。&lt;/li&gt;
&lt;li&gt;以特权模式或者非特权模式运行。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://linux-audit.com/linux-capabilities-hardening-linux-binaries-by-removing-setuid/&quot;&gt;Linux 权能&lt;/a&gt;: 为进程赋予 root 用户的部分特权而非全部特权。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/tutorials/clusters/apparmor/&quot;&gt;AppArmor&lt;/a&gt;：使用程序文件来限制单个程序的权限。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot;&gt;Seccomp&lt;/a&gt;：限制一个进程访问文件描述符的权限。&lt;/li&gt;
&lt;li&gt;AllowPrivilegeEscalation：控制进程是否可以获得超出其父进程的特权。 此布尔值直接控制是否为容器进程设置 &lt;a href=&quot;https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt&quot;&gt;no_new_privs&lt;/a&gt; 标志。 当容器以特权模式运行或者具有 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; 权能时，AllowPrivilegeEscalation 总是为 &lt;strong&gt;&lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;readOnlyRootFilesystem：以只读方式加载容器的根文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上条目不是安全上下文设置的完整列表 – 请参阅 &lt;a href=&quot;https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#securitycontext-v1-core&quot;&gt;SecurityContext&lt;/a&gt; 了解其完整列表。&lt;/p&gt;
&lt;p&gt;关于在 Linux 系统中的安全机制的更多信息，可参阅 &lt;a href=&quot;https://www.linux.com/learn/overview-linux-kernel-security-features&quot;&gt;Linux 内核安全性能力概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;上面的定义有些似懂非懂，能不能更加直白的描述下呢？好吧，下面来给大家来一些实际的应用场景来讲解下。&lt;/p&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="securityContext" scheme="http://team.jiunile.com/categories/kubrenetes/securityContext/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="securityContext" scheme="http://team.jiunile.com/tags/securityContext/"/>
    
      <category term="安全上下文" scheme="http://team.jiunile.com/tags/%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes in Kuberntes</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-k8s-in-k8s.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-k8s-in-k8s.html</id>
    <published>2020-06-12T12:00:00.000Z</published>
    <updated>2020-06-12T05:58:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;KinD&lt;/code&gt; 是一个非常轻量级的 Kubernetes 安装工具，他将 Docker 容器当成 Kubernetes 的节点，使用非常方便。既然在 Docker 容器中可以运行 Kubernetes 集群，那么我们自然就会想到是否可以在 Pod 中来运行呢？在 Pod 中运行会遇到哪些问题呢？&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中安装-Docker-Daemon&quot;&gt;&lt;a href=&quot;#在-Pod-中安装-Docker-Daemon&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中安装 Docker Daemon&quot;&gt;&lt;/a&gt;在 Pod 中安装 Docker Daemon&lt;/h2&gt;&lt;p&gt;&lt;code&gt;KIND&lt;/code&gt; 当前依赖于 Docker（尽管他们计划很快支持其他容器运行时，例如&lt;code&gt;podman&lt;/code&gt;）。因此，第一步是创建一个容器映像，该映像允许您在 Pod 内运行 Docker守护程序，以便使诸如&lt;code&gt;docker run&lt;/code&gt;之类的命令在Pod内运行（又名 Docker-in-Docker 或 DIND ）。&lt;/p&gt;
&lt;p&gt;Docker-in-Docker 是一个众所周知的问题，并且已经解决了相当一段时间。尽管如此，当尝试在生产 Kubernetes 集群中正确设置 Docker-in-Docker 时，我们仍然遇到很多问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;MTU问题&quot;&gt;&lt;a href=&quot;#MTU问题&quot; class=&quot;headerlink&quot; title=&quot;MTU问题&quot;&gt;&lt;/a&gt;MTU问题&lt;/h3&gt;&lt;p&gt;MTU 问题的性质实际上取决于生产 Kubernetes 集群的网络提供商。我们用于 CI 的Kubernetes 发行版是 &lt;a href=&quot;https://d2iq.com/solutions/ksphere/konvoy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Konvoy&lt;/a&gt;。Konvoy 使用&lt;code&gt;Calico&lt;/code&gt;作为其默认网络提供商，并且默认情况下使用&lt;code&gt;IPIP&lt;/code&gt;封装。&lt;code&gt;IPIP&lt;/code&gt;封装产生20字节的开销。换句话说，如果群集中主机网络的主网络接口的&lt;code&gt;MTU&lt;/code&gt;为1500，则Pod中网络接口的&lt;code&gt;MTU&lt;/code&gt;将为1480。如果您的生产群集在某些云提供商（例如GCE）上运行，则&lt;code&gt;MTU Pod&lt;/code&gt;的最大值甚至更低（1460-20 = 1440）。&lt;/p&gt;
&lt;p&gt;重要的是，我们在 Pod 内配置默认 Docker 网络的&lt;code&gt;MTU&lt;/code&gt;（&lt;code&gt;dockerd&lt;/code&gt; 的 &lt;code&gt;--mtu&lt;/code&gt;标志），使其等于或小于 Pod 的网络接口的&lt;code&gt;MTU&lt;/code&gt;。否则，您将无法与外界建立连接（例如，从互联网上获取容器图像时）。&lt;/p&gt;
&lt;h3 id=&quot;PID-1-的问题&quot;&gt;&lt;a href=&quot;#PID-1-的问题&quot; class=&quot;headerlink&quot; title=&quot;PID 1 的问题&quot;&gt;&lt;/a&gt;PID 1 的问题&lt;/h3&gt;&lt;p&gt;比如我们需要在一个容器中去运行 &lt;code&gt;Docker Daemon&lt;/code&gt; 以及一些 Kubernetes 的集群测试，而这些测试依赖于 &lt;code&gt;KinD&lt;/code&gt; 和 &lt;code&gt;Docker Damon&lt;/code&gt;，在一个容器中运行多个服务我们可能会去使用 &lt;code&gt;systemd&lt;/code&gt;，但是使用 &lt;code&gt;systemd&lt;/code&gt; 也会有一些问题。&lt;/p&gt;
&lt;p&gt;比如我们需要保留测试的退出状态，Kubernetes 中使用的容器运行时可以 watch 到容器中的第一个进程（PID 1）的退出状态。如果我们使用 &lt;code&gt;systemd&lt;/code&gt; 的话，那么我们测试的进程退出状态不会被转发到 Kubernetes。&lt;/p&gt;
&lt;p&gt;此外获取测试的日志也是非常重要的，在 Kubernetes 中会自动获取写入到 stdout 和 stderr 的容器日志，但是如果使用 &lt;code&gt;systemd&lt;/code&gt; 的话，要想获取应用的日志就比较麻烦的。&lt;/p&gt;
&lt;p&gt;为了解决上面的问题，我们可以在容器镜像中使用如下所示的启动脚本：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dockerd &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Wait until dockerd is ready.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;until docker ps &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Waiting for dockerd...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sleep 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是我们不能将上面的脚本作为容器的 entrypoint，在镜像中定义的 entrypoint 会在容器中以 PID 1 的形式运行在一个单独的 &lt;code&gt;pid namespace&lt;/code&gt; 中。PID 1 是一个内核中的一个特殊进程，它的行为和其他进程不同。&lt;/p&gt;
&lt;p&gt;本质上，接收信号的进程是 PID 1：它会被内核做特殊处理；如果它没有为信号注册一个处理器，内核就不会回到默认行为（即杀死进程）。由于当收到 SIGTERM 信号时，内核会默认杀死这个进程，所以一些进程也许不会为 SIGTERM 信号注册信号处理程序。如果出现了这种情况，当 Kubernetes 尝试终止 Pod 时，SIGTERM 将被吞噬，你会注意到 Pod 会被卡在 Terminating 的状态下。&lt;/p&gt;
&lt;p&gt;这其实不是一个什么新鲜的问题，但是了解这个问题的人却并不多，而且还一直在构建有这样问题的容器。我们可以使用 tini 这个应用来解决这个问题，将其作为镜像的入口点，如在 &lt;code&gt;Dockerfile&lt;/code&gt; 中所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/tini&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;--&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/entrypoint.sh&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个程序会正确注册信号处理程序和转发信号。它还会执行一些其他 PID 1 的事情，比如回收容器中的僵尸进程。&lt;/p&gt;
&lt;h3 id=&quot;挂载-cgroups&quot;&gt;&lt;a href=&quot;#挂载-cgroups&quot; class=&quot;headerlink&quot; title=&quot;挂载 cgroups&quot;&gt;&lt;/a&gt;挂载 cgroups&lt;/h3&gt;&lt;p&gt;由于 &lt;code&gt;Docker Daemon&lt;/code&gt; 需要控制 cgroups，所以需要将 cgroup 文件系统挂载到容器中去。但是由于 cgroups 和宿主机是共享的，所以我们需要确保 &lt;code&gt;Docker Daemon&lt;/code&gt; 控制的 cgroups 不会影响到其他容器或者宿主机进程使用的其他 cgroups，还需要确保 &lt;code&gt;Docker Daemon&lt;/code&gt; 在容器中创建的 cgroups 在容器退出后不会被泄露。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Docker Daemon&lt;/code&gt; 中有一个 &lt;code&gt;--cgroup—parent&lt;/code&gt; 参数来告诉 Daemon 将所有容器的 cgroups 嵌套在指定的 cgroup 下面。当容器运行在 Kubernetes 集群下面时，我们在容器中设置 &lt;code&gt;Docker Daemon&lt;/code&gt; 的 &lt;code&gt;--cgroup—parent&lt;/code&gt; 参数，这样它的所有 cgroups 就会被嵌套在 Kubernetes 为容器创建的 cgroup 下面了。&lt;/p&gt;
&lt;p&gt;在以前为了让 cgroup 文件系统在容器中可用，一些用户会将宿主机中的 &lt;code&gt;/sys/fs/cgroup&lt;/code&gt; 挂载到容器中的这个位置，如果这样使用的话，我们就需要在容器启动脚本中把 &lt;code&gt;--cgroup—parent&lt;/code&gt; 设置为下面的内容，这样 &lt;code&gt;Docker Daemon&lt;/code&gt; 创建的 cgroups 就可以正确被嵌套了。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CGROUP_PARENT=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(grep systemd /proc/self/cgroup | cut -d: -f3)&lt;/span&gt;/docker&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;/proc/self/cgroup&lt;/code&gt; 显示的是调用进程的 cgroup 路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是我们要知道，挂载宿主机的 &lt;code&gt;/sys/fs/cgroup&lt;/code&gt; 文件是非常危险的事情，因为他把整个宿主机的 cgroup 层次结构都暴露给了容器。以前为了解决这个问题，Docker 用了一个小技巧把不相关的 cgroups 隐藏起来，不让容器看到。Docker 从容器的 cgroups 对每个 cgroup 系统的 cgroup 层次结构的根部进行绑定挂载。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm debian findmnt -lo &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;,target -t cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOURCE                                                                               TARGET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpuset[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/cpuset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpu[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]        /sys/fs/cgroup/cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpuacct[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]    /sys/fs/cgroup/cpuacct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blkio[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/blkio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memory[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cgroup[/docker/451b803b3&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;7&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;2b69dde64&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;833fdd799ae16f9d2d942386ec382f6d55bffac]     /sys/fs/cgroup/systemd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面我们可以看出 cgroups 通过将宿主机 cgroup 文件系统上的 &lt;code&gt;/sys/fs/cgroup/memory/memory.limit_in_bytes&lt;/code&gt; 文件映射到 &lt;code&gt;/sys/fs/cgroup/memory/docker/&amp;lt;CONTAINER_ID&amp;gt;/memory.limit_in_bytes&lt;/code&gt; 来控制容器内 cgroup 层次结构根部的文件，这种方式可以防止容器进程意外地修改宿主机的 cgroup。&lt;/p&gt;
&lt;p&gt;但是这种方式有时候会让 cadvisor 和 kubelet 这样的应用感动困惑，因为绑定挂载并不会改变 &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/cgroup&lt;/code&gt; 里面的内容。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm debian cat /proc/1/cgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14:name=systemd:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5:memory:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4:blkio:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3:cpuacct:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2:cpu:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1:cpuset:/docker/512f6b62e3963f85f5abc09b69c370d27ab1dc56549fa8afcbb86eec8663a141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0::/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cadvisor 会通过查看 &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/cgroup&lt;/code&gt; 来获取给定进程的 cgroup，并尝试从对应的 cgroup 中获取 CPU 或内存统计数据。但是由于 &lt;code&gt;Docker Daemon&lt;/code&gt; 进程做了绑定挂载，cadvisor 就无法找到容器进程对应的 cgroup。为了解决这个问题，我们在容器内部又做了一次挂载，从 &lt;code&gt;/sys/fs/cgroup/memory&lt;/code&gt; 挂载到 &lt;code&gt;/sys/fs/cgroup/memory/docker/&amp;lt;CONTAINER_ID&amp;gt;/&lt;/code&gt;（针对所有的 cgroup 子系统），这个方法可以很好的解决这个问题。&lt;/p&gt;
&lt;p&gt;现在新的解决方法是使用 &lt;code&gt;cgroup namespace&lt;/code&gt;，如果你运行在一个内核版本 4.6+ 的 Linux 系统下面，runc 和 docker 都加入了 cgroup 命名空间的支持。但是目前 Kubernetes 暂时还不支持 cgroup 命名空间，但是很快会作为 &lt;code&gt;cgroups v2&lt;/code&gt; 支持的一部分。&lt;/p&gt;
&lt;h3 id=&quot;IPtables&quot;&gt;&lt;a href=&quot;#IPtables&quot; class=&quot;headerlink&quot; title=&quot;IPtables&quot;&gt;&lt;/a&gt;IPtables&lt;/h3&gt;&lt;p&gt;在使用的时候我们发现在线上的 Kubernetes 集群运行时，有时候容器内的 &lt;code&gt;Docker Daemon&lt;/code&gt; 启动的嵌套容器无法访问外网，但是在本地开发电脑上却可以很正常的工作，大部分开发者应该都会经常遇到这种情况。&lt;/p&gt;
&lt;p&gt;最后发现当出现这个问题的时候，来自嵌套的 Docker 容器的数据包并没有打到 iptables 的 POSTROUTING 链，所以没有做 masqueraded。&lt;/p&gt;
&lt;p&gt;这个问题是因为包含 &lt;code&gt;Docker Daemon&lt;/code&gt; 的镜像是基于 Debian buster 的，而默认情况下，Debian buster 使用的是 nftables 作为 iptables 的默认后端，然而 Docker 本身还不支持 nftables。要解决这个问题只需要在容器镜像中切换到 iptables 命令即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUN update-alternatives --set iptables  /usr/sbin/iptables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update-alternatives --set arptables /usr/sbin/arptables-legacy || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整的 Dockerfile 文件和启动脚本可以在 &lt;a href=&quot;https://github.com/jieyu/docker-images/tree/master/dind&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上面获取，也可以直接使用 &lt;code&gt;jieyu/dind-buster:v0.1.8&lt;/code&gt; 这个镜像来测试。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm --privileged jieyu/dind-buster:v0.1.8 docker run alpine wget baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群下使用如下所示的 Pod 资源清单部署即可：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; dind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; jieyu/dind-buster:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; dind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    stdin:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tty:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    emptyDir:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中运行-KinD&quot;&gt;&lt;a href=&quot;#在-Pod-中运行-KinD&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中运行 KinD&quot;&gt;&lt;/a&gt;在 Pod 中运行 KinD&lt;/h2&gt;&lt;p&gt;上面我们成功配置了 Docker-in-Docker(DinD)，接下来我们就来在该容器中使用 KinD 启动 Kubernetes 集群。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --rm --privileged jieyu/dind-buster:v0.1.8 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dockerd...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# curl -Lso ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-$(uname)-amd64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# chmod +x ./kind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# mv ./kind /usr/bin/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# kind create cluster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (kindest/node:v1.18.2) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing CNI 🔌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing StorageClass 💾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set kubectl context to &lt;span class=&quot;string&quot;&gt;&quot;kind-kind&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can now use your cluster with:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl cluster-info --context kind-kind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have a nice day! 👋&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@257b543a91a5 /]&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   11m   v1.18.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于某些原因可能你用上面的命令下载不了 kind，我们可以想办法提前下载到宿主机上面，然后直接挂载到容器中去也可以，我这里将 kind 和 kubectl 命令都挂载到容器中去，使用下面的命令启动容器即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -it --rm --privileged -v /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kind:/usr/bin/kind -v /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kubectl:/usr/bin/kubectl jieyu/dind-buster:v0.1.8 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_1.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;br&gt;可以看到在容器中可以很好的使用 KinD 来创建 Kubernetes 集群。接下来我们直接在 Kubernetes 中来测试一次：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; dind.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -ti dind /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# curl -Lso ./kind https://kind.sigs.k8s.io/dl/v0.7.0/kind-$(uname)-amd64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# chmod +x ./kind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# mv ./kind /usr/bin/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@dind:/&lt;span class=&quot;comment&quot;&gt;# kind create cluster&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (kindest/node:v1.17.0) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✗ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR: failed to create cluster: failed to init node with kubeadm: &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;docker exec --privileged kind-control-plane kubeadm init --ignore-preflight-errors=all --config=/kind/kubeadm.conf --skip-token-print --v=6&quot;&lt;/span&gt; failed with error: &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; status 137&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到在 Pod 中使用 KinD 来创建集群失败了，这是因为在 KinD 节点嵌套容器内运行的 kubelet 会随机杀死顶层容器内的进程，这其实还是和上面讨论的 cgroups 的挂载有关。&lt;/p&gt;
&lt;p&gt;但其实我自己在使用 v0.8.1 版本的 KinD 的时候，在上面的 Pod 中是可以正常创建集群的，不知道是否是 KinD 搭建的集群有什么特殊处理，这里需要再深入研究：&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_2.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你在使用的过程中也遇到了上述的问题，则可以继续往下看解决方案。&lt;/p&gt;
&lt;p&gt;当顶层容器（DIND）在 Kubernetes  Pod 中运行的时候，对于每个 cgroup 子系统（比如内存），从宿主机的角度来看，它的 cgroup 路径是 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当 KinD 在 DIND 容器内的嵌套节点容器内启动 kubelet 的时候，kubelet 将在 &lt;code&gt;/kubepods/burstable/&lt;/code&gt; 下相对于嵌套 KIND 节点容器的根 cgroup 为其 Pods 来操作 cgroup。从宿主机的角度来看，cgroup 路径就是 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;/docker/&amp;lt;KIND_CID&amp;gt;/kubepods/burstable/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些都是正确的，但是在嵌套的 KinD 节点容器中，有另一个 cgroup 存在于 &lt;code&gt;/kubepods/burstable/&amp;lt;POD_ID&amp;gt;/&amp;lt;DIND_CID&amp;gt;/docker/&amp;lt;DIND_CID&amp;gt;&lt;/code&gt; 下面，相对于嵌套的 KinD 节点容器的根 cgroup，在 kubelet 启动之前就存在了，这是上面我们讨论过的 cgroups 挂载造成的，通过 KinD entrypoint 脚本设置。而如果你在 KinD 节点容器里面做一个 &lt;code&gt;cat /kubepods/burstable/&amp;lt;POD_ID&amp;gt;/docker/&amp;lt;DIND_CID&amp;gt;/tasks&lt;/code&gt;，你会看到 DinD 容器的进程。&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_3.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就是最根本的原因，KinD 节点容器里面的 kubelet 看到了这个 cgroup，以为应该由它来管理，但是却找不到和这个 cgroup 相关联的 Pod，所以就会尝试来杀死属于这个 cgroup 的进程来删除这个 cgroup。这个操作的结果就是随机进程被杀死。解决这个问题的方法可以通过设置 kubelet 的 &lt;code&gt;--cgroup-root&lt;/code&gt; 参数，通过该标志来指示 KinD 节点容器内的 kubelet 为其 Pods 使用不同的 cgroup 根路径（比如 /kubelet）。这样就可以在 Kubernetes 集群中来启动 KinD 集群了，我们可以通过下面的 YAML 资源清单文件来修复这个问题。&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; kind-cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - image:&lt;/span&gt; jieyu/kind-cluster-buster:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kind-cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    stdin:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tty:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    env:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; API_SERVER_ADDRESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      valueFrom:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        fieldRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          fieldPath:&lt;/span&gt; status.podIP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /lib/modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; libmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    securityContext:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      privileged:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; api-server-port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    readinessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        path:&lt;/span&gt; /healthz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        port:&lt;/span&gt; api-server-port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        scheme:&lt;/span&gt; HTTPS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      periodSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      successThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; varlibdocker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    emptyDir:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; libmodules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /lib/modules&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用上面的资源清单文件创建完成后，稍等一会儿我们就可以进入 Pod 中来验证。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -ti kind-cluster /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@kind-cluster:/&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   72s   v1.17.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样也可以直接使用 Docker CLI 来进行测试：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -ti --rm --privileged jieyu/kind-cluster-buster:v0.1.0 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dockerd...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Setting up KIND cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creating cluster &lt;span class=&quot;string&quot;&gt;&quot;kind&quot;&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Ensuring node image (jieyu/kind-node:v1.17.0) 🖼&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Preparing nodes 📦&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Writing configuration 📜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Starting control-plane 🕹️&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing CNI 🔌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Installing StorageClass 💾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ✓ Waiting ≤ 15m0s &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; control-plane = Ready ⏳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; • Ready after 31s 💚&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set kubectl context to &lt;span class=&quot;string&quot;&gt;&quot;kind-kind&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can now use your cluster with:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl cluster-info --context kind-kind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Have a nice day! 👋&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@d95fa1302557:/&lt;span class=&quot;comment&quot;&gt;# kubectl get nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                 STATUS   ROLES    AGE   VERSION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kind-control-plane   Ready    master   71s   v1.17.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@d95fa1302557:/&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面镜像对应的 Dockerfile 和启动脚本地址：&lt;a href=&quot;https://github.com/jieyu/docker-images/tree/master/kind-cluster&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jieyu/docker-images/tree/master/kind-cluster&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图是我在 KinD 搭建的 Kubernetes 集群中，创建的一个 Pod，然后在 Pod 中创建的一个独立的 Kubernetes 集群最终效果：&lt;br&gt;&lt;img src=&quot;/images/k8s/k8s_in_k8s_4.png&quot; alt=&quot;k8s-in-k8s&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在实现上面功能的时候，过程中还是遇到了不少的障碍，其中大部分都是因为 Docker 容器没有提供和宿主机完全隔离的功能造成的，某些内核资源比如 cgroups 是在内核中共享的，如果很多容器同时操作它们，也可能会造成潜在的冲突。但是一旦解决了这些问题，我们就可以非常方便的在 Kubernetes 集群 Pod 中轻松地运行一个独立的 Kubernetes 集群了，这应该算真正的 Kubernetes IN Kubernetes 了吧~&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://d2iq.com/blog/running-kind-inside-a-kubernetes-cluster-for-continuous-integration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://d2iq.com/blog/running-kind-inside-a-kubernetes-cluster-for-continuous-integration&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;KinD&lt;/code&gt; 是一个非常轻量级的 Kubernetes 安装工具，他将 Docker 容器当成 Kubernetes 的节点，使用非常方便。既然在 Docker 容器中可以运行 Kubernetes 集群，那么我们自然就会想到是否可以在 Pod 中来运行呢？在 Pod 中运行会遇到哪些问题呢？&lt;/p&gt;
&lt;h2 id=&quot;在-Pod-中安装-Docker-Daemon&quot;&gt;&lt;a href=&quot;#在-Pod-中安装-Docker-Daemon&quot; class=&quot;headerlink&quot; title=&quot;在 Pod 中安装 Docker Daemon&quot;&gt;&lt;/a&gt;在 Pod 中安装 Docker Daemon&lt;/h2&gt;&lt;p&gt;&lt;code&gt;KIND&lt;/code&gt; 当前依赖于 Docker（尽管他们计划很快支持其他容器运行时，例如&lt;code&gt;podman&lt;/code&gt;）。因此，第一步是创建一个容器映像，该映像允许您在 Pod 内运行 Docker守护程序，以便使诸如&lt;code&gt;docker run&lt;/code&gt;之类的命令在Pod内运行（又名 Docker-in-Docker 或 DIND ）。&lt;/p&gt;
&lt;p&gt;Docker-in-Docker 是一个众所周知的问题，并且已经解决了相当一段时间。尽管如此，当尝试在生产 Kubernetes 集群中正确设置 Docker-in-Docker 时，我们仍然遇到很多问题。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="k8s in k8s" scheme="http://team.jiunile.com/tags/k8s-in-k8s/"/>
    
  </entry>
  
  <entry>
    <title>多集群kubernetes dashboard 通过ldap统一登录与授权</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-mutiboard-ldap.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-mutiboard-ldap.html</id>
    <published>2020-06-12T11:00:00.000Z</published>
    <updated>2020-06-12T02:11:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/icyxp/kubernetes-dashboard-ldap/master/assets/images/logo.png&quot; alt=&quot;logo.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;工具由来&quot;&gt;&lt;a href=&quot;#工具由来&quot; class=&quot;headerlink&quot; title=&quot;工具由来&quot;&gt;&lt;/a&gt;工具由来&lt;/h1&gt;&lt;p&gt;为什么要写这样的一个工具呢？这是因为我司有多个 &lt;code&gt;kubernetes&lt;/code&gt; 集群(8+)，且都是云托管服务无法接触到Apiserver配置，这就给我们带来一个痛点，&lt;strong&gt;开发、sre需要登录k8s dashbaord且不同部门和角色间需要不同的授权&lt;/strong&gt;，原先都是通过 &lt;code&gt;sa token&lt;/code&gt; 进行登录dashboard，但随着k8s集群的增长，每增加一个集群，就需要告知使用方对应dashboard访问地址以及对应的token，这不管是提供方还是使用方都让人感觉非常的痛苦。那是否有一款工具能&lt;strong&gt;提供统一地址统一登录多集群dashboard的方案&lt;/strong&gt;呢？经过一番搜索后，发现并没有，市面上大多数是单集群集成 &lt;code&gt;LDAP&lt;/code&gt; 的方案，主要是以 &lt;code&gt;DEX&lt;/code&gt; 为主，但光单集群的统一登录授权方案就让人感觉非常的困难。难道就没有简单方便的工具供我们使用吗？好吧，那我就来打造这样一款工具吧。&lt;/p&gt;
&lt;p&gt;Dashboard LDAP集成方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://k2r2bai.com/2019/09/29/ironman2020/day14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://k2r2bai.com/2019/09/29/ironman2020/day14/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两篇文档是成LDAP的方案，个人感觉还不错，供有需要的人参考！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;如何打造&quot;&gt;&lt;a href=&quot;#如何打造&quot; class=&quot;headerlink&quot; title=&quot;如何打造&quot;&gt;&lt;/a&gt;如何打造&lt;/h1&gt;&lt;p&gt;好吧既然没有，那就自动动手打造一个！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目标： &lt;strong&gt;简单使用&lt;/strong&gt;！！！通过访问同一地址，使用LDAP登录且可切换不同集群的dashboard，同时对应不同的集群权限可单独配置！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了上面的目标，那如何来实现呢？&lt;/p&gt;
&lt;p&gt;实现方式其实很简单，首先写一个登录界面与公司的AD进行打通获取用户与组，然后将用户或者组与k8s集群中的 &lt;code&gt;service account&lt;/code&gt; 进行关联就实现了对应的rbac与登录token，最后在登录后实现一个反向代理服务即可完成。&lt;/p&gt;
&lt;p&gt;是不是非常的简单！！！&lt;/p&gt;
&lt;p&gt;实现技术栈：golang(gin、client-go、viper、ldap) + Kubernetes Dashboard&lt;/p&gt;
&lt;h1 id=&quot;如何部署&quot;&gt;&lt;a href=&quot;#如何部署&quot; class=&quot;headerlink&quot; title=&quot;如何部署&quot;&gt;&lt;/a&gt;如何部署&lt;/h1&gt;&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;在使用此工具前，需要有以下一些条件约束：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已在各k8s集群部署 &lt;code&gt;dashboard&lt;/code&gt; 且能被此工具访问到&lt;/li&gt;
&lt;li&gt;已有 &lt;code&gt;ldap&lt;/code&gt; 且有管理权限能进行访问操作&lt;/li&gt;
&lt;li&gt;各集群中有对应的 &lt;code&gt;service account&lt;/code&gt; 可进行映射，如需对不同用户和组需要有不同的操作权限，则对sa进行rbac授权即可，下面会详细说明。&lt;/li&gt;
&lt;li&gt;此工具需要操作各集群的api，故需要获取每个集群的 &lt;code&gt;apiserver地址&lt;/code&gt;、&lt;code&gt;ca.crt&lt;/code&gt; 以及 &lt;code&gt;token&lt;/code&gt; 进行配置，至于每个集群的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 如果获取，后面会进行说明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何获取-ca-crt-及-token&quot;&gt;&lt;a href=&quot;#如何获取-ca-crt-及-token&quot; class=&quot;headerlink&quot; title=&quot;如何获取 ca.crt 及 token&quot;&gt;&lt;/a&gt;如何获取 ca.crt 及 token&lt;/h2&gt;&lt;p&gt;此工具需要操作每个集群的api来获取对应的 sa 以及 token，故需要有对各集群操作的权限。那如何在各集群生成对应的 ca证书 及 token 呢？答案就是创建一个 sa 并给予一定的权限。&lt;/p&gt;
&lt;p&gt;在每个k8s集群中执行如下yaml文件:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-crb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; mutiboard-ldap-view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; serviceaccounts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; secrets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; namespaces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此yaml文件的含义：创建一个名为&lt;code&gt;mutiboard-ldap&lt;/code&gt;的 sa，并且给予&lt;code&gt;serviceaccounts&lt;/code&gt;和&lt;code&gt;secrets&lt;/code&gt;的get和list的权限。&lt;/p&gt;
&lt;p&gt;获取 &lt;code&gt;mutiboard-ldap&lt;/code&gt; 的 ca.crt：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(⎈|aws-local:default)❯ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $(kubectl get secret $(kubectl get secret | grep mutiboard-ldap | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;) -o go-template=&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#123;index .data &quot;ca.crt&quot;&amp;#125;&amp;#125;&#39;&lt;/span&gt;) | base64 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----BEGIN CERTIFICATE-----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cm5ldGVzMB4XDTE5MDEyNTEwMTgzNFoXDTI5MDEyMjEwMTgzNFowFTETMBEGA1UE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMmc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TW0stLLP+M6Pc9wpRgZufg6eQ7puBfbYgik20QlO4LFtocgNUDa0y+aSXjxheA2C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A+o9wW0IC3GHQHKgeFY8KXIJu6wM0TO+JNQy5XZAWfbsLeXU/sLhKuWET/KJzVWT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0uBE+GCADAAQIec1oQXMbQ551hU5gBFcr67NXHpa2qwEGA1mGtZ7ztmW4+IFUD74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G166z4AOgmR4YWxBs/+8NhfWudFD32xevBfSKuHRxRGG5dtffY8QnRbnrmy70HE5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yzLtBvAGfCwtHLTP2ngCAnn2Fb6IeMdIYGpI1544ZjRbzT1YIWsG1v3dlu6tvK1q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X5Pj+UTDmJuf2SW52A0CAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKE2hV0DIG8fSf4/eOi5R2sPRfBW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qTwgZDDT9dxZNhbxEInALdruwRUbKRpwaUBOGVpIlaK3/rZkAfjUwoDJ+J4fmmCX&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w3ySrYFjx6tqVFqCPjDkBHh4xpMwUlvsvryRuCEQUQgjqBvj6sWm9GERF2n3VYBF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S8bjsQQAZJoE4W+OKchlEoSFlKhxAoeZx9CD3Rxnhj2og6&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;VoGCUqAMh4WZWX+w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pENnui6M96SysH3SkrA02RXWTGeKzK4E6Av3IG+2a2hauHorbqVfaM6HeL3hkU/B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JCWpOgN3T4Fw7E359CBQxnSHPasmZ5VBoyIk/HUU6ZlMK6Xo6JlbS7ZvVl4=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----END CERTIFICATE-----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取 &lt;code&gt;mutiboard-ldap&lt;/code&gt; 的 token：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(⎈|aws-local:default)❯ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $(kubectl get secret $(kubectl get secret | grep mutiboard-ldap | awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print $1&amp;#125;&#39;&lt;/span&gt;) -o go-template=&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#123;.data.token&amp;#125;&amp;#125;&#39;&lt;/span&gt;) | base64 &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Im11dGlib2FyZC1sZGFwLXRva2VuLWJ3NWdmIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Im11dGlib2FyZC1sZGFwIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMjVmZjI4MGQtYWJhMi0xMWVhLWFlOGEtMDIzOTBjMzcyNzhlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6bXV0aWJvYXJkLWxkYXA&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;Q.q14hqEu2p70_YczDviR6c8McDM5vfnKPzjO9usCsC-uQUxciBbuJU_PK9j3uawppUNlrs3rAPrZIGUS7Jv14rifEXpGxIIfGR6n8-le0b-9YvMZCgs9-jhf-1r01EAnZFh6gcXfxESFguFQI0vYOsX4P2LQvZ9XTMzsqXbW3KGYao5elAjCE4e8Rg4--9e_zU8NGTEycsvUMxP-9p0SaAzn9Iak3saZtAnzJq5hkSf1t7l2_CgEsYN-3b7uGpHupK_zdgAeOflj9ze4Cz2YScv5eixwVXJ-RcI4lgSFCgt5yzSbnIuHgxRZyN3NcYLrSBYKftezZysWm3jELgLPogQ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，各集群的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 都已获取，下面会告知如何进行配置使用这些 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;SA-RBAC列子&quot;&gt;&lt;a href=&quot;#SA-RBAC列子&quot; class=&quot;headerlink&quot; title=&quot;SA RBAC列子&quot;&gt;&lt;/a&gt;SA RBAC列子&lt;/h2&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kubernetes.io/cluster-service: &lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addonmanager.kubernetes.io/mode: Reconcile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- apiGroups:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  resources:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;namespaces&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  verbs:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;list&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;watch&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-listnamespace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-role&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; RoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-ci-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; ops-ci&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; RoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-qa-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; ops-qa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#引用的角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#主体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段YAML的意思为：创建了一个ops-admin的sa，并为这个sa赋予了两个命名空间(ops-ci、ops-qa) admin 的权限。&lt;/p&gt;
&lt;p&gt;具体想了解更多rbac相关的说明，可参考：&lt;a href=&quot;https://www.cnblogs.com/wlbl/p/10694364.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cnblogs.com/wlbl/p/10694364.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ldap说明&quot;&gt;&lt;a href=&quot;#ldap说明&quot; class=&quot;headerlink&quot; title=&quot;ldap说明&quot;&gt;&lt;/a&gt;ldap说明&lt;/h2&gt;&lt;p&gt;我司&lt;code&gt;ldap&lt;/code&gt;目录规则如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|--域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|---公司&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|----分公司&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|-----|----部门&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--|----|-----|-----|-----用户&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对应的&lt;code&gt;Distinguished Name&lt;/code&gt;显示如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CN=Peng Xu,OU=部门,OU=分公司,OU=公司,DC=corp,DC=xxx,DC=com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我会获取第一个&lt;code&gt;OU&lt;/code&gt;作为&lt;code&gt;group&lt;/code&gt;，如果你的需求和我不一样，可以给我提 issue 进行适配&lt;/p&gt;
&lt;p&gt;ldap 详细说明请参考：&lt;a href=&quot;https://blog.poychang.net/ldap-introduction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.poychang.net/ldap-introduction&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;configmap-yaml-配置说明&quot;&gt;&lt;a href=&quot;#configmap-yaml-配置说明&quot; class=&quot;headerlink&quot; title=&quot;configmap.yaml 配置说明&quot;&gt;&lt;/a&gt;configmap.yaml 配置说明&lt;/h2&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ldap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  addr:&lt;/span&gt; ldap://&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.81&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;389&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  adminUser:&lt;/span&gt; xxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  adminPwd:&lt;/span&gt; xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  baseDN:&lt;/span&gt; dc=corp,dc=patsnap,dc=com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  filter:&lt;/span&gt; (&amp;amp;(objectClass=person)(sAMAccountName=%s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  attributes:&lt;/span&gt; user_dn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  orgUnitName:&lt;/span&gt; OU=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#全局用户/用户组与SA的映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rbac:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DevOps team:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    sa:&lt;/span&gt; ops-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ns:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  xupeng:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    sa:&lt;/span&gt; inno-admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    ns:&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clusters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#集群别名，在登录下拉框中显示的key，这个别名需要和secret.sh中的ca.crt和token的键名一一对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  local:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#apiserver地址，能够被当前工具访问到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-dev.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;6443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#kubernetes dashboard地址，能够被当前工具访问到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-dev.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#集群说明，在登录下拉框中显示的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; Dev Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#针对单独集群细分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#rbac:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#  DevOps team:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    sa: admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    ns: kube-system&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#  xupeng:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    sa: ops-admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#    ns: default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  cnrelease:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-cn-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-cn-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; CN Release Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  usrelease:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-us-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-us-release.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; US Release Cluster&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  euprod:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    apiServer:&lt;/span&gt; apiserver-eu-prod.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    dashboard:&lt;/span&gt; dashboard-eu-prod.jiunile.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    desc:&lt;/span&gt; EU Prod Cluster&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;修改并部署&lt;code&gt;deploy/configmap.yaml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将各集群获取的 &lt;code&gt;ca.crt&lt;/code&gt; 和 &lt;code&gt;token&lt;/code&gt; 写入到对应的deploy/token下&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行 deploy 下的 secret.sh 脚本 &lt;code&gt;sh deploy/secret.sh&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: secret.sh 中的&lt;code&gt;xx_token/xxx_ca.crt&lt;/code&gt;中的 &lt;code&gt;xx&lt;/code&gt; 对应于&lt;code&gt;configmap.yaml&lt;/code&gt; 中的&lt;strong&gt;集群别名，必须要一一对应&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署&lt;code&gt;deploy/deployment.yaml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;访问&quot;&gt;&lt;a href=&quot;#访问&quot; class=&quot;headerlink&quot; title=&quot;访问&quot;&gt;&lt;/a&gt;访问&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://{nodeip}:31000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://{nodeip}:31000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频地址：&lt;a href=&quot;http://www.youtube.com/watch?v=ILiviSLbSq8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.youtube.com/watch?v=ILiviSLbSq8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git地址：&lt;a href=&quot;https://github.com/icyxp/kubernetes-dashboard-ldap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/kubernetes-dashboard-ldap&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/icyxp/kubernetes-dashboard-ldap/master/assets/images/logo.png&quot; alt=&quot;logo.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;工具由来&quot;&gt;&lt;a href=&quot;#工具由来&quot; class=&quot;headerlink&quot; title=&quot;工具由来&quot;&gt;&lt;/a&gt;工具由来&lt;/h1&gt;&lt;p&gt;为什么要写这样的一个工具呢？这是因为我司有多个 &lt;code&gt;kubernetes&lt;/code&gt; 集群(8+)，且都是云托管服务无法接触到Apiserver配置，这就给我们带来一个痛点，&lt;strong&gt;开发、sre需要登录k8s dashbaord且不同部门和角色间需要不同的授权&lt;/strong&gt;，原先都是通过 &lt;code&gt;sa token&lt;/code&gt; 进行登录dashboard，但随着k8s集群的增长，每增加一个集群，就需要告知使用方对应dashboard访问地址以及对应的token，这不管是提供方还是使用方都让人感觉非常的痛苦。那是否有一款工具能&lt;strong&gt;提供统一地址统一登录多集群dashboard的方案&lt;/strong&gt;呢？经过一番搜索后，发现并没有，市面上大多数是单集群集成 &lt;code&gt;LDAP&lt;/code&gt; 的方案，主要是以 &lt;code&gt;DEX&lt;/code&gt; 为主，但光单集群的统一登录授权方案就让人感觉非常的困难。难道就没有简单方便的工具供我们使用吗？好吧，那我就来打造这样一款工具吧。&lt;/p&gt;
&lt;p&gt;Dashboard LDAP集成方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://k2r2bai.com/2019/09/29/ironman2020/day14/&quot;&gt;https://k2r2bai.com/2019/09/29/ironman2020/day14/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&quot;&gt;https://blog.inkubate.io/access-your-kubernetes-cluster-with-your-active-directory-credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两篇文档是成LDAP的方案，个人感觉还不错，供有需要的人参考！&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="ldap" scheme="http://team.jiunile.com/categories/kubrenetes/ldap/"/>
    
      <category term="rbac" scheme="http://team.jiunile.com/categories/kubrenetes/ldap/rbac/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="ldap" scheme="http://team.jiunile.com/tags/ldap/"/>
    
      <category term="rbac" scheme="http://team.jiunile.com/tags/rbac/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Kubernetes 调度器</title>
    <link href="http://team.jiunile.com//blog/2020/06/k8s-custom-scheduler.html"/>
    <id>http://team.jiunile.com//blog/2020/06/k8s-custom-scheduler.html</id>
    <published>2020-06-08T11:00:00.000Z</published>
    <updated>2020-06-08T08:35:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。&lt;/p&gt;
&lt;h2 id=&quot;调度流程&quot;&gt;&lt;a href=&quot;#调度流程&quot; class=&quot;headerlink&quot; title=&quot;调度流程&quot;&gt;&lt;/a&gt;调度流程&lt;/h2&gt;&lt;p&gt;默认情况下，&lt;code&gt;kube-scheduler&lt;/code&gt; 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 &lt;code&gt;PodSpec.NodeName&lt;/code&gt; 为空的 Pod，对每个 Pod 都会创建一个 binding。&lt;br&gt;&lt;img src=&quot;/images/k8s/kube-scheduler-overview.png&quot; alt=&quot;kube-scheduler-overview&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这个过程在我们看来好像比较简单，但在实际的生产环境中，需要考虑的问题就有很多了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何保证全部的节点调度的公平性？要知道并不是所有节点资源配置一定都是一样的&lt;/li&gt;
&lt;li&gt;如何保证每个节点都能被分配资源？&lt;/li&gt;
&lt;li&gt;集群资源如何能够被高效利用？&lt;/li&gt;
&lt;li&gt;集群资源如何才能被最大化使用？&lt;/li&gt;
&lt;li&gt;如何保证 Pod 调度的性能和效率？&lt;/li&gt;
&lt;li&gt;用户是否可以根据自己的实际需求定制自己的调度策略？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到实际环境中的各种复杂情况，kubernetes 的调度器采用插件化的形式实现，可以方便用户进行定制或者二次开发，我们可以自定义一个调度器并以插件形式和 kubernetes 进行集成。&lt;/p&gt;
&lt;p&gt;kubernetes 调度器的源码位于 &lt;code&gt;kubernetes/pkg/scheduler&lt;/code&gt; 中，大体的代码目录结构如下所示：(不同的版本目录结构可能不太一样)&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubernetes/pkg/scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- scheduler.go         //调度相关的具体实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- algorithm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- predicates      //节点筛选策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- priorities      //节点打分策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|-- algorithmprovider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   |-- defaults         //定义默认的调度器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 Scheduler 创建和运行的核心程序，对应的代码在 &lt;code&gt;pkg/scheduler/scheduler.go&lt;/code&gt;，如果要查看 &lt;code&gt;kube-scheduler&lt;/code&gt; 的入口程序，对应的代码在 &lt;code&gt;cmd/kube-scheduler/scheduler.go&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;自定义调度器&quot;&gt;&lt;a href=&quot;#自定义调度器&quot; class=&quot;headerlink&quot; title=&quot;自定义调度器&quot;&gt;&lt;/a&gt;自定义调度器&lt;/h2&gt;&lt;p&gt;一般来说，我们有4种扩展 Kubernetes 调度器的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种方法就是直接 clone 官方的 kube-scheduler 源代码，在合适的位置直接修改代码，然后重新编译运行修改后的程序，当然这种方法是最不建议使用的，也不实用，因为需要花费大量额外的精力来和上游的调度程序更改保持一致。&lt;/li&gt;
&lt;li&gt;第二种方法就是和默认的调度程序一起运行独立的调度程序，默认的调度器和我们自定义的调度器可以通过 Pod 的 &lt;code&gt;spec.schedulerName&lt;/code&gt; 来覆盖各自的 Pod，默认是使用 default 默认的调度器，但是多个调度程序共存的情况下也比较麻烦，比如当多个调度器将 Pod 调度到同一个节点的时候，可能会遇到一些问题，因为很有可能两个调度器都同时将两个 Pod 调度到同一个节点上去，但是很有可能其中一个 Pod 运行后其实资源就消耗完了，并且维护一个高质量的自定义调度程序也不是很容易的，因为我们需要全面了解默认的调度程序，整体 Kubernetes 的架构知识以及各种 Kubernetes API 对象的各种关系或限制。&lt;/li&gt;
&lt;li&gt;第三种方法是&lt;a href=&quot;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/scheduler_extender.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调度器扩展程序&lt;/a&gt;，这个方案目前是一个可行的方案，可以和上游调度程序兼容，所谓的调度器扩展程序其实就是一个可配置的 Webhook 而已，里面包含 &lt;code&gt;过滤器&lt;/code&gt; 和 &lt;code&gt;优先级&lt;/code&gt; 两个端点，分别对应调度周期中的两个主要阶段（过滤和打分）。&lt;/li&gt;
&lt;li&gt;第四种方法是通过调度框架（Scheduling Framework），Kubernetes v1.15 版本中引入了可插拔架构的调度框架，使得定制调度器这个任务变得更加的容易。调库框架向现有的调度器中添加了一组插件化的 API，该 API 在保持调度程序“核心”简单且易于维护的同时，使得大部分的调度功能以插件的形式存在，而且在我们现在的 v1.16 版本中上面的 &lt;code&gt;调度器扩展程序&lt;/code&gt; 也已经被废弃了，所以以后调度框架才是自定义调度器的核心方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们可以简单介绍下后面两种方式的实现。&lt;/p&gt;
&lt;h3 id=&quot;调度器扩展程序&quot;&gt;&lt;a href=&quot;#调度器扩展程序&quot; class=&quot;headerlink&quot; title=&quot;调度器扩展程序&quot;&gt;&lt;/a&gt;调度器扩展程序&lt;/h3&gt;&lt;p&gt;在进入调度器扩展程序之前，我们再来了解下 Kubernetes 调度程序是如何工作的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认调度器根据指定的参数启动（我们使用 kubeadm 搭建的集群，启动配置文件位于 &lt;code&gt;/etc/kubernetes/manifests/kube-schdueler.yaml&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;watch apiserver，将 &lt;code&gt;spec.nodeName&lt;/code&gt; 为空的 Pod 放入调度器内部的调度队列中&lt;/li&gt;
&lt;li&gt;从调度队列中 Pop 出一个 Pod，开始一个标准的调度周期&lt;/li&gt;
&lt;li&gt;从 Pod 属性中检索“硬性要求”（比如 CPU/内存请求值，nodeSelector/nodeAffinity），然后过滤阶段发生，在该阶段计算出满足要求的节点候选列表&lt;/li&gt;
&lt;li&gt;从 Pod 属性中检索“软需求”，并应用一些默认的“软策略”（比如 Pod 倾向于在节点上更加聚拢或分散），最后，它为每个候选节点给出一个分数，并挑选出得分最高的最终获胜者&lt;/li&gt;
&lt;li&gt;和 apiserver 通信（发送绑定调用），然后设置 Pod 的 &lt;code&gt;spec.nodeName&lt;/code&gt; 属性以表示将该 Pod 调度到的节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以通过查看&lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，可以通过 &lt;code&gt;--config&lt;/code&gt; 参数指定调度器将使用哪些参数，该配置文件应该包含一个 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#KubeSchedulerConfiguration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KubeSchedulerConfiguration&lt;/a&gt; 对象，如下所示格式：（/etc/kubernetes/scheduler-extender.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# 通过&quot;--config&quot; 传递文件内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clientConnection:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kubeconfig:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc/kubernetes/scheduler.conf&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;algorithmSource:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  policy:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    file:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/etc/kubernetes/scheduler-extender-policy.yaml&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 指定自定义调度策略文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们在这里应该输入的关键参数是 &lt;code&gt;algorithmSource.policy&lt;/code&gt;，这个策略文件可以是本地文件也可以是 ConfigMap 资源对象，这取决于调度程序的部署方式，比如我们这里默认的调度器是静态 Pod 方式启动的，所以我们可以用本地文件的形式来配置。&lt;/p&gt;
&lt;p&gt;该策略文件 &lt;code&gt;/etc/kubernetes/scheduler-extender-policy.yaml&lt;/code&gt; 应该遵循 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#Policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/pkg/scheduler/apis/config/legacy_types.go#L28&lt;/a&gt; 的要求，在我们这里的 v1.16.2 版本中已经支持 JSON 和 YAML 两种格式的策略文件，下面是我们定义的一个简单的示例，可以查看 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#Extender&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Extender&lt;/a&gt; 描述了解策略文件的定义规范：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;extenders:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- urlPrefix:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http://127.0.0.1:8888/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  filterVerb:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  prioritizeVerb:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;prioritize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  weight:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  enableHttps:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们这里的 Policy 策略文件是通过定义 &lt;code&gt;extenders&lt;/code&gt; 来扩展调度器的，有时候我们不需要去编写代码，可以直接在该配置文件中通过指定 &lt;code&gt;predicates&lt;/code&gt; 和 &lt;code&gt;priorities&lt;/code&gt; 来进行自定义，如果没有指定则会使用默认的 &lt;code&gt;DefaultProvier&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;kind&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Policy&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;apiVersion&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;v1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;predicates&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;MatchNodeSelector&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;PodFitsResources&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;PodFitsHostPorts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;HostName&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;priorities&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;EqualPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ImageLocalityPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;LeastRequestedPriority&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;BalancedResourceAllocation&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;extenders&quot;&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;urlPrefix&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;/prefix&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;filterVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;prioritizeVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;prioritize&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;weight&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;bindVerb&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;bind&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;enableHttps&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改策略文件定义了一个 HTTP 的扩展程序服务，该服务运行在 &lt;code&gt;127.0.0.1:8888&lt;/code&gt; 下面，并且已经将该策略注册到了默认的调度器中，这样在过滤和打分阶段结束后，可以将结果分别传递给该扩展程序的端点 &lt;code&gt;&amp;lt;urlPrefix&amp;gt;/&amp;lt;filterVerb&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;urlPrefix&amp;gt;/&amp;lt;prioritizeVerb&amp;gt;&lt;/code&gt;，在扩展程序中，我们可以进一步过滤并确定优先级，以适应我们的特定业务需求。&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;p&gt;我们直接用 golang 来实现一个简单的调度器扩展程序，当然你可以使用其他任何编程语言，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router := httprouter.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.GET(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, Index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.POST(&lt;span class=&quot;string&quot;&gt;&quot;/filter&quot;&lt;/span&gt;, Filter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    router.POST(&lt;span class=&quot;string&quot;&gt;&quot;/prioritize&quot;&lt;/span&gt;, Prioritize)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Fatal(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;, router))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后接下来我们需要实现 &lt;code&gt;/filter&lt;/code&gt; 和 &lt;code&gt;/prioritize&lt;/code&gt; 两个端点的处理程序。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;Filter&lt;/code&gt; 这个扩展函数接收一个输入类型为 &lt;code&gt;schedulerapi.ExtenderArgs&lt;/code&gt; 的参数，然后返回一个类型为 &lt;code&gt;*schedulerapi.ExtenderFilterResult&lt;/code&gt; 的值。在函数中，我们可以进一步过滤输入的节点：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// filter 根据扩展程序定义的预选规则来过滤节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(args schedulerapi.ExtenderArgs)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;schedulerapi&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;ExtenderFilterResult&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filteredNodes []v1.Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	failedNodes := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(schedulerapi.FailedNodesMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pod := args.Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, node := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; args.Nodes.Items &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fits, failReasons, _ := podFitsOnNode(pod, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fits &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			filteredNodes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(filteredNodes, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			failedNodes[node.Name] = strings.Join(failReasons, &lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result := schedulerapi.ExtenderFilterResult&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Nodes: &amp;amp;v1.NodeList&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Items: filteredNodes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		FailedNodes: failedNodes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Error:       &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在过滤函数中，我们循环每个节点然后用我们自己实现的业务逻辑来判断是否应该批准该节点，这里我们实现比较简单，在 &lt;code&gt;podFitsOnNode()&lt;/code&gt; 函数中我们只是简单的检查随机数是否为偶数来判断即可，如果是的话我们就认为这是一个幸运的节点，否则拒绝批准该节点。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; predicatesSorted = []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;LuckyPred&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; predicatesFuncs = &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]FitPredicate&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LuckyPred: LuckyPredicate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FitPredicate &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;podFitsOnNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fits := &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; failReasons []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, predicateKey := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; predicatesSorted &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fit, failures, err := predicatesFuncs[predicateKey](pod, node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fits = fits &amp;amp;&amp;amp; fit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        failReasons = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(failReasons, failures...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fits, failReasons, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LuckyPredicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pod *v1.Pod, node v1.Node)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lucky := rand.Intn(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; lucky &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;pod %v/%v is lucky to fit on node %v\n&quot;&lt;/span&gt;, pod.Name, pod.Namespace, node.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;pod %v/%v is unlucky to fit on node %v\n&quot;&lt;/span&gt;, pod.Name, pod.Namespace, node.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;LuckyPredFailMsg&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样的打分功能用同样的方式来实现，我们在每个节点上随机给出一个分数：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// it&#39;s webhooked to pkg/scheduler/core/generic_scheduler.go#PrioritizeNodes()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个函数输出的分数会被添加会默认的调度器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prioritize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(args schedulerapi.ExtenderArgs)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;schedulerapi&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;HostPriorityList&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pod := args.Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nodes := args.Nodes.Items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hostPriorityList := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(schedulerapi.HostPriorityList, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nodes))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, node := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; nodes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		score := rand.Intn(schedulerapi.MaxPriority + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 在最大优先级内随机取一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		log.Printf(luckyPrioMsg, pod.Name, pod.Namespace, score)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hostPriorityList[i] = schedulerapi.HostPriority&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Host:  node.Name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Score: score,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;hostPriorityList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以使用下面的命令来编译打包我们的应用：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GOOS=linux GOARCH=amd64 go build -o app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本节调度器扩展程序完整的代码获取地址：&lt;a href=&quot;https://github.com/icyxp/sample-scheduler-extender&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/sample-scheduler-extender&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建完成后，将应用 &lt;code&gt;app&lt;/code&gt; 拷贝到 &lt;code&gt;kube-scheduler&lt;/code&gt; 所在的节点直接运行即可。现在我们就可以将上面的策略文件配置到 &lt;code&gt;kube-scheduler&lt;/code&gt; 组件中去了，我们这里集群是 kubeadm 搭建的，所以直接修改文件 &lt;code&gt;/etc/kubernetes/manifests/kube-schduler.yaml&lt;/code&gt; 文件即可，内容如下所示：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  creationTimestamp:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    component:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    tier:&lt;/span&gt; control-plane&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --authentication-kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --authorization-kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --bind-address=&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --kubeconfig=/etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --leader-elect=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --config=/etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; --v=&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; gcr.azk8s.cn/google_containers/kube-scheduler:v1&lt;span class=&quot;number&quot;&gt;.16&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    livenessProbe:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      failureThreshold:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      httpGet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        path:&lt;/span&gt; /healthz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10251&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        scheme:&lt;/span&gt; HTTP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        cpu:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; kubeconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; extender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - mountPath:&lt;/span&gt; /etc/kubernetes/scheduler-extender-policy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; extender-policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      readOnly:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  hostNetwork:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  priorityClassName:&lt;/span&gt; system-cluster-critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; kubeconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler-extender.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; extender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - hostPath:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      path:&lt;/span&gt; /etc/kubernetes/scheduler-extender-policy.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      type:&lt;/span&gt; FileOrCreate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; extender-policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;status:&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然我们这个地方是直接在系统默认的 &lt;code&gt;kube-scheduler&lt;/code&gt; 上面配置的，我们也可以复制一个调度器的 YAML 文件然后更改下 schedulerName 来部署，这样就不会影响默认的调度器了，然后在需要使用这个测试的调度器的 Pod 上面指定 &lt;code&gt;spec.schedulerName&lt;/code&gt; 即可。对于多调度器的使用可以查看官方文档 &lt;a href=&quot;https://kubernetes.io/zh/docs/tasks/administer-cluster/configure-multiple-schedulers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置多个调度器&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 重新配置后可以查看日志来验证是否重启成功，需要注意的是一定需要将 &lt;code&gt;/etc/kubernetes/scheduler-extender.yaml&lt;/code&gt; 和 &lt;code&gt;/etc/kubernetes/scheduler-extender-policy.yaml&lt;/code&gt; 两个文件挂载到 Pod 中去：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl logs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; kube-scheduler-ydzs-master -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:38.824657       1 serving.go:319] Generated self-signed cert &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-memory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.472276       1 server.go:143] Version: v1.16.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.472674       1 defaults.go:91] TaintNodesByCondition is enabled, PodToleratesNodeTaints predicate is mandatory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0102 15:17:39.479704       1 authorization.go:47] Authorization is disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W0102 15:17:39.479733       1 authentication.go:79] Authentication is disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.479777       1 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.480559       1 secure_serving.go:123] Serving securely on 127.0.0.1:10259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:39.682180       1 leaderelection.go:241] attempting to acquire leader lease  kube-system/kube-scheduler...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0102 15:17:56.500505       1 leaderelection.go:251] successfully acquired lease kube-system/kube-scheduler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里我们就创建并配置了一个非常简单的调度扩展程序，现在我们来运行一个 Deployment 查看其工作原理，我们准备一个包含20个副本的部署 Yaml：(test-scheduler.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - name:&lt;/span&gt; pause&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        image:&lt;/span&gt; gcr.azk8s.cn/google_containers/pause:&lt;span class=&quot;number&quot;&gt;3.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接创建上面的资源对象：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kuectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deployment.apps/pause created&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们去查看下我们编写的调度器扩展程序日志：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is unlucky to fit on node ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is lucky to get score 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-bwn7t/default is lucky to get score 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is unlucky to fit on node ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is unlucky to fit on node ydzs-node4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to fit on node ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to fit on node ydzs-node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to get score 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/01/03 12:27:29 pod pause-58584fbc95-86w92/default is lucky to get score 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到 Pod 调度的过程，另外默认调度程序会定期重试失败的 Pod，因此它们将一次又一次地重新传递到我们的调度扩展程序上，我们的逻辑是检查随机数是否为偶数，所以最终所有 Pod 都将处于运行状态。&lt;/p&gt;
&lt;p&gt;调度器扩展程序可能是在一些情况下可以满足我们的需求，但是他仍然有一些限制和缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通信成本：数据在默认调度程序和调度器扩展程序之间以 &lt;code&gt;http（s）&lt;/code&gt; 传输，在执行序列化和反序列化的时候有一定成本&lt;/li&gt;
&lt;li&gt;有限的扩展点：扩展程序只能在某些阶段的末尾参与，例如 &lt;code&gt;“Filter”&lt;/code&gt; 和 &lt;code&gt;“Prioritize”&lt;/code&gt; ，它们不能在任何阶段的开始或中间被调用&lt;/li&gt;
&lt;li&gt;减法优于加法：与默认调度程序传递的节点候选列表相比，我们可能有一些需求需要添加新的候选节点列表，但这是比较冒险的操作，因为不能保证新节点可以通过其他要求，所以，调度器扩展程序最好执行 &lt;code&gt;“减法”&lt;/code&gt;（进一步过滤），而不是 &lt;code&gt;“加法”&lt;/code&gt;（添加节点）&lt;/li&gt;
&lt;li&gt;缓存共享：上面只是一个简单的测试示例，但在真实的项目中，我们是需要通过查看整个集群的状态来做出调度决策的，默认调度程序可以很好地调度决策，但是无法共享其缓存，这意味着我们必须构建和维护自己的缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些局限性，Kubernetes 调度小组就提出了上面第四种方法来进行更好的扩展，也就是&lt;code&gt;调度框架（Scheduler Framework）&lt;/code&gt;，它基本上可以解决我们遇到的所有难题，现在也已经成官方推荐的扩展方式，所以这将是以后扩展调度器的最主流的方式。&lt;/p&gt;
&lt;h2 id=&quot;调度框架&quot;&gt;&lt;a href=&quot;#调度框架&quot; class=&quot;headerlink&quot; title=&quot;调度框架&quot;&gt;&lt;/a&gt;调度框架&lt;/h2&gt;&lt;p&gt;调度框架定义了一组扩展点，用户可以实现扩展点定义的接口来定义自己的调度逻辑（我们称之为扩展），并将扩展注册到扩展点上，调度框架在执行调度工作流时，遇到对应的扩展点时，将调用用户注册的扩展。调度框架在预留扩展点时，都是有特定的目的，有些扩展点上的扩展可以改变调度程序的决策方法，有些扩展点上的扩展只是发送一个通知。&lt;/p&gt;
&lt;p&gt;我们知道每当调度一个 Pod 时，都会按照两个过程来执行：调度过程和绑定过程。&lt;/p&gt;
&lt;p&gt;调度过程为 Pod 选择一个合适的节点，绑定过程则将调度过程的决策应用到集群中（也就是在被选定的节点上运行 Pod），将调度过程和绑定过程合在一起，称之为调度上下文（&lt;strong&gt;scheduling context&lt;/strong&gt;）。需要注意的是调度过程是&lt;code&gt;同步&lt;/code&gt;运行的（同一时间点只为一个 Pod 进行调度），绑定过程可异步运行（同一时间点可并发为多个 Pod 执行绑定）。&lt;/p&gt;
&lt;p&gt;调度过程和绑定过程遇到如下情况时会中途退出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度程序认为当前没有该 Pod 的可选节点&lt;/li&gt;
&lt;li&gt;内部错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个时候，该 Pod 将被放回到 待调度队列，并等待下次重试。&lt;/p&gt;
&lt;h3 id=&quot;扩展点（Extension-Points）&quot;&gt;&lt;a href=&quot;#扩展点（Extension-Points）&quot; class=&quot;headerlink&quot; title=&quot;扩展点（Extension Points）&quot;&gt;&lt;/a&gt;扩展点（Extension Points）&lt;/h3&gt;&lt;p&gt;下图展示了调度框架中的调度上下文及其中的扩展点，一个扩展可以注册多个扩展点，以便可以执行更复杂的有状态的任务。&lt;br&gt;&lt;img src=&quot;/images/k8s/scheduling-framework-extensions.png&quot; alt=&quot;scheduling-framework-extensions&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;QueueSort&lt;/code&gt; 扩展用于对 Pod 的待调度队列进行排序，以决定先调度哪个 Pod，&lt;code&gt;QueueSort&lt;/code&gt; 扩展本质上只需要实现一个方法 &lt;code&gt;Less(Pod1, Pod2)&lt;/code&gt; 用于比较两个 Pod 谁更优先获得调度即可，同一时间点只能有一个 &lt;code&gt;QueueSort&lt;/code&gt; 插件生效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pre-filter&lt;/code&gt; 扩展用于对 Pod 的信息进行预处理，或者检查一些集群或 Pod 必须满足的前提条件，如果 &lt;code&gt;pre-filter&lt;/code&gt; 返回了 error，则调度过程终止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 扩展用于排除那些不能运行该 Pod 的节点，对于每一个节点，调度器将按顺序执行 &lt;code&gt;filter&lt;/code&gt; 扩展；如果任何一个 &lt;code&gt;filter&lt;/code&gt; 将节点标记为不可选，则余下的 &lt;code&gt;filter&lt;/code&gt; 扩展将不会被执行。调度器可以同时对多个节点执行 &lt;code&gt;filter&lt;/code&gt; 扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-filter&lt;/code&gt; 是一个通知类型的扩展点，调用该扩展的参数是 &lt;code&gt;filter&lt;/code&gt; 阶段结束后被筛选为可选节点的节点列表，可以在扩展中使用这些信息更新内部状态，或者产生日志或 metrics 信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Scoring&lt;/code&gt; 扩展用于为所有可选节点进行打分，调度器将针对每一个节点调用 &lt;code&gt;Soring&lt;/code&gt; 扩展，评分结果是一个范围内的整数。在 &lt;code&gt;normalize scoring&lt;/code&gt; 阶段，调度器将会把每个 &lt;code&gt;scoring&lt;/code&gt; 扩展对具体某个节点的评分结果和该扩展的权重合并起来，作为最终评分结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Normalize scoring&lt;/code&gt; 扩展在调度器对节点进行最终排序之前修改每个节点的评分结果，注册到该扩展点的扩展在被调用时，将获得同一个插件中的 &lt;code&gt;scoring&lt;/code&gt; 扩展的评分结果作为参数，调度框架每执行一次调度，都将调用所有插件中的一个 &lt;code&gt;normalize scoring&lt;/code&gt; 扩展一次。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reserve&lt;/code&gt; 是一个通知性质的扩展点，有状态的插件可以使用该扩展点来获得节点上为 Pod 预留的资源，该事件发生在调度器将 Pod 绑定到节点之前，目的是避免调度器在等待 Pod 与节点绑定的过程中调度新的 Pod 到节点上时，发生实际使用资源超出可用资源的情况。（因为绑定 Pod 到节点上是异步发生的）。这是调度过程的最后一个步骤，Pod 进入 &lt;code&gt;reserved&lt;/code&gt; 状态以后，要么在绑定失败时触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展，要么在绑定成功时，由 &lt;code&gt;Post-bind&lt;/code&gt; 扩展结束绑定过程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Permit&lt;/code&gt; 扩展用于阻止或者延迟 Pod 与节点的绑定。Permit 扩展可以做下面三件事中的一项：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;approve&lt;/code&gt;（批准）：当所有的 &lt;code&gt;permit&lt;/code&gt; 扩展都 &lt;code&gt;approve&lt;/code&gt; 了 Pod 与节点的绑定，调度器将继续执行绑定过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deny&lt;/code&gt;（拒绝）：如果任何一个 &lt;code&gt;permit&lt;/code&gt; 扩展 &lt;code&gt;deny&lt;/code&gt; 了 Pod 与节点的绑定，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt;（等待）：如果一个 &lt;code&gt;permit&lt;/code&gt; 扩展返回了 &lt;code&gt;wait&lt;/code&gt;，则 Pod 将保持在 &lt;code&gt;permit&lt;/code&gt; 阶段，直到被其他扩展 &lt;code&gt;approve&lt;/code&gt;，如果超时事件发生，&lt;code&gt;wait&lt;/code&gt; 状态变成 &lt;code&gt;deny&lt;/code&gt;，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pre-bind&lt;/code&gt; 扩展用于在 Pod 绑定之前执行某些逻辑。例如，&lt;code&gt;pre-bind&lt;/code&gt; 扩展可以将一个基于网络的数据卷挂载到节点上，以便 Pod 可以使用。如果任何一个 &lt;code&gt;pre-bind&lt;/code&gt; 扩展返回错误，Pod 将被放回到待调度队列，此时将触发 &lt;code&gt;Unreserve&lt;/code&gt; 扩展。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bind&lt;/code&gt; 扩展用于将 Pod 绑定到节点上：&lt;ul&gt;
&lt;li&gt;只有所有的 &lt;code&gt;pre-bind&lt;/code&gt; 扩展都成功执行了，&lt;code&gt;bind&lt;/code&gt; 扩展才会执行&lt;/li&gt;
&lt;li&gt;调度框架按照 &lt;code&gt;bind&lt;/code&gt; 扩展注册的顺序逐个调用 &lt;code&gt;bind&lt;/code&gt; 扩展&lt;/li&gt;
&lt;li&gt;具体某个 &lt;code&gt;bind&lt;/code&gt; 扩展可以选择处理或者不处理该 Pod&lt;/li&gt;
&lt;li&gt;如果某个 &lt;code&gt;` 扩展处理了该 Pod 与节点的绑定，余下的&lt;/code&gt;bind` 扩展将被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 是一个通知性质的扩展：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 扩展在 Pod 成功绑定到节点上之后被动调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post-bind&lt;/code&gt; 扩展是绑定过程的最后一个步骤，可以用来执行资源清理的动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unreserve&lt;/code&gt; 是一个通知性质的扩展，如果为 Pod 预留了资源，Pod 又在被绑定过程中被拒绝绑定，则 &lt;code&gt;unreserve&lt;/code&gt; 扩展将被调用。&lt;code&gt;Unreserve&lt;/code&gt; 扩展应该释放已经为 Pod 预留的节点上的计算资源。在一个插件中，&lt;code&gt;reserve&lt;/code&gt; 扩展和 &lt;code&gt;unreserve&lt;/code&gt; 扩展应该成对出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果我们要实现自己的插件，必须向调度框架注册插件并完成配置，另外还必须实现扩展点接口，对应的扩展点接口我们可以在源码 &lt;code&gt;pkg/scheduler/framework/v1alpha1/interface.go&lt;/code&gt; 文件中找到，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Plugin is the parent type for all the scheduling framework plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Plugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Name() &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; QueueSortPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Less(*PodInfo, *PodInfo) &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PreFilterPlugin is an interface that must be implemented by &quot;prefilter&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called at the beginning of the scheduling cycle.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PreFilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PreFilter(pc *PluginContext, p *v1.Pod) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// FilterPlugin is an interface for Filter plugins. These plugins are called at the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// filter extension point for filtering out hosts that cannot run a pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This concept used to be called &#39;predicate&#39; in the original scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins should return &quot;Success&quot;, &quot;Unschedulable&quot; or &quot;Error&quot; in Status.code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// However, the scheduler accepts other valid codes as well.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Anything other than &quot;Success&quot; will lead to exclusion of the given host from&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// running the pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Filter(pc *PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PostFilterPlugin is an interface for Post-filter plugin. Post-filter is an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// informational extension point. Plugins will be called with a list of nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// that passed the filtering phase. A plugin may use this data to update internal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// state or to generate logs/metrics.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PostFilterPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PostFilter(pc *PluginContext, pod *v1.Pod, nodes []*v1.Node, filteredNodesStatuses NodeToStatusMap) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ScorePlugin is an interface that must be implemented by &quot;score&quot; plugins to rank&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// nodes that passed the filtering phase.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ScorePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Score(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, *Status)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ScoreWithNormalizePlugin is an interface that must be implemented by &quot;score&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugins that also need to normalize the node scoring results produced by the same&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugin&#39;s &quot;Score&quot; method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ScoreWithNormalizePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ScorePlugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NormalizeScore(pc *PluginContext, p *v1.Pod, scores NodeScoreList) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ReservePlugin is an interface for Reserve plugins. These plugins are called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// at the reservation point. These are meant to update the state of the plugin.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This concept used to be called &#39;assume&#39; in the original scheduler.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins should return only Success or Error in Status.code. However,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// the scheduler accepts other valid codes as well. Anything other than Success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// will lead to rejection of the pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; ReservePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Reserve(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PreBindPlugin is an interface that must be implemented by &quot;prebind&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called before a pod being scheduled.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PreBindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PreBind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PostBindPlugin is an interface that must be implemented by &quot;postbind&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called after a pod is successfully bound to a node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PostBindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PostBind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UnreservePlugin is an interface for Unreserve plugins. This is an informational&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// extension point. If a pod was reserved and then rejected in a later phase, then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// un-reserve plugins will be notified. Un-reserve plugins should clean up state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// associated with the reserved Pod.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; UnreservePlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Unreserve(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PermitPlugin is an interface that must be implemented by &quot;permit&quot; plugins.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These plugins are called before a pod is bound to a node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PermitPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Permit(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (*Status, time.Duration)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// BindPlugin is an interface that must be implemented by &quot;bind&quot; plugins. Bind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// plugins are used to bind a pod to a Node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; BindPlugin &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Bind(pc *PluginContext, p *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) *Status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于调度框架插件的启用或者禁用，我们同样可以使用上面的 &lt;a href=&quot;https://godoc.org/k8s.io/kubernetes/pkg/scheduler/apis/config#KubeSchedulerConfiguration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KubeSchedulerConfiguration&lt;/a&gt; 资源对象来进行配置。下面的例子中的配置启用了一个实现了 &lt;code&gt;reserve&lt;/code&gt; 和 &lt;code&gt;preBind&lt;/code&gt; 扩展点的插件，并且禁用了另外一个插件，同时为插件 foo 提供了一些配置信息：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  reserve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; baz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  preBind:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; baz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;pluginConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  args:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo插件可以解析的任意内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;扩展的调用顺序如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某个扩展点没有配置对应的扩展，调度框架将使用默认插件中的扩展&lt;/li&gt;
&lt;li&gt;如果为某个扩展点配置且激活了扩展，则调度框架将先调用默认插件的扩展，再调用配置中的扩展&lt;/li&gt;
&lt;li&gt;默认插件的扩展始终被最先调用，然后按照 &lt;code&gt;KubeSchedulerConfiguration&lt;/code&gt; 中扩展的激活 &lt;code&gt;enabled&lt;/code&gt; 顺序逐个调用扩展点的扩展&lt;/li&gt;
&lt;li&gt;可以先禁用默认插件的扩展，然后在 &lt;code&gt;enabled&lt;/code&gt; 列表中的某个位置激活默认插件的扩展，这种做法可以改变默认插件的扩展被调用时的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设默认插件 foo 实现了 &lt;code&gt;reserve&lt;/code&gt; 扩展点，此时我们要添加一个插件 bar，想要在 foo 之前被调用，则应该先禁用 foo 再按照 bar foo 的顺序激活。示例配置如下所示：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  reserve:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    disabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在源码目录 &lt;code&gt;pkg/scheduler/framework/plugins/examples&lt;/code&gt; 中有几个示范插件，我们可以参照其实现方式。&lt;/p&gt;
&lt;h3 id=&quot;示例-1&quot;&gt;&lt;a href=&quot;#示例-1&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;其实要实现一个调度框架的插件，并不难，我们只要实现对应的扩展点，然后将插件注册到调度器中即可，下面是默认调度器在初始化的时候注册的插件：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewRegistry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Registry&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Registry&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// FactoryMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// New plugins are registered here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// example:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//  stateful_plugin.Name: stateful.NewStatefulMultipointExample,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//  fooplugin.Name: fooplugin.New,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是可以看到默认并没有注册一些插件，所以要想让调度器能够识别我们的插件代码，就需要自己来实现一个调度器了，当然这个调度器我们完全没必要完全自己实现，直接调用默认的调度器，然后在上面的 &lt;code&gt;NewRegistry()&lt;/code&gt; 函数中将我们的插件注册进去即可。在 &lt;code&gt;kube-scheduler&lt;/code&gt; 的源码文件 &lt;code&gt;kubernetes/cmd/kube-scheduler/app/server.go&lt;/code&gt; 中有一个 &lt;code&gt;NewSchedulerCommand&lt;/code&gt; 入口函数，其中的参数是一个类型为 &lt;code&gt;Option&lt;/code&gt; 的列表，而这个 &lt;code&gt;Option&lt;/code&gt; 恰好就是一个插件配置的定义：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Option configures a framework.Registry.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Option &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(framework.Registry)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;title&quot;&gt;NewSchedulerCommand&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;creates&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;cobra&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;registryOptions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewSchedulerCommand&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(registryOptions ...Option)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;cobra&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Command&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以我们完全就可以直接调用这个函数来作为我们的函数入口，并且传入我们自己实现的插件作为参数即可，而且该文件下面还有一个名为 &lt;code&gt;WithPlugin&lt;/code&gt; 的函数可以来创建一个 &lt;code&gt;Option&lt;/code&gt; 实例：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// WithPlugin creates an Option based on plugin name and factory.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WithPlugin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, factory framework.PluginFactory)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Option&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(registry framework.Registry)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; registry.Register(name, factory)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以最终我们的入口函数如下所示：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rand.Seed(time.Now().UTC().UnixNano())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	command := app.NewSchedulerCommand(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		app.WithPlugin(sample.Name, sample.New), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	logs.InitLogs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; logs.FlushLogs()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := command.Execute(); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_, _ = fmt.Fprintf(os.Stderr, &lt;span class=&quot;string&quot;&gt;&quot;%v\n&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		os.Exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;app.WithPlugin(sample.Name, sample.New)&lt;/code&gt; 就是我们接下来要实现的插件，从 &lt;code&gt;WithPlugin&lt;/code&gt; 函数的参数也可以看出我们这里的 &lt;code&gt;sample.New&lt;/code&gt; 必须是一个 &lt;code&gt;framework.PluginFactory&lt;/code&gt; 类型的值，而 &lt;code&gt;PluginFactory&lt;/code&gt; 的定义就是一个函数：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; PluginFactory = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(configuration *runtime.Unknown, f FrameworkHandle)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Plugin, error)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;sample.New&lt;/code&gt; 实际上就是上面的这个函数，在这个函数中我们可以获取到插件中的一些数据然后进行逻辑处理即可，插件实现如下所示，我们这里只是简单获取下数据打印日志，如果你有实际需求的可以根据获取的数据就行处理即可，我们这里只是实现了 &lt;code&gt;PreFilter&lt;/code&gt;、&lt;code&gt;Filter&lt;/code&gt;、&lt;code&gt;PreBind&lt;/code&gt; 三个扩展点，其他的可以用同样的方式来扩展即可：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 插件名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Name = &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Args &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FavoriteColor  &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&quot;favorite_color,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FavoriteNumber &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;`json:&quot;favorite_number,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ThanksTo       &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`json:&quot;thanks_to,omitempty&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Sample &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args   *Args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	handle framework.FrameworkHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreFilter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;prefilter pod: %v&quot;&lt;/span&gt;, pod.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;filter pod: %v, node: %v&quot;&lt;/span&gt;, pod.Name, nodeName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s *Sample)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreBind&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pc *framework.PluginContext, pod *v1.Pod, nodeName &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;framework&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Status&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; nodeInfo, ok := s.handle.NodeInfoSnapshot().NodeInfoMap[nodeName]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Error, fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;prebind get node info error: %+v&quot;&lt;/span&gt;, nodeName))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;prebind node info: %+v&quot;&lt;/span&gt;, nodeInfo.Node())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; framework.NewStatus(framework.Success, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//type PluginFactory = func(configuration *runtime.Unknown, f FrameworkHandle) (Plugin, error)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(configuration *runtime.Unknown, f framework.FrameworkHandle)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(framework.Plugin, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args := &amp;amp;Args&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := framework.DecodeInto(configuration, args); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	klog.V(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).Infof(&lt;span class=&quot;string&quot;&gt;&quot;get plugin config args: %+v&quot;&lt;/span&gt;, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Sample&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		args: args,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		handle: f,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整代码可以前往仓库 &lt;a href=&quot;https://github.com/icyxp/sample-scheduler-framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/icyxp/sample-scheduler-framework&lt;/a&gt; 获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现完成后，编译打包成镜像即可，然后我们就可以当成普通的应用用一个 &lt;code&gt;Deployment&lt;/code&gt; 控制器来部署即可，由于我们需要去获取集群中的一些资源对象，所以当然需要申请 RBAC 权限，然后同样通过 &lt;code&gt;--config&lt;/code&gt; 参数来配置我们的调度器，同样还是使用一个 &lt;code&gt;KubeSchedulerConfiguration&lt;/code&gt; 资源对象配置，可以通过 &lt;code&gt;plugins&lt;/code&gt; 来启用或者禁用我们实现的插件，也可以通过 &lt;code&gt;pluginConfig&lt;/code&gt; 来传递一些参数值给插件：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rules:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; endpoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; events&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; delete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; bindings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods/binding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; pods/status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; patch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; replicationcontrollers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; apps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; extensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; replicasets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; apps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; statefulsets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; policy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; poddisruptionbudgets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; persistentvolumeclaims&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; persistentvolumes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; configmaps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;storage.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; storageclasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; csinodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;coordination.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; leases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; get&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - apiGroups:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;events.k8s.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; events&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    verbs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; patch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;      -&lt;/span&gt; update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ClusterRoleBinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrolebinding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;roleRef:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  apiGroup:&lt;/span&gt; rbac.authorization.k8s.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  kind:&lt;/span&gt; ClusterRole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-clusterrole&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;subjects:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- kind:&lt;/span&gt; ServiceAccount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ConfigMap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;data:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scheduler-config.yaml: &lt;span class=&quot;string&quot;&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;    apiVersion:&lt;/span&gt; kubescheduler.config.k8s.io/v1alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    kind:&lt;/span&gt; KubeSchedulerConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    schedulerName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    leaderElection:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      leaderElect:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      lockObjectName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      lockObjectNamespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    plugins:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      preFilter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      filter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      preBind:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        enabled:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    pluginConfig:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sample-plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        favorite_color:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;#326CE5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        favorite_number:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        thanks_to:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;thockin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  namespace:&lt;/span&gt; kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        component:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      serviceAccount:&lt;/span&gt; sample-scheduler-sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      priorityClassName:&lt;/span&gt; system-cluster-critical&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          configMap:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; scheduler-ctrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          image:&lt;/span&gt; cnych/sample-scheduler:v0&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          args:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; sample-scheduler-framework&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; --config=/etc/kubernetes/scheduler-config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;            -&lt;/span&gt; --v=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          resources:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            requests:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              cpu:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;          volumeMounts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;            - name:&lt;/span&gt; scheduler-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;              mountPath:&lt;/span&gt; /etc/kubernetes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接部署上面的资源对象即可，这样我们就部署了一个名为 &lt;code&gt;sample-scheduler&lt;/code&gt; 的调度器了，接下来我们可以部署一个应用来使用这个调度器进行调度：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; apps/v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    matchLabels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      app:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        app:&lt;/span&gt; test-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      schedulerName:&lt;/span&gt; sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      - image:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        imagePullPolicy:&lt;/span&gt; IfNotPresent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是我们现在手动指定了一个 &lt;code&gt;schedulerName&lt;/code&gt; 的字段，将其设置成上面我们自定义的调度器名称 &lt;code&gt;sample-scheduler&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们直接创建这个资源对象，创建完成后查看我们自定义调度器的日志信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; component=sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                               READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sample-scheduler-7c469787f-rwhhd   1/1     Running   0          13m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl logs &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; sample-scheduler-7c469787f-rwhhd -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.087881       1 scheduler.go:530] Attempting to schedule pod: default/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.087992       1 plugins.go:23] prefilter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088657       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088797       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088871       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088946       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-node4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.088992       1 plugins.go:28] filter pod: &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb, node: ydzs-master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.090653       1 plugins.go:36] prebind node info: &amp;amp;Node&amp;#123;ObjectMeta:&amp;#123;ydzs-node3   /api/v1/nodes/ydzs-node3 1ff6e228-4d98-4737-b6d3-30a5d55ccdc2 15466372 0 2019-11-10 09:05:09 +0000 UTC &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt; ......&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.091761       1 factory.go:610] Attempting to &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb to ydzs-node3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I0104 08:24:22.104994       1 scheduler.go:667] pod default/&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb is bound successfully on node &lt;span class=&quot;string&quot;&gt;&quot;ydzs-node3&quot;&lt;/span&gt;, 5 nodes evaluated, 4 nodes were found feasible. Bound node resource: &lt;span class=&quot;string&quot;&gt;&quot;Capacity: CPU&amp;lt;4&amp;gt;|Memory&amp;lt;8008820Ki&amp;gt;|Pods&amp;lt;110&amp;gt;|StorageEphemeral&amp;lt;17921Mi&amp;gt;; Allocatable: CPU&amp;lt;4&amp;gt;|Memory&amp;lt;7906420Ki&amp;gt;|Pods&amp;lt;110&amp;gt;|StorageEphemeral&amp;lt;16912377419&amp;gt;.&quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到当我们创建完 Pod 后，在我们自定义的调度器中就出现了对应的日志，并且在我们定义的扩展点上面都出现了对应的日志，证明我们的示例成功了，也可以通过查看 Pod 的 &lt;code&gt;schedulerName&lt;/code&gt; 来验证：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                                      READY   STATUS    RESTARTS   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb           1/1     Running   0          22m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pod &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-scheduler-6d779d9465-rq2bb -o yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restartPolicy: Always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;schedulerName: sample-scheduler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;securityContext: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serviceAccount: default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在最新的 Kubernetes v1.17 版本中，&lt;code&gt;Scheduler Framework&lt;/code&gt; 内置的预选和优选函数已经全部插件化，所以要扩展调度器我们应该掌握并理解调度框架这种方式。&lt;/p&gt;
&lt;p&gt;参考：明阳的博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 是 kubernetes 的核心组件之一，主要负责整个集群资源的调度功能，根据特定的调度算法和策略，将 Pod 调度到最优的工作节点上面去，从而更加合理、更加充分的利用集群的资源，这也是我们选择使用 kubernetes 一个非常重要的理由。如果一门新的技术不能帮助企业节约成本、提供效率，我相信是很难推进的。&lt;/p&gt;
&lt;h2 id=&quot;调度流程&quot;&gt;&lt;a href=&quot;#调度流程&quot; class=&quot;headerlink&quot; title=&quot;调度流程&quot;&gt;&lt;/a&gt;调度流程&lt;/h2&gt;&lt;p&gt;默认情况下，&lt;code&gt;kube-scheduler&lt;/code&gt; 提供的默认调度器能够满足我们绝大多数的要求，我们前面和大家接触的示例也基本上用的默认的策略，都可以保证我们的 Pod 可以被分配到资源充足的节点上运行。但是在实际的线上项目中，可能我们自己会比 kubernetes 更加了解我们自己的应用，比如我们希望一个 Pod 只能运行在特定的几个节点上，或者这几个节点只能用来运行特定类型的应用，这就需要我们的调度器能够可控。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-scheduler&lt;/code&gt; 的主要作用就是根据特定的调度算法和调度策略将 Pod 调度到合适的 Node 节点上去，是一个独立的二进制程序，启动之后会一直监听 API Server，获取到 &lt;code&gt;PodSpec.NodeName&lt;/code&gt; 为空的 Pod，对每个 Pod 都会创建一个 binding。&lt;br&gt;&lt;img src=&quot;/images/k8s/kube-scheduler-overview.png&quot; alt=&quot;kube-scheduler-overview&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="调度器" scheme="http://team.jiunile.com/categories/kubrenetes/%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="scheduler" scheme="http://team.jiunile.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>k8s v1.17 新增拓扑感知服务路由</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-service-topology.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-service-topology.html</id>
    <published>2020-05-22T11:00:00.000Z</published>
    <updated>2020-05-22T07:47:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;拓扑域&lt;/code&gt;: 表示在集群中的某一类 “地方”，比如某节点、某机架、某可用区或某地域等，这些都可以作为某种拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: k8s 某个服务的某个 ip+port，通常是 pod 的 ip+port。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;: k8s 的 service 资源(服务)，关联一组 endpoint ，访问 service 会被转发到关联的某个 endpoint 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;拓扑感知服务路由，此特性最初由杜军大佬提出并设计。为什么要设计此特性呢？想象一下，k8s 集群节点分布在不同的地方，service 对应的 endpoints 分布在不同节点，传统转发策略会对所有 endpoint 做负载均衡，通常会等概率转发，当访问 service 时，流量就可能被分散打到这些不同的地方。虽然 service 转发做了负载均衡，但如果 endpoint 距离比较远，流量转发过去网络时延就相对比较高，会影响网络性能，在某些情况下甚至还可能会付出额外的流量费用。要是如能实现 service 就近转发 endpoint，是不是就可以实现降低网络时延，提升网络性能了呢？是的！这也正是该特性所提出的目的和意义。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;k8s-亲和性&quot;&gt;&lt;a href=&quot;#k8s-亲和性&quot; class=&quot;headerlink&quot; title=&quot;k8s 亲和性&quot;&gt;&lt;/a&gt;k8s 亲和性&lt;/h2&gt;&lt;p&gt;service 的就近转发实际就是一种网络的亲和性，倾向于转发到离自己比较近的 endpoint。在此特性之前，已经在调度和存储方面有一些亲和性的设计与实现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;节点亲和性 (Node Affinity)&lt;/code&gt;: 让 Pod 被调度到符合一些期望条件的 Node 上，比如限制调度到某一可用区，或者要求节点支持 GPU，这算是调度亲和，调度结果取决于节点属性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod 亲和性与反亲和性 (Pod Affinity/AntiAffinity)&lt;/code&gt;: 让一组 Pod 调度到同一拓扑域的节点上，或者打散到不同拓扑域的节点， 这也算是调度亲和，调度结果取决于其它 Pod。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据卷拓扑感知调度 (Volume Topology-aware Scheduling)&lt;/code&gt;: 让 Pod 只被调度到符合其绑定的存储所在拓扑域的节点上，这算是调度与存储的亲和，调度结果取决于存储的拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;本地数据卷 (Local Persistent Volume)&lt;/code&gt;: 让 Pod 使用本地数据卷，比如高性能 SSD，在某些需要高 IOPS 低时延的场景很有用，它还会保证 Pod 始终被调度到同一节点，数据就不会不丢失，这也算是调度与存储的亲和，调度结果取决于存储所在节点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;数据卷拓扑感知动态创建 (Topology-Aware Volume Dynamic Provisioning)&lt;/code&gt;: 先调度 Pod，再根据 Pod 所在节点的拓扑域来创建存储，这算是存储与调度的亲和，存储的创建取决于调度的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 k8s 目前在网络方面还没有亲和性能力，拓扑感知服务路由这个新特性恰好可以补齐这个的空缺，此特性使得 service 可以实现就近转发而不是所有 endpoint 等概率转发。&lt;/p&gt;
&lt;h2 id=&quot;如何实现&quot;&gt;&lt;a href=&quot;#如何实现&quot; class=&quot;headerlink&quot; title=&quot;如何实现&quot;&gt;&lt;/a&gt;如何实现&lt;/h2&gt;&lt;p&gt;我们知道，service 转发主要是 node 上的 kube-proxy 进程通过 watch apiserver 获取 service 对应的 endpoint，再写入 iptables 或 ipvs 规则来实现的; 对于 headless service，主要是通过 kube-dns 或 coredns 动态解析到不同 endpoint ip 来实现的。实现 service 就近转发的关键点就在于如何将流量转发到跟当前节点在同一拓扑域的 endpoint 上，也就是会进行一次 endpoint 筛选，选出一部分符合当前节点拓扑域的 endpoint 进行转发。&lt;/p&gt;
&lt;p&gt;那么如何判断 endpoint 跟当前节点是否在同一拓扑域里呢？只要能获取到 endpoint 的拓扑信息，用它跟当前节点拓扑对比下就可以知道了。那又如何获取 endpoint 的拓扑信息呢？答案是通过 endpoint 所在节点的 label，我们可以使用 node label 来描述拓扑域。&lt;/p&gt;
&lt;p&gt;通常在节点初始化的时候，controller-manager 就会为节点打上许多 label，比如 &lt;code&gt;kubernetes.io/hostname&lt;/code&gt; 表示节点的 hostname 来区分节点；另外，在云厂商提供的 k8s 服务，或者使用 cloud-controller-manager 的自建集群，通常还会给节点打上 &lt;code&gt;failure-domain.beta.kubernetes.io/zone&lt;/code&gt; 和 &lt;code&gt;failure-domain.beta.kubernetes.io/region&lt;/code&gt; 以区分节点所在可用区和所在地域，但自 v1.17 开始将会改名成 &lt;code&gt;topology.kubernetes.io/zone&lt;/code&gt; 和 &lt;code&gt;topology.kubernetes.io/region&lt;/code&gt;，参见 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/pull/81431&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #81431&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如何根据 endpoint 查到它所在节点的这些 label 呢？答案是通过 &lt;code&gt;Endpoint Slice&lt;/code&gt;，该特性在 v1.16 发布了 alpha，在 v1.17 将会进入 beta，它相当于 Endpoint API 增强版，通过将 endpoint 做数据分片来解决大规模 endpoint 的性能问题，并且可以携带更多的信息，包括 endpoint 所在节点的拓扑信息，拓扑感知服务路由特性会通过 &lt;code&gt;Endpoint Slice&lt;/code&gt; 获取这些拓扑信息实现 endpoint 筛选 (过滤出在同一拓扑域的 endpoint)，然后再转换为 iptables 或 ipvs 规则写入节点以实现拓扑感知的路由转发。&lt;/p&gt;
&lt;p&gt;细心的你可能已经发现，之前每个节点上转发 service 的 iptables/ipvs 规则基本是一样的，但启用了拓扑感知服务路由特性之后，每个节点上的转发规则就可能不一样了，因为不同节点的拓扑信息不一样，导致过滤出的 endpoint 就不一样，也正是因为这样，service 转发变得不再等概率，灵活的就近转发才得以实现。&lt;/p&gt;
&lt;p&gt;当前还不支持 headless service 的拓扑路由，计划在 beta 阶段支持。由于 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/54153164&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;headless service&lt;/a&gt; 不是通过 kube-proxy 生成转发规则，而是通过 dns 动态解析实现的，所以需要改 kube-dns/coredns 来支持这个特性。&lt;/p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;启用当前 alpha 实现的拓扑感知服务路由特性需要满足以下前提条件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群版本在 v1.17 及其以上。&lt;/li&gt;
&lt;li&gt;Kube-proxy 以 iptables 或 IPVS 模式运行 (alpha 阶段暂时只实现了这两种模式)。&lt;/li&gt;
&lt;li&gt;启用了 &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Endpoint Slices&lt;/a&gt; (此特性虽然在 v1.17 进入 beta，但没有默认开启)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何启用此特性&quot;&gt;&lt;a href=&quot;#如何启用此特性&quot; class=&quot;headerlink&quot; title=&quot;如何启用此特性&quot;&gt;&lt;/a&gt;如何启用此特性&lt;/h2&gt;&lt;p&gt;给所有 k8s 组件打开 &lt;code&gt;ServiceTopology&lt;/code&gt; 和 &lt;code&gt;EndpointSlice&lt;/code&gt; 这两个 feature:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--feature-gates=&lt;span class=&quot;string&quot;&gt;&quot;ServiceTopology=true,EndpointSlice=true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;p&gt;在 Service spec 里加上 &lt;code&gt;topologyKeys&lt;/code&gt; 字段，表示该 Service 优先顺序选用的拓扑域列表，对应节点标签的 key；当访问此 Service 时，会找是否有 endpoint 有对应 topology key 的拓扑信息并且 value 跟当前节点也一样，如果是，那就选定此 topology key 作为当前转发的拓扑域，并且筛选出其余所有在这个拓扑域的 endpoint 来进行转发；如果没有找到任何 endpoint 在当前 topology key 对应拓扑域，就会尝试第二个 topology key，依此类推；如果遍历完所有 topology key 也没有匹配到 endpoint 就会拒绝转发，就像此 service 没有后端 endpoint 一样。&lt;/p&gt;
&lt;p&gt;有一个特殊的 topology key “&lt;code&gt;*&lt;/code&gt;”，它可以匹配所有 endpoint，如果 &lt;code&gt;topologyKeys&lt;/code&gt; 包含了 &lt;code&gt;*&lt;/code&gt;，它必须在列表末尾，通常是在没有匹配到合适的拓扑域来实现就近转发时，就打消就近转发的念头，可以转发到任意 endpoint 上。&lt;/p&gt;
&lt;p&gt;当前 topology key 支持以下可能的值（未来会增加更多）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/hostname&lt;/code&gt;: 节点的 hostname，通常将它放列表中第一个，表示如果本机有 endpoint 就直接转发到本机的 endpoint。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topology.kubernetes.io/zone&lt;/code&gt;: 节点所在的可用区，通常将它放在 &lt;code&gt;kubernetes.io/hostname&lt;/code&gt; 后面，表示如果本机没有对应 endpoint，就转发到当前可用区其它节点上的 endpoint（部分云厂商跨可用区通信会收取额外的流量费用）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topology.kubernetes.io/region&lt;/code&gt;: 表示节点所在的地域，表示转发到当前地域的 endpoint，这个用的应该会比较少，因为通常集群所有节点都只会在同一个地域，如果节点跨地域了，节点之间通信延时将会很高。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: 忽略拓扑域，匹配所有 endpoint，相当于一个保底策略，避免丢包，只能放在列表末尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有以下约束:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topologyKeys&lt;/code&gt; 与 &lt;code&gt;externalTrafficPolicy=Local&lt;/code&gt; 不兼容，是互斥的，如果 &lt;code&gt;externalTrafficPolicy&lt;/code&gt; 为 &lt;code&gt;Local&lt;/code&gt;，就不能定义 &lt;code&gt;topologyKeys&lt;/code&gt;，反之亦然。&lt;/li&gt;
&lt;li&gt;topology key 必须是合法的 label 格式，并且最多定义 16 个 key。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里给出一个简单的 Service 示例:&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  type:&lt;/span&gt; ClusterIP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    protocol:&lt;/span&gt; TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    app:&lt;/span&gt; nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  topologyKeys:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;kubernetes.io/hostname&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;topology.kubernetes.io/zone&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解释: 当访问 nginx 服务时，首先看本机是否有这个服务的 endpoint，如果有就直接本机路由过去；如果没有，就看是否有 endpoint 位于当前节点所在可用区，如果有，就转发过去，如果还是没有，就转发给任意 endpoint。&lt;br&gt;&lt;img src=&quot;/images/k8s/service-topology.png&quot; alt=&quot;service-topology&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是其中一次转发的例子：Pod 访问 nginx 这个 service 时，发现本机没有 endpoint，就找当前可用区的，找到了就转发过去，也就不会考虑转发给另一可用区的 endpoint。&lt;/p&gt;
&lt;p&gt;参考：imroc&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;拓扑域&lt;/code&gt;: 表示在集群中的某一类 “地方”，比如某节点、某机架、某可用区或某地域等，这些都可以作为某种拓扑域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: k8s 某个服务的某个 ip+port，通常是 pod 的 ip+port。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service&lt;/code&gt;: k8s 的 service 资源(服务)，关联一组 endpoint ，访问 service 会被转发到关联的某个 endpoint 上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;拓扑感知服务路由，此特性最初由杜军大佬提出并设计。为什么要设计此特性呢？想象一下，k8s 集群节点分布在不同的地方，service 对应的 endpoints 分布在不同节点，传统转发策略会对所有 endpoint 做负载均衡，通常会等概率转发，当访问 service 时，流量就可能被分散打到这些不同的地方。虽然 service 转发做了负载均衡，但如果 endpoint 距离比较远，流量转发过去网络时延就相对比较高，会影响网络性能，在某些情况下甚至还可能会付出额外的流量费用。要是如能实现 service 就近转发 endpoint，是不是就可以实现降低网络时延，提升网络性能了呢？是的！这也正是该特性所提出的目的和意义。&lt;br&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="新特性" scheme="http://team.jiunile.com/categories/kubrenetes/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="服务路由" scheme="http://team.jiunile.com/tags/%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1/"/>
    
      <category term="新特性" scheme="http://team.jiunile.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>使用NodeLocal DNSCache来提升CoreDNS的性能及压力</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-nodelocal-dnscache.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-nodelocal-dnscache.html</id>
    <published>2020-05-22T10:00:00.000Z</published>
    <updated>2020-05-22T02:58:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;之前在解决 CoreDNS 的5秒超时问题的时候，除了通过 &lt;code&gt;dnsConfig&lt;/code&gt; 去强制使用 tcp 方式解析之外，我们提到过使用 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 来解决这个问题。&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 &lt;code&gt;ClusterFirst&lt;/code&gt; 的 DNS 模式下的 Pod 可以连接到 &lt;code&gt;kube-dns&lt;/code&gt; 的 serviceIP 进行 DNS 查询。通过 &lt;code&gt;kube-proxy&lt;/code&gt; 组件添加的 &lt;code&gt;iptables&lt;/code&gt; 规则将其转换为 &lt;code&gt;CoreDNS&lt;/code&gt; 端点。通过在每个集群节点上运行 DNS 缓存，&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 &lt;code&gt;kube-dns&lt;/code&gt; 的 DNS 查询次数。&lt;/p&gt;
&lt;p&gt;在集群中运行 NodeLocal DNSCache 有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果本地没有 CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须到另一个节点进行解析，使用 NodeLocal DNSCache 后，拥有本地缓存将有助于改善延迟&lt;/li&gt;
&lt;li&gt;跳过 iptables DNAT 和连接跟踪将有助于减少 &lt;code&gt;conntrack&lt;/code&gt; 竞争并避免 UDP DNS 条目填满 &lt;code&gt;conntrack&lt;/code&gt; 表（常见的5s超时问题就是这个原因造成的）&lt;/li&gt;
&lt;li&gt;从本地缓存代理到 kube-dns 服务的连接可以升级到 TCP，TCP conntrack 条目将在连接关闭时被删除，而 UDP 条目必须超时(&lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;默认 nf_conntrack_udp_timeout 是 30 秒&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;将 DNS 查询从 UDP 升级到 TCP 将减少归因于丢弃的 UDP 数据包和 DNS 超时的尾部等待时间，通常长达 30 秒（3 次重试+ 10 秒超时）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/images/k8s/dnscache.png&quot; alt=&quot;NodeLocal DNSCache&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装使用&quot;&gt;&lt;a href=&quot;#安装使用&quot; class=&quot;headerlink&quot; title=&quot;安装使用&quot;&gt;&lt;/a&gt;安装使用&lt;/h2&gt;&lt;p&gt;要安装 NodeLocal DNSCache 也非常简单，直接获取官方的资源清单即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该资源清单文件中包含几个变量，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__DNS__SERVER__&lt;/code&gt; ：表示 &lt;code&gt;kube-dns&lt;/code&gt; 这个 Service 的 ClusterIP，可以通过命令 &lt;code&gt;kubectl get svc -n kube-system | grep kube-dns | awk &amp;#39;{ print $3 }&amp;#39;&lt;/code&gt; 获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__LOCAL__DNS__&lt;/code&gt;：表示 DNSCache 本地的 IP，默认为 169.254.20.10&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__PILLAR__DNS__DOMAIN__&lt;/code&gt;：表示集群域，默认就是 cluster.local&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有两个参数 &lt;code&gt;__PILLAR__CLUSTER__DNS__&lt;/code&gt; 和 &lt;code&gt;__PILLAR__UPSTREAM__SERVERS__&lt;/code&gt;，这两个参数会通过镜像 1.15.6 版本以上的去进行配置，对应的值来源于 kube-dns 的 ConfigMap 和定制的 Upstream Server 配置。直接执行如下所示的命令即可安装：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed &lt;span class=&quot;string&quot;&gt;&#39;s/k8s.gcr.io/cnych/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__DNS__SERVER__/10.96.0.10/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__LOCAL__DNS__/169.254.20.10/g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s/__PILLAR__DNS__DOMAIN__/cluster.local/g&#39;&lt;/span&gt; nodelocaldns.yaml |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以通过如下命令来查看对应的 Pod 是否已经启动成功：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl get pods -n kube-system | grep node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-8zm2f                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-dd4xg                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-hs8qq                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-pxfxn                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-stjm9                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-wjxvz                    1/1     Running     0          9m54s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node-local-dns-wn5wc                    1/1     Running     0          7m49s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是这里使用 DaemonSet 部署 node-local-dns 使用了 &lt;code&gt;hostNetwork=true&lt;/code&gt;，会占用宿主机的 8080 端口，所以需要保证该端口未被占用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是到这里还没有完，如果 kube-proxy 组件使用的是 ipvs 模式的话我们还需要修改 kubelet 的 &lt;code&gt;--cluster-dns&lt;/code&gt; 参数，将其指向 &lt;code&gt;169.254.20.10&lt;/code&gt;，Daemonset 会在每个节点创建一个网卡来绑这个 IP，Pod 向本节点这个 IP 发 DNS 请求，缓存没有命中的时候才会再代理到上游集群 DNS 进行查询。 &lt;code&gt;iptables&lt;/code&gt; 模式下 Pod 还是向原来的集群 DNS 请求，节点上有这个 IP 监听，会被本机拦截，再请求集群上游 DNS，所以不需要更改 &lt;code&gt;--cluster-dns&lt;/code&gt; 参数。&lt;/p&gt;
&lt;h3 id=&quot;ipvs使用localDNS修改方式一&quot;&gt;&lt;a href=&quot;#ipvs使用localDNS修改方式一&quot; class=&quot;headerlink&quot; title=&quot;ipvs使用localDNS修改方式一&quot;&gt;&lt;/a&gt;ipvs使用localDNS修改方式一&lt;/h3&gt;&lt;p&gt;由于我这里使用的是 kubeadm 安装的 1.16 版本的集群，所以我们只需要替换节点上 &lt;code&gt;/var/lib/kubelet/config.yaml&lt;/code&gt; 文件中的 &lt;code&gt;clusterDNS&lt;/code&gt; 这个参数值，然后重启即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/10.96.0.10/169.254.20.10/g&#39;&lt;/span&gt; /var/lib/kubelet/config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;ipvs使用localDNS修改方式二-（不推荐）&quot;&gt;&lt;a href=&quot;#ipvs使用localDNS修改方式二-（不推荐）&quot; class=&quot;headerlink&quot; title=&quot;ipvs使用localDNS修改方式二 （不推荐）&quot;&gt;&lt;/a&gt;ipvs使用localDNS修改方式二 （不推荐）&lt;/h3&gt;&lt;p&gt;我们也可以完全在官方的 DaemonSet 资源对象中添加一个 initContainer 来完成这个工作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;initContainers:  &lt;span class=&quot;comment&quot;&gt;# ipvs模式下需要修改dns配置，重启kubelet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - name: setup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image: alpine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tty: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stdin: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    securityContext:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      privileged: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - nsenter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --mount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --uts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --ipc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --net&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - --&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - -c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# 确保 kubelet --cluster-dns 被设置为 169.254.20.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Configuring kubelet --cluster-dns=169.254.20.10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/10.96.0.10/169.254.20.10/g&#39;&lt;/span&gt; /var/lib/kubelet/config.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart kubelet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是需要注意的是对于线上环境还是不推荐用上面的方式，因为它会优先将 kubelet 的 &lt;code&gt;cluster-dns&lt;/code&gt; 参数进行修改，然后再去安装 NodeLocal，这中间毕竟有一段真空期。&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;p&gt;待 &lt;code&gt;node-local-dns&lt;/code&gt; 安装配置完成后，我们可以部署一个新的 Pod 来验证下：(test-node-local-dns.yaml)&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; test-node-local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  - name:&lt;/span&gt; local-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    image:&lt;/span&gt; busybox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    command:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sleep 60m&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接部署：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl apply &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-node-local-dns.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; -it &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;-node-local-dns /bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ &lt;span class=&quot;comment&quot;&gt;# cat /etc/resolv.conf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameserver 169.254.20.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search default.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到 &lt;code&gt;nameserver&lt;/code&gt; 已经变成 &lt;code&gt;169.254.20.10&lt;/code&gt; 了，当然对于之前的历史 Pod 要想使用 &lt;code&gt;node-local-dns&lt;/code&gt; 则需要重建，当然如果要想去跟踪 DNS 的解析过程的话可以去通过抓包来观察。&lt;/p&gt;
&lt;h2 id=&quot;番外篇&quot;&gt;&lt;a href=&quot;#番外篇&quot; class=&quot;headerlink&quot; title=&quot;番外篇&quot;&gt;&lt;/a&gt;番外篇&lt;/h2&gt;&lt;p&gt;在使用了&lt;code&gt;NodeLocal DNSCache&lt;/code&gt;后，如果在配置自定义域名？&lt;/p&gt;
&lt;p&gt;首先我们需要在 CoreDNS 的 ConfigMap 中添加 hosts 插件：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hosts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.211&lt;/span&gt; git.k8s.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fallthrough&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其次我们需要修改 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 的 ConfigMap，当前配置如下：&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cluster.local:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            success &lt;span class=&quot;number&quot;&gt;9984&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            denial &lt;span class=&quot;number&quot;&gt;9984&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    health &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in-addr.arpa:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip6.arpa:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.207&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.156&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bind &lt;span class=&quot;number&quot;&gt;169.254&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.20&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.96&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . /etc/resolv.conf &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :&lt;span class=&quot;number&quot;&gt;9253&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;分析上面的 LocalDNS 的配置信息，其中 &lt;code&gt;10.96.0.10&lt;/code&gt; 为 CoreDNS 的 Service ClusterIP，&lt;code&gt;169.254.20.10&lt;/code&gt; 为 LocalDNS 的 IP 地址，&lt;code&gt;10.96.207.156&lt;/code&gt; 是 LocalDNS 新建的一个 Service ClusterIP，该 Service 和 CoreDNS 一样都是关联以前的 CoreDNS 的 Endpoints 列表。&lt;/p&gt;
&lt;p&gt;仔细观察可以发现 &lt;code&gt;cluster.local&lt;/code&gt;、&lt;code&gt;in-addr.arpa&lt;/code&gt; 以及 &lt;code&gt;ip6.arpa&lt;/code&gt; 都会通过 forward 转发到 &lt;code&gt;10.96.207.156&lt;/code&gt;，也就是去 CoreDNS 解析，其他的则是 &lt;strong&gt;&lt;code&gt;forward . /etc/resolv.conf&lt;/code&gt;&lt;/strong&gt; 通过 &lt;code&gt;resolv.conf&lt;/code&gt; 文件去解析，该文件的内容如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameserver 169.254.20.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search default.svc.cluster.local svc.cluster.local cluster.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options ndots:5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以当我们解析域名 &lt;code&gt;git.k8s.local&lt;/code&gt; 的时候需要走一遍搜索域，而 &lt;code&gt;k8s.local&lt;/code&gt; 不在 &lt;code&gt;cluster.local&lt;/code&gt;、&lt;code&gt;in-addr.arpa&lt;/code&gt; 以及 &lt;code&gt;ip6.arpa&lt;/code&gt; 这些域中，所以就会走到 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 去解析。这样就会导致 &lt;code&gt;git.k8s.local&lt;/code&gt; 无法进行解析。这个时候我们需要把 &lt;code&gt;forward . /etc/resolv.conf&lt;/code&gt; 更改成 &lt;code&gt;forward . 10.96.207.156&lt;/code&gt;，这样就会去 CoreDNS 解析了，在 NodeLocalDNS 的 ConfigMap 中做如下的修改即可：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ kubectl edit cm node-local-dns -n kube-system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.:53 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cache 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; 169.254.20.10 10.96.0.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    forward . __PILLAR__CLUSTER__DNS__ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            force_tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prometheus :9253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样修改完成后，需要重建 NodeLocalDNS 的 Pod 才会生效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__PILLAR__CLUSTER__DNS__&lt;/code&gt; 和 &lt;code&gt;__PILLAR__UPSTREAM__SERVERS__&lt;/code&gt; 这两个参数在镜像 1.15.6 版本以上中会自动进行配置，对应的值来源于 kube-dns 的 ConfigMap 和定制的 Upstream Server 地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：明阳的博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;之前在解决 CoreDNS 的5秒超时问题的时候，除了通过 &lt;code&gt;dnsConfig&lt;/code&gt; 去强制使用 tcp 方式解析之外，我们提到过使用 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 来解决这个问题。&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 &lt;code&gt;ClusterFirst&lt;/code&gt; 的 DNS 模式下的 Pod 可以连接到 &lt;code&gt;kube-dns&lt;/code&gt; 的 serviceIP 进行 DNS 查询。通过 &lt;code&gt;kube-proxy&lt;/code&gt; 组件添加的 &lt;code&gt;iptables&lt;/code&gt; 规则将其转换为 &lt;code&gt;CoreDNS&lt;/code&gt; 端点。通过在每个集群节点上运行 DNS 缓存，&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 &lt;code&gt;kube-dns&lt;/code&gt; 的 DNS 查询次数。&lt;/p&gt;
&lt;p&gt;在集群中运行 NodeLocal DNSCache 有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果本地没有 CoreDNS 实例，则具有最高 DNS QPS 的 Pod 可能必须到另一个节点进行解析，使用 NodeLocal DNSCache 后，拥有本地缓存将有助于改善延迟&lt;/li&gt;
&lt;li&gt;跳过 iptables DNAT 和连接跟踪将有助于减少 &lt;code&gt;conntrack&lt;/code&gt; 竞争并避免 UDP DNS 条目填满 &lt;code&gt;conntrack&lt;/code&gt; 表（常见的5s超时问题就是这个原因造成的）&lt;/li&gt;
&lt;li&gt;从本地缓存代理到 kube-dns 服务的连接可以升级到 TCP，TCP conntrack 条目将在连接关闭时被删除，而 UDP 条目必须超时(&lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt&quot;&gt;默认 nf_conntrack_udp_timeout 是 30 秒&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;将 DNS 查询从 UDP 升级到 TCP 将减少归因于丢弃的 UDP 数据包和 DNS 超时的尾部等待时间，通常长达 30 秒（3 次重试+ 10 秒超时）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="kubrenetes" scheme="http://team.jiunile.com/categories/kubrenetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/categories/kubrenetes/coredns/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="coredns" scheme="http://team.jiunile.com/tags/coredns/"/>
    
      <category term="local dnscache" scheme="http://team.jiunile.com/tags/local-dnscache/"/>
    
  </entry>
  
  <entry>
    <title>Go 性能优化实战</title>
    <link href="http://team.jiunile.com//blog/2020/05/go-performance.html"/>
    <id>http://team.jiunile.com//blog/2020/05/go-performance.html</id>
    <published>2020-05-18T10:00:00.000Z</published>
    <updated>2020-09-02T03:28:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;网关服务作为统一接入服务，是大部分服务的统一入口。为了避免成功瓶颈，需要对其进行尽可能地优化。因此，特别总结一下 golang 后台服务性能优化的方式，并对网关服务进行优化。&lt;/p&gt;
&lt;p&gt;技术背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 tarsgo 框架的 http 接入服务，下游服务使用 tarsgo 协议进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能指标&quot;&gt;&lt;a href=&quot;#性能指标&quot; class=&quot;headerlink&quot; title=&quot;性能指标&quot;&gt;&lt;/a&gt;性能指标&lt;/h2&gt;&lt;p&gt;网关服务本身没有业务逻辑处理，仅作为统一入口进行请求转发，因此我们主要关注下列指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：每秒钟可以处理的请求数&lt;/li&gt;
&lt;li&gt;响应时间：从客户端发出请求，到收到回包的总耗时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定位瓶颈&quot;&gt;&lt;a href=&quot;#定位瓶颈&quot; class=&quot;headerlink&quot; title=&quot;定位瓶颈&quot;&gt;&lt;/a&gt;定位瓶颈&lt;/h2&gt;&lt;p&gt;一般后台服务的瓶颈主要为 CPU，内存，IO 操作中的一个或多个。若这三者的负载都不高，但系统吞吐量低，基本就是代码逻辑出问题了。&lt;/p&gt;
&lt;p&gt;在代码正常运行的情况下，我们要针对某个方面的高负载进行优化，才能提高系统的性能。golang 可通过 benchmark 加 pprof 来定位具体的性能瓶颈。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;benchmark-简介&quot;&gt;&lt;a href=&quot;#benchmark-简介&quot; class=&quot;headerlink&quot; title=&quot;benchmark 简介&quot;&gt;&lt;/a&gt;benchmark 简介&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -v gate_test.go -run=none -bench=. -benchtime=3s -cpuprofile cpu.prof -memprofile mem.prof&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;-run 知道单次测试，一般用于代码逻辑验证&lt;/li&gt;
&lt;li&gt;-bench=. 执行所有 Benchmark，也可以通过用例函数名来指定部分测试用例&lt;/li&gt;
&lt;li&gt;-benchtime 指定测试执行时长&lt;/li&gt;
&lt;li&gt;-cpuprofile 输出 cpu 的 pprof 信息文件&lt;/li&gt;
&lt;li&gt;-memprofile 输出 heap 的 pprof 信息文件。&lt;/li&gt;
&lt;li&gt;-blockprofile 阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置&lt;/li&gt;
&lt;li&gt;-mutexprofile 互斥锁分析，报告互斥锁的竞争情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;benchmark 测试用例常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b.ReportAllocs() 输出单次循环使用的内存数量和对象 allocs 信息&lt;/li&gt;
&lt;li&gt;b.RunParallel() 使用协程并发测试&lt;/li&gt;
&lt;li&gt;b.SetBytes(n int64) 设置单次循环使用的内存数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pprof-简介&quot;&gt;&lt;a href=&quot;#pprof-简介&quot; class=&quot;headerlink&quot; title=&quot;pprof 简介&quot;&gt;&lt;/a&gt;pprof 简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;生成方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runtime/pprof&lt;/code&gt;: 手动调用如&lt;code&gt;runtime.StartCPUProfile&lt;/code&gt;或者&lt;code&gt;runtime.StopCPUProfile&lt;/code&gt;等 API 来生成和写入采样文件，灵活性高。主要用于本地测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net/http/pprof&lt;/code&gt;: 通过 http 服务获取 Profile 采样文件，简单易用，适用于对应用程序的整体监控。通过 runtime/pprof 实现。主要用于服务器端测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test&lt;/code&gt;: 通过 &lt;code&gt;go test -bench . -cpuprofile cpuprofile.out&lt;/code&gt; 生成采样文件，主要用于本地基准测试。可用于重点测试某些函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查看方式&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof [options][binary] ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–text 纯文本&lt;/li&gt;
&lt;li&gt;–web 生成 svg 并用浏览器打开（如果 svg 的默认打开方式是浏览器)&lt;/li&gt;
&lt;li&gt;–svg 只生成 svg&lt;/li&gt;
&lt;li&gt;–list funcname 筛选出正则匹配 funcname 的函数的信息&lt;/li&gt;
&lt;li&gt;-http=”:port” 直接本地浏览器打开 profile 查看（包括 top，graph，火焰图等）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof -base profile1 profile2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对比查看 2 个 profile，一般用于代码修改前后对比，定位差异点。&lt;/p&gt;
&lt;p&gt;通过命令行方式查看 profile 时，可以在命令行对话中，使用下列命令，查看相关信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flat flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.95s 27.56% 27.56%      5.95s 27.56%  runtime.usleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.97s 23.02% 50.58%      5.08s 23.53%  sync.(*RWMutex).RLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.46s 20.66% 71.24%      4.46s 20.66%  sync.(*RWMutex).RUnlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.69s 12.46% 83.70%      2.69s 12.46%  runtime.pthread_cond_&lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.50s  6.95% 90.64%      1.50s  6.95%  runtime.pthread_cond_signal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lat&lt;/code&gt;: 采样时，该函数正在运行的次数*采样频率(10ms)，即得到估算的函数运行”采样时间”。这里不包括函数等待子函数返回。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flat%&lt;/code&gt;: flat / 总采样时间值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum%&lt;/code&gt;: 前面所有行的 flat% 的累加值，如第三行 sum% = 71.24% = 27.56% + 50.58%&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cum&lt;/code&gt;: 采样时，该函数出现在调用堆栈的采样时间，包括函数等待子函数返回。因此 flat &amp;lt;= cum&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cum%&lt;/code&gt;: cum / 总采样时间值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;topN [-cum]&lt;/code&gt; 查看前 N 个数据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list ncname&lt;/code&gt; 查看某个函数的详细信息，可以明确具体的资源（cpu，内存等）是由哪一行触发的。&lt;/p&gt;
&lt;h3 id=&quot;pprof-接入&quot;&gt;&lt;a href=&quot;#pprof-接入&quot; class=&quot;headerlink&quot; title=&quot;pprof 接入&quot;&gt;&lt;/a&gt;pprof 接入&lt;/h3&gt;&lt;p&gt;服务中 main 方法插入代码&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cfg := tars.GetServerConfig()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux := &amp;amp;tars.TarsHttpMux&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/&quot;&lt;/span&gt;, pprof.Index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/cmdline&quot;&lt;/span&gt;, pprof.Cmdline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/profile&quot;&lt;/span&gt;, pprof.Profile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/symbol&quot;&lt;/span&gt;, pprof.Symbol)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;profMux.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/debug/pprof/trace&quot;&lt;/span&gt;, pprof.Trace)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tars.AddHttpServant(profMux, cfg.App+&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;+cfg.Server+&lt;span class=&quot;string&quot;&gt;&quot;.ProfObj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看服务的-pprof&quot;&gt;&lt;a href=&quot;#查看服务的-pprof&quot; class=&quot;headerlink&quot; title=&quot;查看服务的 pprof&quot;&gt;&lt;/a&gt;查看服务的 pprof&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证开发机能直接访问到节点部署的 ip 和 port。&lt;/li&gt;
&lt;li&gt;查看 profile(http 地址中的 ip,port 为 ProfObj 的 ip 和 port)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载cpu profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/profile?seconds=120 &lt;span class=&quot;comment&quot;&gt;# 等待120s，不带此参数时等待30s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载heap profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/heap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载goroutine profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/goroutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载block profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载mutex profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://ip:port/debug/pprof/mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载20秒的trace记录（遇到棘手问题时，查看trace会比较容易定位)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; curl http://100.97.1.35:10078/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; go tool trace trace.out 查看&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;直接在终端中通过 pprof 命令查看&lt;/li&gt;
&lt;li&gt;sz 上面命令执行时出现的&lt;code&gt;Saved profile in /root/pprof/pprof.binary.alloc_objects.xxxxxxx.xxxx.pb.gz&lt;/code&gt;到本地 &lt;/li&gt;
&lt;li&gt;在本地环境，执行&lt;code&gt;go tool pprof -http=&amp;quot;:8081&amp;quot; pprof.binary.alloc_objects.xxxxxxx.xxxx.pb.gz&lt;/code&gt; 即可直接通过&lt;code&gt;http://localhost:8081&lt;/code&gt;页面查看。包括topN，火焰图信息等,会更方便一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GC-Trace&quot;&gt;&lt;a href=&quot;#GC-Trace&quot; class=&quot;headerlink&quot; title=&quot;GC Trace&quot;&gt;&lt;/a&gt;GC Trace&lt;/h3&gt;&lt;p&gt;golang 具备 GC 功能，而 GC 是最容易被忽视的性能影响因素。尤其是在本地使用 benchmark 测试时，由于时间较短，占用内存较少。往往不会触发 GC。而一旦线上出现 GC 问题，又不太好定位。目前常用的定位方式有两种：&lt;/p&gt;
&lt;h4 id=&quot;本地-gctrace&quot;&gt;&lt;a href=&quot;#本地-gctrace&quot; class=&quot;headerlink&quot; title=&quot;本地 gctrace&quot;&gt;&lt;/a&gt;本地 gctrace&lt;/h4&gt;&lt;p&gt;在执行程序前加 &lt;code&gt;GODEBUG=gctrace=1&lt;/code&gt;，每次 gc 时会输出一行如下内容&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc 1 @0.001s 11%: 0.007+1.5+0.004 ms clock, 0.089+1.5/2.8/0.27+0.054 ms cpu, 4-&amp;gt;4-&amp;gt;3 MB, 5 MB goal, 12 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scvg: inuse: 4, idle: 57, sys: 62, released: 57, consumed: 4 (MB)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也通过日志转为图形化：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GODEBUG=gctrace=1 godoc -index -http=:6060 2&amp;gt; stderr.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat stderr.log | gcvis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inuse：使用了多少 M 内存&lt;/li&gt;
&lt;li&gt;idle：剩下要清除的内存&lt;/li&gt;
&lt;li&gt;sys：系统映射的内存&lt;/li&gt;
&lt;li&gt;released：释放的系统内存&lt;/li&gt;
&lt;li&gt;consumed：申请的系统内存&lt;/li&gt;
&lt;li&gt;gc 1 表示第 1 次 gc&lt;/li&gt;
&lt;li&gt;@0.001s 表示程序执行的总时间&lt;/li&gt;
&lt;li&gt;11% 表示垃圾回收时间占用总的运行时间百分比&lt;/li&gt;
&lt;li&gt;0.007+1.5+0.004 ms clock 表示工作线程完成 GC 的 stop-the-world,sweeping,marking 和 waiting 的时间&lt;/li&gt;
&lt;li&gt;0.089+1.5/2.8/0.27+0.054 ms cpu 垃圾回收占用 cpu 时间&lt;/li&gt;
&lt;li&gt;4-&amp;gt;4-&amp;gt;3 MB 表示堆的大小，gc 后堆的大小，存活堆的大小&lt;/li&gt;
&lt;li&gt;5 MB goal 整体堆的大小&lt;/li&gt;
&lt;li&gt;12 P 使用的处理器数量&lt;/li&gt;
&lt;li&gt;scvg: inuse: 4, idle: 57, sys: 62, released: 57, consumed: 4 (MB) 表示系统内存回收信息&lt;/li&gt;
&lt;li&gt;采用图形化的方式查看：&lt;a href=&quot;https://github.com/davecheney/gcvis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/davecheney/gcvis&lt;/a&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GODEBUG=gctrace=1 go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -v *.go -bench=. -run=none -benchtime 3m |&amp;amp; gcvis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;线上-trace&quot;&gt;&lt;a href=&quot;#线上-trace&quot; class=&quot;headerlink&quot; title=&quot;线上 trace&quot;&gt;&lt;/a&gt;线上 trace&lt;/h4&gt;&lt;p&gt;在线上业务中添加&lt;strong&gt;net/http/pprof&lt;/strong&gt;后，可通过下列命令采集 20 秒的 trace 信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl http://ip:port/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再通过&lt;code&gt;go tool trace trace.out&lt;/code&gt; 即可在本地浏览器中查看 trace 信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_1.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View trace：查看跟踪&lt;/li&gt;
&lt;li&gt;Goroutine analysis：Goroutine 分析&lt;/li&gt;
&lt;li&gt;Network blocking profile：网络阻塞概况&lt;/li&gt;
&lt;li&gt;Synchronization blocking profile：同步阻塞概况&lt;/li&gt;
&lt;li&gt;Syscall blocking profile：系统调用阻塞概况&lt;/li&gt;
&lt;li&gt;Scheduler latency profile：调度延迟概况&lt;/li&gt;
&lt;li&gt;User defined tasks：用户自定义任务&lt;/li&gt;
&lt;li&gt;User defined regions：用户自定义区域&lt;/li&gt;
&lt;li&gt;Minimum mutator utilization：最低 Mutator 利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GC 相关的信息可以在 View trace 中看到&lt;br&gt;&lt;img src=&quot;/images/go/performance_2.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;可通过点击 heap 的色块区域，查看 heap 信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_3.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 GC 对应行的蓝色色块，查看 GC 耗时及相关回收信息。&lt;br&gt;&lt;img src=&quot;/images/go/performance_4.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过这两个信息就可以确认是否存在 GC 问题，以及造成高 GC 的可能原因。&lt;/p&gt;
&lt;h4 id=&quot;使用问题&quot;&gt;&lt;a href=&quot;#使用问题&quot; class=&quot;headerlink&quot; title=&quot;使用问题&quot;&gt;&lt;/a&gt;使用问题&lt;/h4&gt;&lt;p&gt;trace 的展示仅支持 chrome 浏览器。但是目前常用的 chrome 浏览器屏蔽了 go tool trace 使用的 HTML import 功能。即打开“view trace”时，会出现一片空白。并可以在 console 中看到警告信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTML Imports is deprecated and has now been removed as of M80. See https://www.chromestatus.com/features/5144752345317376 and https://developers.google.com/web/updates/2019/07/web-components-time-to-upgrade &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more details.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;申请 token&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.chrome.com/origintrials/#/register_trial/2431943798780067841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.chrome.com/origintrials/#/register_trial/2431943798780067841&lt;/a&gt; 然后登录&lt;/li&gt;
&lt;li&gt;web origin 处填写 &lt;a href=&quot;http://localhost:8001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8001&lt;/a&gt; 端口只能是 8000 - 8003，支持 http 和 https。（也可以填写 127.0.0.1:8001,依赖于你浏览器中显示的地址，否则对不上的话，还要手动改一下)&lt;br&gt;&lt;img src=&quot;/images/go/performance_5.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/li&gt;
&lt;li&gt;点击注册后即可看到 token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;修改 trace.go&lt;/strong&gt;&lt;br&gt;编辑&lt;code&gt;${GOROOT}/src/cmd/trace/trace.go&lt;/code&gt; 文件，在文件中找到 templTrace 然后在  标签的下一行添加&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;origin-trial&amp;quot; content=&amp;quot;你复制的token&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重新编译 go&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;${GOROOT}/src 目录，执行 ./all.bash&lt;/li&gt;
&lt;li&gt;若提示：&lt;code&gt;ERROR: Cannot find go1.4\bin\go Set GOROOT_BOOTSTRAP to a working Go tree &amp;gt;= Go 1.4&lt;/code&gt; 则需要先安装一个 go1.4 的版本，再通过它来编译 go。（下载链接&lt;a href=&quot;https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz）&lt;/a&gt; 在 &lt;code&gt;go1.4/src&lt;/code&gt; 下执行 &lt;code&gt;./make.bash&lt;/code&gt; . 指定 GOROOT_BOOTSTRAP 为 go1.4 的根目录。然后就可以重新编译 go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查看 trace&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool trace -http=localhost:8001 trace.out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若打开 view trace 还是空白,则检查一下浏览器地址栏中的地址，是否与注册时的一样。即注册用的 localhost 或 127.0.0.1 则地址栏中也要一样。&lt;/p&gt;
&lt;h2 id=&quot;常见性能瓶颈&quot;&gt;&lt;a href=&quot;#常见性能瓶颈&quot; class=&quot;headerlink&quot; title=&quot;常见性能瓶颈&quot;&gt;&lt;/a&gt;常见性能瓶颈&lt;/h2&gt;&lt;h3 id=&quot;业务逻辑&quot;&gt;&lt;a href=&quot;#业务逻辑&quot; class=&quot;headerlink&quot; title=&quot;业务逻辑&quot;&gt;&lt;/a&gt;业务逻辑&lt;/h3&gt;&lt;p&gt;出现无效甚至降低性能的逻辑。常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑重复：相同的操作在不同的位置做了多次或循环跳出的条件设置不当。&lt;/li&gt;
&lt;li&gt;资源未复用：内存频繁申请和释放，数据库链接频繁建立和销毁等。&lt;/li&gt;
&lt;li&gt;无效代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存储&lt;/h3&gt;&lt;p&gt;未选择恰当的存储方式，常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;临时数据存放到数据库中，导致频繁读写数据库。&lt;/li&gt;
&lt;li&gt;将复杂的树状结构的数据用 SQL 数据库存储，出现大量冗余列，并且在读写时要进行拆解和拼接。&lt;/li&gt;
&lt;li&gt;数据库表设计不当，无法有效利用索引查询，导致查询操作耗时高甚至出现大量慢查询。&lt;/li&gt;
&lt;li&gt;热点数据未使用缓存，导致数据库负载过高，响应速度下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;并发处理&quot;&gt;&lt;a href=&quot;#并发处理&quot; class=&quot;headerlink&quot; title=&quot;并发处理&quot;&gt;&lt;/a&gt;并发处理&lt;/h3&gt;&lt;p&gt;并发操作的问题主要出现在资源竞争上，常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁/活锁导致大量阻塞，性能严重下降。&lt;/li&gt;
&lt;li&gt;资源竞争激烈：大量的线程或协程抢夺一个锁。&lt;/li&gt;
&lt;li&gt;临界区过大：将不必要的操作也放入临界区，导致锁的释放速度过慢，引起其他线程或协程阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;golang-部分细节简介&quot;&gt;&lt;a href=&quot;#golang-部分细节简介&quot; class=&quot;headerlink&quot; title=&quot;golang 部分细节简介&quot;&gt;&lt;/a&gt;golang 部分细节简介&lt;/h2&gt;&lt;p&gt;在优化之前，我们需要对 golang 的实现细节有一个简单的了解，才能明白哪些地方有问题，哪些地方可以优化，以及怎么优化。以下内容的详细讲解建议查阅网上优秀的 blog。对语言的底层实现机制最好有个基本的了解，否则有时候掉到坑里都不知道为啥。&lt;/p&gt;
&lt;h3 id=&quot;协程调度&quot;&gt;&lt;a href=&quot;#协程调度&quot; class=&quot;headerlink&quot; title=&quot;协程调度&quot;&gt;&lt;/a&gt;协程调度&lt;/h3&gt;&lt;p&gt;Golang 调度是非抢占式多任务处理，由协程主动交出控制权。遇到如下条件时，才有可能交出控制权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O,select&lt;/li&gt;
&lt;li&gt;channel&lt;/li&gt;
&lt;li&gt;等待锁&lt;/li&gt;
&lt;li&gt;函数调用（是一个切换的机会，是否会切换由调度器决定）&lt;/li&gt;
&lt;li&gt;runtime.Gosched()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，若存在较长时间的 for 循环处理，并且循环内没有上述逻辑时，会阻塞住其他的协程调度。在实际编码中一定要注意。&lt;/p&gt;
&lt;h3 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h3&gt;&lt;p&gt;Go 为每个逻辑处理器（P）提供了一个称为mcache的本地内存线程缓存。每个 mcache 中持有 67 个级别的 mspan。每个 msapn 又包含两种：scan（包含指针的对象）和 noscan（不包含指针的对象）。&lt;strong&gt;在进行垃圾收集时，GC 无需遍历 noscan 对象&lt;/strong&gt;。&lt;br&gt;&lt;img src=&quot;/images/go/performance_6.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;GC-处理&quot;&gt;&lt;a href=&quot;#GC-处理&quot; class=&quot;headerlink&quot; title=&quot;GC 处理&quot;&gt;&lt;/a&gt;GC 处理&lt;/h3&gt;&lt;p&gt;GC 的工作就是确定哪些内存可以释放，它是通过扫描内存查找内存分配的指针来完成这个工作的。GC 触发时机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;到达堆阈值：默认情况下，它将在堆大小加倍时运行，可通过 GOGC 来设定更高阈值（不建议变更此配置）&lt;/li&gt;
&lt;li&gt;到达时间阈值：每两分钟会强制启动一次 GC 循环&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为啥要注意 GC，是因为 GC 时出现 2 次 Stop the world，即停止所有协程，进行扫描操作。若是 GC 耗时高，则会严重影响服务器性能。&lt;br&gt;&lt;img src=&quot;/images/go/performance_7.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;变量逃逸&quot;&gt;&lt;a href=&quot;#变量逃逸&quot; class=&quot;headerlink&quot; title=&quot;变量逃逸&quot;&gt;&lt;/a&gt;变量逃逸&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注意，golang 中的栈是跟函数绑定的，函数结束时栈被回收。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;变量内存回收：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果分配在栈中，则函数执行结束可自动将内存回收；&lt;/li&gt;
&lt;li&gt;如果分配在堆中，则函数执行结束可交给 GC（垃圾回收）处理；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而变量逃逸就意味着增加了堆中的对象个数，影响 GC 耗时。一般要尽量避免逃逸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃逸分析不变性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向栈对象的指针不能存在于堆中；&lt;/li&gt;
&lt;li&gt;指向栈对象的指针不能在栈对象回收后存活；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在逃逸分析过程中，凡是发现出现违反上述约定的变量，就将其移到堆中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逃逸常见的情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针逃逸：返回局部变量的地址（不变性 2）&lt;/li&gt;
&lt;li&gt;栈空间不足&lt;/li&gt;
&lt;li&gt;动态类型逃逸：如 fmt.Sprintf,json.Marshel 等接受变量为…interface{}函数的调用，会导致传入的变量逃逸。&lt;/li&gt;
&lt;li&gt;闭包引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;包含指针类型的底层结构&quot;&gt;&lt;a href=&quot;#包含指针类型的底层结构&quot; class=&quot;headerlink&quot; title=&quot;包含指针类型的底层结构&quot;&gt;&lt;/a&gt;包含指针类型的底层结构&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; StringHeader &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Data &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slice&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; SliceHeader &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Data &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Len  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Cap  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; hmap &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; count     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; flags     &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; B         &lt;span class=&quot;keyword&quot;&gt;uint8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; noverflow &lt;span class=&quot;keyword&quot;&gt;uint16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; hash0     &lt;span class=&quot;keyword&quot;&gt;uint32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; buckets    unsafe.Pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; oldbuckets unsafe.Pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; nevacuate  &lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extra *mapextra&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这些是常见会包含指针的对象。尤其是 string，在后台应用中大量出现。并经常会作为 map 的 key 或 value。若数据量较大时，就会引发 GC 耗时上升。同时，我们可以注意到 string 和 slice 非常相似，从某种意义上说它们之间是可以直接互相转换的。这就可以避免 string 和[]byte 之间类型转换时，进行内存拷贝&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型转换优化&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(*&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)(unsafe.Pointer(&amp;amp;b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Str2Bytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; []&lt;span class=&quot;title&quot;&gt;byte&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; x := (*[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;)(unsafe.Pointer(&amp;amp;s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; h := [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;uintptr&lt;/span&gt;&amp;#123;x[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *(*[]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;)(unsafe.Pointer(&amp;amp;h))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;性能测试方式&quot;&gt;&lt;a href=&quot;#性能测试方式&quot; class=&quot;headerlink&quot; title=&quot;性能测试方式&quot;&gt;&lt;/a&gt;性能测试方式&lt;/h2&gt;&lt;h3 id=&quot;本地测试&quot;&gt;&lt;a href=&quot;#本地测试&quot; class=&quot;headerlink&quot; title=&quot;本地测试&quot;&gt;&lt;/a&gt;本地测试&lt;/h3&gt;&lt;p&gt;将服务处理的核心逻辑，使用 go test 的 benchmark 加 pprof 来测试。建议上线前，就对整个业务逻辑的性能进行测试，提前优化瓶颈。&lt;/p&gt;
&lt;h3 id=&quot;线上测试&quot;&gt;&lt;a href=&quot;#线上测试&quot; class=&quot;headerlink&quot; title=&quot;线上测试&quot;&gt;&lt;/a&gt;线上测试&lt;/h3&gt;&lt;p&gt;一般 http 服务可以通过常见的测试工具进行压测，如 wrk，locust 等。taf 服务则需要我们自己编写一些测试脚本。同时，要注意的是，压测的目的是定位出服务的最佳性能，而不是盲目的高并发请求测试。因此，一般需要逐步提升并发请求数量，来定位出服务的最佳性能点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：由于 taf 平台具备扩容功能，因此为了更准确的测试，我们应该在测试前关闭要测试节点的自动扩容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实际项目优化&quot;&gt;&lt;a href=&quot;#实际项目优化&quot; class=&quot;headerlink&quot; title=&quot;实际项目优化&quot;&gt;&lt;/a&gt;实际项目优化&lt;/h2&gt;&lt;p&gt;为了避免影响后端服务，也为了避免后端服务影响网关自身。因此，我们需要在压测前，将对后端服务的调用屏蔽。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试准备：屏蔽远程调用：下游服务调用，健康度上报，统计上报，远程日志。以便关注网关自身性能。&lt;h3 id=&quot;QPS-现状&quot;&gt;&lt;a href=&quot;#QPS-现状&quot; class=&quot;headerlink&quot; title=&quot;QPS 现状&quot;&gt;&lt;/a&gt;QPS 现状&lt;/h3&gt;首先看下当前业务的性能指标，使用 wrk 压测网关服务&lt;br&gt;&lt;img src=&quot;/images/go/performance_8.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;可以看出，在总链接数为 70 的时候，QPS 最高，为 13245。&lt;h3 id=&quot;火焰图&quot;&gt;&lt;a href=&quot;#火焰图&quot; class=&quot;headerlink&quot; title=&quot;火焰图&quot;&gt;&lt;/a&gt;火焰图&lt;/h3&gt;&lt;img src=&quot;/images/go/performance_9.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;根据火焰图我们定位出 cpu 占比较高的几个方法为：&lt;/li&gt;
&lt;li&gt;json.Marshal&lt;/li&gt;
&lt;li&gt;json.Unmarshal&lt;/li&gt;
&lt;li&gt;rogger.Infof&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了方便测试，将代码改为本地运行，并通过 benchmark 的方式来对比修改前后的差异。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于正式环境使用的 golang 版本为 1.12，因此本地测试时，也要使用同样的版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;benchmark&quot;&gt;&lt;a href=&quot;#benchmark&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	50000000	      3669 ns/op	    4601 B/op	      73 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看 cpu 和 memory 的 profile，发现健康度上报的数据结构填充占比较高。这部分逻辑基于 tars 框架实现。暂时忽略，为避免影响其他测试，先注释掉。再看看 benchmark。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      3146 ns/op	    2069 B/op	      55 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;优化策略&quot;&gt;&lt;a href=&quot;#优化策略&quot; class=&quot;headerlink&quot; title=&quot;优化策略&quot;&gt;&lt;/a&gt;优化策略&lt;/h2&gt;&lt;h3 id=&quot;JSON-优化&quot;&gt;&lt;a href=&quot;#JSON-优化&quot; class=&quot;headerlink&quot; title=&quot;JSON 优化&quot;&gt;&lt;/a&gt;JSON 优化&lt;/h3&gt;&lt;p&gt;先查看 json 解析的部分，看看是否有优化空间&lt;/p&gt;
&lt;h4 id=&quot;请求处理&quot;&gt;&lt;a href=&quot;#请求处理&quot; class=&quot;headerlink&quot; title=&quot;请求处理&quot;&gt;&lt;/a&gt;请求处理&lt;/h4&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//RootHandle view.ReadReq2Json readJsonReq 中进行json解析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayReqBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayReqBodyHeader   &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; dataMap := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, &amp;amp;dataMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  headerMap, ok := header.(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  businessName, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;businessName&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  qua, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;qua&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sessionId, ok := headerMap[&lt;span class=&quot;string&quot;&gt;&quot;sessionId&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  payload, ok := dataMap[&lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  req.Payload, ok = payload.(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个函数本质上将 data 解析为 model.GatewayReqBody 类型的结构体。但是这里却存在 2 个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用了复杂的解析方式，先将 data 解析为 map，再通过每个字段的名字来取值，并进行类型转换。&lt;/li&gt;
&lt;li&gt;Req.Playload 解析为一个 map。但又未使用。我们看看后面这个 payload 是用来做啥。确认是否为无效代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;invokeTafServant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(resp http.ResponseWriter, gatewayHttpReq *model.GatewayHttpReq)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  payloadBytes, err := json.Marshal(gatewayHttpReq.ReqBody.Payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  commonReq.Payload = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(payloadBytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  responseData(gatewayHttpReq, StatusInternalServerError, &lt;span class=&quot;string&quot;&gt;&quot;封装json异常&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后续的使用中，我们可以看到，又将这个 payload 转为 string。因此，我们可以确定，上面的 json 解析是没有意义，同时也会浪费资源（payload 数据量一般不小）。&lt;/p&gt;
&lt;h4 id=&quot;优化方法&quot;&gt;&lt;a href=&quot;#优化方法&quot; class=&quot;headerlink&quot; title=&quot;优化方法&quot;&gt;&lt;/a&gt;优化方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;golang 自带的 json 解析性能较低，这里我们可以替换为github.com/json-iterator来提升性能&lt;/li&gt;
&lt;li&gt;在 golang 中，遇到不需要解析的 json 数据，可以将其类型声明为json.RawMessage. 即，可以将上述 2 个方法优化为&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayReqBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayReqBodyHeader &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload json.RawMessage      &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, req)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; jsonParseErr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; k, v := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; req.Header.Qua &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  req.Header.Qua[k] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(req.Header.QuaStr) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   req.Header.QuaStr = k + &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt; + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   req.Header.QuaStr += &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt; + k + &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt; + v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;invokeTafServant&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(resp http.ResponseWriter, gatewayHttpReq *model.GatewayHttpReq)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; commonReq.Payload = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(gatewayHttpReq.ReqBody.Payload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;这里注意！出现了 string 和[]byte 之间的类型转换.为了避免内存拷贝，这里将 string()改为上面的类型转换优化中所定义的转换函数，即 &lt;code&gt;commonReq.Payload = encode.String(gatewayHttpReq.ReqBody.Payload)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;回包处理&quot;&gt;&lt;a href=&quot;#回包处理&quot; class=&quot;headerlink&quot; title=&quot;回包处理&quot;&gt;&lt;/a&gt;回包处理&lt;/h4&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayRespBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayRespBodyHeader  &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;responseData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(gatewayReq *model.GatewayHttpReq, code &lt;span class=&quot;keyword&quot;&gt;int32&lt;/span&gt;, message &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, payload &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, resp http.ResponseWriter)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; jsonPayload := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(payload) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  err := json.Unmarshal([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(payload), &amp;amp;jsonPayload)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; body := model.GatewayRespBody&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Header: model.GatewayRespBodyHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Code:    code,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Message: message,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Payload: jsonPayload,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data, err := view.RenderResp(&lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &amp;amp;body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resp.WriteHeader(http.StatusOK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; resp.Write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，这里的 jsonPayload，也是出现了不必要的 json 解析。我们可以改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; GatewayRespBody &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Header  GatewayRespBodyHeader  &lt;span class=&quot;string&quot;&gt;`json:&quot;header&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Payload json.RawMessage &lt;span class=&quot;string&quot;&gt;`json:&quot;payload&quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body := model.GatewayRespBody&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Header: model.GatewayRespBodyHeader&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Code:    code,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Message: message,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Payload: encode.Str2Bytes(payload),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 view.RenderResp 方法中&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RenderResp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(format &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, resp &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt; == format &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; jsoniter.Marshal(resp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, errors.New(&lt;span class=&quot;string&quot;&gt;&quot;format error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-1&quot;&gt;&lt;a href=&quot;#benchmark-1&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      3326 ns/op	    2842 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然对象 alloc 减少了，但单次操作内存使用增加了，且性能下降了。这就有点奇怪了。我们来对比一下 2 个情况下的 pprof。&lt;/p&gt;
&lt;h3 id=&quot;逃逸分析及处理&quot;&gt;&lt;a href=&quot;#逃逸分析及处理&quot; class=&quot;headerlink&quot; title=&quot;逃逸分析及处理&quot;&gt;&lt;/a&gt;逃逸分析及处理&lt;/h3&gt;&lt;h4 id=&quot;go-tool-pprof-base&quot;&gt;&lt;a href=&quot;#go-tool-pprof-base&quot; class=&quot;headerlink&quot; title=&quot;go tool pprof -base&quot;&gt;&lt;/a&gt;go tool pprof -base&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;cpu 差异&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0.09s  1.17%  1.17%      0.40s  5.20%  runtime.mallocgc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0.01s  0.13%  1.30%      0.35s  4.55%  /vendor/github.com/json-iterator/go.(*Iterator).readObjectStart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 0      0%     1.30%      0.35s  4.55%  /vendor/github.com/json-iterator/go.(*twoFieldsStructDecoder).Decode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;mem 差异&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;478.96MB 20.33% 20.33%   279.94MB 11.88%  gateway.RootHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0     0% 20.33%   279.94MB 11.88%  &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;-line-arguments.BenchmarkTestHttp.func1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       0     0% 20.33%   279.94MB 11.88%  testing.(*B).RunParallel.func1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出 RootHandle 多了 478.96M 的内存使用。通过 list RootHandle 对比 2 个情况下的内存使用。发现修改后的 RootHandle 中多出了这一行：&lt;code&gt;475.46MB 475.46MB 158: gatewayHttpReq := model.GatewayHttpReq{}&lt;/code&gt; 这一般意味着变量 gatewayHttpReq 出现了逃逸。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go build -gcflags “-m -m” gateway/*.go&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gateway/logic.go:270:26: &amp;amp;gatewayHttpReq escapes to heap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到确实出现了逃逸。这个对应的代码为&lt;code&gt;err = view.ReadReq2Json(&amp;amp;gatewayHttpReq)&lt;/code&gt;,而造成逃逸的本质是因为上面改动了函数 readJsonReq（动态类型逃逸，即函数参数为 interface 类型，无法在编译时确定具体类型的）&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; err := jsoniter.Unmarshal(data, req)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，这里需要特殊处理一下，改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readJsonReq&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data []&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, req *model.GatewayReqBody)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tmp model.GatewayReqBody&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	err := jsoniter.Unmarshal(data, &amp;amp;tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-2&quot;&gt;&lt;a href=&quot;#benchmark-2&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	  500000	      2994 ns/op	    1892 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到堆内存使用明显下降。性能也提升了。再看一下 pprof，寻找下个瓶颈。&lt;/p&gt;
&lt;h4 id=&quot;cpu-profile&quot;&gt;&lt;a href=&quot;#cpu-profile&quot; class=&quot;headerlink&quot; title=&quot;cpu profile&quot;&gt;&lt;/a&gt;cpu profile&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/go/performance_10.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;抛开 responeseData(他内部主要是日志打印占比高），占比较高的为 util.GenerateSessionId，先来看看这个怎么优化。&lt;/p&gt;
&lt;h3 id=&quot;随机字符串生成&quot;&gt;&lt;a href=&quot;#随机字符串生成&quot; class=&quot;headerlink&quot; title=&quot;随机字符串生成&quot;&gt;&lt;/a&gt;随机字符串生成&lt;/h3&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; letterRunes = []&lt;span class=&quot;keyword&quot;&gt;rune&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandStringRunes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;rune&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; b &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b[i] = letterRunes[rand.Intn(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(letterRunes))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前的生成方式使用的类型是 rune，但其实用 byte 就够了。另外，letterRunes 是 62 个字符，即最大需要 6 位的 index 就可以遍历完成了。而随机数获取的是 63 位。即每个随机数，其实可以产生 10 个随机字符。而不用每个字符都获取一次随机数。所以我们改为&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterBytes   = &lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxBits = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxMask = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;letterIdxBits - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; letterIdxMax  = &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt; / letterIdxBits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RandStringRunes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; b := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, cache, remain := n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, rand.Int63(), letterIdxMax; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; remain == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cache, remain = rand.Int63(), letterIdxMax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; idx := &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(cache &amp;amp; letterIdxMask); idx &amp;lt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(letterBytes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b[i] = letterBytes[idx]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   i--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cache &amp;gt;&amp;gt;= letterIdxBits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  remain--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;benchmark-3&quot;&gt;&lt;a href=&quot;#benchmark-3&quot; class=&quot;headerlink&quot; title=&quot;benchmark&quot;&gt;&lt;/a&gt;benchmark&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Benchmark   	 1000000	      1487 ns/op	    1843 B/op	      50 allocs/op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;类型转换及字符串拼接&quot;&gt;&lt;a href=&quot;#类型转换及字符串拼接&quot; class=&quot;headerlink&quot; title=&quot;类型转换及字符串拼接&quot;&gt;&lt;/a&gt;类型转换及字符串拼接&lt;/h3&gt;&lt;p&gt;一般情况下，都会说将 string 和[]byte 的转换改为 unsafe；以及在字符串拼接时，用 byte.Buffer 代替 fmt.Sprintf。但是网关这里的情况比较特殊，字符串的操作基本集中在打印日志的操作。而 tars 的日志打印本身就是通过 byte.Buffer 拼接的。所以这可以避免。另外，由于日志打印量大，使用 unsafe 转换[]byte 为 string 带来的收益，往往会因为逃逸从而影响 GC，反正会影响性能。因此，不同的场景下，不能简单的套用一些优化方法。需要通过压测及结果分析来判断具体的优化策略。&lt;/p&gt;
&lt;h2 id=&quot;优化结果&quot;&gt;&lt;a href=&quot;#优化结果&quot; class=&quot;headerlink&quot; title=&quot;优化结果&quot;&gt;&lt;/a&gt;优化结果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/go/performance_11.png&quot; alt=&quot;go performance analysis&quot;&gt;&lt;br&gt;可以看到优化后，最大链接数为 110，最高 QPS 为&lt;strong&gt;21153.35&lt;/strong&gt;。对比之前的&lt;strong&gt;13245&lt;/strong&gt;，大约提升 60%。&lt;/p&gt;
&lt;h2 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;p&gt;从 pprof 中可以看到日志打印，远程日志，健康上报等信息占用较多 cpu 资源，且导致多个数据逃逸（尤其是日志打印）。过多的日志基本等于没有日志。后续可考虑裁剪日志，仅保留出错时的上下文信息。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;性能查看工具 pprof,trace 及压测工具 wrk 或其他压测工具的使用要比较了解。&lt;/li&gt;
&lt;li&gt;代码逻辑层面的走读非常重要，要尽量避免无效逻辑。&lt;/li&gt;
&lt;li&gt;对于 golang 自身库存在缺陷的，可以寻找第三方库或自己改造。&lt;/li&gt;
&lt;li&gt;golang 版本尽量更新，这次的测试是在 golang1.12 下进行的。而 go1.13 甚至 go1.14 在很多地方进行了改进。比如 fmt.Sprintf，sync.Pool 等。替换成新版本应该能进一步提升性能。&lt;/li&gt;
&lt;li&gt;本地 benchmark 结果不等于线上运行结果。尤其是在使用缓存来提高处理速度时，要考虑 GC 的影响。&lt;/li&gt;
&lt;li&gt;传参数或返回值时，尽量按 golang 的设计哲学，少用指针，多用值对象，避免引起过多的变量逃逸，导致 GC 耗时暴涨。struct 的大小一般在 2K 以下的拷贝传值，比使用指针要快（可针对不同的机器压测，判断各自的阈值)。&lt;/li&gt;
&lt;li&gt;值类型在满足需要的情况下，越小越好。能用 int8，就不要用 int64。&lt;/li&gt;
&lt;li&gt;资源尽量复用,在 golang1.13 以上，可以考虑使用 sync.Pool 缓存会重复申请的内存或对象。或者自己使用并管理大块内存，用来存储小对象，避免 GC 影响（如本地缓存的场景)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐阅读: &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxMTA4Njc0OQ==&amp;amp;mid=2651439020&amp;amp;idx=1&amp;amp;sn=c2094f4dccb53385dc207958e7f42f9e&amp;amp;chksm=80bb615eb7cce8481eb7a8f09d4a13e2974b3785c241dd31245647cd7540dde414d64f2b3719&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;滴滴实战分享：通过 profiling 定位 golang 性能问题 - 内存篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来源：trumanyan&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;网关服务作为统一接入服务，是大部分服务的统一入口。为了避免成功瓶颈，需要对其进行尽可能地优化。因此，特别总结一下 golang 后台服务性能优化的方式，并对网关服务进行优化。&lt;/p&gt;
&lt;p&gt;技术背景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 tarsgo 框架的 http 接入服务，下游服务使用 tarsgo 协议进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能指标&quot;&gt;&lt;a href=&quot;#性能指标&quot; class=&quot;headerlink&quot; title=&quot;性能指标&quot;&gt;&lt;/a&gt;性能指标&lt;/h2&gt;&lt;p&gt;网关服务本身没有业务逻辑处理，仅作为统一入口进行请求转发，因此我们主要关注下列指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吞吐量：每秒钟可以处理的请求数&lt;/li&gt;
&lt;li&gt;响应时间：从客户端发出请求，到收到回包的总耗时&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定位瓶颈&quot;&gt;&lt;a href=&quot;#定位瓶颈&quot; class=&quot;headerlink&quot; title=&quot;定位瓶颈&quot;&gt;&lt;/a&gt;定位瓶颈&lt;/h2&gt;&lt;p&gt;一般后台服务的瓶颈主要为 CPU，内存，IO 操作中的一个或多个。若这三者的负载都不高，但系统吞吐量低，基本就是代码逻辑出问题了。&lt;/p&gt;
&lt;p&gt;在代码正常运行的情况下，我们要针对某个方面的高负载进行优化，才能提高系统的性能。golang 可通过 benchmark 加 pprof 来定位具体的性能瓶颈。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="性能" scheme="http://team.jiunile.com/categories/golang/%E6%80%A7%E8%83%BD/"/>
    
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/tags/pprof/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="gc" scheme="http://team.jiunile.com/tags/gc/"/>
    
      <category term="benchmark" scheme="http://team.jiunile.com/tags/benchmark/"/>
    
  </entry>
  
  <entry>
    <title>调试golang的bug以及性能问题的实践方法</title>
    <link href="http://team.jiunile.com//blog/2020/05/go-debug-practice.html"/>
    <id>http://team.jiunile.com//blog/2020/05/go-debug-practice.html</id>
    <published>2020-05-11T10:00:00.000Z</published>
    <updated>2020-09-02T03:29:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;场景1：-如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;a href=&quot;#场景1：-如何分析程序的运行时间与CPU利用率情况？&quot; class=&quot;headerlink&quot; title=&quot;场景1： 如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;/a&gt;场景1： 如何分析程序的运行时间与CPU利用率情况？&lt;/h2&gt;&lt;h3 id=&quot;shell内置time指令&quot;&gt;&lt;a href=&quot;#shell内置time指令&quot; class=&quot;headerlink&quot; title=&quot;shell内置time指令&quot;&gt;&lt;/a&gt;shell内置time指令&lt;/h3&gt;&lt;p&gt;这个方法不算新颖，但是确很实用。 time是Unix/Linux内置多命令，使用时一般不用传过多参数，直接跟上需要调试多程序即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;&amp;#123;&amp;#123;0 0&amp;#125; 张三 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;real    0m0.843s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.216s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys 0m0.389s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是使用time对 &lt;code&gt;go run test2.go&lt;/code&gt; 对执行程序坐了性能分析，得到3个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt;：从程序开始到结束，实际度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;：程序在用户态度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys&lt;/code&gt;：程序在内核态度过的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下 &lt;code&gt;real&lt;/code&gt; &amp;gt;= &lt;code&gt;user&lt;/code&gt; + &lt;code&gt;sys&lt;/code&gt;，因为系统还有其它进程(切换其他进程中间对于本进程回有空白期)。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;usr-bin-time指令&quot;&gt;&lt;a href=&quot;#usr-bin-time指令&quot; class=&quot;headerlink&quot; title=&quot;/usr/bin/time指令&quot;&gt;&lt;/a&gt;/usr/bin/time指令&lt;/h3&gt;&lt;p&gt;这个指令比内置的time更加详细一些，使用的时候需要用绝对路径，而且要加上参数 &lt;code&gt;-v&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ /usr/bin/time -v go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Command being timed: &lt;span class=&quot;string&quot;&gt;&quot;go run test2.go&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    User time (seconds): 0.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System time (seconds): 0.06&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Percent of CPU this job got: 115%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Elapsed (wall clock) time (h:mm:ss or m:ss): 0:00.16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average shared text size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average unshared data size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average stack size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average total size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Maximum resident &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; size (kbytes): 41172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Average resident &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; size (kbytes): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Major (requiring I/O) page faults: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Minor (reclaiming a frame) page faults: 15880&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Voluntary context switches: 897&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Involuntary context switches: 183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Swaps: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File system inputs: 256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File system outputs: 2664&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Socket messages sent: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Socket messages received: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Signals delivered: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Page size (bytes): 4096&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Exit status: 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到这里的功能要强大多了，除了之前的信息外，还包括了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU占用率；&lt;/li&gt;
&lt;li&gt;内存使用情况；&lt;/li&gt;
&lt;li&gt;Page Fault 情况；&lt;/li&gt;
&lt;li&gt;进程切换情况；&lt;/li&gt;
&lt;li&gt;文件系统IO；&lt;/li&gt;
&lt;li&gt;Socket 使用情况；&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;场景2：-如何分析golang程序的内存使用情况？&quot;&gt;&lt;a href=&quot;#场景2：-如何分析golang程序的内存使用情况？&quot; class=&quot;headerlink&quot; title=&quot;场景2： 如何分析golang程序的内存使用情况？&quot;&gt;&lt;/a&gt;场景2： 如何分析golang程序的内存使用情况？&lt;/h2&gt;&lt;h3 id=&quot;内存占用情况查看&quot;&gt;&lt;a href=&quot;#内存占用情况查看&quot; class=&quot;headerlink&quot; title=&quot;内存占用情况查看&quot;&gt;&lt;/a&gt;内存占用情况查看&lt;/h3&gt;&lt;p&gt;我们先写一段demo例子代码&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;Start.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;force gc.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot;Done.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$go&lt;/span&gt; build -o snippet_mem &amp;amp;&amp;amp; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在./snippet_mem进程没有执行完，我们再开一个窗口，通过 &lt;code&gt;top&lt;/code&gt; 命令查看进程的内存占用情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$top&lt;/span&gt; -p $(pidof snippet_mem)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;得到结果如下：&lt;br&gt;&lt;img src=&quot;/images/go/godebug_1.png&quot; alt=&quot;go debug top&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们看出来，没有退出的snippet_mem进程有约830m的内存被占用。&lt;/p&gt;
&lt;p&gt;直观上来说，这个程序在 &lt;code&gt;test()&lt;/code&gt; 函数执行完后，切片 &lt;code&gt;contaner&lt;/code&gt; 的内存应该被释放，不应该占用830M那么大。&lt;/p&gt;
&lt;p&gt;下面让我们使用GODEBUG来分析程序的内存使用情况。&lt;/p&gt;
&lt;h3 id=&quot;GODEBUG与gctrace&quot;&gt;&lt;a href=&quot;#GODEBUG与gctrace&quot; class=&quot;headerlink&quot; title=&quot;GODEBUG与gctrace&quot;&gt;&lt;/a&gt;GODEBUG与gctrace&lt;/h3&gt;&lt;h4 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;snippet_mem&lt;/code&gt;程序之前添加环境变量&lt;code&gt;GODEBUG=&amp;#39;gctrace=1&amp;#39;&lt;/code&gt;来跟踪打印垃圾回收器信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GODEBUG=&lt;span class=&quot;string&quot;&gt;&#39;gctrace=1&#39;&lt;/span&gt; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;gctrace=1&lt;/code&gt;会使得垃圾回收器在每次回收时汇总所回收内存的大小以及耗时，&lt;br&gt;并将这些内容汇总成单行内容打印到标准错误输出中。&lt;/p&gt;
&lt;h4 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc &lt;span class=&quot;comment&quot;&gt;# @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;含义&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc &lt;span class=&quot;comment&quot;&gt;#        GC次数的编号，每次GC时递增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;comment&quot;&gt;#s         距离程序开始执行时的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#%          GC占用的执行时间百分比&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#+...+#     GC使用的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-&amp;gt;#-&amp;gt;# MB  GC开始，结束，以及当前活跃堆内存的大小，单位M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MB goal   全局堆内存大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# P         使用processor的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果每条信息最后，以&lt;code&gt;(forced)&lt;/code&gt;结尾，那么该信息是由&lt;code&gt;runtime.GC()&lt;/code&gt;调用触发&lt;/p&gt;
&lt;p&gt;我们来选择其中一行来解释一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gc 17 @0.149s 1%: 0.004+36+0.003 ms clock, 0.009+0/0.051/36+0.006 ms cpu, 181-&amp;gt;181-&amp;gt;101 MB, 182 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该条信息含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gc 17&lt;/code&gt;: Gc 调试编号为17&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@0.149s&lt;/code&gt;: 此时程序已经执行了0.149s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1%&lt;/code&gt;: 0.149s中其中gc模块占用了1%的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.004+36+0.003 ms clock&lt;/code&gt;: 垃圾回收的时间，分别为STW（stop-the-world）清扫的时间+并发标记和扫描的时间+STW标记的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.009+0/0.051/36+0.006 ms cpu&lt;/code&gt;: 垃圾回收占用cpu时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;181-&amp;gt;181-&amp;gt;101 MB&lt;/code&gt;: GC开始前堆内存181M， GC结束后堆内存181M，当前活跃的堆内存101M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;182 MB goal&lt;/code&gt;: 全局堆内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 P&lt;/code&gt;: 本次GC使用了2个P(调度器中的Processer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了GC的调试信息读法后，接下来我们来分析一下本次GC的结果。&lt;/p&gt;
&lt;p&gt;我们还是执行GODEBUG调试&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ GODEBUG=&lt;span class=&quot;string&quot;&gt;&#39;gctrace=1&#39;&lt;/span&gt; ./snippet_mem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果如下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:37 Start.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:37  ===&amp;gt; loop begin.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 1 @0.002s 5%: 0.14+0.45+0.002 ms clock, 0.29+0/0.042/0.33+0.005 ms cpu, 4-&amp;gt;4-&amp;gt;0 MB, 5 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 2 @0.003s 4%: 0.13+3.7+0.019 ms clock, 0.27+0/0.037/2.8+0.038 ms cpu, 4-&amp;gt;4-&amp;gt;2 MB, 5 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 3 @0.008s 3%: 0.002+1.1+0.001 ms clock, 0.005+0/0.083/1.0+0.003 ms cpu, 6-&amp;gt;6-&amp;gt;2 MB, 7 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 4 @0.010s 3%: 0.003+0.99+0.002 ms clock, 0.006+0/0.041/0.82+0.004 ms cpu, 5-&amp;gt;5-&amp;gt;2 MB, 6 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 5 @0.011s 4%: 0.079+0.80+0.003 ms clock, 0.15+0/0.046/0.51+0.006 ms cpu, 6-&amp;gt;6-&amp;gt;3 MB, 7 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 6 @0.013s 4%: 0.15+3.7+0.002 ms clock, 0.31+0/0.061/3.3+0.005 ms cpu, 8-&amp;gt;8-&amp;gt;8 MB, 9 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 7 @0.019s 3%: 0.004+2.5+0.005 ms clock, 0.008+0/0.051/2.1+0.010 ms cpu, 20-&amp;gt;20-&amp;gt;6 MB, 21 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 8 @0.023s 5%: 0.014+3.7+0.002 ms clock, 0.029+0.040/1.2/0+0.005 ms cpu, 15-&amp;gt;15-&amp;gt;8 MB, 16 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 9 @0.031s 4%: 0.003+1.6+0.001 ms clock, 0.007+0.094/0/0+0.003 ms cpu, 19-&amp;gt;19-&amp;gt;10 MB, 20 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 10 @0.034s 3%: 0.006+5.2+0.004 ms clock, 0.013+0/0.045/5.0+0.008 ms cpu, 24-&amp;gt;24-&amp;gt;13 MB, 25 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 11 @0.040s 3%: 0.12+2.6+0.002 ms clock, 0.24+0/0.043/2.5+0.004 ms cpu, 30-&amp;gt;30-&amp;gt;16 MB, 31 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 12 @0.043s 3%: 0.11+4.4+0.002 ms clock, 0.23+0/0.044/4.1+0.005 ms cpu, 38-&amp;gt;38-&amp;gt;21 MB, 39 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 13 @0.049s 3%: 0.008+10+0.040 ms clock, 0.017+0/0.045/10+0.080 ms cpu, 47-&amp;gt;47-&amp;gt;47 MB, 48 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 14 @0.070s 2%: 0.004+12+0.002 ms clock, 0.008+0/0.062/12+0.005 ms cpu, 122-&amp;gt;122-&amp;gt;41 MB, 123 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 15 @0.084s 2%: 0.11+11+0.038 ms clock, 0.22+0/0.064/3.9+0.076 ms cpu, 93-&amp;gt;93-&amp;gt;93 MB, 94 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 16 @0.122s 1%: 0.005+25+0.010 ms clock, 0.011+0/0.12/24+0.021 ms cpu, 238-&amp;gt;238-&amp;gt;80 MB, 239 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 17 @0.149s 1%: 0.004+36+0.003 ms clock, 0.009+0/0.051/36+0.006 ms cpu, 181-&amp;gt;181-&amp;gt;101 MB, 182 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 18 @0.187s 1%: 0.12+19+0.004 ms clock, 0.25+0/0.049/19+0.008 ms cpu, 227-&amp;gt;227-&amp;gt;126 MB, 228 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 19 @0.207s 1%: 0.096+27+0.004 ms clock, 0.19+0/0.077/0.73+0.009 ms cpu, 284-&amp;gt;284-&amp;gt;284 MB, 285 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 20 @0.287s 0%: 0.005+944+0.040 ms clock, 0.011+0/0.048/1.3+0.081 ms cpu, 728-&amp;gt;728-&amp;gt;444 MB, 729 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38  ===&amp;gt; loop end.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38 force gc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 21 @1.236s 0%: 0.004+0.099+0.001 ms clock, 0.008+0/0.018/0.071+0.003 ms cpu, 444-&amp;gt;444-&amp;gt;0 MB, 888 MB goal, 2 P (forced)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 11:22:38 Done.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 22 @122.455s 0%: 0.010+0.15+0.003 ms clock, 0.021+0/0.025/0.093+0.007 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 23 @242.543s 0%: 0.007+0.075+0.002 ms clock, 0.014+0/0.022/0.085+0.004 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 24 @362.545s 0%: 0.018+0.19+0.006 ms clock, 0.037+0/0.055/0.15+0.013 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 25 @482.548s 0%: 0.012+0.25+0.005 ms clock, 0.025+0/0.025/0.11+0.010 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 26 @602.551s 0%: 0.009+0.10+0.003 ms clock, 0.018+0/0.021/0.075+0.006 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 27 @722.554s 0%: 0.012+0.30+0.005 ms clock, 0.025+0/0.15/0.22+0.011 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GC forced&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc 28 @842.556s 0%: 0.027+0.18+0.003 ms clock, 0.054+0/0.11/0.14+0.006 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 2 P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h4&gt;&lt;p&gt;先看在&lt;code&gt;test()&lt;/code&gt;函数执行完后立即打印的&lt;code&gt;gc 21&lt;/code&gt;那行的信息。&lt;code&gt;444-&amp;gt;444-&amp;gt;0 MB, 888 MB goal&lt;/code&gt;表示垃圾回收器已经把&lt;code&gt;444M&lt;/code&gt;的内存标记为非活跃的内存。&lt;/p&gt;
&lt;p&gt;再看下一个记录&lt;code&gt;gc 22。0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal&lt;/code&gt;表示垃圾回收器中的全局堆内存大小由&lt;code&gt;888M&lt;/code&gt;下降为&lt;code&gt;4M&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在test()函数执行完后，demo程序中的切片容器所申请的堆空间都被垃圾回收器回收了&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果此时在&lt;code&gt;top&lt;/code&gt;指令查询内存的时候，如果依然先死800+MB，说明&lt;strong&gt;垃圾回收器回收了应用层的内存后，（可能）并不会立即将内存归还给系统&lt;/strong&gt;。具体分析原因可见：&lt;a href=&quot;https://segmentfault.com/a/1190000022472459&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;踩坑记：go服务内存暴涨&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;runtime-ReadMemStats&quot;&gt;&lt;a href=&quot;#runtime-ReadMemStats&quot; class=&quot;headerlink&quot; title=&quot;runtime.ReadMemStats&quot;&gt;&lt;/a&gt;runtime.ReadMemStats&lt;/h3&gt;&lt;p&gt;接下来我么换另一种方式查看内存的方式 利用 runtime库里的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// demo2.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readMemStats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ms runtime.MemStats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.ReadMemStats(&amp;amp;ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&quot;&lt;/span&gt;, ms.Alloc, ms.HeapIdle, ms.HeapReleased)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( i == &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Start].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [force gc].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Done].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们， 封装了一个函数&lt;code&gt;readMemStats()&lt;/code&gt;，这里面主要是调用&lt;code&gt;runtime&lt;/code&gt;中的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法获得内存信息，然后通过&lt;code&gt;log&lt;/code&gt;打印出来。&lt;/p&gt;
&lt;p&gt;我们执行一下代码并运行:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go run demo2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; [Start].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; Alloc:71280(bytes) HeapIdle:66633728(bytes) HeapReleased:66600960(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:17  ===&amp;gt; loop begin.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:18  ===&amp;gt; Alloc:132535744(bytes) HeapIdle:336756736(bytes) HeapReleased:155721728(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; loop end.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:598300600(bytes) HeapIdle:609181696(bytes) HeapReleased:434323456(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; [force gc].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; [Done].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:55840(bytes) HeapIdle:1207427072(bytes) HeapReleased:434266112(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:38  ===&amp;gt; Alloc:56656(bytes) HeapIdle:1207394304(bytes) HeapReleased:434266112(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:48  ===&amp;gt; Alloc:56912(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:21:58  ===&amp;gt; Alloc:57488(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2020/03/02 18:22:08  ===&amp;gt; Alloc:57616(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2020/03/02 18:22:18  ===&amp;gt; Alloc:57744(bytes) HeapIdle:1207394304(bytes) HeapReleased:1206493184(by&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，打印&lt;code&gt;[Done].&lt;/code&gt;之后那条trace信息，Alloc已经下降，即内存已被垃圾回收器回收。在&lt;code&gt;2020/03/02 18:21:38&lt;/code&gt;和&lt;code&gt;2020/03/02 18:21:48&lt;/code&gt;的两条trace信息中，HeapReleased开始上升，即垃圾回收器把内存归还给系统。&lt;/p&gt;
&lt;p&gt;另外，MemStats还可以获取其它哪些信息以及字段的含义可以参见官方文档：&lt;a href=&quot;http://golang.org/pkg/runtime/#MemStats&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://golang.org/pkg/runtime/#MemStats&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pprof工具&quot;&gt;&lt;a href=&quot;#pprof工具&quot; class=&quot;headerlink&quot; title=&quot;pprof工具&quot;&gt;&lt;/a&gt;pprof工具&lt;/h3&gt;&lt;p&gt;pprof工具支持网页上查看内存的使用情况，需要在代码中添加一个协程即可。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体添加的完整代码如下：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//demo3.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;readMemStats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ms runtime.MemStats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.ReadMemStats(&amp;amp;ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Printf(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&quot;&lt;/span&gt;, ms.Alloc, ms.HeapIdle, ms.HeapReleased)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    container := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(container, i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( i == &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Println(http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Start].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [force gc].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runtime.GC() &lt;span class=&quot;comment&quot;&gt;//强制调用gc回收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; [Done].&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            readMemStats()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.Sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt; * time.Second) &lt;span class=&quot;comment&quot;&gt;//睡眠，保持程序不退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们正常运行程序，然后同时打开浏览器，&lt;/p&gt;
&lt;p&gt;输入地址：&lt;a href=&quot;http://127.0.0.1:10000/debug/pprof/heap?debug=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:10000/debug/pprof/heap?debug=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;浏览器的内容其中有一部分如下，记录了目前的内存情况&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# runtime.MemStats&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Alloc = 228248&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# TotalAlloc = 1293696976&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Sys = 834967896&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Lookups = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Mallocs = 2018&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Frees = 671&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapAlloc = 228248&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapSys = 804913152&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapIdle = 804102144&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapInuse = 811008&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapReleased = 108552192&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# HeapObjects = 1347&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Stack = 360448 / 360448&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MSpan = 28288 / 32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# MCache = 3472 / 16384&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# BuckHashSys = 1449617&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# GCSys = 27418976&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# OtherSys = 776551&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# NextGC = 4194304&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LastGC = 1583203571137891390&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景3-如何分析Golang程序的CPU性能情况？&quot;&gt;&lt;a href=&quot;#场景3-如何分析Golang程序的CPU性能情况？&quot; class=&quot;headerlink&quot; title=&quot;场景3: 如何分析Golang程序的CPU性能情况？&quot;&gt;&lt;/a&gt;场景3: 如何分析Golang程序的CPU性能情况？&lt;/h2&gt;&lt;h3 id=&quot;性能分析注意事项&quot;&gt;&lt;a href=&quot;#性能分析注意事项&quot; class=&quot;headerlink&quot; title=&quot;性能分析注意事项&quot;&gt;&lt;/a&gt;性能分析注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;性能分析必须在一个可重复的、稳定的环境中来进行。&lt;/li&gt;
&lt;li&gt;机器必须闲置&lt;ul&gt;
&lt;li&gt;不要在共享硬件上进行性能分析;&lt;/li&gt;
&lt;li&gt;不要在性能分析期间，在同一个机器上去浏览网页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意省电模式和过热保护，如果突然进入这些模式，会导致分析数据严重不准确&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要使用虚拟机、共享的云主机&lt;/strong&gt;，太多干扰因素，分析数据会很不一致&lt;/li&gt;
&lt;li&gt;不要在 macOS 10.11 及以前的版本运行性能分析，有 bug，之后的版本修复了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果承受得起，购买专用的性能测试分析的硬件设备，上架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭电源管理、过热管理&lt;/li&gt;
&lt;li&gt;绝不要升级，以保证测试的一致性，以及具有可比性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有这样的环境，那就一定要在多个环境中，执行多次，以取得可参考的、具有相对一致性的测试结果。&lt;/p&gt;
&lt;h3 id=&quot;CPU性能分析&quot;&gt;&lt;a href=&quot;#CPU性能分析&quot; class=&quot;headerlink&quot; title=&quot;CPU性能分析&quot;&gt;&lt;/a&gt;CPU性能分析&lt;/h3&gt;&lt;p&gt;我们来用下面的代码进行测试&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//demo4.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop begin.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Println(genSomeBytes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log.Println(&lt;span class=&quot;string&quot;&gt;&quot; ===&amp;gt; loop end.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//生成一个随机字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;genSomeBytes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;bytes&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buff bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buff.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(rand.Intn(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;buff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            test()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            time.Sleep(time.Second * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面还是启动了pprof的坚挺,有关&lt;code&gt;pprof&lt;/code&gt;启动的代码如下:&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _ &lt;span class=&quot;string&quot;&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//启动pprof&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0:10000&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main()&lt;/code&gt;里的流程很简单,启动一个goroutine去无限循环调用&lt;code&gt;test()&lt;/code&gt;方法,休眠1s.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test()&lt;/code&gt;的流程是生成1000个20000个字符的随机字符串.并且打印.&lt;/p&gt;
&lt;p&gt;我们将上面的代码编译成可执行的二进制文件 &lt;code&gt;demo4&lt;/code&gt;(记住这个名字,稍后我们能用到)&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go build demo4.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们启动程序,程序会无限循环的打印字符串.&lt;/p&gt;
&lt;p&gt;接下来我们通过几种方式来查看进程的cpu性能情况.&lt;/p&gt;
&lt;h4 id=&quot;A-Web界面查看&quot;&gt;&lt;a href=&quot;#A-Web界面查看&quot; class=&quot;headerlink&quot; title=&quot;A. Web界面查看&quot;&gt;&lt;/a&gt;A. Web界面查看&lt;/h4&gt;&lt;p&gt;浏览器访问: &lt;a href=&quot;http://127.0.0.1:10000/debug/pprof/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1:10000/debug/pprof/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们会看到如下画面&lt;br&gt;&lt;img src=&quot;/images/go/godebug_2.png&quot; alt=&quot;go pprof web&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里面能够通过pprof查看包括(阻塞信息、cpu信息、内存堆信息、锁信息、goroutine信息等等), 我们这里关心的cpu的性能的&lt;code&gt;profile&lt;/code&gt;信息.&lt;/p&gt;
&lt;p&gt;有关&lt;code&gt;profile&lt;/code&gt;下面的英文解释大致如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“CPU配置文件。您可以在秒GET参数中指定持续时间。获取概要文件后，请使用go tool pprof命令调查概要文件。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们要是想得到cpu性能,就是要获取到当前进程的&lt;code&gt;profile&lt;/code&gt;文件,这个文件默认是30s生成一个,所以你的程序要至少运行30s以上(这个参数也可以修改,稍后我们介绍)&lt;/p&gt;
&lt;p&gt;我们可以直接点击网页的&lt;code&gt;profile&lt;/code&gt;,浏览器会给我们下载一个&lt;code&gt;profile&lt;/code&gt;文件. 记住这个文件的路径, 可以拷贝到与&lt;code&gt;demo4&lt;/code&gt;所在的同一文件夹下.&lt;/p&gt;
&lt;h4 id=&quot;B-使用pprof工具查看&quot;&gt;&lt;a href=&quot;#B-使用pprof工具查看&quot; class=&quot;headerlink&quot; title=&quot;B. 使用pprof工具查看&quot;&gt;&lt;/a&gt;B. 使用pprof工具查看&lt;/h4&gt;&lt;p&gt;pprof 的格式如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof [binary] [profile]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binary&lt;/code&gt;: 必须指向生成这个性能分析数据的那个二进制可执行文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;profile&lt;/code&gt;: 必须是该二进制可执行文件所生成的性能分析数据文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;binary&lt;/code&gt; 和 &lt;code&gt;profile&lt;/code&gt; &lt;strong&gt;必须严格匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们来查看一下:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:18pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;help&lt;/strong&gt;可以查看一些指令,我么可以通过&lt;strong&gt;top&lt;/strong&gt;来查看cpu的性能情况.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 5090ms, 81.18% of 6270ms total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped 80 nodes (cum &amp;lt;= 31.35ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing top 10 nodes out of 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1060ms 16.91% 16.91%     2170ms 34.61%  math/rand.(*lockedSource).Int63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     850ms 13.56% 30.46%      850ms 13.56%  sync.(*Mutex).Unlock (inline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     710ms 11.32% 41.79%     2950ms 47.05%  math/rand.(*Rand).Int31n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     570ms  9.09% 50.88%      990ms 15.79%  bytes.(*Buffer).Write&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     530ms  8.45% 59.33%      540ms  8.61%  syscall.Syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     370ms  5.90% 65.23%      370ms  5.90%  runtime.procyield&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     270ms  4.31% 69.54%     4490ms 71.61%  main.genSomeBytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     250ms  3.99% 73.52%     3200ms 51.04%  math/rand.(*Rand).Intn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     250ms  3.99% 77.51%      250ms  3.99%  runtime.memmove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     230ms  3.67% 81.18%      690ms 11.00%  runtime.suspendG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里面有几列数据,需要说明一下.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flat：当前函数占用CPU的耗时&lt;/li&gt;
&lt;li&gt;flat%：:当前函数占用CPU的耗时百分比&lt;/li&gt;
&lt;li&gt;sun%：函数占用CPU的耗时累计百分比&lt;/li&gt;
&lt;li&gt;cum：当前函数加上调用当前函数的函数占用CPU的总耗时&lt;/li&gt;
&lt;li&gt;cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比&lt;/li&gt;
&lt;li&gt;最后一列：函数名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过结果我们可以看出, 该程序的大部分cpu性能消耗在 &lt;code&gt;main.getSoneBytes()&lt;/code&gt;方法中,其中math/rand取随机数消耗比较大.&lt;/p&gt;
&lt;h4 id=&quot;C-通过go-tool-pprof得到profile文件&quot;&gt;&lt;a href=&quot;#C-通过go-tool-pprof得到profile文件&quot; class=&quot;headerlink&quot; title=&quot;C. 通过go tool pprof得到profile文件&quot;&gt;&lt;/a&gt;C. 通过go tool pprof得到profile文件&lt;/h4&gt;&lt;p&gt;我们上面的profile文件是通过web浏览器下载的,这个profile的经过时间是30s的,默认值我们在浏览器上修改不了,如果你想得到时间更长的cpu利用率,可以通过&lt;code&gt;go tool pprof&lt;/code&gt;指令与程序交互来获取到&lt;/p&gt;
&lt;p&gt;首先,我们先启动程序&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./demo4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再打开一个终端&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go tool pprof http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里制定了生成profile文件的时间间隔60s&lt;/p&gt;
&lt;p&gt;等待60s之后, 终端就会有结果出来,我们继续使用top来查看.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fetching profile over HTTP from http://localhost:10000/debug/pprof/profile?seconds=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Saved profile &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; /home/itheima/pprof/pprof.demo4.samples.cpu.005.pb.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:59pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 1mins, Total samples = 12.13s (20.22%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing nodes accounting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 9940ms, 81.95% of 12130ms total&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dropped 110 nodes (cum &amp;lt;= 60.65ms)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Showing top 10 nodes out of 56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flat  flat%   sum%        cum   cum%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2350ms 19.37% 19.37%     4690ms 38.66%  math/rand.(*lockedSource).Int63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1770ms 14.59% 33.97%     1770ms 14.59%  sync.(*Mutex).Unlock (inline)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1290ms 10.63% 44.60%     6040ms 49.79%  math/rand.(*Rand).Int31n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1110ms  9.15% 53.75%     1130ms  9.32%  syscall.Syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     810ms  6.68% 60.43%     1860ms 15.33%  bytes.(*Buffer).Write&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     620ms  5.11% 65.54%     6660ms 54.91%  math/rand.(*Rand).Intn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     570ms  4.70% 70.24%      570ms  4.70%  runtime.procyield&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     500ms  4.12% 74.36%     9170ms 75.60%  main.genSomeBytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     480ms  3.96% 78.32%      480ms  3.96%  runtime.memmove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     440ms  3.63% 81.95%      440ms  3.63%  math/rand.(*rngSource).Uint64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依然会得到cpu性能的结果, 我们发现这次的结果与上次30s的结果百分比类似.&lt;/p&gt;
&lt;h4 id=&quot;D-可视化查看&quot;&gt;&lt;a href=&quot;#D-可视化查看&quot; class=&quot;headerlink&quot; title=&quot;D.可视化查看&quot;&gt;&lt;/a&gt;D.可视化查看&lt;/h4&gt;&lt;p&gt;我们还是通过&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入profile文件查看,然后我们输入&lt;code&gt;web&lt;/code&gt;指令.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ go tool pprof ./demo4 profileFile: demo4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Type: cpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time: Mar 3, 2020 at 11:18pm (CST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Entering interactive mode (&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; commands, &lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(pprof) web&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里如果报找不到&lt;code&gt;graphviz&lt;/code&gt;工具，需要安装一下。这里自行百度如何安装&lt;/p&gt;
&lt;p&gt;然后我们得到一个&lt;code&gt;svg&lt;/code&gt;的可视化文件在&lt;code&gt;/tmp&lt;/code&gt;路径下&lt;br&gt;&lt;img src=&quot;/images/go/godebug_3.png&quot; alt=&quot;go pprof web&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样我们就能比较清晰的看到函数之间的调用关系,方块越大的表示cpu的占用越大.&lt;/p&gt;
&lt;p&gt;来源：刘丹冰Aceld 简书&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wx_dyh.png&quot; alt=&quot;微信订阅号&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景1：-如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;a href=&quot;#场景1：-如何分析程序的运行时间与CPU利用率情况？&quot; class=&quot;headerlink&quot; title=&quot;场景1： 如何分析程序的运行时间与CPU利用率情况？&quot;&gt;&lt;/a&gt;场景1： 如何分析程序的运行时间与CPU利用率情况？&lt;/h2&gt;&lt;h3 id=&quot;shell内置time指令&quot;&gt;&lt;a href=&quot;#shell内置time指令&quot; class=&quot;headerlink&quot; title=&quot;shell内置time指令&quot;&gt;&lt;/a&gt;shell内置time指令&lt;/h3&gt;&lt;p&gt;这个方法不算新颖，但是确很实用。 time是Unix/Linux内置多命令，使用时一般不用传过多参数，直接跟上需要调试多程序即可。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time go run &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;2.go &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;&amp;#123;&amp;#123;0 0&amp;#125; 张三 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;real    0m0.843s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.216s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys 0m0.389s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是使用time对 &lt;code&gt;go run test2.go&lt;/code&gt; 对执行程序坐了性能分析，得到3个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;real&lt;/code&gt;：从程序开始到结束，实际度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;：程序在用户态度过的时间；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys&lt;/code&gt;：程序在内核态度过的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下 &lt;code&gt;real&lt;/code&gt; &amp;gt;= &lt;code&gt;user&lt;/code&gt; + &lt;code&gt;sys&lt;/code&gt;，因为系统还有其它进程(切换其他进程中间对于本进程回有空白期)。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://team.jiunile.com/categories/golang/"/>
    
      <category term="debug" scheme="http://team.jiunile.com/categories/golang/debug/"/>
    
    
      <category term="golang" scheme="http://team.jiunile.com/tags/golang/"/>
    
      <category term="pprof" scheme="http://team.jiunile.com/tags/pprof/"/>
    
      <category term="go" scheme="http://team.jiunile.com/tags/go/"/>
    
      <category term="godebug" scheme="http://team.jiunile.com/tags/godebug/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Etcd 数据备份与恢复</title>
    <link href="http://team.jiunile.com//blog/2020/05/k8s-etcd-backup-restore.html"/>
    <id>http://team.jiunile.com//blog/2020/05/k8s-etcd-backup-restore.html</id>
    <published>2020-05-09T11:00:00.000Z</published>
    <updated>2020-05-09T07:29:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Etcd 版本：3.4.3&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kubernetes 使用 Etcd 数据库实时存储集群中的数据，可以说 Etcd 是 Kubernetes 的核心组件，犹如人类的大脑。如果 Etcd 数据损坏将导致 Kubernetes 不可用，在生产环境中 Etcd 数据是一定要做好高可用与数据备份，这里介绍下如何备份与恢复 Etcd 数据。&lt;/p&gt;
&lt;h2 id=&quot;备份-Etcd-数据&quot;&gt;&lt;a href=&quot;#备份-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;备份 Etcd 数据&quot;&gt;&lt;/a&gt;备份 Etcd 数据&lt;/h2&gt;&lt;p&gt;采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具。如果你是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。&lt;/p&gt;
&lt;p&gt;运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;–cacert：etcd CA 证书&lt;/li&gt;
&lt;li&gt;–key：etcd 客户端证书 key&lt;/li&gt;
&lt;li&gt;–cert：etcd 客户端证书 crt&lt;/li&gt;
&lt;li&gt;–endpoints：指定 ETCD 连接地址&lt;/li&gt;
&lt;li&gt;etcdctl snapshot save：etcd 数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3                                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl --endpoints=https://192.168.2.11:2379 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snapshot save /backup/etcd-snapshot.db&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;恢复-ETCD-数据&quot;&gt;&lt;a href=&quot;#恢复-ETCD-数据&quot; class=&quot;headerlink&quot; title=&quot;恢复 ETCD 数据&quot;&gt;&lt;/a&gt;恢复 ETCD 数据&lt;/h2&gt;&lt;p&gt;在 Etcd 数据损坏时，可以通过 Etcd 备份数据进行数据恢复，先暂停 Kubernetes 相关组件，然后进入 Etcd 镜像使用 etcdctl 工具执行恢复操作。&lt;/p&gt;
&lt;h3 id=&quot;暂停-Kube-Apiserver-与-Etcd-镜像&quot;&gt;&lt;a href=&quot;#暂停-Kube-Apiserver-与-Etcd-镜像&quot; class=&quot;headerlink&quot; title=&quot;暂停 Kube-Apiserver 与 Etcd 镜像&quot;&gt;&lt;/a&gt;暂停 Kube-Apiserver 与 Etcd 镜像&lt;/h3&gt;&lt;p&gt;在恢复 Etcd 数据前，需要停止 &lt;code&gt;kube-apiserver&lt;/code&gt; 与 &lt;code&gt;etcd&lt;/code&gt; 镜像，因为当这俩镜像停止后 Kubernetes 会自动重启这俩镜像，所以我们可以先暂时移除 &lt;code&gt;/etc/kubernetes/manifests&lt;/code&gt; 目录，Kubernetes 检测这个目录文件不存在时会停止 Kubernetes 系统相关镜像，使其不能重启，方便我们进行后续的操作。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 移除且备份 /etc/kubernetes/manifests 目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv /etc/kubernetes/manifests /etc/kubernetes/manifests.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 kube-apiserver、etcd 镜像是否停止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker ps|grep etcd &amp;amp;&amp;amp; docker ps|grep kube-apiserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 备份现有 Etcd 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv /var/lib/etcd /var/lib/etcd.bak&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;恢复-Etcd-数据&quot;&gt;&lt;a href=&quot;#恢复-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;恢复 Etcd 数据&quot;&gt;&lt;/a&gt;恢复 Etcd 数据&lt;/h3&gt;&lt;p&gt;运行 Etcd 镜像，然后执行数据恢复，默认会恢复到 &lt;code&gt;/default.etcd/member/&lt;/code&gt; 目录下，这里使用 &lt;code&gt;mv&lt;/code&gt; 命令在移动到挂载目录 &lt;code&gt;/var/lib/etcd/&lt;/code&gt; 下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;etcdctl snapshot restore：etcd 数据恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup        \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /var/lib/etcd:/var/lib/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0        \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl snapshot restore /backup/etcd-snapshot.db; mv /default.etcd/member/ /var/lib/etcd/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;恢复-Kube-Apiserver-与-Etcd-镜像&quot;&gt;&lt;a href=&quot;#恢复-Kube-Apiserver-与-Etcd-镜像&quot; class=&quot;headerlink&quot; title=&quot;恢复 Kube-Apiserver 与 Etcd 镜像&quot;&gt;&lt;/a&gt;恢复 Kube-Apiserver 与 Etcd 镜像&lt;/h3&gt;&lt;p&gt;将 &lt;code&gt;/etc/kubernetes/manifests&lt;/code&gt; 目录恢复，使 Kubernetes 重启 &lt;code&gt;Kube-Apiserver&lt;/code&gt; 与 &lt;code&gt;Etcd&lt;/code&gt; 镜像：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mv /etc/kubernetes/manifests.bak /etc/kubernetes/manifests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;执行-Kubectl-命令进行检测&quot;&gt;&lt;a href=&quot;#执行-Kubectl-命令进行检测&quot; class=&quot;headerlink&quot; title=&quot;执行 Kubectl 命令进行检测&quot;&gt;&lt;/a&gt;执行 Kubectl 命令进行检测&lt;/h3&gt;&lt;p&gt;执行 Kubectl 命令进行检测，查看命令是否能够正常执行：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl get node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考：mydlq.club&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Etcd 版本：3.4.3&lt;br&gt;Kubernetes 版本：1.17.4&lt;br&gt;Kubernetes 安装方式：Kubeadm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kubernetes 使用 Etcd 数据库实时存储集群中的数据，可以说 Etcd 是 Kubernetes 的核心组件，犹如人类的大脑。如果 Etcd 数据损坏将导致 Kubernetes 不可用，在生产环境中 Etcd 数据是一定要做好高可用与数据备份，这里介绍下如何备份与恢复 Etcd 数据。&lt;/p&gt;
&lt;h2 id=&quot;备份-Etcd-数据&quot;&gt;&lt;a href=&quot;#备份-Etcd-数据&quot; class=&quot;headerlink&quot; title=&quot;备份 Etcd 数据&quot;&gt;&lt;/a&gt;备份 Etcd 数据&lt;/h2&gt;&lt;p&gt;采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具。如果你是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。&lt;/p&gt;
&lt;p&gt;运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/bin/sh -c：执行 shell 命令&lt;/li&gt;
&lt;li&gt;–env：设置环境变量，指定 etcdctl 工具使用的 API 版本&lt;/li&gt;
&lt;li&gt;-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录&lt;/li&gt;
&lt;li&gt;–cacert：etcd CA 证书&lt;/li&gt;
&lt;li&gt;–key：etcd 客户端证书 key&lt;/li&gt;
&lt;li&gt;–cert：etcd 客户端证书 crt&lt;/li&gt;
&lt;li&gt;–endpoints：指定 ETCD 连接地址&lt;/li&gt;
&lt;li&gt;etcdctl snapshot save：etcd 数据备份&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run --rm                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /data/backup:/backup                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--env ETCDCTL_API=3                                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k8s.gcr.io/etcd:3.4.3-0                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin/sh -c &lt;span class=&quot;string&quot;&gt;&quot;etcdctl --endpoints=https://192.168.2.11:2379 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snapshot save /backup/etcd-snapshot.db&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/categories/kubernetes/"/>
    
      <category term="etcd" scheme="http://team.jiunile.com/categories/kubernetes/etcd/"/>
    
    
      <category term="k8s" scheme="http://team.jiunile.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="http://team.jiunile.com/tags/kubernetes/"/>
    
      <category term="etcd" scheme="http://team.jiunile.com/tags/etcd/"/>
    
  </entry>
  
</feed>
